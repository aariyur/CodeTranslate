/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/index"],{

/***/ "./node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"basicSetup\": function() { return /* binding */ basicSetup; },\n/* harmony export */   \"minimalSetup\": function() { return /* binding */ minimalSetup; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/commands */ \"./node_modules/@codemirror/commands/dist/index.js\");\n/* harmony import */ var _codemirror_search__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/search */ \"./node_modules/@codemirror/search/dist/index.js\");\n/* harmony import */ var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/autocomplete */ \"./node_modules/@codemirror/autocomplete/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/language */ \"./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _codemirror_lint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/lint */ \"./node_modules/@codemirror/lint/dist/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\nThis is an extension value that just pulls together a number of\r\nextensions that you might want in a basic editor. It is meant as a\r\nconvenient helper to quickly set up CodeMirror without installing\r\nand importing a lot of separate packages.\r\n\r\nSpecifically, it includes...\r\n\r\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\r\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\r\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\r\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\r\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\r\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\r\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\r\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\r\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\r\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\r\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\r\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\r\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\r\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\r\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\r\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\r\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\r\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\r\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\r\n\r\n(You'll probably want to add some language package to your setup\r\ntoo.)\r\n\r\nThis extension does not allow customization. The idea is that,\r\nonce you decide you want to configure your editor more precisely,\r\nyou take this package's source (which is just a bunch of imports\r\nand an array literal), copy it into your own code, and adjust it\r\nas desired.\r\n*/\r\nvar basicSetup = function basicSetup(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  var keymaps = [];\r\n  if (options.closeBracketsKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_0__.closeBracketsKeymap);\r\n  }\r\n  if (options.defaultKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_commands__WEBPACK_IMPORTED_MODULE_1__.defaultKeymap);\r\n  }\r\n  if (options.searchKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_search__WEBPACK_IMPORTED_MODULE_2__.searchKeymap);\r\n  }\r\n  if (options.historyKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_commands__WEBPACK_IMPORTED_MODULE_1__.historyKeymap);\r\n  }\r\n  if (options.foldKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldKeymap);\r\n  }\r\n  if (options.completionKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_0__.completionKeymap);\r\n  }\r\n  if (options.lintKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_lint__WEBPACK_IMPORTED_MODULE_4__.lintKeymap);\r\n  }\r\n  var extensions = [];\r\n  if (options.lineNumbers !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.lineNumbers)());\r\n  if (options.highlightActiveLineGutter !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.highlightActiveLineGutter)());\r\n  if (options.highlightSpecialChars !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.highlightSpecialChars)());\r\n  if (options.history !== false) extensions.push((0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_1__.history)());\r\n  if (options.foldGutter !== false) extensions.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldGutter)());\r\n  if (options.drawSelection !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.drawSelection)());\r\n  if (options.dropCursor !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.dropCursor)());\r\n  if (options.allowMultipleSelections !== false) extensions.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_6__.EditorState.allowMultipleSelections.of(true));\r\n  if (options.indentOnInput !== false) extensions.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentOnInput)());\r\n  if (options.syntaxHighlighting !== false) extensions.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxHighlighting)(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.defaultHighlightStyle, {\r\n    fallback: true\r\n  }));\r\n  if (options.bracketMatching !== false) extensions.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.bracketMatching)());\r\n  if (options.closeBrackets !== false) extensions.push((0,_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_0__.closeBrackets)());\r\n  if (options.autocompletion !== false) extensions.push((0,_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_0__.autocompletion)());\r\n  if (options.rectangularSelection !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.rectangularSelection)());\r\n  if (options.crosshairCursor !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.crosshairCursor)());\r\n  if (options.highlightActiveLine !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.highlightActiveLine)());\r\n  if (options.highlightSelectionMatches !== false) extensions.push((0,_codemirror_search__WEBPACK_IMPORTED_MODULE_2__.highlightSelectionMatches)());\r\n  if (options.tabSize && typeof options.tabSize === 'number') extensions.push(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentUnit.of(' '.repeat(options.tabSize)));\r\n  return extensions.concat([_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.keymap.of(keymaps.flat())]).filter(Boolean);\r\n};\r\n/**\r\nA minimal set of extensions to create a functional editor. Only\r\nincludes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo\r\nhistory](https://codemirror.net/6/docs/ref/#commands.history), [special character\r\nhighlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection\r\ndrawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight\r\nstyle](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).\r\n*/\r\nvar minimalSetup = function minimalSetup(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  var keymaps = [];\r\n  if (options.defaultKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_commands__WEBPACK_IMPORTED_MODULE_1__.defaultKeymap);\r\n  }\r\n  if (options.historyKeymap !== false) {\r\n    keymaps = keymaps.concat(_codemirror_commands__WEBPACK_IMPORTED_MODULE_1__.historyKeymap);\r\n  }\r\n  var extensions = [];\r\n  if (options.highlightSpecialChars !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.highlightSpecialChars)());\r\n  if (options.history !== false) extensions.push((0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_1__.history)());\r\n  if (options.drawSelection !== false) extensions.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.drawSelection)());\r\n  if (options.syntaxHighlighting !== false) extensions.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxHighlighting)(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.defaultHighlightStyle, {\r\n    fallback: true\r\n  }));\r\n  return extensions.concat([_codemirror_view__WEBPACK_IMPORTED_MODULE_5__.keymap.of(keymaps.flat())]).filter(Boolean);\r\n};\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-codemirror/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@uiw/react-codemirror/esm/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _useCodeMirror__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useCodeMirror */ \"./node_modules/@uiw/react-codemirror/esm/useCodeMirror.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _uiw_codemirror_extensions_basic_setup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @uiw/codemirror-extensions-basic-setup */ \"./node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _uiw_codemirror_extensions_basic_setup__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _uiw_codemirror_extensions_basic_setup__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _useCodeMirror__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _useCodeMirror__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"./node_modules/@uiw/react-codemirror/esm/utils.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _utils__WEBPACK_IMPORTED_MODULE_6__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _utils__WEBPACK_IMPORTED_MODULE_6__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\r\n\r\nvar _excluded = [\"className\", \"value\", \"selection\", \"extensions\", \"onChange\", \"onStatistics\", \"onCreateEditor\", \"onUpdate\", \"autoFocus\", \"theme\", \"height\", \"minHeight\", \"maxHeight\", \"width\", \"minWidth\", \"maxWidth\", \"basicSetup\", \"placeholder\", \"indentWithTab\", \"editable\", \"readOnly\", \"root\", \"initialState\"];\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar ReactCodeMirror = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)((props, ref) => {\r\n  var {\r\n      className,\r\n      value = '',\r\n      selection,\r\n      extensions = [],\r\n      onChange,\r\n      onStatistics,\r\n      onCreateEditor,\r\n      onUpdate,\r\n      autoFocus,\r\n      theme = 'light',\r\n      height,\r\n      minHeight,\r\n      maxHeight,\r\n      width,\r\n      minWidth,\r\n      maxWidth,\r\n      basicSetup,\r\n      placeholder,\r\n      indentWithTab,\r\n      editable,\r\n      readOnly,\r\n      root,\r\n      initialState\r\n    } = props,\r\n    other = (0,_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(props, _excluded);\r\n  var editor = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\r\n  var {\r\n    state,\r\n    view,\r\n    container,\r\n    setContainer\r\n  } = (0,_useCodeMirror__WEBPACK_IMPORTED_MODULE_3__.useCodeMirror)({\r\n    container: editor.current,\r\n    root,\r\n    value,\r\n    autoFocus,\r\n    theme,\r\n    height,\r\n    minHeight,\r\n    maxHeight,\r\n    width,\r\n    minWidth,\r\n    maxWidth,\r\n    basicSetup,\r\n    placeholder,\r\n    indentWithTab,\r\n    editable,\r\n    readOnly,\r\n    selection,\r\n    onChange,\r\n    onStatistics,\r\n    onCreateEditor,\r\n    onUpdate,\r\n    extensions,\r\n    initialState\r\n  });\r\n  (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, () => ({\r\n    editor: editor.current,\r\n    state: state,\r\n    view: view\r\n  }), [editor, container, state, view]);\r\n\r\n  // check type of value\r\n  if (typeof value !== 'string') {\r\n    throw new Error(\"value must be typeof string but got \" + typeof value);\r\n  }\r\n  var defaultClassNames = typeof theme === 'string' ? \"cm-theme-\" + theme : 'cm-theme';\r\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\r\n    ref: editor,\r\n    className: \"\" + defaultClassNames + (className ? \" \" + className : '')\r\n  }, other));\r\n});\r\nReactCodeMirror.displayName = 'CodeMirror';\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReactCodeMirror);\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1jb2RlbWlycm9yL2VzbS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNEO0FBQzBDO0FBQ2hHO0FBQ3VFO0FBQ3ZCO0FBQ0E7QUFDTztBQUN2QjtBQUNSO0FBQ3hCLG1DQUFtQyxpREFBVTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sWUFBWSwrRkFBNkI7QUFDekMsZUFBZSw2Q0FBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxFQUFFLDZEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRSwwREFBbUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzREFBSSxRQUFRLDBFQUFRO0FBQzFDO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0EsK0RBQWUsZUFBZSxFQUFDO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdWl3L3JlYWN0LWNvZGVtaXJyb3IvZXNtL2luZGV4LmpzPzZiNjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcclxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcclxudmFyIF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcInZhbHVlXCIsIFwic2VsZWN0aW9uXCIsIFwiZXh0ZW5zaW9uc1wiLCBcIm9uQ2hhbmdlXCIsIFwib25TdGF0aXN0aWNzXCIsIFwib25DcmVhdGVFZGl0b3JcIiwgXCJvblVwZGF0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcInRoZW1lXCIsIFwiaGVpZ2h0XCIsIFwibWluSGVpZ2h0XCIsIFwibWF4SGVpZ2h0XCIsIFwid2lkdGhcIiwgXCJtaW5XaWR0aFwiLCBcIm1heFdpZHRoXCIsIFwiYmFzaWNTZXR1cFwiLCBcInBsYWNlaG9sZGVyXCIsIFwiaW5kZW50V2l0aFRhYlwiLCBcImVkaXRhYmxlXCIsIFwicmVhZE9ubHlcIiwgXCJyb290XCIsIFwiaW5pdGlhbFN0YXRlXCJdO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VDb2RlTWlycm9yIH0gZnJvbSAnLi91c2VDb2RlTWlycm9yJztcclxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcclxuZXhwb3J0ICogZnJvbSAnQHVpdy9jb2RlbWlycm9yLWV4dGVuc2lvbnMtYmFzaWMtc2V0dXAnO1xyXG5leHBvcnQgKiBmcm9tICcuL3VzZUNvZGVNaXJyb3InO1xyXG5leHBvcnQgKiBmcm9tICcuL3V0aWxzJztcclxudmFyIFJlYWN0Q29kZU1pcnJvciA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XHJcbiAgdmFyIHtcclxuICAgICAgY2xhc3NOYW1lLFxyXG4gICAgICB2YWx1ZSA9ICcnLFxyXG4gICAgICBzZWxlY3Rpb24sXHJcbiAgICAgIGV4dGVuc2lvbnMgPSBbXSxcclxuICAgICAgb25DaGFuZ2UsXHJcbiAgICAgIG9uU3RhdGlzdGljcyxcclxuICAgICAgb25DcmVhdGVFZGl0b3IsXHJcbiAgICAgIG9uVXBkYXRlLFxyXG4gICAgICBhdXRvRm9jdXMsXHJcbiAgICAgIHRoZW1lID0gJ2xpZ2h0JyxcclxuICAgICAgaGVpZ2h0LFxyXG4gICAgICBtaW5IZWlnaHQsXHJcbiAgICAgIG1heEhlaWdodCxcclxuICAgICAgd2lkdGgsXHJcbiAgICAgIG1pbldpZHRoLFxyXG4gICAgICBtYXhXaWR0aCxcclxuICAgICAgYmFzaWNTZXR1cCxcclxuICAgICAgcGxhY2Vob2xkZXIsXHJcbiAgICAgIGluZGVudFdpdGhUYWIsXHJcbiAgICAgIGVkaXRhYmxlLFxyXG4gICAgICByZWFkT25seSxcclxuICAgICAgcm9vdCxcclxuICAgICAgaW5pdGlhbFN0YXRlXHJcbiAgICB9ID0gcHJvcHMsXHJcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xyXG4gIHZhciBlZGl0b3IgPSB1c2VSZWYobnVsbCk7XHJcbiAgdmFyIHtcclxuICAgIHN0YXRlLFxyXG4gICAgdmlldyxcclxuICAgIGNvbnRhaW5lcixcclxuICAgIHNldENvbnRhaW5lclxyXG4gIH0gPSB1c2VDb2RlTWlycm9yKHtcclxuICAgIGNvbnRhaW5lcjogZWRpdG9yLmN1cnJlbnQsXHJcbiAgICByb290LFxyXG4gICAgdmFsdWUsXHJcbiAgICBhdXRvRm9jdXMsXHJcbiAgICB0aGVtZSxcclxuICAgIGhlaWdodCxcclxuICAgIG1pbkhlaWdodCxcclxuICAgIG1heEhlaWdodCxcclxuICAgIHdpZHRoLFxyXG4gICAgbWluV2lkdGgsXHJcbiAgICBtYXhXaWR0aCxcclxuICAgIGJhc2ljU2V0dXAsXHJcbiAgICBwbGFjZWhvbGRlcixcclxuICAgIGluZGVudFdpdGhUYWIsXHJcbiAgICBlZGl0YWJsZSxcclxuICAgIHJlYWRPbmx5LFxyXG4gICAgc2VsZWN0aW9uLFxyXG4gICAgb25DaGFuZ2UsXHJcbiAgICBvblN0YXRpc3RpY3MsXHJcbiAgICBvbkNyZWF0ZUVkaXRvcixcclxuICAgIG9uVXBkYXRlLFxyXG4gICAgZXh0ZW5zaW9ucyxcclxuICAgIGluaXRpYWxTdGF0ZVxyXG4gIH0pO1xyXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xyXG4gICAgZWRpdG9yOiBlZGl0b3IuY3VycmVudCxcclxuICAgIHN0YXRlOiBzdGF0ZSxcclxuICAgIHZpZXc6IHZpZXdcclxuICB9KSwgW2VkaXRvciwgY29udGFpbmVyLCBzdGF0ZSwgdmlld10pO1xyXG5cclxuICAvLyBjaGVjayB0eXBlIG9mIHZhbHVlXHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcInZhbHVlIG11c3QgYmUgdHlwZW9mIHN0cmluZyBidXQgZ290IFwiICsgdHlwZW9mIHZhbHVlKTtcclxuICB9XHJcbiAgdmFyIGRlZmF1bHRDbGFzc05hbWVzID0gdHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJyA/IFwiY20tdGhlbWUtXCIgKyB0aGVtZSA6ICdjbS10aGVtZSc7XHJcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwiZGl2XCIsIF9leHRlbmRzKHtcclxuICAgIHJlZjogZWRpdG9yLFxyXG4gICAgY2xhc3NOYW1lOiBcIlwiICsgZGVmYXVsdENsYXNzTmFtZXMgKyAoY2xhc3NOYW1lID8gXCIgXCIgKyBjbGFzc05hbWUgOiAnJylcclxuICB9LCBvdGhlcikpO1xyXG59KTtcclxuUmVhY3RDb2RlTWlycm9yLmRpc3BsYXlOYW1lID0gJ0NvZGVNaXJyb3InO1xyXG5leHBvcnQgZGVmYXVsdCBSZWFjdENvZGVNaXJyb3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-codemirror/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-codemirror/esm/useCodeMirror.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@uiw/react-codemirror/esm/useCodeMirror.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useCodeMirror\": function() { return /* binding */ useCodeMirror; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/commands */ \"./node_modules/@codemirror/commands/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _uiw_codemirror_extensions_basic_setup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uiw/codemirror-extensions-basic-setup */ \"./node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js\");\n/* harmony import */ var _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codemirror/theme-one-dark */ \"./node_modules/@codemirror/theme-one-dark/dist/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/@uiw/react-codemirror/esm/utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction useCodeMirror(props) {\r\n  var {\r\n    value,\r\n    selection,\r\n    onChange,\r\n    onStatistics,\r\n    onCreateEditor,\r\n    onUpdate,\r\n    extensions = [],\r\n    autoFocus,\r\n    theme = 'light',\r\n    height = '',\r\n    minHeight = '',\r\n    maxHeight = '',\r\n    placeholder: placeholderStr = '',\r\n    width = '',\r\n    minWidth = '',\r\n    maxWidth = '',\r\n    editable = true,\r\n    readOnly = false,\r\n    indentWithTab: defaultIndentWithTab = true,\r\n    basicSetup: defaultBasicSetup = true,\r\n    root,\r\n    initialState\r\n  } = props;\r\n  var [container, setContainer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\r\n  var [view, setView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\r\n  var [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\r\n  var defaultLightThemeOption = _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.theme({\r\n    '&': {\r\n      backgroundColor: '#fff'\r\n    }\r\n  }, {\r\n    dark: false\r\n  });\r\n  var defaultThemeOption = _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.theme({\r\n    '&': {\r\n      height,\r\n      minHeight,\r\n      maxHeight,\r\n      width,\r\n      minWidth,\r\n      maxWidth\r\n    }\r\n  });\r\n  var updateListener = _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.updateListener.of(vu => {\r\n    if (vu.docChanged && typeof onChange === 'function') {\r\n      var doc = vu.state.doc;\r\n      var _value = doc.toString();\r\n      onChange(_value, vu);\r\n    }\r\n    onStatistics && onStatistics((0,_utils__WEBPACK_IMPORTED_MODULE_2__.getStatistics)(vu));\r\n  });\r\n  var getExtensions = [updateListener, defaultThemeOption];\r\n  if (defaultIndentWithTab) {\r\n    getExtensions.unshift(_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.keymap.of([_codemirror_commands__WEBPACK_IMPORTED_MODULE_4__.indentWithTab]));\r\n  }\r\n  if (defaultBasicSetup) {\r\n    if (typeof defaultBasicSetup === 'boolean') {\r\n      getExtensions.unshift((0,_uiw_codemirror_extensions_basic_setup__WEBPACK_IMPORTED_MODULE_1__.basicSetup)());\r\n    } else {\r\n      getExtensions.unshift((0,_uiw_codemirror_extensions_basic_setup__WEBPACK_IMPORTED_MODULE_1__.basicSetup)(defaultBasicSetup));\r\n    }\r\n  }\r\n  if (placeholderStr) {\r\n    getExtensions.unshift((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.placeholder)(placeholderStr));\r\n  }\r\n  switch (theme) {\r\n    case 'light':\r\n      getExtensions.push(defaultLightThemeOption);\r\n      break;\r\n    case 'dark':\r\n      getExtensions.push(_codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_5__.oneDark);\r\n      break;\r\n    case 'none':\r\n      break;\r\n    default:\r\n      getExtensions.push(theme);\r\n      break;\r\n  }\r\n  if (editable === false) {\r\n    getExtensions.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.editable.of(false));\r\n  }\r\n  if (readOnly) {\r\n    getExtensions.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_6__.EditorState.readOnly.of(true));\r\n  }\r\n  if (onUpdate && typeof onUpdate === 'function') {\r\n    getExtensions.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.updateListener.of(onUpdate));\r\n  }\r\n  getExtensions = getExtensions.concat(extensions);\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n    if (container && !state) {\r\n      var config = {\r\n        doc: value,\r\n        selection,\r\n        extensions: getExtensions\r\n      };\r\n      var stateCurrent = initialState ? _codemirror_state__WEBPACK_IMPORTED_MODULE_6__.EditorState.fromJSON(initialState.json, config, initialState.fields) : _codemirror_state__WEBPACK_IMPORTED_MODULE_6__.EditorState.create(config);\r\n      setState(stateCurrent);\r\n      if (!view) {\r\n        var viewCurrent = new _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView({\r\n          state: stateCurrent,\r\n          parent: container,\r\n          root\r\n        });\r\n        setView(viewCurrent);\r\n        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);\r\n      }\r\n    }\r\n    return () => {\r\n      if (view) {\r\n        setState(undefined);\r\n        setView(undefined);\r\n      }\r\n    };\r\n  }, [container, state]);\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => setContainer(props.container), [props.container]);\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => () => {\r\n    if (view) {\r\n      view.destroy();\r\n      setView(undefined);\r\n    }\r\n  }, [view]);\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n    if (autoFocus && view) {\r\n      view.focus();\r\n    }\r\n  }, [autoFocus, view]);\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n    if (view) {\r\n      view.dispatch({\r\n        effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_6__.StateEffect.reconfigure.of(getExtensions)\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    var currentValue = view ? view.state.doc.toString() : '';\r\n    if (view && value !== currentValue) {\r\n      view.dispatch({\r\n        changes: {\r\n          from: 0,\r\n          to: currentValue.length,\r\n          insert: value || ''\r\n        }\r\n      });\r\n    }\r\n  }, [value, view]);\r\n  return {\r\n    state,\r\n    setState,\r\n    view,\r\n    setView,\r\n    container,\r\n    setContainer\r\n  };\r\n}\r\n//# sourceMappingURL=useCodeMirror.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-codemirror/esm/useCodeMirror.js\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-codemirror/esm/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/@uiw/react-codemirror/esm/utils.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getStatistics\": function() { return /* binding */ getStatistics; }\n/* harmony export */ });\nvar getStatistics = view => {\r\n  return {\r\n    line: view.state.doc.lineAt(view.state.selection.main.from),\r\n    lineCount: view.state.doc.lines,\r\n    lineBreak: view.state.lineBreak,\r\n    length: view.state.doc.length,\r\n    readOnly: view.state.readOnly,\r\n    tabSize: view.state.tabSize,\r\n    selection: view.state.selection,\r\n    selectionAsSingle: view.state.selection.asSingle().main,\r\n    ranges: view.state.selection.ranges,\r\n    selectionCode: view.state.sliceDoc(view.state.selection.main.from, view.state.selection.main.to),\r\n    selections: view.state.selection.ranges.map(r => view.state.sliceDoc(r.from, r.to)),\r\n    selectedText: view.state.selection.ranges.some(r => !r.empty)\r\n  };\r\n};\r\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1jb2RlbWlycm9yL2VzbS91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1jb2RlbWlycm9yL2VzbS91dGlscy5qcz9iMzE5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgZ2V0U3RhdGlzdGljcyA9IHZpZXcgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBsaW5lOiB2aWV3LnN0YXRlLmRvYy5saW5lQXQodmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tKSxcclxuICAgIGxpbmVDb3VudDogdmlldy5zdGF0ZS5kb2MubGluZXMsXHJcbiAgICBsaW5lQnJlYWs6IHZpZXcuc3RhdGUubGluZUJyZWFrLFxyXG4gICAgbGVuZ3RoOiB2aWV3LnN0YXRlLmRvYy5sZW5ndGgsXHJcbiAgICByZWFkT25seTogdmlldy5zdGF0ZS5yZWFkT25seSxcclxuICAgIHRhYlNpemU6IHZpZXcuc3RhdGUudGFiU2l6ZSxcclxuICAgIHNlbGVjdGlvbjogdmlldy5zdGF0ZS5zZWxlY3Rpb24sXHJcbiAgICBzZWxlY3Rpb25Bc1NpbmdsZTogdmlldy5zdGF0ZS5zZWxlY3Rpb24uYXNTaW5nbGUoKS5tYWluLFxyXG4gICAgcmFuZ2VzOiB2aWV3LnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMsXHJcbiAgICBzZWxlY3Rpb25Db2RlOiB2aWV3LnN0YXRlLnNsaWNlRG9jKHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uZnJvbSwgdmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi50byksXHJcbiAgICBzZWxlY3Rpb25zOiB2aWV3LnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMubWFwKHIgPT4gdmlldy5zdGF0ZS5zbGljZURvYyhyLmZyb20sIHIudG8pKSxcclxuICAgIHNlbGVjdGVkVGV4dDogdmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLnNvbWUociA9PiAhci5lbXB0eSlcclxuICB9O1xyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-codemirror/esm/utils.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./pages/styles/index.module.css":
/*!*******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./pages/styles/index.module.css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\r\\n\\r\\n.styles_container__H_1Ob{\\r\\n  background-color: aqua;\\r\\n  width: 100%;\\r\\n  height: 75%;\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv .styles_loading__p1JVB {\\r\\n  width: 50;\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv h1{\\r\\n  display: block;\\r\\n  font-weight: bold;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n  margin: auto;\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv label{\\r\\n  font-weight: bold;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv select {\\r\\n  padding: 12px 16px;\\r\\n  border: 1px solid #000000;\\r\\n  border-radius: 4px;\\r\\n  margin: 20px;\\r\\n  margin-bottom: 12px;\\r\\n  margin-top: 4px;\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv input{\\r\\n  padding: 10px;\\r\\n  color: rgb(217, 234, 232) !important;\\r\\n  margin: 10px;\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  min-width: 200px;\\r\\n  background-color: rgb(70, 133, 222);\\r\\n  border: none;\\r\\n  border-radius: 4px;\\r\\n  outline: none;\\r\\n  font-family: Arial;\\r\\n  font-weight: bolder;\\r\\n  transition: all 0.2s;\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv input:hover{\\r\\n  opacity: 0.8;\\r\\n}\\r\\n.styles_main__ahLiv input:active{\\r\\n  opacity: 0.7;\\r\\n}\\r\\n\\r\\n.styles_main__ahLiv textarea {\\r\\n  resize: none;\\r\\n  width: 99.75%;;\\r\\n}\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://pages/styles/index.module.css\"],\"names\":[],\"mappings\":\";;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,WAAW;AACb;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,yCAAyC;EACzC,YAAY;EACZ,WAAW;;AAEb;;AAEA;EACE,iBAAiB;EACjB,yCAAyC;;AAE3C;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,oCAAoC;EACpC,YAAY;EACZ,cAAc;EACd,gBAAgB;EAChB,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,mCAAmC;EACnC,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,aAAa;AACf\",\"sourcesContent\":[\"\\r\\n\\r\\n.container{\\r\\n  background-color: aqua;\\r\\n  width: 100%;\\r\\n  height: 75%;\\r\\n}\\r\\n\\r\\n.main .loading {\\r\\n  width: 50;\\r\\n}\\r\\n\\r\\n.main h1{\\r\\n  display: block;\\r\\n  font-weight: bold;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n  margin: auto;\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\n.main label{\\r\\n  font-weight: bold;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n\\r\\n}\\r\\n\\r\\n.main select {\\r\\n  padding: 12px 16px;\\r\\n  border: 1px solid #000000;\\r\\n  border-radius: 4px;\\r\\n  margin: 20px;\\r\\n  margin-bottom: 12px;\\r\\n  margin-top: 4px;\\r\\n}\\r\\n\\r\\n.main input{\\r\\n  padding: 10px;\\r\\n  color: rgb(217, 234, 232) !important;\\r\\n  margin: 10px;\\r\\n  display: block;\\r\\n  margin-top: 20px;\\r\\n  margin-bottom: 20px;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  min-width: 200px;\\r\\n  background-color: rgb(70, 133, 222);\\r\\n  border: none;\\r\\n  border-radius: 4px;\\r\\n  outline: none;\\r\\n  font-family: Arial;\\r\\n  font-weight: bolder;\\r\\n  transition: all 0.2s;\\r\\n}\\r\\n\\r\\n.main input:hover{\\r\\n  opacity: 0.8;\\r\\n}\\r\\n.main input:active{\\r\\n  opacity: 0.7;\\r\\n}\\r\\n\\r\\n.main textarea {\\r\\n  resize: none;\\r\\n  width: 99.75%;;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"container\": \"styles_container__H_1Ob\",\n\t\"main\": \"styles_main__ahLiv\",\n\t\"loading\": \"styles_loading__p1JVB\"\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls0XS51c2VbMV0hLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNF0udXNlWzJdIS4vcGFnZXMvc3R5bGVzL2luZGV4Lm1vZHVsZS5jc3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxzS0FBa0Y7QUFDNUg7QUFDQTtBQUNBLDJFQUEyRSw2QkFBNkIsa0JBQWtCLGtCQUFrQixLQUFLLG9EQUFvRCxnQkFBZ0IsS0FBSywrQkFBK0IscUJBQXFCLHdCQUF3QixnREFBZ0QsbUJBQW1CLGtCQUFrQixTQUFTLGtDQUFrQyx3QkFBd0IsZ0RBQWdELFNBQVMsb0NBQW9DLHlCQUF5QixnQ0FBZ0MseUJBQXlCLG1CQUFtQiwwQkFBMEIsc0JBQXNCLEtBQUssa0NBQWtDLG9CQUFvQiwyQ0FBMkMsbUJBQW1CLHFCQUFxQix1QkFBdUIsMEJBQTBCLHdCQUF3Qix5QkFBeUIsdUJBQXVCLDBDQUEwQyxtQkFBbUIseUJBQXlCLG9CQUFvQix5QkFBeUIsMEJBQTBCLDJCQUEyQixLQUFLLHdDQUF3QyxtQkFBbUIsS0FBSyxxQ0FBcUMsbUJBQW1CLEtBQUssc0NBQXNDLG1CQUFtQixxQkFBcUIsS0FBSyxXQUFXLDJGQUEyRixLQUFLLFlBQVksV0FBVyxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxVQUFVLFlBQVksYUFBYSxXQUFXLFdBQVcsTUFBTSxLQUFLLFlBQVksY0FBYyxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsV0FBVyxZQUFZLFdBQVcsT0FBTyxLQUFLLFVBQVUsWUFBWSxXQUFXLFVBQVUsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsV0FBVyxZQUFZLFdBQVcsWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsVUFBVSw0Q0FBNEMsNkJBQTZCLGtCQUFrQixrQkFBa0IsS0FBSyx3QkFBd0IsZ0JBQWdCLEtBQUssaUJBQWlCLHFCQUFxQix3QkFBd0IsZ0RBQWdELG1CQUFtQixrQkFBa0IsU0FBUyxvQkFBb0Isd0JBQXdCLGdEQUFnRCxTQUFTLHNCQUFzQix5QkFBeUIsZ0NBQWdDLHlCQUF5QixtQkFBbUIsMEJBQTBCLHNCQUFzQixLQUFLLG9CQUFvQixvQkFBb0IsMkNBQTJDLG1CQUFtQixxQkFBcUIsdUJBQXVCLDBCQUEwQix3QkFBd0IseUJBQXlCLHVCQUF1QiwwQ0FBMEMsbUJBQW1CLHlCQUF5QixvQkFBb0IseUJBQXlCLDBCQUEwQiwyQkFBMkIsS0FBSywwQkFBMEIsbUJBQW1CLEtBQUssdUJBQXVCLG1CQUFtQixLQUFLLHdCQUF3QixtQkFBbUIscUJBQXFCLEtBQUssdUJBQXVCO0FBQ3JuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wYWdlcy9zdHlsZXMvaW5kZXgubW9kdWxlLmNzcz83OTM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXHJcXG5cXHJcXG4uc3R5bGVzX2NvbnRhaW5lcl9fSF8xT2J7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDc1JTtcXHJcXG59XFxyXFxuXFxyXFxuLnN0eWxlc19tYWluX19haExpdiAuc3R5bGVzX2xvYWRpbmdfX3AxSlZCIHtcXHJcXG4gIHdpZHRoOiA1MDtcXHJcXG59XFxyXFxuXFxyXFxuLnN0eWxlc19tYWluX19haExpdiBoMXtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uc3R5bGVzX21haW5fX2FoTGl2IGxhYmVse1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLnN0eWxlc19tYWluX19haExpdiBzZWxlY3Qge1xcclxcbiAgcGFkZGluZzogMTJweCAxNnB4O1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gIG1hcmdpbjogMjBweDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XFxyXFxuICBtYXJnaW4tdG9wOiA0cHg7XFxyXFxufVxcclxcblxcclxcbi5zdHlsZXNfbWFpbl9fYWhMaXYgaW5wdXR7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgY29sb3I6IHJnYigyMTcsIDIzNCwgMjMyKSAhaW1wb3J0YW50O1xcclxcbiAgbWFyZ2luOiAxMHB4O1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcbiAgbWluLXdpZHRoOiAyMDBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig3MCwgMTMzLCAyMjIpO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIGZvbnQtZmFtaWx5OiBBcmlhbDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxyXFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcXHJcXG59XFxyXFxuXFxyXFxuLnN0eWxlc19tYWluX19haExpdiBpbnB1dDpob3ZlcntcXHJcXG4gIG9wYWNpdHk6IDAuODtcXHJcXG59XFxyXFxuLnN0eWxlc19tYWluX19haExpdiBpbnB1dDphY3RpdmV7XFxyXFxuICBvcGFjaXR5OiAwLjc7XFxyXFxufVxcclxcblxcclxcbi5zdHlsZXNfbWFpbl9fYWhMaXYgdGV4dGFyZWEge1xcclxcbiAgcmVzaXplOiBub25lO1xcclxcbiAgd2lkdGg6IDk5Ljc1JTs7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9wYWdlcy9zdHlsZXMvaW5kZXgubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsaUJBQWlCO0VBQ2pCLHlDQUF5QztFQUN6QyxZQUFZO0VBQ1osV0FBVzs7QUFFYjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQix5Q0FBeUM7O0FBRTNDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG9DQUFvQztFQUNwQyxZQUFZO0VBQ1osY0FBYztFQUNkLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsbUNBQW1DO0VBQ25DLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxZQUFZO0VBQ1osYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcclxcblxcclxcbi5jb250YWluZXJ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDc1JTtcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4gLmxvYWRpbmcge1xcclxcbiAgd2lkdGg6IDUwO1xcclxcbn1cXHJcXG5cXHJcXG4ubWFpbiBoMXtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4ubWFpbiBsYWJlbHtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5tYWluIHNlbGVjdCB7XFxyXFxuICBwYWRkaW5nOiAxMnB4IDE2cHg7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgbWFyZ2luOiAyMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcXHJcXG4gIG1hcmdpbi10b3A6IDRweDtcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4gaW5wdXR7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgY29sb3I6IHJnYigyMTcsIDIzNCwgMjMyKSAhaW1wb3J0YW50O1xcclxcbiAgbWFyZ2luOiAxMHB4O1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcbiAgbWluLXdpZHRoOiAyMDBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig3MCwgMTMzLCAyMjIpO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIGZvbnQtZmFtaWx5OiBBcmlhbDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxyXFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4gaW5wdXQ6aG92ZXJ7XFxyXFxuICBvcGFjaXR5OiAwLjg7XFxyXFxufVxcclxcbi5tYWluIGlucHV0OmFjdGl2ZXtcXHJcXG4gIG9wYWNpdHk6IDAuNztcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4gdGV4dGFyZWEge1xcclxcbiAgcmVzaXplOiBub25lO1xcclxcbiAgd2lkdGg6IDk5Ljc1JTs7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcInN0eWxlc19jb250YWluZXJfX0hfMU9iXCIsXG5cdFwibWFpblwiOiBcInN0eWxlc19tYWluX19haExpdlwiLFxuXHRcImxvYWRpbmdcIjogXCJzdHlsZXNfbG9hZGluZ19fcDFKVkJcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./pages/styles/index.module.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\n/*\r\n  MIT License http://www.opensource.org/licenses/mit-license.php\r\n  Author Tobias Koppers @sokra\r\n*/ // css base code, injected by the css-loader\r\n// eslint-disable-next-line func-names\r\nmodule.exports = function(useSourceMap) {\r\n    var list = [] // return the list of modules as css string\r\n    ;\r\n    list.toString = function toString() {\r\n        return this.map(function(item) {\r\n            var content = cssWithMappingToString(item, useSourceMap);\r\n            if (item[2]) {\r\n                return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\r\n            }\r\n            return content;\r\n        }).join(\"\");\r\n    } // import a list of modules into the list\r\n    ;\r\n    // eslint-disable-next-line func-names\r\n    list.i = function(modules, mediaQuery, dedupe) {\r\n        if (typeof modules === \"string\") {\r\n            // eslint-disable-next-line no-param-reassign\r\n            modules = [\r\n                [\r\n                    null,\r\n                    modules,\r\n                    \"\"\r\n                ]\r\n            ];\r\n        }\r\n        var alreadyImportedModules = {};\r\n        if (dedupe) {\r\n            for(var i = 0; i < this.length; i++){\r\n                // eslint-disable-next-line prefer-destructuring\r\n                var id = this[i][0];\r\n                if (id != null) {\r\n                    alreadyImportedModules[id] = true;\r\n                }\r\n            }\r\n        }\r\n        for(var _i = 0; _i < modules.length; _i++){\r\n            var item = [].concat(modules[_i]);\r\n            if (dedupe && alreadyImportedModules[item[0]]) {\r\n                continue;\r\n            }\r\n            if (mediaQuery) {\r\n                if (!item[2]) {\r\n                    item[2] = mediaQuery;\r\n                } else {\r\n                    item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\r\n                }\r\n            }\r\n            list.push(item);\r\n        }\r\n    };\r\n    return list;\r\n};\r\nfunction cssWithMappingToString(item, useSourceMap) {\r\n    var content = item[1] || \"\" // eslint-disable-next-line prefer-destructuring\r\n    ;\r\n    var cssMapping = item[3];\r\n    if (!cssMapping) {\r\n        return content;\r\n    }\r\n    if (useSourceMap && typeof btoa === \"function\") {\r\n        var sourceMapping = toComment(cssMapping);\r\n        var sourceURLs = cssMapping.sources.map(function(source) {\r\n            return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\r\n        });\r\n        return [\r\n            content\r\n        ].concat(sourceURLs).concat([\r\n            sourceMapping\r\n        ]).join(\"\\n\");\r\n    }\r\n    return [\r\n        content\r\n    ].join(\"\\n\");\r\n} // Adapted from convert-source-map (MIT)\r\nfunction toComment(sourceMap) {\r\n    // eslint-disable-next-line no-undef\r\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\r\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\r\n    return \"/*# \".concat(data, \" */\");\r\n}\r\n\r\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9ydW50aW1lL2FwaS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxxQkFBcUI7QUFDekU7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL3J1bnRpbWUvYXBpLmpzP2NhNGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovIC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XHJcbiAgICB2YXIgbGlzdCA9IFtdIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuICAgIDtcclxuICAgIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcclxuICAgICAgICAgICAgaWYgKGl0ZW1bMl0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgICAgIH0pLmpvaW4oXCJcIik7XHJcbiAgICB9IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcbiAgICA7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xyXG4gICAgbGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgICAgICAgICBtb2R1bGVzID0gW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlcyxcclxuICAgICAgICAgICAgICAgICAgICBcIlwiXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcbiAgICAgICAgaWYgKGRlZHVwZSkge1xyXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcclxuICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKyl7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcclxuICAgICAgICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWVkaWFRdWVyeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtWzJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBsaXN0O1xyXG59O1xyXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xyXG4gICAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8IFwiXCIgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXHJcbiAgICA7XHJcbiAgICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XHJcbiAgICBpZiAoIWNzc01hcHBpbmcpIHtcclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxuICAgIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xyXG4gICAgICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbihzb3VyY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGNvbnRlbnRcclxuICAgICAgICBdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW1xyXG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nXHJcbiAgICAgICAgXSkuam9pbihcIlxcblwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgY29udGVudFxyXG4gICAgXS5qb2luKFwiXFxuXCIpO1xyXG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcclxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcclxuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcclxuICAgIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XHJcbn1cclxuXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CPower%5COneDrive%5CDesktop%5CDemo%20Product%5CCodeTranslate%5Copenai-quickstart-node%5Cpages%5Cindex.js&page=%2F!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CPower%5COneDrive%5CDesktop%5CDemo%20Product%5CCodeTranslate%5Copenai-quickstart-node%5Cpages%5Cindex.js&page=%2F! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(/*! ./pages/index.js */ \"./pages/index.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1DJTNBJTVDVXNlcnMlNUNQb3dlciU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q0RlbW8lMjBQcm9kdWN0JTVDQ29kZVRyYW5zbGF0ZSU1Q29wZW5haS1xdWlja3N0YXJ0LW5vZGUlNUNwYWdlcyU1Q2luZGV4LmpzJnBhZ2U9JTJGIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDBDQUFrQjtBQUN6QztBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/YTQyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4vcGFnZXMvaW5kZXguanNcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL1wiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CPower%5COneDrive%5CDesktop%5CDemo%20Product%5CCodeTranslate%5Copenai-quickstart-node%5Cpages%5Cindex.js&page=%2F!\n"));

/***/ }),

/***/ "./pages/styles/index.module.css":
/*!***************************************!*\
  !*** ./pages/styles/index.module.css ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./index.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./pages/styles/index.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\r\n                    // By default, style-loader injects CSS into the bottom\r\n                    // of <head>. This causes ordering problems between dev\r\n                    // and prod. To fix this, we render a <noscript> tag as\r\n                    // an anchor for the styles to be placed before. These\r\n                    // styles will be applied _before_ <style jsx global>.\r\n                    // These elements should always exist. If they do not,\r\n                    // this code should fail.\r\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\r\n                    var parentNode = anchorElement.parentNode// Normally <head>\r\n                    ;\r\n                    // Each style tag should be placed right before our\r\n                    // anchor. By inserting before and not after, we do not\r\n                    // need to track the last inserted element.\r\n                    parentNode.insertBefore(element, anchorElement);\r\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\r\n    if (!a && b || a && !b) {\r\n        return false;\r\n    }\r\n    let p;\r\n    for(p in a){\r\n        if (isNamedExport && p === \"default\") {\r\n            continue;\r\n        }\r\n        if (a[p] !== b[p]) {\r\n            return false;\r\n        }\r\n    }\r\n    for(p in b){\r\n        if (isNamedExport && p === \"default\") {\r\n            continue;\r\n        }\r\n        if (!a[p]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./index.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./pages/styles/index.module.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./index.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[4].use[2]!./pages/styles/index.module.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9zdHlsZXMvaW5kZXgubW9kdWxlLmNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsdU5BQTJHO0FBQzdILDBCQUEwQixtQkFBTyxDQUFDLDZmQUEwUDs7QUFFNVI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLDZmQUEwUDtBQUNoUTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDZmQUEwUDs7QUFFcFI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvc3R5bGVzL2luZGV4Lm1vZHVsZS5jc3M/NzViMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXN0eWxlLWxvYWRlci9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls0XS51c2VbMl0hLi9pbmRleC5tb2R1bGUuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHN0eWxlLWxvYWRlciBpbmplY3RzIENTUyBpbnRvIHRoZSBib3R0b21cclxuICAgICAgICAgICAgICAgICAgICAvLyBvZiA8aGVhZD4uIFRoaXMgY2F1c2VzIG9yZGVyaW5nIHByb2JsZW1zIGJldHdlZW4gZGV2XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHByb2QuIFRvIGZpeCB0aGlzLCB3ZSByZW5kZXIgYSA8bm9zY3JpcHQ+IHRhZyBhc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFuY2hvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBwbGFjZWQgYmVmb3JlLiBUaGVzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgX2JlZm9yZV8gPHN0eWxlIGpzeCBnbG9iYWw+LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGVsZW1lbnRzIHNob3VsZCBhbHdheXMgZXhpc3QuIElmIHRoZXkgZG8gbm90LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29kZSBzaG91bGQgZmFpbC5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjX19uZXh0X2Nzc19fRE9fTk9UX1VTRV9fXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jaG9yRWxlbWVudC5wYXJlbnROb2RlLy8gTm9ybWFsbHkgPGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvci4gQnkgaW5zZXJ0aW5nIGJlZm9yZSBhbmQgbm90IGFmdGVyLCB3ZSBkbyBub3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9O1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XHJcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IHA7XHJcbiAgICBmb3IocCBpbiBhKXtcclxuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFbcF0gIT09IGJbcF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvcihwIGluIGIpe1xyXG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFbcF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuICAgIHZhciBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzRdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNF0udXNlWzJdIS4vaW5kZXgubW9kdWxlLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls0XS51c2VbMl0hLi9pbmRleC5tb2R1bGUuY3NzXCIpO1xuXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscykpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/styles/index.module.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\nconst isOldIE = function isOldIE() {\r\n    let memo;\r\n    return function memorize() {\r\n        if (typeof memo === \"undefined\") {\r\n            // Test for IE <= 9 as proposed by Browserhacks\r\n            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\r\n            // Tests for existence of standard globals is to allow style-loader\r\n            // to operate correctly into non-standard environments\r\n            // @see https://github.com/webpack-contrib/style-loader/issues/177\r\n            memo = Boolean(window && document && document.all && !window.atob);\r\n        }\r\n        return memo;\r\n    };\r\n}();\r\nconst getTarget = function getTarget() {\r\n    const memo = {};\r\n    return function memorize(target) {\r\n        if (typeof memo[target] === \"undefined\") {\r\n            let styleTarget = document.querySelector(target);\r\n            // Special case to return head of iframe instead of iframe itself\r\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\r\n                try {\r\n                    // This will throw an exception if access to iframe is blocked\r\n                    // due to cross-origin restrictions\r\n                    styleTarget = styleTarget.contentDocument.head;\r\n                } catch (e) {\r\n                    // istanbul ignore next\r\n                    styleTarget = null;\r\n                }\r\n            }\r\n            memo[target] = styleTarget;\r\n        }\r\n        return memo[target];\r\n    };\r\n}();\r\nconst stylesInDom = [];\r\nfunction getIndexByIdentifier(identifier) {\r\n    let result = -1;\r\n    for(let i = 0; i < stylesInDom.length; i++){\r\n        if (stylesInDom[i].identifier === identifier) {\r\n            result = i;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction modulesToDom(list, options) {\r\n    const idCountMap = {};\r\n    const identifiers = [];\r\n    for(let i = 0; i < list.length; i++){\r\n        const item = list[i];\r\n        const id = options.base ? item[0] + options.base : item[0];\r\n        const count = idCountMap[id] || 0;\r\n        const identifier = id + \" \" + count.toString();\r\n        idCountMap[id] = count + 1;\r\n        const index = getIndexByIdentifier(identifier);\r\n        const obj = {\r\n            css: item[1],\r\n            media: item[2],\r\n            sourceMap: item[3]\r\n        };\r\n        if (index !== -1) {\r\n            stylesInDom[index].references++;\r\n            stylesInDom[index].updater(obj);\r\n        } else {\r\n            stylesInDom.push({\r\n                identifier: identifier,\r\n                updater: addStyle(obj, options),\r\n                references: 1\r\n            });\r\n        }\r\n        identifiers.push(identifier);\r\n    }\r\n    return identifiers;\r\n}\r\nfunction insertStyleElement(options) {\r\n    const style = document.createElement(\"style\");\r\n    const attributes = options.attributes || {};\r\n    if (typeof attributes.nonce === \"undefined\") {\r\n        const nonce = // eslint-disable-next-line no-undef\r\n         true ? __webpack_require__.nc : 0;\r\n        if (nonce) {\r\n            attributes.nonce = nonce;\r\n        }\r\n    }\r\n    Object.keys(attributes).forEach(function(key) {\r\n        style.setAttribute(key, attributes[key]);\r\n    });\r\n    if (typeof options.insert === \"function\") {\r\n        options.insert(style);\r\n    } else {\r\n        const target = getTarget(options.insert || \"head\");\r\n        if (!target) {\r\n            throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\r\n        }\r\n        target.appendChild(style);\r\n    }\r\n    return style;\r\n}\r\nfunction removeStyleElement(style) {\r\n    // istanbul ignore if\r\n    if (style.parentNode === null) {\r\n        return false;\r\n    }\r\n    style.parentNode.removeChild(style);\r\n}\r\n/* istanbul ignore next  */ const replaceText = function replaceText() {\r\n    const textStore = [];\r\n    return function replace(index, replacement) {\r\n        textStore[index] = replacement;\r\n        return textStore.filter(Boolean).join(\"\\n\");\r\n    };\r\n}();\r\nfunction applyToSingletonTag(style, index, remove, obj) {\r\n    const css = remove ? \"\" : obj.media ? \"@media \" + obj.media + \" {\" + obj.css + \"}\" : obj.css;\r\n    // For old IE\r\n    /* istanbul ignore if  */ if (style.styleSheet) {\r\n        style.styleSheet.cssText = replaceText(index, css);\r\n    } else {\r\n        const cssNode = document.createTextNode(css);\r\n        const childNodes = style.childNodes;\r\n        if (childNodes[index]) {\r\n            style.removeChild(childNodes[index]);\r\n        }\r\n        if (childNodes.length) {\r\n            style.insertBefore(cssNode, childNodes[index]);\r\n        } else {\r\n            style.appendChild(cssNode);\r\n        }\r\n    }\r\n}\r\nfunction applyToTag(style, options, obj) {\r\n    let css = obj.css;\r\n    const media = obj.media;\r\n    const sourceMap = obj.sourceMap;\r\n    if (media) {\r\n        style.setAttribute(\"media\", media);\r\n    } else {\r\n        style.removeAttribute(\"media\");\r\n    }\r\n    if (sourceMap && typeof btoa !== \"undefined\") {\r\n        css += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n    }\r\n    // For old IE\r\n    /* istanbul ignore if  */ if (style.styleSheet) {\r\n        style.styleSheet.cssText = css;\r\n    } else {\r\n        while(style.firstChild){\r\n            style.removeChild(style.firstChild);\r\n        }\r\n        style.appendChild(document.createTextNode(css));\r\n    }\r\n}\r\nlet singleton = null;\r\nlet singletonCounter = 0;\r\nfunction addStyle(obj, options) {\r\n    let style;\r\n    let update;\r\n    let remove;\r\n    if (options.singleton) {\r\n        const styleIndex = singletonCounter++;\r\n        style = singleton || (singleton = insertStyleElement(options));\r\n        update = applyToSingletonTag.bind(null, style, styleIndex, false);\r\n        remove = applyToSingletonTag.bind(null, style, styleIndex, true);\r\n    } else {\r\n        style = insertStyleElement(options);\r\n        update = applyToTag.bind(null, style, options);\r\n        remove = function() {\r\n            removeStyleElement(style);\r\n        };\r\n    }\r\n    update(obj);\r\n    return function updateStyle(newObj) {\r\n        if (newObj) {\r\n            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\r\n                return;\r\n            }\r\n            update(obj = newObj);\r\n        } else {\r\n            remove();\r\n        }\r\n    };\r\n}\r\nmodule.exports = function(list, options) {\r\n    options = options || {};\r\n    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n    // tags it will allow on a page\r\n    if (!options.singleton && typeof options.singleton !== \"boolean\") {\r\n        options.singleton = isOldIE();\r\n    }\r\n    list = list || [];\r\n    let lastIdentifiers = modulesToDom(list, options);\r\n    return function update(newList) {\r\n        newList = newList || [];\r\n        if (Object.prototype.toString.call(newList) !== \"[object Array]\") {\r\n            return;\r\n        }\r\n        for(let i = 0; i < lastIdentifiers.length; i++){\r\n            const identifier = lastIdentifiers[i];\r\n            const index = getIndexByIdentifier(identifier);\r\n            stylesInDom[index].references--;\r\n        }\r\n        const newLastIdentifiers = modulesToDom(newList, options);\r\n        for(let i1 = 0; i1 < lastIdentifiers.length; i1++){\r\n            const identifier = lastIdentifiers[i1];\r\n            const index = getIndexByIdentifier(identifier);\r\n            if (stylesInDom[index].references === 0) {\r\n                stylesInDom[index].updater();\r\n                stylesInDom.splice(index, 1);\r\n            }\r\n        }\r\n        lastIdentifiers = newLastIdentifiers;\r\n    };\r\n};\r\n\r\n//# sourceMappingURL=injectStylesIntoStyleTag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\n"));

/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _styles_index_module_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles/index.module.css */ \"./pages/styles/index.module.css\");\n/* harmony import */ var _styles_index_module_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_styles_index_module_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./textarea */ \"./pages/textarea.jsx\");\n/* harmony import */ var _uiw_react_codemirror__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @uiw/react-codemirror */ \"./node_modules/@uiw/react-codemirror/esm/index.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction Home() {\n    _s();\n    const [language, setLanguage] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"C++\");\n    const [code, setCode] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [result, setResult] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    async function onSubmit(event) {\n        event.preventDefault();\n        if (code.trim().length == 0) {\n            setResult(\"Please enter your code!\");\n            return;\n        }\n        if (loading) {\n            return;\n        }\n        setLoading(true);\n        setResult(\"\");\n        const response = await fetch(\"/api/generate\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                language,\n                code\n            })\n        });\n        const data = await response.json();\n        setResult(data.result);\n        setLoading(false);\n    }\n    ;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_1___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                    children: \"Code Translator\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                    lineNumber: 43,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                lineNumber: 42,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"container\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                    className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_5___default().main),\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            children: \"Code Translator\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                            lineNumber: 47,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                            onSubmit: onSubmit,\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"lang\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                            children: \"Programming Language\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                            lineNumber: 51,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                            name: \"Programming Language\",\n                                            value: language,\n                                            onChange: (e)=>setLanguage(e.target.value),\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"c++\",\n                                                    children: \"C++\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 57,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"java\",\n                                                    children: \"Java\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 58,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Python2\",\n                                                    children: \"Python\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 59,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Python3\",\n                                                    children: \"Python3\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 60,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"C\",\n                                                    children: \"C\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 61,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"C#\",\n                                                    children: \"Java\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 62,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Javascript\",\n                                                    children: \"Javascript\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 63,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Ruby\",\n                                                    children: \"Ruby\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 64,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Swift\",\n                                                    children: \"Swift\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 65,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Go\",\n                                                    children: \"Go\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 66,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Scala\",\n                                                    children: \"Scala\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 67,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Kotlin\",\n                                                    children: \"Kotlin\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 68,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"PHP\",\n                                                    children: \"PHP\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 69,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Rust\",\n                                                    children: \"Rust\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 70,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Typescript\",\n                                                    children: \"Typescript\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 71,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Erlang\",\n                                                    children: \"Erlang\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 72,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Elixir\",\n                                                    children: \"Elixir\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 73,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Racket\",\n                                                    children: \"Racket\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 74,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"Dart\",\n                                                    children: \"Dart\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                                    lineNumber: 75,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                            lineNumber: 52,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                    lineNumber: 50,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"codebox\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_uiw_react_codemirror__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                        value: code,\n                                        options: {\n                                            theme: \"dracula\",\n                                            keyMap: \"sublime\",\n                                            mode: \"python\"\n                                        },\n                                        onChange: (editor, data, value)=>{\n                                            setCode(editor);\n                                        },\n                                        className: \"w-96 h-80\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                        lineNumber: 80,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                    lineNumber: 79,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                    className: \"btn\",\n                                    type: \"submit\",\n                                    value: \"Translate Code\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                    lineNumber: 96,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                            lineNumber: 49,\n                            columnNumber: 11\n                        }, this),\n                        loading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    children: \"Translating Code\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                    lineNumber: 100,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    children: \"Loading...\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                                    lineNumber: 101,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                            lineNumber: 99,\n                            columnNumber: 13\n                        }, this),\n                        !loading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_textarea__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                            value: result\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                            lineNumber: 105,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                    lineNumber: 46,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n                lineNumber: 45,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\index.js\",\n        lineNumber: 41,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"2qsoaHHMb1jWswbbwclDsVUWbbg=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports on update so we can compare the boundary\r\n                // signatures.\r\n                module.hot.dispose(function (data) {\r\n                    data.prevExports = currentExports;\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevExports !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevExports !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n"));

/***/ }),

/***/ "./pages/textarea.jsx":
/*!****************************!*\
  !*** ./pages/textarea.jsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$();\n\nfunction Textarea(param) {\n    let { value  } = param;\n    _s();\n    // Set the initial number of rows and columns to 1\n    const [rows, setRows] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(1);\n    // Update the rows and columns when the component mounts\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        updateTextarea();\n    }, []);\n    // Update the rows and columns when the value of the textarea changes\n    const handleChange = (event)=>{\n        updateTextarea();\n    };\n    const updateTextarea = ()=>{\n        // Set the number of rows and columns based on the length of the string\n        setRows(value.split(\"\\n\").length);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n        style: {\n            resize: \"none\"\n        },\n        rows: rows,\n        onChange: handleChange,\n        value: value\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Power\\\\OneDrive\\\\Desktop\\\\Demo Product\\\\CodeTranslate\\\\openai-quickstart-node\\\\pages\\\\textarea.jsx\",\n        lineNumber: 23,\n        columnNumber: 5\n    }, this);\n}\n_s(Textarea, \"LkWUcoETXy5rQCn3pFKLcIsVFUU=\");\n_c = Textarea;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Textarea);\nvar _c;\n$RefreshReg$(_c, \"Textarea\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports on update so we can compare the boundary\r\n                // signatures.\r\n                module.hot.dispose(function (data) {\r\n                    data.prevExports = currentExports;\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevExports !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevExports !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy90ZXh0YXJlYS5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFBMEI7QUFFMUIsU0FBU0MsU0FBUyxLQUFTLEVBQUU7UUFBWCxFQUFFQyxNQUFLLEVBQUUsR0FBVDs7SUFDaEIsa0RBQWtEO0lBQ2xELE1BQU0sQ0FBQ0MsTUFBTUMsUUFBUSxHQUFHSixxREFBYyxDQUFDO0lBRXZDLHdEQUF3RDtJQUN4REEsc0RBQWUsQ0FBQyxJQUFNO1FBQ3BCTztJQUNGLEdBQUcsRUFBRTtJQUVMLHFFQUFxRTtJQUNyRSxNQUFNQyxlQUFlQyxDQUFBQSxRQUFTO1FBQzVCRjtJQUNGO0lBRUEsTUFBTUEsaUJBQWlCLElBQU07UUFDM0IsdUVBQXVFO1FBQ3ZFSCxRQUFRRixNQUFNUSxLQUFLLENBQUMsTUFBTUMsTUFBTTtJQUNsQztJQUVBLHFCQUNFLDhEQUFDQztRQUNDQyxPQUFPO1lBQUVDLFFBQVE7UUFBTztRQUN4QlgsTUFBTUE7UUFDTlksVUFBVVA7UUFDVk4sT0FBT0E7Ozs7OztBQUdiO0dBM0JTRDtLQUFBQTtBQTZCVCwrREFBZUEsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wYWdlcy90ZXh0YXJlYS5qc3g/MDUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZnVuY3Rpb24gVGV4dGFyZWEoeyB2YWx1ZSB9KSB7XHJcbiAgLy8gU2V0IHRoZSBpbml0aWFsIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIHRvIDFcclxuICBjb25zdCBbcm93cywgc2V0Um93c10gPSBSZWFjdC51c2VTdGF0ZSgxKTtcclxuXHJcbiAgLy8gVXBkYXRlIHRoZSByb3dzIGFuZCBjb2x1bW5zIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHNcclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdXBkYXRlVGV4dGFyZWEoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFVwZGF0ZSB0aGUgcm93cyBhbmQgY29sdW1ucyB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgdGV4dGFyZWEgY2hhbmdlc1xyXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IGV2ZW50ID0+IHtcclxuICAgIHVwZGF0ZVRleHRhcmVhKCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdXBkYXRlVGV4dGFyZWEgPSAoKSA9PiB7XHJcbiAgICAvLyBTZXQgdGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIGJhc2VkIG9uIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZ1xyXG4gICAgc2V0Um93cyh2YWx1ZS5zcGxpdCgnXFxuJykubGVuZ3RoKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHRleHRhcmVhXHJcbiAgICAgIHN0eWxlPXt7IHJlc2l6ZTogJ25vbmUnIH19XHJcbiAgICAgIHJvd3M9e3Jvd3N9XHJcbiAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgIC8+XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGV4dGFyZWE7Il0sIm5hbWVzIjpbIlJlYWN0IiwiVGV4dGFyZWEiLCJ2YWx1ZSIsInJvd3MiLCJzZXRSb3dzIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1cGRhdGVUZXh0YXJlYSIsImhhbmRsZUNoYW5nZSIsImV2ZW50Iiwic3BsaXQiLCJsZW5ndGgiLCJ0ZXh0YXJlYSIsInN0eWxlIiwicmVzaXplIiwib25DaGFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/textarea.jsx\n"));

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\")\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlIQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzPzg4NDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9oZWFkJylcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\r\n * @license React\r\n * react-jsx-dev-runtime.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\nif (true) {\r\n  (function() {\r\n'use strict';\r\n\r\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\r\n\r\n// ATTENTION\r\n// When adding new symbols to this file,\r\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\r\n// The Symbol used to tag the ReactElement-like types.\r\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\r\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\r\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\r\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\r\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\r\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\r\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\r\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\r\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\r\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\r\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\r\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\r\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\r\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\r\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\r\nfunction getIteratorFn(maybeIterable) {\r\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\r\n    return null;\r\n  }\r\n\r\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\r\n\r\n  if (typeof maybeIterator === 'function') {\r\n    return maybeIterator;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\r\n\r\nfunction error(format) {\r\n  {\r\n    {\r\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n        args[_key2 - 1] = arguments[_key2];\r\n      }\r\n\r\n      printWarning('error', format, args);\r\n    }\r\n  }\r\n}\r\n\r\nfunction printWarning(level, format, args) {\r\n  // When changing this logic, you might want to also\r\n  // update consoleWithStackDev.www.js as well.\r\n  {\r\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\r\n\r\n    if (stack !== '') {\r\n      format += '%s';\r\n      args = args.concat([stack]);\r\n    } // eslint-disable-next-line react-internal/safe-string-coercion\r\n\r\n\r\n    var argsWithFormat = args.map(function (item) {\r\n      return String(item);\r\n    }); // Careful: RN currently depends on this prefix\r\n\r\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\r\n    // breaks IE9: https://github.com/facebook/react/issues/13610\r\n    // eslint-disable-next-line react-internal/no-production-logging\r\n\r\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\r\n  }\r\n}\r\n\r\n// -----------------------------------------------------------------------------\r\n\r\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\r\nvar enableCacheElement = false;\r\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\r\n\r\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\r\n// stuff. Intended to enable React core members to more easily debug scheduling\r\n// issues in DEV builds.\r\n\r\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\r\n\r\nvar REACT_MODULE_REFERENCE;\r\n\r\n{\r\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\r\n}\r\n\r\nfunction isValidElementType(type) {\r\n  if (typeof type === 'string' || typeof type === 'function') {\r\n    return true;\r\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\r\n\r\n\r\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\r\n    return true;\r\n  }\r\n\r\n  if (typeof type === 'object' && type !== null) {\r\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\r\n    // types supported by any Flight configuration anywhere since\r\n    // we don't know which Flight build this will end up being used\r\n    // with.\r\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getWrappedName(outerType, innerType, wrapperName) {\r\n  var displayName = outerType.displayName;\r\n\r\n  if (displayName) {\r\n    return displayName;\r\n  }\r\n\r\n  var functionName = innerType.displayName || innerType.name || '';\r\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\r\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\r\n\r\n\r\nfunction getContextName(type) {\r\n  return type.displayName || 'Context';\r\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\r\n\r\n\r\nfunction getComponentNameFromType(type) {\r\n  if (type == null) {\r\n    // Host root, text node or just invalid type.\r\n    return null;\r\n  }\r\n\r\n  {\r\n    if (typeof type.tag === 'number') {\r\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\r\n    }\r\n  }\r\n\r\n  if (typeof type === 'function') {\r\n    return type.displayName || type.name || null;\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return type;\r\n  }\r\n\r\n  switch (type) {\r\n    case REACT_FRAGMENT_TYPE:\r\n      return 'Fragment';\r\n\r\n    case REACT_PORTAL_TYPE:\r\n      return 'Portal';\r\n\r\n    case REACT_PROFILER_TYPE:\r\n      return 'Profiler';\r\n\r\n    case REACT_STRICT_MODE_TYPE:\r\n      return 'StrictMode';\r\n\r\n    case REACT_SUSPENSE_TYPE:\r\n      return 'Suspense';\r\n\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return 'SuspenseList';\r\n\r\n  }\r\n\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_CONTEXT_TYPE:\r\n        var context = type;\r\n        return getContextName(context) + '.Consumer';\r\n\r\n      case REACT_PROVIDER_TYPE:\r\n        var provider = type;\r\n        return getContextName(provider._context) + '.Provider';\r\n\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return getWrappedName(type, type.render, 'ForwardRef');\r\n\r\n      case REACT_MEMO_TYPE:\r\n        var outerName = type.displayName || null;\r\n\r\n        if (outerName !== null) {\r\n          return outerName;\r\n        }\r\n\r\n        return getComponentNameFromType(type.type) || 'Memo';\r\n\r\n      case REACT_LAZY_TYPE:\r\n        {\r\n          var lazyComponent = type;\r\n          var payload = lazyComponent._payload;\r\n          var init = lazyComponent._init;\r\n\r\n          try {\r\n            return getComponentNameFromType(init(payload));\r\n          } catch (x) {\r\n            return null;\r\n          }\r\n        }\r\n\r\n      // eslint-disable-next-line no-fallthrough\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar assign = Object.assign;\r\n\r\n// Helpers to patch console.logs to avoid logging during side-effect free\r\n// replaying on render function. This currently only patches the object\r\n// lazily which won't cover if the log function was extracted eagerly.\r\n// We could also eagerly patch the method.\r\nvar disabledDepth = 0;\r\nvar prevLog;\r\nvar prevInfo;\r\nvar prevWarn;\r\nvar prevError;\r\nvar prevGroup;\r\nvar prevGroupCollapsed;\r\nvar prevGroupEnd;\r\n\r\nfunction disabledLog() {}\r\n\r\ndisabledLog.__reactDisabledLog = true;\r\nfunction disableLogs() {\r\n  {\r\n    if (disabledDepth === 0) {\r\n      /* eslint-disable react-internal/no-production-logging */\r\n      prevLog = console.log;\r\n      prevInfo = console.info;\r\n      prevWarn = console.warn;\r\n      prevError = console.error;\r\n      prevGroup = console.group;\r\n      prevGroupCollapsed = console.groupCollapsed;\r\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\r\n\r\n      var props = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value: disabledLog,\r\n        writable: true\r\n      }; // $FlowFixMe Flow thinks console is immutable.\r\n\r\n      Object.defineProperties(console, {\r\n        info: props,\r\n        log: props,\r\n        warn: props,\r\n        error: props,\r\n        group: props,\r\n        groupCollapsed: props,\r\n        groupEnd: props\r\n      });\r\n      /* eslint-enable react-internal/no-production-logging */\r\n    }\r\n\r\n    disabledDepth++;\r\n  }\r\n}\r\nfunction reenableLogs() {\r\n  {\r\n    disabledDepth--;\r\n\r\n    if (disabledDepth === 0) {\r\n      /* eslint-disable react-internal/no-production-logging */\r\n      var props = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        writable: true\r\n      }; // $FlowFixMe Flow thinks console is immutable.\r\n\r\n      Object.defineProperties(console, {\r\n        log: assign({}, props, {\r\n          value: prevLog\r\n        }),\r\n        info: assign({}, props, {\r\n          value: prevInfo\r\n        }),\r\n        warn: assign({}, props, {\r\n          value: prevWarn\r\n        }),\r\n        error: assign({}, props, {\r\n          value: prevError\r\n        }),\r\n        group: assign({}, props, {\r\n          value: prevGroup\r\n        }),\r\n        groupCollapsed: assign({}, props, {\r\n          value: prevGroupCollapsed\r\n        }),\r\n        groupEnd: assign({}, props, {\r\n          value: prevGroupEnd\r\n        })\r\n      });\r\n      /* eslint-enable react-internal/no-production-logging */\r\n    }\r\n\r\n    if (disabledDepth < 0) {\r\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\r\nvar prefix;\r\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\r\n  {\r\n    if (prefix === undefined) {\r\n      // Extract the VM specific prefix used by each line.\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\r\n        prefix = match && match[1] || '';\r\n      }\r\n    } // We use the prefix to ensure our stacks line up with native stack frames.\r\n\r\n\r\n    return '\\n' + prefix + name;\r\n  }\r\n}\r\nvar reentry = false;\r\nvar componentFrameCache;\r\n\r\n{\r\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\r\n  componentFrameCache = new PossiblyWeakMap();\r\n}\r\n\r\nfunction describeNativeComponentFrame(fn, construct) {\r\n  // If something asked for a stack inside a fake render, it should get ignored.\r\n  if ( !fn || reentry) {\r\n    return '';\r\n  }\r\n\r\n  {\r\n    var frame = componentFrameCache.get(fn);\r\n\r\n    if (frame !== undefined) {\r\n      return frame;\r\n    }\r\n  }\r\n\r\n  var control;\r\n  reentry = true;\r\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\r\n\r\n  Error.prepareStackTrace = undefined;\r\n  var previousDispatcher;\r\n\r\n  {\r\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\r\n    // for warnings.\r\n\r\n    ReactCurrentDispatcher.current = null;\r\n    disableLogs();\r\n  }\r\n\r\n  try {\r\n    // This should throw.\r\n    if (construct) {\r\n      // Something should be setting the props in the constructor.\r\n      var Fake = function () {\r\n        throw Error();\r\n      }; // $FlowFixMe\r\n\r\n\r\n      Object.defineProperty(Fake.prototype, 'props', {\r\n        set: function () {\r\n          // We use a throwing setter instead of frozen or non-writable props\r\n          // because that won't throw in a non-strict mode function.\r\n          throw Error();\r\n        }\r\n      });\r\n\r\n      if (typeof Reflect === 'object' && Reflect.construct) {\r\n        // We construct a different control for this case to include any extra\r\n        // frames added by the construct call.\r\n        try {\r\n          Reflect.construct(Fake, []);\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n\r\n        Reflect.construct(fn, [], Fake);\r\n      } else {\r\n        try {\r\n          Fake.call();\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n\r\n        fn.call(Fake.prototype);\r\n      }\r\n    } else {\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        control = x;\r\n      }\r\n\r\n      fn();\r\n    }\r\n  } catch (sample) {\r\n    // This is inlined manually because closure doesn't do it for us.\r\n    if (sample && control && typeof sample.stack === 'string') {\r\n      // This extracts the first frame from the sample that isn't also in the control.\r\n      // Skipping one frame that we assume is the frame that calls the two.\r\n      var sampleLines = sample.stack.split('\\n');\r\n      var controlLines = control.stack.split('\\n');\r\n      var s = sampleLines.length - 1;\r\n      var c = controlLines.length - 1;\r\n\r\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\r\n        // We expect at least one stack frame to be shared.\r\n        // Typically this will be the root most one. However, stack frames may be\r\n        // cut off due to maximum stack limits. In this case, one maybe cut off\r\n        // earlier than the other. We assume that the sample is longer or the same\r\n        // and there for cut off earlier. So we should find the root most frame in\r\n        // the sample somewhere in the control.\r\n        c--;\r\n      }\r\n\r\n      for (; s >= 1 && c >= 0; s--, c--) {\r\n        // Next we find the first one that isn't the same which should be the\r\n        // frame that called our sample function and the control.\r\n        if (sampleLines[s] !== controlLines[c]) {\r\n          // In V8, the first line is describing the message but other VMs don't.\r\n          // If we're about to return the first line, and the control is also on the same\r\n          // line, that's a pretty good indicator that our sample threw at same line as\r\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\r\n          // This can happen if you passed a class to function component, or non-function.\r\n          if (s !== 1 || c !== 1) {\r\n            do {\r\n              s--;\r\n              c--; // We may still have similar intermediate frames from the construct call.\r\n              // The next one that isn't the same should be our match though.\r\n\r\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\r\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\r\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\r\n                // but we have a user-provided \"displayName\"\r\n                // splice it in to make the stack more readable.\r\n\r\n\r\n                if (fn.displayName && _frame.includes('<anonymous>')) {\r\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\r\n                }\r\n\r\n                {\r\n                  if (typeof fn === 'function') {\r\n                    componentFrameCache.set(fn, _frame);\r\n                  }\r\n                } // Return the line we found.\r\n\r\n\r\n                return _frame;\r\n              }\r\n            } while (s >= 1 && c >= 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } finally {\r\n    reentry = false;\r\n\r\n    {\r\n      ReactCurrentDispatcher.current = previousDispatcher;\r\n      reenableLogs();\r\n    }\r\n\r\n    Error.prepareStackTrace = previousPrepareStackTrace;\r\n  } // Fallback to just using the name if we couldn't make it throw.\r\n\r\n\r\n  var name = fn ? fn.displayName || fn.name : '';\r\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\r\n\r\n  {\r\n    if (typeof fn === 'function') {\r\n      componentFrameCache.set(fn, syntheticFrame);\r\n    }\r\n  }\r\n\r\n  return syntheticFrame;\r\n}\r\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\r\n  {\r\n    return describeNativeComponentFrame(fn, false);\r\n  }\r\n}\r\n\r\nfunction shouldConstruct(Component) {\r\n  var prototype = Component.prototype;\r\n  return !!(prototype && prototype.isReactComponent);\r\n}\r\n\r\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\r\n\r\n  if (type == null) {\r\n    return '';\r\n  }\r\n\r\n  if (typeof type === 'function') {\r\n    {\r\n      return describeNativeComponentFrame(type, shouldConstruct(type));\r\n    }\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return describeBuiltInComponentFrame(type);\r\n  }\r\n\r\n  switch (type) {\r\n    case REACT_SUSPENSE_TYPE:\r\n      return describeBuiltInComponentFrame('Suspense');\r\n\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return describeBuiltInComponentFrame('SuspenseList');\r\n  }\r\n\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return describeFunctionComponentFrame(type.render);\r\n\r\n      case REACT_MEMO_TYPE:\r\n        // Memo may contain any component type so we recursively resolve it.\r\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\r\n\r\n      case REACT_LAZY_TYPE:\r\n        {\r\n          var lazyComponent = type;\r\n          var payload = lazyComponent._payload;\r\n          var init = lazyComponent._init;\r\n\r\n          try {\r\n            // Lazy may contain any component type so we recursively resolve it.\r\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\r\n          } catch (x) {}\r\n        }\r\n    }\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nvar loggedTypeFailures = {};\r\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement(element) {\r\n  {\r\n    if (element) {\r\n      var owner = element._owner;\r\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\r\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\r\n  {\r\n    // $FlowFixMe This is okay but Flow doesn't know it.\r\n    var has = Function.call.bind(hasOwnProperty);\r\n\r\n    for (var typeSpecName in typeSpecs) {\r\n      if (has(typeSpecs, typeSpecName)) {\r\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\r\n        // fail the render phase where it didn't fail before. So we log it.\r\n        // After these have been cleaned up, we'll let them throw.\r\n\r\n        try {\r\n          // This is intentionally an invariant that gets caught. It's the same\r\n          // behavior as without this statement except with a better message.\r\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\r\n            // eslint-disable-next-line react-internal/prod-error-codes\r\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\r\n            err.name = 'Invariant Violation';\r\n            throw err;\r\n          }\r\n\r\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\r\n        } catch (ex) {\r\n          error$1 = ex;\r\n        }\r\n\r\n        if (error$1 && !(error$1 instanceof Error)) {\r\n          setCurrentlyValidatingElement(element);\r\n\r\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\r\n\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n\r\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\r\n          // Only monitor this failure once because there tends to be a lot of the\r\n          // same error.\r\n          loggedTypeFailures[error$1.message] = true;\r\n          setCurrentlyValidatingElement(element);\r\n\r\n          error('Failed %s type: %s', location, error$1.message);\r\n\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\r\n\r\nfunction isArray(a) {\r\n  return isArrayImpl(a);\r\n}\r\n\r\n/*\r\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\r\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\r\n *\r\n * The functions in this module will throw an easier-to-understand,\r\n * easier-to-debug exception with a clear errors message message explaining the\r\n * problem. (Instead of a confusing exception thrown inside the implementation\r\n * of the `value` object).\r\n */\r\n// $FlowFixMe only called in DEV, so void return is not possible.\r\nfunction typeName(value) {\r\n  {\r\n    // toStringTag is needed for namespaced types like Temporal.Instant\r\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\r\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\r\n    return type;\r\n  }\r\n} // $FlowFixMe only called in DEV, so void return is not possible.\r\n\r\n\r\nfunction willCoercionThrow(value) {\r\n  {\r\n    try {\r\n      testStringCoercion(value);\r\n      return false;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction testStringCoercion(value) {\r\n  // If you ended up here by following an exception call stack, here's what's\r\n  // happened: you supplied an object or symbol value to React (as a prop, key,\r\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\r\n  // coerce it to a string using `'' + value`, an exception was thrown.\r\n  //\r\n  // The most common types that will cause this exception are `Symbol` instances\r\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\r\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\r\n  // exception. (Library authors do this to prevent users from using built-in\r\n  // numeric operators like `+` or comparison operators like `>=` because custom\r\n  // methods are needed to perform accurate arithmetic or comparison.)\r\n  //\r\n  // To fix the problem, coerce this object or symbol value to a string before\r\n  // passing it to React. The most reliable way is usually `String(value)`.\r\n  //\r\n  // To find which value is throwing, check the browser or debugger console.\r\n  // Before this exception was thrown, there should be `console.error` output\r\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\r\n  // problem and how that type was used: key, atrribute, input value prop, etc.\r\n  // In most cases, this console output also shows the component and its\r\n  // ancestor components where the exception happened.\r\n  //\r\n  // eslint-disable-next-line react-internal/safe-string-coercion\r\n  return '' + value;\r\n}\r\nfunction checkKeyStringCoercion(value) {\r\n  {\r\n    if (willCoercionThrow(value)) {\r\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\r\n\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\r\nvar RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true\r\n};\r\nvar specialPropKeyWarningShown;\r\nvar specialPropRefWarningShown;\r\nvar didWarnAboutStringRefs;\r\n\r\n{\r\n  didWarnAboutStringRefs = {};\r\n}\r\n\r\nfunction hasValidRef(config) {\r\n  {\r\n    if (hasOwnProperty.call(config, 'ref')) {\r\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\r\n\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config.ref !== undefined;\r\n}\r\n\r\nfunction hasValidKey(config) {\r\n  {\r\n    if (hasOwnProperty.call(config, 'key')) {\r\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\r\n\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config.key !== undefined;\r\n}\r\n\r\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\r\n  {\r\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\r\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\r\n\r\n      if (!didWarnAboutStringRefs[componentName]) {\r\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\r\n\r\n        didWarnAboutStringRefs[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction defineKeyPropWarningGetter(props, displayName) {\r\n  {\r\n    var warnAboutAccessingKey = function () {\r\n      if (!specialPropKeyWarningShown) {\r\n        specialPropKeyWarningShown = true;\r\n\r\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\r\n      }\r\n    };\r\n\r\n    warnAboutAccessingKey.isReactWarning = true;\r\n    Object.defineProperty(props, 'key', {\r\n      get: warnAboutAccessingKey,\r\n      configurable: true\r\n    });\r\n  }\r\n}\r\n\r\nfunction defineRefPropWarningGetter(props, displayName) {\r\n  {\r\n    var warnAboutAccessingRef = function () {\r\n      if (!specialPropRefWarningShown) {\r\n        specialPropRefWarningShown = true;\r\n\r\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\r\n      }\r\n    };\r\n\r\n    warnAboutAccessingRef.isReactWarning = true;\r\n    Object.defineProperty(props, 'ref', {\r\n      get: warnAboutAccessingRef,\r\n      configurable: true\r\n    });\r\n  }\r\n}\r\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\r\n\r\n\r\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\r\n  var element = {\r\n    // This tag allows us to uniquely identify this as a React Element\r\n    $$typeof: REACT_ELEMENT_TYPE,\r\n    // Built-in properties that belong on the element\r\n    type: type,\r\n    key: key,\r\n    ref: ref,\r\n    props: props,\r\n    // Record the component responsible for creating this element.\r\n    _owner: owner\r\n  };\r\n\r\n  {\r\n    // The validation flag is currently mutative. We put it on\r\n    // an external backing store so that we can freeze the whole object.\r\n    // This can be replaced with a WeakMap once they are implemented in\r\n    // commonly used development environments.\r\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\r\n    // the validation flag non-enumerable (where possible, which should\r\n    // include every environment we run tests in), so the test framework\r\n    // ignores it.\r\n\r\n    Object.defineProperty(element._store, 'validated', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: true,\r\n      value: false\r\n    }); // self and source are DEV only properties.\r\n\r\n    Object.defineProperty(element, '_self', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: self\r\n    }); // Two elements created in two different places should be considered\r\n    // equal for testing purposes and therefore we hide it from enumeration.\r\n\r\n    Object.defineProperty(element, '_source', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: source\r\n    });\r\n\r\n    if (Object.freeze) {\r\n      Object.freeze(element.props);\r\n      Object.freeze(element);\r\n    }\r\n  }\r\n\r\n  return element;\r\n};\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\n\r\nfunction jsxDEV(type, config, maybeKey, source, self) {\r\n  {\r\n    var propName; // Reserved names are extracted\r\n\r\n    var props = {};\r\n    var key = null;\r\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\r\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n    // but as an intermediary step, we will use jsxDEV for everything except\r\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n    // key is explicitly declared to be undefined or not.\r\n\r\n    if (maybeKey !== undefined) {\r\n      {\r\n        checkKeyStringCoercion(maybeKey);\r\n      }\r\n\r\n      key = '' + maybeKey;\r\n    }\r\n\r\n    if (hasValidKey(config)) {\r\n      {\r\n        checkKeyStringCoercion(config.key);\r\n      }\r\n\r\n      key = '' + config.key;\r\n    }\r\n\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n      warnIfStringRefCannotBeAutoConverted(config, self);\r\n    } // Remaining properties are added to a new props object\r\n\r\n\r\n    for (propName in config) {\r\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\r\n        props[propName] = config[propName];\r\n      }\r\n    } // Resolve default props\r\n\r\n\r\n    if (type && type.defaultProps) {\r\n      var defaultProps = type.defaultProps;\r\n\r\n      for (propName in defaultProps) {\r\n        if (props[propName] === undefined) {\r\n          props[propName] = defaultProps[propName];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (key || ref) {\r\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\r\n\r\n      if (key) {\r\n        defineKeyPropWarningGetter(props, displayName);\r\n      }\r\n\r\n      if (ref) {\r\n        defineRefPropWarningGetter(props, displayName);\r\n      }\r\n    }\r\n\r\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\r\n  }\r\n}\r\n\r\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\r\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement$1(element) {\r\n  {\r\n    if (element) {\r\n      var owner = element._owner;\r\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\r\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nvar propTypesMisspellWarningShown;\r\n\r\n{\r\n  propTypesMisspellWarningShown = false;\r\n}\r\n/**\r\n * Verifies the object is a ReactElement.\r\n * See https://reactjs.org/docs/react-api.html#isvalidelement\r\n * @param {?object} object\r\n * @return {boolean} True if `object` is a ReactElement.\r\n * @final\r\n */\r\n\r\n\r\nfunction isValidElement(object) {\r\n  {\r\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\r\n  }\r\n}\r\n\r\nfunction getDeclarationErrorAddendum() {\r\n  {\r\n    if (ReactCurrentOwner$1.current) {\r\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\r\n\r\n      if (name) {\r\n        return '\\n\\nCheck the render method of `' + name + '`.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction getSourceInfoErrorAddendum(source) {\r\n  {\r\n    if (source !== undefined) {\r\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\r\n      var lineNumber = source.lineNumber;\r\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n/**\r\n * Warn if there's no key explicitly set on dynamic arrays of children or\r\n * object keys are not valid. This allows us to keep track of children between\r\n * updates.\r\n */\r\n\r\n\r\nvar ownerHasKeyUseWarning = {};\r\n\r\nfunction getCurrentComponentErrorInfo(parentType) {\r\n  {\r\n    var info = getDeclarationErrorAddendum();\r\n\r\n    if (!info) {\r\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\r\n\r\n      if (parentName) {\r\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\r\n      }\r\n    }\r\n\r\n    return info;\r\n  }\r\n}\r\n/**\r\n * Warn if the element doesn't have an explicit key assigned to it.\r\n * This element is in an array. The array could grow and shrink or be\r\n * reordered. All children that haven't already been validated are required to\r\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\r\n * will only be shown once.\r\n *\r\n * @internal\r\n * @param {ReactElement} element Element that requires a key.\r\n * @param {*} parentType element's parent's type.\r\n */\r\n\r\n\r\nfunction validateExplicitKey(element, parentType) {\r\n  {\r\n    if (!element._store || element._store.validated || element.key != null) {\r\n      return;\r\n    }\r\n\r\n    element._store.validated = true;\r\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\r\n\r\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\r\n      return;\r\n    }\r\n\r\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\r\n    // property, it may be the creator of the child that's responsible for\r\n    // assigning it a key.\r\n\r\n    var childOwner = '';\r\n\r\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\r\n      // Give the component that originally created this child.\r\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\r\n    }\r\n\r\n    setCurrentlyValidatingElement$1(element);\r\n\r\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\r\n\r\n    setCurrentlyValidatingElement$1(null);\r\n  }\r\n}\r\n/**\r\n * Ensure that every element either is passed in a static location, in an\r\n * array with an explicit keys property defined, or in an object literal\r\n * with valid key property.\r\n *\r\n * @internal\r\n * @param {ReactNode} node Statically passed child of any type.\r\n * @param {*} parentType node's parent's type.\r\n */\r\n\r\n\r\nfunction validateChildKeys(node, parentType) {\r\n  {\r\n    if (typeof node !== 'object') {\r\n      return;\r\n    }\r\n\r\n    if (isArray(node)) {\r\n      for (var i = 0; i < node.length; i++) {\r\n        var child = node[i];\r\n\r\n        if (isValidElement(child)) {\r\n          validateExplicitKey(child, parentType);\r\n        }\r\n      }\r\n    } else if (isValidElement(node)) {\r\n      // This element was passed in a valid location.\r\n      if (node._store) {\r\n        node._store.validated = true;\r\n      }\r\n    } else if (node) {\r\n      var iteratorFn = getIteratorFn(node);\r\n\r\n      if (typeof iteratorFn === 'function') {\r\n        // Entry iterators used to provide implicit keys,\r\n        // but now we print a separate warning for them later.\r\n        if (iteratorFn !== node.entries) {\r\n          var iterator = iteratorFn.call(node);\r\n          var step;\r\n\r\n          while (!(step = iterator.next()).done) {\r\n            if (isValidElement(step.value)) {\r\n              validateExplicitKey(step.value, parentType);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * Given an element, validate that its props follow the propTypes definition,\r\n * provided by the type.\r\n *\r\n * @param {ReactElement} element\r\n */\r\n\r\n\r\nfunction validatePropTypes(element) {\r\n  {\r\n    var type = element.type;\r\n\r\n    if (type === null || type === undefined || typeof type === 'string') {\r\n      return;\r\n    }\r\n\r\n    var propTypes;\r\n\r\n    if (typeof type === 'function') {\r\n      propTypes = type.propTypes;\r\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\r\n    // Inner props are checked in the reconciler.\r\n    type.$$typeof === REACT_MEMO_TYPE)) {\r\n      propTypes = type.propTypes;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (propTypes) {\r\n      // Intentionally inside to avoid triggering lazy initializers:\r\n      var name = getComponentNameFromType(type);\r\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\r\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\r\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\r\n\r\n      var _name = getComponentNameFromType(type);\r\n\r\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\r\n    }\r\n\r\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\r\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\r\n    }\r\n  }\r\n}\r\n/**\r\n * Given a fragment, validate that it can only be provided with fragment props\r\n * @param {ReactElement} fragment\r\n */\r\n\r\n\r\nfunction validateFragmentProps(fragment) {\r\n  {\r\n    var keys = Object.keys(fragment.props);\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i];\r\n\r\n      if (key !== 'children' && key !== 'key') {\r\n        setCurrentlyValidatingElement$1(fragment);\r\n\r\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\r\n\r\n        setCurrentlyValidatingElement$1(null);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (fragment.ref !== null) {\r\n      setCurrentlyValidatingElement$1(fragment);\r\n\r\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\r\n\r\n      setCurrentlyValidatingElement$1(null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\r\n  {\r\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\r\n    // succeed and there will likely be errors in render.\r\n\r\n    if (!validType) {\r\n      var info = '';\r\n\r\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\r\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\r\n      }\r\n\r\n      var sourceInfo = getSourceInfoErrorAddendum(source);\r\n\r\n      if (sourceInfo) {\r\n        info += sourceInfo;\r\n      } else {\r\n        info += getDeclarationErrorAddendum();\r\n      }\r\n\r\n      var typeString;\r\n\r\n      if (type === null) {\r\n        typeString = 'null';\r\n      } else if (isArray(type)) {\r\n        typeString = 'array';\r\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\r\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\r\n        info = ' Did you accidentally export a JSX literal instead of a component?';\r\n      } else {\r\n        typeString = typeof type;\r\n      }\r\n\r\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\r\n    }\r\n\r\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\r\n    // TODO: Drop this when these are no longer allowed as the type argument.\r\n\r\n    if (element == null) {\r\n      return element;\r\n    } // Skip key warning if the type isn't valid since our key validation logic\r\n    // doesn't expect a non-string/function type and can throw confusing errors.\r\n    // We don't want exception behavior to differ between dev and prod.\r\n    // (Rendering will throw with a helpful message and as soon as the type is\r\n    // fixed, the key warnings will appear.)\r\n\r\n\r\n    if (validType) {\r\n      var children = props.children;\r\n\r\n      if (children !== undefined) {\r\n        if (isStaticChildren) {\r\n          if (isArray(children)) {\r\n            for (var i = 0; i < children.length; i++) {\r\n              validateChildKeys(children[i], type);\r\n            }\r\n\r\n            if (Object.freeze) {\r\n              Object.freeze(children);\r\n            }\r\n          } else {\r\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\r\n          }\r\n        } else {\r\n          validateChildKeys(children, type);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (type === REACT_FRAGMENT_TYPE) {\r\n      validateFragmentProps(element);\r\n    } else {\r\n      validatePropTypes(element);\r\n    }\r\n\r\n    return element;\r\n  }\r\n} // These two functions exist to still get child warnings in dev\r\n\r\nvar jsxDEV$1 =  jsxWithValidation ;\r\n\r\nexports.Fragment = REACT_FRAGMENT_TYPE;\r\nexports.jsxDEV = jsxDEV$1;\r\n  })();\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\r\n * @license React\r\n * react-jsx-runtime.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\nif (true) {\r\n  (function() {\r\n'use strict';\r\n\r\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\r\n\r\n// ATTENTION\r\n// When adding new symbols to this file,\r\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\r\n// The Symbol used to tag the ReactElement-like types.\r\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\r\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\r\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\r\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\r\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\r\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\r\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\r\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\r\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\r\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\r\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\r\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\r\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\r\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\r\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\r\nfunction getIteratorFn(maybeIterable) {\r\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\r\n    return null;\r\n  }\r\n\r\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\r\n\r\n  if (typeof maybeIterator === 'function') {\r\n    return maybeIterator;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\r\n\r\nfunction error(format) {\r\n  {\r\n    {\r\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n        args[_key2 - 1] = arguments[_key2];\r\n      }\r\n\r\n      printWarning('error', format, args);\r\n    }\r\n  }\r\n}\r\n\r\nfunction printWarning(level, format, args) {\r\n  // When changing this logic, you might want to also\r\n  // update consoleWithStackDev.www.js as well.\r\n  {\r\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\r\n\r\n    if (stack !== '') {\r\n      format += '%s';\r\n      args = args.concat([stack]);\r\n    } // eslint-disable-next-line react-internal/safe-string-coercion\r\n\r\n\r\n    var argsWithFormat = args.map(function (item) {\r\n      return String(item);\r\n    }); // Careful: RN currently depends on this prefix\r\n\r\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\r\n    // breaks IE9: https://github.com/facebook/react/issues/13610\r\n    // eslint-disable-next-line react-internal/no-production-logging\r\n\r\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\r\n  }\r\n}\r\n\r\n// -----------------------------------------------------------------------------\r\n\r\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\r\nvar enableCacheElement = false;\r\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\r\n\r\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\r\n// stuff. Intended to enable React core members to more easily debug scheduling\r\n// issues in DEV builds.\r\n\r\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\r\n\r\nvar REACT_MODULE_REFERENCE;\r\n\r\n{\r\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\r\n}\r\n\r\nfunction isValidElementType(type) {\r\n  if (typeof type === 'string' || typeof type === 'function') {\r\n    return true;\r\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\r\n\r\n\r\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\r\n    return true;\r\n  }\r\n\r\n  if (typeof type === 'object' && type !== null) {\r\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\r\n    // types supported by any Flight configuration anywhere since\r\n    // we don't know which Flight build this will end up being used\r\n    // with.\r\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getWrappedName(outerType, innerType, wrapperName) {\r\n  var displayName = outerType.displayName;\r\n\r\n  if (displayName) {\r\n    return displayName;\r\n  }\r\n\r\n  var functionName = innerType.displayName || innerType.name || '';\r\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\r\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\r\n\r\n\r\nfunction getContextName(type) {\r\n  return type.displayName || 'Context';\r\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\r\n\r\n\r\nfunction getComponentNameFromType(type) {\r\n  if (type == null) {\r\n    // Host root, text node or just invalid type.\r\n    return null;\r\n  }\r\n\r\n  {\r\n    if (typeof type.tag === 'number') {\r\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\r\n    }\r\n  }\r\n\r\n  if (typeof type === 'function') {\r\n    return type.displayName || type.name || null;\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return type;\r\n  }\r\n\r\n  switch (type) {\r\n    case REACT_FRAGMENT_TYPE:\r\n      return 'Fragment';\r\n\r\n    case REACT_PORTAL_TYPE:\r\n      return 'Portal';\r\n\r\n    case REACT_PROFILER_TYPE:\r\n      return 'Profiler';\r\n\r\n    case REACT_STRICT_MODE_TYPE:\r\n      return 'StrictMode';\r\n\r\n    case REACT_SUSPENSE_TYPE:\r\n      return 'Suspense';\r\n\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return 'SuspenseList';\r\n\r\n  }\r\n\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_CONTEXT_TYPE:\r\n        var context = type;\r\n        return getContextName(context) + '.Consumer';\r\n\r\n      case REACT_PROVIDER_TYPE:\r\n        var provider = type;\r\n        return getContextName(provider._context) + '.Provider';\r\n\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return getWrappedName(type, type.render, 'ForwardRef');\r\n\r\n      case REACT_MEMO_TYPE:\r\n        var outerName = type.displayName || null;\r\n\r\n        if (outerName !== null) {\r\n          return outerName;\r\n        }\r\n\r\n        return getComponentNameFromType(type.type) || 'Memo';\r\n\r\n      case REACT_LAZY_TYPE:\r\n        {\r\n          var lazyComponent = type;\r\n          var payload = lazyComponent._payload;\r\n          var init = lazyComponent._init;\r\n\r\n          try {\r\n            return getComponentNameFromType(init(payload));\r\n          } catch (x) {\r\n            return null;\r\n          }\r\n        }\r\n\r\n      // eslint-disable-next-line no-fallthrough\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar assign = Object.assign;\r\n\r\n// Helpers to patch console.logs to avoid logging during side-effect free\r\n// replaying on render function. This currently only patches the object\r\n// lazily which won't cover if the log function was extracted eagerly.\r\n// We could also eagerly patch the method.\r\nvar disabledDepth = 0;\r\nvar prevLog;\r\nvar prevInfo;\r\nvar prevWarn;\r\nvar prevError;\r\nvar prevGroup;\r\nvar prevGroupCollapsed;\r\nvar prevGroupEnd;\r\n\r\nfunction disabledLog() {}\r\n\r\ndisabledLog.__reactDisabledLog = true;\r\nfunction disableLogs() {\r\n  {\r\n    if (disabledDepth === 0) {\r\n      /* eslint-disable react-internal/no-production-logging */\r\n      prevLog = console.log;\r\n      prevInfo = console.info;\r\n      prevWarn = console.warn;\r\n      prevError = console.error;\r\n      prevGroup = console.group;\r\n      prevGroupCollapsed = console.groupCollapsed;\r\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\r\n\r\n      var props = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value: disabledLog,\r\n        writable: true\r\n      }; // $FlowFixMe Flow thinks console is immutable.\r\n\r\n      Object.defineProperties(console, {\r\n        info: props,\r\n        log: props,\r\n        warn: props,\r\n        error: props,\r\n        group: props,\r\n        groupCollapsed: props,\r\n        groupEnd: props\r\n      });\r\n      /* eslint-enable react-internal/no-production-logging */\r\n    }\r\n\r\n    disabledDepth++;\r\n  }\r\n}\r\nfunction reenableLogs() {\r\n  {\r\n    disabledDepth--;\r\n\r\n    if (disabledDepth === 0) {\r\n      /* eslint-disable react-internal/no-production-logging */\r\n      var props = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        writable: true\r\n      }; // $FlowFixMe Flow thinks console is immutable.\r\n\r\n      Object.defineProperties(console, {\r\n        log: assign({}, props, {\r\n          value: prevLog\r\n        }),\r\n        info: assign({}, props, {\r\n          value: prevInfo\r\n        }),\r\n        warn: assign({}, props, {\r\n          value: prevWarn\r\n        }),\r\n        error: assign({}, props, {\r\n          value: prevError\r\n        }),\r\n        group: assign({}, props, {\r\n          value: prevGroup\r\n        }),\r\n        groupCollapsed: assign({}, props, {\r\n          value: prevGroupCollapsed\r\n        }),\r\n        groupEnd: assign({}, props, {\r\n          value: prevGroupEnd\r\n        })\r\n      });\r\n      /* eslint-enable react-internal/no-production-logging */\r\n    }\r\n\r\n    if (disabledDepth < 0) {\r\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\r\nvar prefix;\r\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\r\n  {\r\n    if (prefix === undefined) {\r\n      // Extract the VM specific prefix used by each line.\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\r\n        prefix = match && match[1] || '';\r\n      }\r\n    } // We use the prefix to ensure our stacks line up with native stack frames.\r\n\r\n\r\n    return '\\n' + prefix + name;\r\n  }\r\n}\r\nvar reentry = false;\r\nvar componentFrameCache;\r\n\r\n{\r\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\r\n  componentFrameCache = new PossiblyWeakMap();\r\n}\r\n\r\nfunction describeNativeComponentFrame(fn, construct) {\r\n  // If something asked for a stack inside a fake render, it should get ignored.\r\n  if ( !fn || reentry) {\r\n    return '';\r\n  }\r\n\r\n  {\r\n    var frame = componentFrameCache.get(fn);\r\n\r\n    if (frame !== undefined) {\r\n      return frame;\r\n    }\r\n  }\r\n\r\n  var control;\r\n  reentry = true;\r\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\r\n\r\n  Error.prepareStackTrace = undefined;\r\n  var previousDispatcher;\r\n\r\n  {\r\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\r\n    // for warnings.\r\n\r\n    ReactCurrentDispatcher.current = null;\r\n    disableLogs();\r\n  }\r\n\r\n  try {\r\n    // This should throw.\r\n    if (construct) {\r\n      // Something should be setting the props in the constructor.\r\n      var Fake = function () {\r\n        throw Error();\r\n      }; // $FlowFixMe\r\n\r\n\r\n      Object.defineProperty(Fake.prototype, 'props', {\r\n        set: function () {\r\n          // We use a throwing setter instead of frozen or non-writable props\r\n          // because that won't throw in a non-strict mode function.\r\n          throw Error();\r\n        }\r\n      });\r\n\r\n      if (typeof Reflect === 'object' && Reflect.construct) {\r\n        // We construct a different control for this case to include any extra\r\n        // frames added by the construct call.\r\n        try {\r\n          Reflect.construct(Fake, []);\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n\r\n        Reflect.construct(fn, [], Fake);\r\n      } else {\r\n        try {\r\n          Fake.call();\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n\r\n        fn.call(Fake.prototype);\r\n      }\r\n    } else {\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        control = x;\r\n      }\r\n\r\n      fn();\r\n    }\r\n  } catch (sample) {\r\n    // This is inlined manually because closure doesn't do it for us.\r\n    if (sample && control && typeof sample.stack === 'string') {\r\n      // This extracts the first frame from the sample that isn't also in the control.\r\n      // Skipping one frame that we assume is the frame that calls the two.\r\n      var sampleLines = sample.stack.split('\\n');\r\n      var controlLines = control.stack.split('\\n');\r\n      var s = sampleLines.length - 1;\r\n      var c = controlLines.length - 1;\r\n\r\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\r\n        // We expect at least one stack frame to be shared.\r\n        // Typically this will be the root most one. However, stack frames may be\r\n        // cut off due to maximum stack limits. In this case, one maybe cut off\r\n        // earlier than the other. We assume that the sample is longer or the same\r\n        // and there for cut off earlier. So we should find the root most frame in\r\n        // the sample somewhere in the control.\r\n        c--;\r\n      }\r\n\r\n      for (; s >= 1 && c >= 0; s--, c--) {\r\n        // Next we find the first one that isn't the same which should be the\r\n        // frame that called our sample function and the control.\r\n        if (sampleLines[s] !== controlLines[c]) {\r\n          // In V8, the first line is describing the message but other VMs don't.\r\n          // If we're about to return the first line, and the control is also on the same\r\n          // line, that's a pretty good indicator that our sample threw at same line as\r\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\r\n          // This can happen if you passed a class to function component, or non-function.\r\n          if (s !== 1 || c !== 1) {\r\n            do {\r\n              s--;\r\n              c--; // We may still have similar intermediate frames from the construct call.\r\n              // The next one that isn't the same should be our match though.\r\n\r\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\r\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\r\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\r\n                // but we have a user-provided \"displayName\"\r\n                // splice it in to make the stack more readable.\r\n\r\n\r\n                if (fn.displayName && _frame.includes('<anonymous>')) {\r\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\r\n                }\r\n\r\n                {\r\n                  if (typeof fn === 'function') {\r\n                    componentFrameCache.set(fn, _frame);\r\n                  }\r\n                } // Return the line we found.\r\n\r\n\r\n                return _frame;\r\n              }\r\n            } while (s >= 1 && c >= 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } finally {\r\n    reentry = false;\r\n\r\n    {\r\n      ReactCurrentDispatcher.current = previousDispatcher;\r\n      reenableLogs();\r\n    }\r\n\r\n    Error.prepareStackTrace = previousPrepareStackTrace;\r\n  } // Fallback to just using the name if we couldn't make it throw.\r\n\r\n\r\n  var name = fn ? fn.displayName || fn.name : '';\r\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\r\n\r\n  {\r\n    if (typeof fn === 'function') {\r\n      componentFrameCache.set(fn, syntheticFrame);\r\n    }\r\n  }\r\n\r\n  return syntheticFrame;\r\n}\r\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\r\n  {\r\n    return describeNativeComponentFrame(fn, false);\r\n  }\r\n}\r\n\r\nfunction shouldConstruct(Component) {\r\n  var prototype = Component.prototype;\r\n  return !!(prototype && prototype.isReactComponent);\r\n}\r\n\r\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\r\n\r\n  if (type == null) {\r\n    return '';\r\n  }\r\n\r\n  if (typeof type === 'function') {\r\n    {\r\n      return describeNativeComponentFrame(type, shouldConstruct(type));\r\n    }\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return describeBuiltInComponentFrame(type);\r\n  }\r\n\r\n  switch (type) {\r\n    case REACT_SUSPENSE_TYPE:\r\n      return describeBuiltInComponentFrame('Suspense');\r\n\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return describeBuiltInComponentFrame('SuspenseList');\r\n  }\r\n\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return describeFunctionComponentFrame(type.render);\r\n\r\n      case REACT_MEMO_TYPE:\r\n        // Memo may contain any component type so we recursively resolve it.\r\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\r\n\r\n      case REACT_LAZY_TYPE:\r\n        {\r\n          var lazyComponent = type;\r\n          var payload = lazyComponent._payload;\r\n          var init = lazyComponent._init;\r\n\r\n          try {\r\n            // Lazy may contain any component type so we recursively resolve it.\r\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\r\n          } catch (x) {}\r\n        }\r\n    }\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nvar loggedTypeFailures = {};\r\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement(element) {\r\n  {\r\n    if (element) {\r\n      var owner = element._owner;\r\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\r\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\r\n  {\r\n    // $FlowFixMe This is okay but Flow doesn't know it.\r\n    var has = Function.call.bind(hasOwnProperty);\r\n\r\n    for (var typeSpecName in typeSpecs) {\r\n      if (has(typeSpecs, typeSpecName)) {\r\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\r\n        // fail the render phase where it didn't fail before. So we log it.\r\n        // After these have been cleaned up, we'll let them throw.\r\n\r\n        try {\r\n          // This is intentionally an invariant that gets caught. It's the same\r\n          // behavior as without this statement except with a better message.\r\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\r\n            // eslint-disable-next-line react-internal/prod-error-codes\r\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\r\n            err.name = 'Invariant Violation';\r\n            throw err;\r\n          }\r\n\r\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\r\n        } catch (ex) {\r\n          error$1 = ex;\r\n        }\r\n\r\n        if (error$1 && !(error$1 instanceof Error)) {\r\n          setCurrentlyValidatingElement(element);\r\n\r\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\r\n\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n\r\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\r\n          // Only monitor this failure once because there tends to be a lot of the\r\n          // same error.\r\n          loggedTypeFailures[error$1.message] = true;\r\n          setCurrentlyValidatingElement(element);\r\n\r\n          error('Failed %s type: %s', location, error$1.message);\r\n\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\r\n\r\nfunction isArray(a) {\r\n  return isArrayImpl(a);\r\n}\r\n\r\n/*\r\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\r\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\r\n *\r\n * The functions in this module will throw an easier-to-understand,\r\n * easier-to-debug exception with a clear errors message message explaining the\r\n * problem. (Instead of a confusing exception thrown inside the implementation\r\n * of the `value` object).\r\n */\r\n// $FlowFixMe only called in DEV, so void return is not possible.\r\nfunction typeName(value) {\r\n  {\r\n    // toStringTag is needed for namespaced types like Temporal.Instant\r\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\r\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\r\n    return type;\r\n  }\r\n} // $FlowFixMe only called in DEV, so void return is not possible.\r\n\r\n\r\nfunction willCoercionThrow(value) {\r\n  {\r\n    try {\r\n      testStringCoercion(value);\r\n      return false;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction testStringCoercion(value) {\r\n  // If you ended up here by following an exception call stack, here's what's\r\n  // happened: you supplied an object or symbol value to React (as a prop, key,\r\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\r\n  // coerce it to a string using `'' + value`, an exception was thrown.\r\n  //\r\n  // The most common types that will cause this exception are `Symbol` instances\r\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\r\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\r\n  // exception. (Library authors do this to prevent users from using built-in\r\n  // numeric operators like `+` or comparison operators like `>=` because custom\r\n  // methods are needed to perform accurate arithmetic or comparison.)\r\n  //\r\n  // To fix the problem, coerce this object or symbol value to a string before\r\n  // passing it to React. The most reliable way is usually `String(value)`.\r\n  //\r\n  // To find which value is throwing, check the browser or debugger console.\r\n  // Before this exception was thrown, there should be `console.error` output\r\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\r\n  // problem and how that type was used: key, atrribute, input value prop, etc.\r\n  // In most cases, this console output also shows the component and its\r\n  // ancestor components where the exception happened.\r\n  //\r\n  // eslint-disable-next-line react-internal/safe-string-coercion\r\n  return '' + value;\r\n}\r\nfunction checkKeyStringCoercion(value) {\r\n  {\r\n    if (willCoercionThrow(value)) {\r\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\r\n\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\r\nvar RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true\r\n};\r\nvar specialPropKeyWarningShown;\r\nvar specialPropRefWarningShown;\r\nvar didWarnAboutStringRefs;\r\n\r\n{\r\n  didWarnAboutStringRefs = {};\r\n}\r\n\r\nfunction hasValidRef(config) {\r\n  {\r\n    if (hasOwnProperty.call(config, 'ref')) {\r\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\r\n\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config.ref !== undefined;\r\n}\r\n\r\nfunction hasValidKey(config) {\r\n  {\r\n    if (hasOwnProperty.call(config, 'key')) {\r\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\r\n\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config.key !== undefined;\r\n}\r\n\r\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\r\n  {\r\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\r\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\r\n\r\n      if (!didWarnAboutStringRefs[componentName]) {\r\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\r\n\r\n        didWarnAboutStringRefs[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction defineKeyPropWarningGetter(props, displayName) {\r\n  {\r\n    var warnAboutAccessingKey = function () {\r\n      if (!specialPropKeyWarningShown) {\r\n        specialPropKeyWarningShown = true;\r\n\r\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\r\n      }\r\n    };\r\n\r\n    warnAboutAccessingKey.isReactWarning = true;\r\n    Object.defineProperty(props, 'key', {\r\n      get: warnAboutAccessingKey,\r\n      configurable: true\r\n    });\r\n  }\r\n}\r\n\r\nfunction defineRefPropWarningGetter(props, displayName) {\r\n  {\r\n    var warnAboutAccessingRef = function () {\r\n      if (!specialPropRefWarningShown) {\r\n        specialPropRefWarningShown = true;\r\n\r\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\r\n      }\r\n    };\r\n\r\n    warnAboutAccessingRef.isReactWarning = true;\r\n    Object.defineProperty(props, 'ref', {\r\n      get: warnAboutAccessingRef,\r\n      configurable: true\r\n    });\r\n  }\r\n}\r\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\r\n\r\n\r\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\r\n  var element = {\r\n    // This tag allows us to uniquely identify this as a React Element\r\n    $$typeof: REACT_ELEMENT_TYPE,\r\n    // Built-in properties that belong on the element\r\n    type: type,\r\n    key: key,\r\n    ref: ref,\r\n    props: props,\r\n    // Record the component responsible for creating this element.\r\n    _owner: owner\r\n  };\r\n\r\n  {\r\n    // The validation flag is currently mutative. We put it on\r\n    // an external backing store so that we can freeze the whole object.\r\n    // This can be replaced with a WeakMap once they are implemented in\r\n    // commonly used development environments.\r\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\r\n    // the validation flag non-enumerable (where possible, which should\r\n    // include every environment we run tests in), so the test framework\r\n    // ignores it.\r\n\r\n    Object.defineProperty(element._store, 'validated', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: true,\r\n      value: false\r\n    }); // self and source are DEV only properties.\r\n\r\n    Object.defineProperty(element, '_self', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: self\r\n    }); // Two elements created in two different places should be considered\r\n    // equal for testing purposes and therefore we hide it from enumeration.\r\n\r\n    Object.defineProperty(element, '_source', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: source\r\n    });\r\n\r\n    if (Object.freeze) {\r\n      Object.freeze(element.props);\r\n      Object.freeze(element);\r\n    }\r\n  }\r\n\r\n  return element;\r\n};\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\n\r\nfunction jsxDEV(type, config, maybeKey, source, self) {\r\n  {\r\n    var propName; // Reserved names are extracted\r\n\r\n    var props = {};\r\n    var key = null;\r\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\r\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n    // but as an intermediary step, we will use jsxDEV for everything except\r\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n    // key is explicitly declared to be undefined or not.\r\n\r\n    if (maybeKey !== undefined) {\r\n      {\r\n        checkKeyStringCoercion(maybeKey);\r\n      }\r\n\r\n      key = '' + maybeKey;\r\n    }\r\n\r\n    if (hasValidKey(config)) {\r\n      {\r\n        checkKeyStringCoercion(config.key);\r\n      }\r\n\r\n      key = '' + config.key;\r\n    }\r\n\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n      warnIfStringRefCannotBeAutoConverted(config, self);\r\n    } // Remaining properties are added to a new props object\r\n\r\n\r\n    for (propName in config) {\r\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\r\n        props[propName] = config[propName];\r\n      }\r\n    } // Resolve default props\r\n\r\n\r\n    if (type && type.defaultProps) {\r\n      var defaultProps = type.defaultProps;\r\n\r\n      for (propName in defaultProps) {\r\n        if (props[propName] === undefined) {\r\n          props[propName] = defaultProps[propName];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (key || ref) {\r\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\r\n\r\n      if (key) {\r\n        defineKeyPropWarningGetter(props, displayName);\r\n      }\r\n\r\n      if (ref) {\r\n        defineRefPropWarningGetter(props, displayName);\r\n      }\r\n    }\r\n\r\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\r\n  }\r\n}\r\n\r\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\r\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement$1(element) {\r\n  {\r\n    if (element) {\r\n      var owner = element._owner;\r\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\r\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nvar propTypesMisspellWarningShown;\r\n\r\n{\r\n  propTypesMisspellWarningShown = false;\r\n}\r\n/**\r\n * Verifies the object is a ReactElement.\r\n * See https://reactjs.org/docs/react-api.html#isvalidelement\r\n * @param {?object} object\r\n * @return {boolean} True if `object` is a ReactElement.\r\n * @final\r\n */\r\n\r\n\r\nfunction isValidElement(object) {\r\n  {\r\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\r\n  }\r\n}\r\n\r\nfunction getDeclarationErrorAddendum() {\r\n  {\r\n    if (ReactCurrentOwner$1.current) {\r\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\r\n\r\n      if (name) {\r\n        return '\\n\\nCheck the render method of `' + name + '`.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction getSourceInfoErrorAddendum(source) {\r\n  {\r\n    if (source !== undefined) {\r\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\r\n      var lineNumber = source.lineNumber;\r\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n/**\r\n * Warn if there's no key explicitly set on dynamic arrays of children or\r\n * object keys are not valid. This allows us to keep track of children between\r\n * updates.\r\n */\r\n\r\n\r\nvar ownerHasKeyUseWarning = {};\r\n\r\nfunction getCurrentComponentErrorInfo(parentType) {\r\n  {\r\n    var info = getDeclarationErrorAddendum();\r\n\r\n    if (!info) {\r\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\r\n\r\n      if (parentName) {\r\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\r\n      }\r\n    }\r\n\r\n    return info;\r\n  }\r\n}\r\n/**\r\n * Warn if the element doesn't have an explicit key assigned to it.\r\n * This element is in an array. The array could grow and shrink or be\r\n * reordered. All children that haven't already been validated are required to\r\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\r\n * will only be shown once.\r\n *\r\n * @internal\r\n * @param {ReactElement} element Element that requires a key.\r\n * @param {*} parentType element's parent's type.\r\n */\r\n\r\n\r\nfunction validateExplicitKey(element, parentType) {\r\n  {\r\n    if (!element._store || element._store.validated || element.key != null) {\r\n      return;\r\n    }\r\n\r\n    element._store.validated = true;\r\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\r\n\r\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\r\n      return;\r\n    }\r\n\r\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\r\n    // property, it may be the creator of the child that's responsible for\r\n    // assigning it a key.\r\n\r\n    var childOwner = '';\r\n\r\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\r\n      // Give the component that originally created this child.\r\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\r\n    }\r\n\r\n    setCurrentlyValidatingElement$1(element);\r\n\r\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\r\n\r\n    setCurrentlyValidatingElement$1(null);\r\n  }\r\n}\r\n/**\r\n * Ensure that every element either is passed in a static location, in an\r\n * array with an explicit keys property defined, or in an object literal\r\n * with valid key property.\r\n *\r\n * @internal\r\n * @param {ReactNode} node Statically passed child of any type.\r\n * @param {*} parentType node's parent's type.\r\n */\r\n\r\n\r\nfunction validateChildKeys(node, parentType) {\r\n  {\r\n    if (typeof node !== 'object') {\r\n      return;\r\n    }\r\n\r\n    if (isArray(node)) {\r\n      for (var i = 0; i < node.length; i++) {\r\n        var child = node[i];\r\n\r\n        if (isValidElement(child)) {\r\n          validateExplicitKey(child, parentType);\r\n        }\r\n      }\r\n    } else if (isValidElement(node)) {\r\n      // This element was passed in a valid location.\r\n      if (node._store) {\r\n        node._store.validated = true;\r\n      }\r\n    } else if (node) {\r\n      var iteratorFn = getIteratorFn(node);\r\n\r\n      if (typeof iteratorFn === 'function') {\r\n        // Entry iterators used to provide implicit keys,\r\n        // but now we print a separate warning for them later.\r\n        if (iteratorFn !== node.entries) {\r\n          var iterator = iteratorFn.call(node);\r\n          var step;\r\n\r\n          while (!(step = iterator.next()).done) {\r\n            if (isValidElement(step.value)) {\r\n              validateExplicitKey(step.value, parentType);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * Given an element, validate that its props follow the propTypes definition,\r\n * provided by the type.\r\n *\r\n * @param {ReactElement} element\r\n */\r\n\r\n\r\nfunction validatePropTypes(element) {\r\n  {\r\n    var type = element.type;\r\n\r\n    if (type === null || type === undefined || typeof type === 'string') {\r\n      return;\r\n    }\r\n\r\n    var propTypes;\r\n\r\n    if (typeof type === 'function') {\r\n      propTypes = type.propTypes;\r\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\r\n    // Inner props are checked in the reconciler.\r\n    type.$$typeof === REACT_MEMO_TYPE)) {\r\n      propTypes = type.propTypes;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (propTypes) {\r\n      // Intentionally inside to avoid triggering lazy initializers:\r\n      var name = getComponentNameFromType(type);\r\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\r\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\r\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\r\n\r\n      var _name = getComponentNameFromType(type);\r\n\r\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\r\n    }\r\n\r\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\r\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\r\n    }\r\n  }\r\n}\r\n/**\r\n * Given a fragment, validate that it can only be provided with fragment props\r\n * @param {ReactElement} fragment\r\n */\r\n\r\n\r\nfunction validateFragmentProps(fragment) {\r\n  {\r\n    var keys = Object.keys(fragment.props);\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i];\r\n\r\n      if (key !== 'children' && key !== 'key') {\r\n        setCurrentlyValidatingElement$1(fragment);\r\n\r\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\r\n\r\n        setCurrentlyValidatingElement$1(null);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (fragment.ref !== null) {\r\n      setCurrentlyValidatingElement$1(fragment);\r\n\r\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\r\n\r\n      setCurrentlyValidatingElement$1(null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\r\n  {\r\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\r\n    // succeed and there will likely be errors in render.\r\n\r\n    if (!validType) {\r\n      var info = '';\r\n\r\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\r\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\r\n      }\r\n\r\n      var sourceInfo = getSourceInfoErrorAddendum(source);\r\n\r\n      if (sourceInfo) {\r\n        info += sourceInfo;\r\n      } else {\r\n        info += getDeclarationErrorAddendum();\r\n      }\r\n\r\n      var typeString;\r\n\r\n      if (type === null) {\r\n        typeString = 'null';\r\n      } else if (isArray(type)) {\r\n        typeString = 'array';\r\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\r\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\r\n        info = ' Did you accidentally export a JSX literal instead of a component?';\r\n      } else {\r\n        typeString = typeof type;\r\n      }\r\n\r\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\r\n    }\r\n\r\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\r\n    // TODO: Drop this when these are no longer allowed as the type argument.\r\n\r\n    if (element == null) {\r\n      return element;\r\n    } // Skip key warning if the type isn't valid since our key validation logic\r\n    // doesn't expect a non-string/function type and can throw confusing errors.\r\n    // We don't want exception behavior to differ between dev and prod.\r\n    // (Rendering will throw with a helpful message and as soon as the type is\r\n    // fixed, the key warnings will appear.)\r\n\r\n\r\n    if (validType) {\r\n      var children = props.children;\r\n\r\n      if (children !== undefined) {\r\n        if (isStaticChildren) {\r\n          if (isArray(children)) {\r\n            for (var i = 0; i < children.length; i++) {\r\n              validateChildKeys(children[i], type);\r\n            }\r\n\r\n            if (Object.freeze) {\r\n              Object.freeze(children);\r\n            }\r\n          } else {\r\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\r\n          }\r\n        } else {\r\n          validateChildKeys(children, type);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (type === REACT_FRAGMENT_TYPE) {\r\n      validateFragmentProps(element);\r\n    } else {\r\n      validatePropTypes(element);\r\n    }\r\n\r\n    return element;\r\n  }\r\n} // These two functions exist to still get child warnings in dev\r\n// even with the prod transform. This means that jsxDEV is purely\r\n// opt-in behavior for better messages but that we won't stop\r\n// giving you warnings if you use production apis.\r\n\r\nfunction jsxWithValidationStatic(type, props, key) {\r\n  {\r\n    return jsxWithValidation(type, props, key, true);\r\n  }\r\n}\r\nfunction jsxWithValidationDynamic(type, props, key) {\r\n  {\r\n    return jsxWithValidation(type, props, key, false);\r\n  }\r\n}\r\n\r\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\r\n// for now we can ship identical prod functions\r\n\r\nvar jsxs =  jsxWithValidationStatic ;\r\n\r\nexports.Fragment = REACT_FRAGMENT_TYPE;\r\nexports.jsx = jsx;\r\nexports.jsxs = jsxs;\r\n  })();\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\n\r\nif (false) {} else {\r\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsdUpBQXNFO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/NTc3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XHJcbn0gZWxzZSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\r\n\r\nif (false) {} else {\r\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-runtime.development.js\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSwrSUFBa0U7QUFDcEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzPzM0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XHJcbn0gZWxzZSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-runtime.js\n"));

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _extends; }\n/* harmony export */ });\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcz81NWViIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xyXG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XHJcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxuICB9O1xyXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/extends.js\n"));

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _objectWithoutPropertiesLoose; }\n/* harmony export */ });\nfunction _objectWithoutPropertiesLoose(source, excluded) {\r\n  if (source == null) return {};\r\n  var target = {};\r\n  var sourceKeys = Object.keys(source);\r\n  var key, i;\r\n  for (i = 0; i < sourceKeys.length; i++) {\r\n    key = sourceKeys[i];\r\n    if (excluded.indexOf(key) >= 0) continue;\r\n    target[key] = source[key];\r\n  }\r\n  return target;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcz9hMDRjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcclxuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcclxuICB2YXIgdGFyZ2V0ID0ge307XHJcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xyXG4gIHZhciBrZXksIGk7XHJcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XHJcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xyXG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIHRhcmdldDtcclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/autocomplete/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@codemirror/autocomplete/dist/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompletionContext\": function() { return /* binding */ CompletionContext; },\n/* harmony export */   \"acceptCompletion\": function() { return /* binding */ acceptCompletion; },\n/* harmony export */   \"autocompletion\": function() { return /* binding */ autocompletion; },\n/* harmony export */   \"clearSnippet\": function() { return /* binding */ clearSnippet; },\n/* harmony export */   \"closeBrackets\": function() { return /* binding */ closeBrackets; },\n/* harmony export */   \"closeBracketsKeymap\": function() { return /* binding */ closeBracketsKeymap; },\n/* harmony export */   \"closeCompletion\": function() { return /* binding */ closeCompletion; },\n/* harmony export */   \"completeAnyWord\": function() { return /* binding */ completeAnyWord; },\n/* harmony export */   \"completeFromList\": function() { return /* binding */ completeFromList; },\n/* harmony export */   \"completionKeymap\": function() { return /* binding */ completionKeymap; },\n/* harmony export */   \"completionStatus\": function() { return /* binding */ completionStatus; },\n/* harmony export */   \"currentCompletions\": function() { return /* binding */ currentCompletions; },\n/* harmony export */   \"deleteBracketPair\": function() { return /* binding */ deleteBracketPair; },\n/* harmony export */   \"ifIn\": function() { return /* binding */ ifIn; },\n/* harmony export */   \"ifNotIn\": function() { return /* binding */ ifNotIn; },\n/* harmony export */   \"insertBracket\": function() { return /* binding */ insertBracket; },\n/* harmony export */   \"insertCompletionText\": function() { return /* binding */ insertCompletionText; },\n/* harmony export */   \"moveCompletionSelection\": function() { return /* binding */ moveCompletionSelection; },\n/* harmony export */   \"nextSnippetField\": function() { return /* binding */ nextSnippetField; },\n/* harmony export */   \"pickedCompletion\": function() { return /* binding */ pickedCompletion; },\n/* harmony export */   \"prevSnippetField\": function() { return /* binding */ prevSnippetField; },\n/* harmony export */   \"selectedCompletion\": function() { return /* binding */ selectedCompletion; },\n/* harmony export */   \"selectedCompletionIndex\": function() { return /* binding */ selectedCompletionIndex; },\n/* harmony export */   \"setSelectedCompletion\": function() { return /* binding */ setSelectedCompletion; },\n/* harmony export */   \"snippet\": function() { return /* binding */ snippet; },\n/* harmony export */   \"snippetCompletion\": function() { return /* binding */ snippetCompletion; },\n/* harmony export */   \"snippetKeymap\": function() { return /* binding */ snippetKeymap; },\n/* harmony export */   \"startCompletion\": function() { return /* binding */ startCompletion; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/language */ \"./node_modules/@codemirror/language/dist/index.js\");\n\r\n\r\n\r\n\r\n/**\r\nAn instance of this is passed to completion source functions.\r\n*/\r\nclass CompletionContext {\r\n    /**\r\n    Create a new completion context. (Mostly useful for testing\r\n    completion sources—in the editor, the extension will create\r\n    these for you.)\r\n    */\r\n    constructor(\r\n    /**\r\n    The editor state that the completion happens in.\r\n    */\r\n    state, \r\n    /**\r\n    The position at which the completion is happening.\r\n    */\r\n    pos, \r\n    /**\r\n    Indicates whether completion was activated explicitly, or\r\n    implicitly by typing. The usual way to respond to this is to\r\n    only return completions when either there is part of a\r\n    completable entity before the cursor, or `explicit` is true.\r\n    */\r\n    explicit) {\r\n        this.state = state;\r\n        this.pos = pos;\r\n        this.explicit = explicit;\r\n        /**\r\n        @internal\r\n        */\r\n        this.abortListeners = [];\r\n    }\r\n    /**\r\n    Get the extent, content, and (if there is a token) type of the\r\n    token before `this.pos`.\r\n    */\r\n    tokenBefore(types) {\r\n        let token = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(this.state).resolveInner(this.pos, -1);\r\n        while (token && types.indexOf(token.name) < 0)\r\n            token = token.parent;\r\n        return token ? { from: token.from, to: this.pos,\r\n            text: this.state.sliceDoc(token.from, this.pos),\r\n            type: token.type } : null;\r\n    }\r\n    /**\r\n    Get the match of the given expression directly before the\r\n    cursor.\r\n    */\r\n    matchBefore(expr) {\r\n        let line = this.state.doc.lineAt(this.pos);\r\n        let start = Math.max(line.from, this.pos - 250);\r\n        let str = line.text.slice(start - line.from, this.pos - line.from);\r\n        let found = str.search(ensureAnchor(expr, false));\r\n        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };\r\n    }\r\n    /**\r\n    Yields true when the query has been aborted. Can be useful in\r\n    asynchronous queries to avoid doing work that will be ignored.\r\n    */\r\n    get aborted() { return this.abortListeners == null; }\r\n    /**\r\n    Allows you to register abort handlers, which will be called when\r\n    the query is\r\n    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\r\n    */\r\n    addEventListener(type, listener) {\r\n        if (type == \"abort\" && this.abortListeners)\r\n            this.abortListeners.push(listener);\r\n    }\r\n}\r\nfunction toSet(chars) {\r\n    let flat = Object.keys(chars).join(\"\");\r\n    let words = /\\w/.test(flat);\r\n    if (words)\r\n        flat = flat.replace(/\\w/g, \"\");\r\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\r\n}\r\nfunction prefixMatch(options) {\r\n    let first = Object.create(null), rest = Object.create(null);\r\n    for (let { label } of options) {\r\n        first[label[0]] = true;\r\n        for (let i = 1; i < label.length; i++)\r\n            rest[label[i]] = true;\r\n    }\r\n    let source = toSet(first) + toSet(rest) + \"*$\";\r\n    return [new RegExp(\"^\" + source), new RegExp(source)];\r\n}\r\n/**\r\nGiven a a fixed array of options, return an autocompleter that\r\ncompletes them.\r\n*/\r\nfunction completeFromList(list) {\r\n    let options = list.map(o => typeof o == \"string\" ? { label: o } : o);\r\n    let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\r\n    return (context) => {\r\n        let token = context.matchBefore(match);\r\n        return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;\r\n    };\r\n}\r\n/**\r\nWrap the given completion source so that it will only fire when the\r\ncursor is in a syntax node with one of the given names.\r\n*/\r\nfunction ifIn(nodes, source) {\r\n    return (context) => {\r\n        for (let pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)\r\n            if (nodes.indexOf(pos.name) > -1)\r\n                return source(context);\r\n        return null;\r\n    };\r\n}\r\n/**\r\nWrap the given completion source so that it will not fire when the\r\ncursor is in a syntax node with one of the given names.\r\n*/\r\nfunction ifNotIn(nodes, source) {\r\n    return (context) => {\r\n        for (let pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)\r\n            if (nodes.indexOf(pos.name) > -1)\r\n                return null;\r\n        return source(context);\r\n    };\r\n}\r\nclass Option {\r\n    constructor(completion, source, match) {\r\n        this.completion = completion;\r\n        this.source = source;\r\n        this.match = match;\r\n    }\r\n}\r\nfunction cur(state) { return state.selection.main.head; }\r\n// Make sure the given regexp has a $ at its end and, if `start` is\r\n// true, a ^ at its start.\r\nfunction ensureAnchor(expr, start) {\r\n    var _a;\r\n    let { source } = expr;\r\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\r\n    if (!addStart && !addEnd)\r\n        return expr;\r\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? \"i\" : \"\"));\r\n}\r\n/**\r\nThis annotation is added to transactions that are produced by\r\npicking a completion.\r\n*/\r\nconst pickedCompletion = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Annotation.define();\r\n/**\r\nHelper function that returns a transaction spec which inserts a\r\ncompletion's text in the main selection range, and any other\r\nselection range that has the same text in front of it.\r\n*/\r\nfunction insertCompletionText(state, text, from, to) {\r\n    return Object.assign(Object.assign({}, state.changeByRange(range => {\r\n        if (range == state.selection.main)\r\n            return {\r\n                changes: { from: from, to: to, insert: text },\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(from + text.length)\r\n            };\r\n        let len = to - from;\r\n        if (!range.empty ||\r\n            len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to))\r\n            return { range };\r\n        return {\r\n            changes: { from: range.from - len, to: range.from, insert: text },\r\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.from - len + text.length)\r\n        };\r\n    })), { userEvent: \"input.complete\" });\r\n}\r\nfunction applyCompletion(view, option) {\r\n    const apply = option.completion.apply || option.completion.label;\r\n    let result = option.source;\r\n    if (typeof apply == \"string\")\r\n        view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));\r\n    else\r\n        apply(view, option.completion, result.from, result.to);\r\n}\r\nconst SourceCache = /*@__PURE__*/new WeakMap();\r\nfunction asSource(source) {\r\n    if (!Array.isArray(source))\r\n        return source;\r\n    let known = SourceCache.get(source);\r\n    if (!known)\r\n        SourceCache.set(source, known = completeFromList(source));\r\n    return known;\r\n}\r\n\r\n// A pattern matcher for fuzzy completion matching. Create an instance\r\n// once for a pattern, and then use that to match any number of\r\n// completions.\r\nclass FuzzyMatcher {\r\n    constructor(pattern) {\r\n        this.pattern = pattern;\r\n        this.chars = [];\r\n        this.folded = [];\r\n        // Buffers reused by calls to `match` to track matched character\r\n        // positions.\r\n        this.any = [];\r\n        this.precise = [];\r\n        this.byWord = [];\r\n        for (let p = 0; p < pattern.length;) {\r\n            let char = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(pattern, p), size = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(char);\r\n            this.chars.push(char);\r\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\r\n            this.folded.push((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(upper == part ? part.toLowerCase() : upper, 0));\r\n            p += size;\r\n        }\r\n        this.astral = pattern.length != this.chars.length;\r\n    }\r\n    // Matches a given word (completion) against the pattern (input).\r\n    // Will return null for no match, and otherwise an array that starts\r\n    // with the match score, followed by any number of `from, to` pairs\r\n    // indicating the matched parts of `word`.\r\n    //\r\n    // The score is a number that is more negative the worse the match\r\n    // is. See `Penalty` above.\r\n    match(word) {\r\n        if (this.pattern.length == 0)\r\n            return [0];\r\n        if (word.length < this.pattern.length)\r\n            return null;\r\n        let { chars, folded, any, precise, byWord } = this;\r\n        // For single-character queries, only match when they occur right\r\n        // at the start\r\n        if (chars.length == 1) {\r\n            let first = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, 0);\r\n            return first == chars[0] ? [0, 0, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(first)]\r\n                : first == folded[0] ? [-200 /* Penalty.CaseFold */, 0, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(first)] : null;\r\n        }\r\n        let direct = word.indexOf(this.pattern);\r\n        if (direct == 0)\r\n            return [0, 0, this.pattern.length];\r\n        let len = chars.length, anyTo = 0;\r\n        if (direct < 0) {\r\n            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\r\n                let next = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, i);\r\n                if (next == chars[anyTo] || next == folded[anyTo])\r\n                    any[anyTo++] = i;\r\n                i += (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);\r\n            }\r\n            // No match, exit immediately\r\n            if (anyTo < len)\r\n                return null;\r\n        }\r\n        // This tracks the extent of the precise (non-folded, not\r\n        // necessarily adjacent) match\r\n        let preciseTo = 0;\r\n        // Tracks whether there is a match that hits only characters that\r\n        // appear to be starting words. `byWordFolded` is set to true when\r\n        // a case folded character is encountered in such a match\r\n        let byWordTo = 0, byWordFolded = false;\r\n        // If we've found a partial adjacent match, these track its state\r\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\r\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\r\n        // Go over the option's text, scanning for the various kinds of matches\r\n        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {\r\n            let next = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, i);\r\n            if (direct < 0) {\r\n                if (preciseTo < len && next == chars[preciseTo])\r\n                    precise[preciseTo++] = i;\r\n                if (adjacentTo < len) {\r\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\r\n                        if (adjacentTo == 0)\r\n                            adjacentStart = i;\r\n                        adjacentEnd = i + 1;\r\n                        adjacentTo++;\r\n                    }\r\n                    else {\r\n                        adjacentTo = 0;\r\n                    }\r\n                }\r\n            }\r\n            let ch, type = next < 0xff\r\n                ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)\r\n                : ((ch = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);\r\n            if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {\r\n                if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))\r\n                    byWord[byWordTo++] = i;\r\n                else if (byWord.length)\r\n                    wordAdjacent = false;\r\n            }\r\n            prevType = type;\r\n            i += (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);\r\n        }\r\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)\r\n            return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);\r\n        if (adjacentTo == len && adjacentStart == 0)\r\n            return [-200 /* Penalty.CaseFold */ - word.length, 0, adjacentEnd];\r\n        if (direct > -1)\r\n            return [-700 /* Penalty.NotStart */ - word.length, direct, direct + this.pattern.length];\r\n        if (adjacentTo == len)\r\n            return [-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, adjacentStart, adjacentEnd];\r\n        if (byWordTo == len)\r\n            return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +\r\n                (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);\r\n        return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);\r\n    }\r\n    result(score, positions, word) {\r\n        let result = [score - word.length], i = 1;\r\n        for (let pos of positions) {\r\n            let to = pos + (this.astral ? (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, pos)) : 1);\r\n            if (i > 1 && result[i - 1] == pos)\r\n                result[i - 1] = to;\r\n            else {\r\n                result[i++] = pos;\r\n                result[i++] = to;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nconst completionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(configs, {\r\n            activateOnTyping: true,\r\n            selectOnOpen: true,\r\n            override: null,\r\n            closeOnBlur: true,\r\n            maxRenderedOptions: 100,\r\n            defaultKeymap: true,\r\n            tooltipClass: () => \"\",\r\n            optionClass: () => \"\",\r\n            aboveCursor: false,\r\n            icons: true,\r\n            addToOptions: [],\r\n            compareCompletions: (a, b) => a.label.localeCompare(b.label),\r\n            interactionDelay: 75\r\n        }, {\r\n            defaultKeymap: (a, b) => a && b,\r\n            closeOnBlur: (a, b) => a && b,\r\n            icons: (a, b) => a && b,\r\n            tooltipClass: (a, b) => c => joinClass(a(c), b(c)),\r\n            optionClass: (a, b) => c => joinClass(a(c), b(c)),\r\n            addToOptions: (a, b) => a.concat(b)\r\n        });\r\n    }\r\n});\r\nfunction joinClass(a, b) {\r\n    return a ? b ? a + \" \" + b : a : b;\r\n}\r\n\r\nfunction optionContent(config) {\r\n    let content = config.addToOptions.slice();\r\n    if (config.icons)\r\n        content.push({\r\n            render(completion) {\r\n                let icon = document.createElement(\"div\");\r\n                icon.classList.add(\"cm-completionIcon\");\r\n                if (completion.type)\r\n                    icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\r\n                icon.setAttribute(\"aria-hidden\", \"true\");\r\n                return icon;\r\n            },\r\n            position: 20\r\n        });\r\n    content.push({\r\n        render(completion, _s, match) {\r\n            let labelElt = document.createElement(\"span\");\r\n            labelElt.className = \"cm-completionLabel\";\r\n            let { label } = completion, off = 0;\r\n            for (let j = 1; j < match.length;) {\r\n                let from = match[j++], to = match[j++];\r\n                if (from > off)\r\n                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));\r\n                let span = labelElt.appendChild(document.createElement(\"span\"));\r\n                span.appendChild(document.createTextNode(label.slice(from, to)));\r\n                span.className = \"cm-completionMatchedText\";\r\n                off = to;\r\n            }\r\n            if (off < label.length)\r\n                labelElt.appendChild(document.createTextNode(label.slice(off)));\r\n            return labelElt;\r\n        },\r\n        position: 50\r\n    }, {\r\n        render(completion) {\r\n            if (!completion.detail)\r\n                return null;\r\n            let detailElt = document.createElement(\"span\");\r\n            detailElt.className = \"cm-completionDetail\";\r\n            detailElt.textContent = completion.detail;\r\n            return detailElt;\r\n        },\r\n        position: 80\r\n    });\r\n    return content.sort((a, b) => a.position - b.position).map(a => a.render);\r\n}\r\nfunction rangeAroundSelected(total, selected, max) {\r\n    if (total <= max)\r\n        return { from: 0, to: total };\r\n    if (selected < 0)\r\n        selected = 0;\r\n    if (selected <= (total >> 1)) {\r\n        let off = Math.floor(selected / max);\r\n        return { from: off * max, to: (off + 1) * max };\r\n    }\r\n    let off = Math.floor((total - selected) / max);\r\n    return { from: total - (off + 1) * max, to: total - off * max };\r\n}\r\nclass CompletionTooltip {\r\n    constructor(view, stateField) {\r\n        this.view = view;\r\n        this.stateField = stateField;\r\n        this.info = null;\r\n        this.placeInfo = {\r\n            read: () => this.measureInfo(),\r\n            write: (pos) => this.positionInfo(pos),\r\n            key: this\r\n        };\r\n        this.space = null;\r\n        this.currentClass = \"\";\r\n        let cState = view.state.field(stateField);\r\n        let { options, selected } = cState.open;\r\n        let config = view.state.facet(completionConfig);\r\n        this.optionContent = optionContent(config);\r\n        this.optionClass = config.optionClass;\r\n        this.tooltipClass = config.tooltipClass;\r\n        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-tooltip-autocomplete\";\r\n        this.updateTooltipClass(view.state);\r\n        this.dom.addEventListener(\"mousedown\", (e) => {\r\n            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\r\n                if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\r\n                    applyCompletion(view, options[+match[1]]);\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\r\n        this.list.addEventListener(\"scroll\", () => {\r\n            if (this.info)\r\n                this.view.requestMeasure(this.placeInfo);\r\n        });\r\n    }\r\n    mount() { this.updateSel(); }\r\n    update(update) {\r\n        var _a, _b, _c;\r\n        let cState = update.state.field(this.stateField);\r\n        let prevState = update.startState.field(this.stateField);\r\n        this.updateTooltipClass(update.state);\r\n        if (cState != prevState) {\r\n            this.updateSel();\r\n            if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled))\r\n                this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));\r\n        }\r\n    }\r\n    updateTooltipClass(state) {\r\n        let cls = this.tooltipClass(state);\r\n        if (cls != this.currentClass) {\r\n            for (let c of this.currentClass.split(\" \"))\r\n                if (c)\r\n                    this.dom.classList.remove(c);\r\n            for (let c of cls.split(\" \"))\r\n                if (c)\r\n                    this.dom.classList.add(c);\r\n            this.currentClass = cls;\r\n        }\r\n    }\r\n    positioned(space) {\r\n        this.space = space;\r\n        if (this.info)\r\n            this.view.requestMeasure(this.placeInfo);\r\n    }\r\n    updateSel() {\r\n        let cState = this.view.state.field(this.stateField), open = cState.open;\r\n        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {\r\n            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\r\n            this.list.remove();\r\n            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\r\n            this.list.addEventListener(\"scroll\", () => {\r\n                if (this.info)\r\n                    this.view.requestMeasure(this.placeInfo);\r\n            });\r\n        }\r\n        if (this.updateSelectedOption(open.selected)) {\r\n            if (this.info) {\r\n                this.info.remove();\r\n                this.info = null;\r\n            }\r\n            let { completion } = open.options[open.selected];\r\n            let { info } = completion;\r\n            if (!info)\r\n                return;\r\n            let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);\r\n            if (!infoResult)\r\n                return;\r\n            if ('then' in infoResult) {\r\n                infoResult.then(node => {\r\n                    if (node && this.view.state.field(this.stateField, false) == cState)\r\n                        this.addInfoPane(node);\r\n                }).catch(e => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, e, \"completion info\"));\r\n            }\r\n            else {\r\n                this.addInfoPane(infoResult);\r\n            }\r\n        }\r\n    }\r\n    addInfoPane(content) {\r\n        let dom = this.info = document.createElement(\"div\");\r\n        dom.className = \"cm-tooltip cm-completionInfo\";\r\n        dom.appendChild(content);\r\n        this.dom.appendChild(dom);\r\n        this.view.requestMeasure(this.placeInfo);\r\n    }\r\n    updateSelectedOption(selected) {\r\n        let set = null;\r\n        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\r\n            if (i == selected) {\r\n                if (!opt.hasAttribute(\"aria-selected\")) {\r\n                    opt.setAttribute(\"aria-selected\", \"true\");\r\n                    set = opt;\r\n                }\r\n            }\r\n            else {\r\n                if (opt.hasAttribute(\"aria-selected\"))\r\n                    opt.removeAttribute(\"aria-selected\");\r\n            }\r\n        }\r\n        if (set)\r\n            scrollIntoView(this.list, set);\r\n        return set;\r\n    }\r\n    measureInfo() {\r\n        let sel = this.dom.querySelector(\"[aria-selected]\");\r\n        if (!sel || !this.info)\r\n            return null;\r\n        let listRect = this.dom.getBoundingClientRect();\r\n        let infoRect = this.info.getBoundingClientRect();\r\n        let selRect = sel.getBoundingClientRect();\r\n        let space = this.space;\r\n        if (!space) {\r\n            let win = this.dom.ownerDocument.defaultView || window;\r\n            space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };\r\n        }\r\n        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||\r\n            selRect.bottom < Math.max(space.top, listRect.top) + 10)\r\n            return null;\r\n        let rtl = this.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.RTL, left = rtl, narrow = false, maxWidth;\r\n        let top = \"\", bottom = \"\";\r\n        let spaceLeft = listRect.left - space.left, spaceRight = space.right - listRect.right;\r\n        if (left && spaceLeft < Math.min(infoRect.width, spaceRight))\r\n            left = false;\r\n        else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))\r\n            left = true;\r\n        if (infoRect.width <= (left ? spaceLeft : spaceRight)) {\r\n            top = (Math.max(space.top, Math.min(selRect.top, space.bottom - infoRect.height)) - listRect.top) + \"px\";\r\n            maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight) + \"px\";\r\n        }\r\n        else {\r\n            narrow = true;\r\n            maxWidth = Math.min(400 /* Info.Width */, (rtl ? listRect.right : space.right - listRect.left) - 30 /* Info.Margin */) + \"px\";\r\n            let spaceBelow = space.bottom - listRect.bottom;\r\n            if (spaceBelow >= infoRect.height || spaceBelow > listRect.top) // Below the completion\r\n                top = (selRect.bottom - listRect.top) + \"px\";\r\n            else // Above it\r\n                bottom = (listRect.bottom - selRect.top) + \"px\";\r\n        }\r\n        return {\r\n            top, bottom, maxWidth,\r\n            class: narrow ? (rtl ? \"left-narrow\" : \"right-narrow\") : left ? \"left\" : \"right\",\r\n        };\r\n    }\r\n    positionInfo(pos) {\r\n        if (this.info) {\r\n            if (pos) {\r\n                this.info.style.top = pos.top;\r\n                this.info.style.bottom = pos.bottom;\r\n                this.info.style.maxWidth = pos.maxWidth;\r\n                this.info.className = \"cm-tooltip cm-completionInfo cm-completionInfo-\" + pos.class;\r\n            }\r\n            else {\r\n                this.info.style.top = \"-1e6px\";\r\n            }\r\n        }\r\n    }\r\n    createListBox(options, id, range) {\r\n        const ul = document.createElement(\"ul\");\r\n        ul.id = id;\r\n        ul.setAttribute(\"role\", \"listbox\");\r\n        ul.setAttribute(\"aria-expanded\", \"true\");\r\n        ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\r\n        for (let i = range.from; i < range.to; i++) {\r\n            let { completion, match } = options[i];\r\n            const li = ul.appendChild(document.createElement(\"li\"));\r\n            li.id = id + \"-\" + i;\r\n            li.setAttribute(\"role\", \"option\");\r\n            let cls = this.optionClass(completion);\r\n            if (cls)\r\n                li.className = cls;\r\n            for (let source of this.optionContent) {\r\n                let node = source(completion, this.view.state, match);\r\n                if (node)\r\n                    li.appendChild(node);\r\n            }\r\n        }\r\n        if (range.from)\r\n            ul.classList.add(\"cm-completionListIncompleteTop\");\r\n        if (range.to < options.length)\r\n            ul.classList.add(\"cm-completionListIncompleteBottom\");\r\n        return ul;\r\n    }\r\n}\r\n// We allocate a new function instance every time the completion\r\n// changes to force redrawing/repositioning of the tooltip\r\nfunction completionTooltip(stateField) {\r\n    return (view) => new CompletionTooltip(view, stateField);\r\n}\r\nfunction scrollIntoView(container, element) {\r\n    let parent = container.getBoundingClientRect();\r\n    let self = element.getBoundingClientRect();\r\n    if (self.top < parent.top)\r\n        container.scrollTop -= parent.top - self.top;\r\n    else if (self.bottom > parent.bottom)\r\n        container.scrollTop += self.bottom - parent.bottom;\r\n}\r\n\r\n// Used to pick a preferred option when two options with the same\r\n// label occur in the result.\r\nfunction score(option) {\r\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +\r\n        (option.type ? 1 : 0);\r\n}\r\nfunction sortOptions(active, state) {\r\n    let options = [], i = 0;\r\n    for (let a of active)\r\n        if (a.hasResult()) {\r\n            if (a.result.filter === false) {\r\n                let getMatch = a.result.getMatch;\r\n                for (let option of a.result.options) {\r\n                    let match = [1e9 - i++];\r\n                    if (getMatch)\r\n                        for (let n of getMatch(option))\r\n                            match.push(n);\r\n                    options.push(new Option(option, a, match));\r\n                }\r\n            }\r\n            else {\r\n                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;\r\n                for (let option of a.result.options)\r\n                    if (match = matcher.match(option.label)) {\r\n                        if (option.boost != null)\r\n                            match[0] += option.boost;\r\n                        options.push(new Option(option, a, match));\r\n                    }\r\n            }\r\n        }\r\n    let result = [], prev = null;\r\n    let compare = state.facet(completionConfig).compareCompletions;\r\n    for (let opt of options.sort((a, b) => (b.match[0] - a.match[0]) || compare(a.completion, b.completion))) {\r\n        if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||\r\n            (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||\r\n            prev.apply != opt.completion.apply)\r\n            result.push(opt);\r\n        else if (score(opt.completion) > score(prev))\r\n            result[result.length - 1] = opt;\r\n        prev = opt.completion;\r\n    }\r\n    return result;\r\n}\r\nclass CompletionDialog {\r\n    constructor(options, attrs, tooltip, timestamp, selected, disabled) {\r\n        this.options = options;\r\n        this.attrs = attrs;\r\n        this.tooltip = tooltip;\r\n        this.timestamp = timestamp;\r\n        this.selected = selected;\r\n        this.disabled = disabled;\r\n    }\r\n    setSelected(selected, id) {\r\n        return selected == this.selected || selected >= this.options.length ? this\r\n            : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);\r\n    }\r\n    static build(active, state, id, prev, conf) {\r\n        let options = sortOptions(active, state);\r\n        if (!options.length) {\r\n            return prev && active.some(a => a.state == 1 /* State.Pending */) ?\r\n                new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;\r\n        }\r\n        let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;\r\n        if (prev && prev.selected != selected && prev.selected != -1) {\r\n            let selectedValue = prev.options[prev.selected].completion;\r\n            for (let i = 0; i < options.length; i++)\r\n                if (options[i].completion == selectedValue) {\r\n                    selected = i;\r\n                    break;\r\n                }\r\n        }\r\n        return new CompletionDialog(options, makeAttrs(id, selected), {\r\n            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\r\n            create: completionTooltip(completionState),\r\n            above: conf.aboveCursor,\r\n        }, prev ? prev.timestamp : Date.now(), selected, false);\r\n    }\r\n    map(changes) {\r\n        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);\r\n    }\r\n}\r\nclass CompletionState {\r\n    constructor(active, id, open) {\r\n        this.active = active;\r\n        this.id = id;\r\n        this.open = open;\r\n    }\r\n    static start() {\r\n        return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\r\n    }\r\n    update(tr) {\r\n        let { state } = tr, conf = state.facet(completionConfig);\r\n        let sources = conf.override ||\r\n            state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\r\n        let active = sources.map(source => {\r\n            let value = this.active.find(s => s.source == source) ||\r\n                new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);\r\n            return value.update(tr, conf);\r\n        });\r\n        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))\r\n            active = this.active;\r\n        let open = this.open;\r\n        if (open && tr.docChanged)\r\n            open = open.map(tr.changes);\r\n        if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||\r\n            !sameResults(active, this.active))\r\n            open = CompletionDialog.build(active, state, this.id, open, conf);\r\n        else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */))\r\n            open = null;\r\n        if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult()))\r\n            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);\r\n        for (let effect of tr.effects)\r\n            if (effect.is(setSelectedEffect))\r\n                open = open && open.setSelected(effect.value, this.id);\r\n        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\r\n    }\r\n    get tooltip() { return this.open ? this.open.tooltip : null; }\r\n    get attrs() { return this.open ? this.open.attrs : baseAttrs; }\r\n}\r\nfunction sameResults(a, b) {\r\n    if (a == b)\r\n        return true;\r\n    for (let iA = 0, iB = 0;;) {\r\n        while (iA < a.length && !a[iA].hasResult)\r\n            iA++;\r\n        while (iB < b.length && !b[iB].hasResult)\r\n            iB++;\r\n        let endA = iA == a.length, endB = iB == b.length;\r\n        if (endA || endB)\r\n            return endA == endB;\r\n        if (a[iA++].result != b[iB++].result)\r\n            return false;\r\n    }\r\n}\r\nconst baseAttrs = {\r\n    \"aria-autocomplete\": \"list\"\r\n};\r\nfunction makeAttrs(id, selected) {\r\n    let result = {\r\n        \"aria-autocomplete\": \"list\",\r\n        \"aria-haspopup\": \"listbox\",\r\n        \"aria-controls\": id\r\n    };\r\n    if (selected > -1)\r\n        result[\"aria-activedescendant\"] = id + \"-\" + selected;\r\n    return result;\r\n}\r\nconst none = [];\r\nfunction getUserEvent(tr) {\r\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\r\n}\r\nclass ActiveSource {\r\n    constructor(source, state, explicitPos = -1) {\r\n        this.source = source;\r\n        this.state = state;\r\n        this.explicitPos = explicitPos;\r\n    }\r\n    hasResult() { return false; }\r\n    update(tr, conf) {\r\n        let event = getUserEvent(tr), value = this;\r\n        if (event)\r\n            value = value.handleUserEvent(tr, event, conf);\r\n        else if (tr.docChanged)\r\n            value = value.handleChange(tr);\r\n        else if (tr.selection && value.state != 0 /* State.Inactive */)\r\n            value = new ActiveSource(value.source, 0 /* State.Inactive */);\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(startCompletionEffect))\r\n                value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);\r\n            else if (effect.is(closeCompletionEffect))\r\n                value = new ActiveSource(value.source, 0 /* State.Inactive */);\r\n            else if (effect.is(setActiveEffect))\r\n                for (let active of effect.value)\r\n                    if (active.source == value.source)\r\n                        value = active;\r\n        }\r\n        return value;\r\n    }\r\n    handleUserEvent(tr, type, conf) {\r\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);\r\n    }\r\n    handleChange(tr) {\r\n        return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);\r\n    }\r\n    map(changes) {\r\n        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\r\n    }\r\n}\r\nclass ActiveResult extends ActiveSource {\r\n    constructor(source, explicitPos, result, from, to) {\r\n        super(source, 2 /* State.Result */, explicitPos);\r\n        this.result = result;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n    hasResult() { return true; }\r\n    handleUserEvent(tr, type, conf) {\r\n        var _a;\r\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\r\n        let pos = cur(tr.state);\r\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||\r\n            pos > to ||\r\n            type == \"delete\" && cur(tr.startState) == this.from)\r\n            return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);\r\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;\r\n        if (checkValid(this.result.validFor, tr.state, from, to))\r\n            return new ActiveResult(this.source, explicitPos, this.result, from, to);\r\n        if (this.result.update &&\r\n            (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))\r\n            return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));\r\n        return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);\r\n    }\r\n    handleChange(tr) {\r\n        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);\r\n    }\r\n    map(mapping) {\r\n        return mapping.empty ? this :\r\n            new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\r\n    }\r\n}\r\nfunction checkValid(validFor, state, from, to) {\r\n    if (!validFor)\r\n        return false;\r\n    let text = state.sliceDoc(from, to);\r\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\r\n}\r\nconst startCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst closeCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst setActiveEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(sources, mapping) { return sources.map(s => s.map(mapping)); }\r\n});\r\nconst setSelectedEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst completionState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return CompletionState.start(); },\r\n    update(value, tr) { return value.update(tr); },\r\n    provide: f => [\r\n        _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.showTooltip.from(f, val => val.tooltip),\r\n        _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.contentAttributes.from(f, state => state.attrs)\r\n    ]\r\n});\r\n\r\n/**\r\nReturns a command that moves the completion selection forward or\r\nbackward by the given amount.\r\n*/\r\nfunction moveCompletionSelection(forward, by = \"option\") {\r\n    return (view) => {\r\n        let cState = view.state.field(completionState, false);\r\n        if (!cState || !cState.open || cState.open.disabled ||\r\n            Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\r\n            return false;\r\n        let step = 1, tooltip;\r\n        if (by == \"page\" && (tooltip = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getTooltip)(view, cState.open.tooltip)))\r\n            step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /\r\n                tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\r\n        let { length } = cState.open.options;\r\n        let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;\r\n        if (selected < 0)\r\n            selected = by == \"page\" ? 0 : length - 1;\r\n        else if (selected >= length)\r\n            selected = by == \"page\" ? length - 1 : 0;\r\n        view.dispatch({ effects: setSelectedEffect.of(selected) });\r\n        return true;\r\n    };\r\n}\r\n/**\r\nAccept the current completion.\r\n*/\r\nconst acceptCompletion = (view) => {\r\n    let cState = view.state.field(completionState, false);\r\n    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 ||\r\n        Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\r\n        return false;\r\n    if (!cState.open.disabled)\r\n        applyCompletion(view, cState.open.options[cState.open.selected]);\r\n    return true;\r\n};\r\n/**\r\nExplicitly start autocompletion.\r\n*/\r\nconst startCompletion = (view) => {\r\n    let cState = view.state.field(completionState, false);\r\n    if (!cState)\r\n        return false;\r\n    view.dispatch({ effects: startCompletionEffect.of(true) });\r\n    return true;\r\n};\r\n/**\r\nClose the currently active completion.\r\n*/\r\nconst closeCompletion = (view) => {\r\n    let cState = view.state.field(completionState, false);\r\n    if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))\r\n        return false;\r\n    view.dispatch({ effects: closeCompletionEffect.of(null) });\r\n    return true;\r\n};\r\nclass RunningQuery {\r\n    constructor(active, context) {\r\n        this.active = active;\r\n        this.context = context;\r\n        this.time = Date.now();\r\n        this.updates = [];\r\n        // Note that 'undefined' means 'not done yet', whereas 'null' means\r\n        // 'query returned null'.\r\n        this.done = undefined;\r\n    }\r\n}\r\nconst DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;\r\nconst completionPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.debounceUpdate = -1;\r\n        this.running = [];\r\n        this.debounceAccept = -1;\r\n        this.composing = 0 /* CompositionState.None */;\r\n        for (let active of view.state.field(completionState).active)\r\n            if (active.state == 1 /* State.Pending */)\r\n                this.startQuery(active);\r\n    }\r\n    update(update) {\r\n        let cState = update.state.field(completionState);\r\n        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)\r\n            return;\r\n        let doesReset = update.transactions.some(tr => {\r\n            return (tr.selection || tr.docChanged) && !getUserEvent(tr);\r\n        });\r\n        for (let i = 0; i < this.running.length; i++) {\r\n            let query = this.running[i];\r\n            if (doesReset ||\r\n                query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\r\n                for (let handler of query.context.abortListeners) {\r\n                    try {\r\n                        handler();\r\n                    }\r\n                    catch (e) {\r\n                        (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, e);\r\n                    }\r\n                }\r\n                query.context.abortListeners = null;\r\n                this.running.splice(i--, 1);\r\n            }\r\n            else {\r\n                query.updates.push(...update.transactions);\r\n            }\r\n        }\r\n        if (this.debounceUpdate > -1)\r\n            clearTimeout(this.debounceUpdate);\r\n        this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source))\r\n            ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;\r\n        if (this.composing != 0 /* CompositionState.None */)\r\n            for (let tr of update.transactions) {\r\n                if (getUserEvent(tr) == \"input\")\r\n                    this.composing = 2 /* CompositionState.Changed */;\r\n                else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)\r\n                    this.composing = 3 /* CompositionState.ChangedAndMoved */;\r\n            }\r\n    }\r\n    startUpdate() {\r\n        this.debounceUpdate = -1;\r\n        let { state } = this.view, cState = state.field(completionState);\r\n        for (let active of cState.active) {\r\n            if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source))\r\n                this.startQuery(active);\r\n        }\r\n    }\r\n    startQuery(active) {\r\n        let { state } = this.view, pos = cur(state);\r\n        let context = new CompletionContext(state, pos, active.explicitPos == pos);\r\n        let pending = new RunningQuery(active, context);\r\n        this.running.push(pending);\r\n        Promise.resolve(active.source(context)).then(result => {\r\n            if (!pending.context.aborted) {\r\n                pending.done = result || null;\r\n                this.scheduleAccept();\r\n            }\r\n        }, err => {\r\n            this.view.dispatch({ effects: closeCompletionEffect.of(null) });\r\n            (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, err);\r\n        });\r\n    }\r\n    scheduleAccept() {\r\n        if (this.running.every(q => q.done !== undefined))\r\n            this.accept();\r\n        else if (this.debounceAccept < 0)\r\n            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);\r\n    }\r\n    // For each finished query in this.running, try to create a result\r\n    // or, if appropriate, restart the query.\r\n    accept() {\r\n        var _a;\r\n        if (this.debounceAccept > -1)\r\n            clearTimeout(this.debounceAccept);\r\n        this.debounceAccept = -1;\r\n        let updated = [];\r\n        let conf = this.view.state.facet(completionConfig);\r\n        for (let i = 0; i < this.running.length; i++) {\r\n            let query = this.running[i];\r\n            if (query.done === undefined)\r\n                continue;\r\n            this.running.splice(i--, 1);\r\n            if (query.done) {\r\n                let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\r\n                // Replay the transactions that happened since the start of\r\n                // the request and see if that preserves the result\r\n                for (let tr of query.updates)\r\n                    active = active.update(tr, conf);\r\n                if (active.hasResult()) {\r\n                    updated.push(active);\r\n                    continue;\r\n                }\r\n            }\r\n            let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\r\n            if (current && current.state == 1 /* State.Pending */) {\r\n                if (query.done == null) {\r\n                    // Explicitly failed. Should clear the pending status if it\r\n                    // hasn't been re-set in the meantime.\r\n                    let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);\r\n                    for (let tr of query.updates)\r\n                        active = active.update(tr, conf);\r\n                    if (active.state != 1 /* State.Pending */)\r\n                        updated.push(active);\r\n                }\r\n                else {\r\n                    // Cleared by subsequent transactions. Restart.\r\n                    this.startQuery(current);\r\n                }\r\n            }\r\n        }\r\n        if (updated.length)\r\n            this.view.dispatch({ effects: setActiveEffect.of(updated) });\r\n    }\r\n}, {\r\n    eventHandlers: {\r\n        blur() {\r\n            let state = this.view.state.field(completionState, false);\r\n            if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur)\r\n                this.view.dispatch({ effects: closeCompletionEffect.of(null) });\r\n        },\r\n        compositionstart() {\r\n            this.composing = 1 /* CompositionState.Started */;\r\n        },\r\n        compositionend() {\r\n            if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {\r\n                // Safari fires compositionend events synchronously, possibly\r\n                // from inside an update, so dispatch asynchronously to avoid reentrancy\r\n                setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);\r\n            }\r\n            this.composing = 0 /* CompositionState.None */;\r\n        }\r\n    }\r\n});\r\n\r\nconst baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\r\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\r\n        \"& > ul\": {\r\n            fontFamily: \"monospace\",\r\n            whiteSpace: \"nowrap\",\r\n            overflow: \"hidden auto\",\r\n            maxWidth_fallback: \"700px\",\r\n            maxWidth: \"min(700px, 95vw)\",\r\n            minWidth: \"250px\",\r\n            maxHeight: \"10em\",\r\n            height: \"100%\",\r\n            listStyle: \"none\",\r\n            margin: 0,\r\n            padding: 0,\r\n            \"& > li\": {\r\n                overflowX: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n                cursor: \"pointer\",\r\n                padding: \"1px 3px\",\r\n                lineHeight: 1.2\r\n            },\r\n        }\r\n    },\r\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\r\n        background: \"#17c\",\r\n        color: \"white\",\r\n    },\r\n    \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\r\n        background: \"#777\",\r\n    },\r\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\r\n        background: \"#347\",\r\n        color: \"white\",\r\n    },\r\n    \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\r\n        background: \"#444\",\r\n    },\r\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\r\n        content: '\"···\"',\r\n        opacity: 0.5,\r\n        display: \"block\",\r\n        textAlign: \"center\"\r\n    },\r\n    \".cm-tooltip.cm-completionInfo\": {\r\n        position: \"absolute\",\r\n        padding: \"3px 9px\",\r\n        width: \"max-content\",\r\n        maxWidth: `${400 /* Info.Width */}px`,\r\n        boxSizing: \"border-box\"\r\n    },\r\n    \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\r\n    \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\r\n    \".cm-completionInfo.cm-completionInfo-left-narrow\": { right: `${30 /* Info.Margin */}px` },\r\n    \".cm-completionInfo.cm-completionInfo-right-narrow\": { left: `${30 /* Info.Margin */}px` },\r\n    \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\r\n    \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\r\n    \".cm-snippetFieldPosition\": {\r\n        verticalAlign: \"text-top\",\r\n        width: 0,\r\n        height: \"1.15em\",\r\n        display: \"inline-block\",\r\n        margin: \"0 -0.7px -.7em\",\r\n        borderLeft: \"1.4px dotted #888\"\r\n    },\r\n    \".cm-completionMatchedText\": {\r\n        textDecoration: \"underline\"\r\n    },\r\n    \".cm-completionDetail\": {\r\n        marginLeft: \"0.5em\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    \".cm-completionIcon\": {\r\n        fontSize: \"90%\",\r\n        width: \".8em\",\r\n        display: \"inline-block\",\r\n        textAlign: \"center\",\r\n        paddingRight: \".6em\",\r\n        opacity: \"0.6\",\r\n        boxSizing: \"content-box\"\r\n    },\r\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\r\n        \"&:after\": { content: \"'ƒ'\" }\r\n    },\r\n    \".cm-completionIcon-class\": {\r\n        \"&:after\": { content: \"'○'\" }\r\n    },\r\n    \".cm-completionIcon-interface\": {\r\n        \"&:after\": { content: \"'◌'\" }\r\n    },\r\n    \".cm-completionIcon-variable\": {\r\n        \"&:after\": { content: \"'𝑥'\" }\r\n    },\r\n    \".cm-completionIcon-constant\": {\r\n        \"&:after\": { content: \"'𝐶'\" }\r\n    },\r\n    \".cm-completionIcon-type\": {\r\n        \"&:after\": { content: \"'𝑡'\" }\r\n    },\r\n    \".cm-completionIcon-enum\": {\r\n        \"&:after\": { content: \"'∪'\" }\r\n    },\r\n    \".cm-completionIcon-property\": {\r\n        \"&:after\": { content: \"'□'\" }\r\n    },\r\n    \".cm-completionIcon-keyword\": {\r\n        \"&:after\": { content: \"'🔑\\uFE0E'\" } // Disable emoji rendering\r\n    },\r\n    \".cm-completionIcon-namespace\": {\r\n        \"&:after\": { content: \"'▢'\" }\r\n    },\r\n    \".cm-completionIcon-text\": {\r\n        \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\r\n    }\r\n});\r\n\r\nclass FieldPos {\r\n    constructor(field, line, from, to) {\r\n        this.field = field;\r\n        this.line = line;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\nclass FieldRange {\r\n    constructor(field, from, to) {\r\n        this.field = field;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n    map(changes) {\r\n        let from = changes.mapPos(this.from, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);\r\n        let to = changes.mapPos(this.to, 1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);\r\n        return from == null || to == null ? null : new FieldRange(this.field, from, to);\r\n    }\r\n}\r\nclass Snippet {\r\n    constructor(lines, fieldPositions) {\r\n        this.lines = lines;\r\n        this.fieldPositions = fieldPositions;\r\n    }\r\n    instantiate(state, pos) {\r\n        let text = [], lineStart = [pos];\r\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\r\n        for (let line of this.lines) {\r\n            if (text.length) {\r\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\r\n                for (let i = 0; i < tabs; i++)\r\n                    indent += state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.indentUnit);\r\n                lineStart.push(pos + indent.length - tabs);\r\n                line = indent + line.slice(tabs);\r\n            }\r\n            text.push(line);\r\n            pos += line.length + 1;\r\n        }\r\n        let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\r\n        return { text, ranges };\r\n    }\r\n    static parse(template) {\r\n        let fields = [];\r\n        let lines = [], positions = [], m;\r\n        for (let line of template.split(/\\r\\n?|\\n/)) {\r\n            while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\r\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\r\n                for (let i = 0; i < fields.length; i++) {\r\n                    if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)\r\n                        found = i;\r\n                }\r\n                if (found < 0) {\r\n                    let i = 0;\r\n                    while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))\r\n                        i++;\r\n                    fields.splice(i, 0, { seq, name });\r\n                    found = i;\r\n                    for (let pos of positions)\r\n                        if (pos.field >= found)\r\n                            pos.field++;\r\n                }\r\n                positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\r\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\r\n            }\r\n            for (let esc; esc = /\\\\([{}])/.exec(line);) {\r\n                line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);\r\n                for (let pos of positions)\r\n                    if (pos.line == lines.length && pos.from > esc.index) {\r\n                        pos.from--;\r\n                        pos.to--;\r\n                    }\r\n            }\r\n            lines.push(line);\r\n        }\r\n        return new Snippet(lines, positions);\r\n    }\r\n}\r\nlet fieldMarker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget({ widget: /*@__PURE__*/new class extends _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.WidgetType {\r\n        toDOM() {\r\n            let span = document.createElement(\"span\");\r\n            span.className = \"cm-snippetFieldPosition\";\r\n            return span;\r\n        }\r\n        ignoreEvent() { return false; }\r\n    } });\r\nlet fieldRange = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-snippetField\" });\r\nclass ActiveSnippet {\r\n    constructor(ranges, active) {\r\n        this.ranges = ranges;\r\n        this.active = active;\r\n        this.deco = _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\r\n    }\r\n    map(changes) {\r\n        let ranges = [];\r\n        for (let r of this.ranges) {\r\n            let mapped = r.map(changes);\r\n            if (!mapped)\r\n                return null;\r\n            ranges.push(mapped);\r\n        }\r\n        return new ActiveSnippet(ranges, this.active);\r\n    }\r\n    selectionInsideField(sel) {\r\n        return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\r\n    }\r\n}\r\nconst setActive = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(value, changes) { return value && value.map(changes); }\r\n});\r\nconst moveToField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst snippetState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return null; },\r\n    update(value, tr) {\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setActive))\r\n                return effect.value;\r\n            if (effect.is(moveToField) && value)\r\n                return new ActiveSnippet(value.ranges, effect.value);\r\n        }\r\n        if (value && tr.docChanged)\r\n            value = value.map(tr.changes);\r\n        if (value && tr.selection && !value.selectionInsideField(tr.selection))\r\n            value = null;\r\n        return value;\r\n    },\r\n    provide: f => _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.decorations.from(f, val => val ? val.deco : _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none)\r\n});\r\nfunction fieldSelection(ranges, field) {\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges.filter(r => r.field == field).map(r => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(r.from, r.to)));\r\n}\r\n/**\r\nConvert a snippet template to a function that can\r\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\r\nusing syntax like this:\r\n\r\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\r\n\r\nEach `${}` placeholder (you may also use `#{}`) indicates a field\r\nthat the user can fill in. Its name, if any, will be the default\r\ncontent for the field.\r\n\r\nWhen the snippet is activated by calling the returned function,\r\nthe code is inserted at the given position. Newlines in the\r\ntemplate are indented by the indentation of the start line, plus\r\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\r\nthe newline.\r\n\r\nOn activation, (all instances of) the first field are selected.\r\nThe user can move between fields with Tab and Shift-Tab as long as\r\nthe fields are active. Moving to the last field or moving the\r\ncursor out of the current field deactivates the fields.\r\n\r\nThe order of fields defaults to textual order, but you can add\r\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\r\na custom order.\r\n\r\nTo include a literal `{` or `}` in your template, put a backslash\r\nin front of it. This will be removed and the brace will not be\r\ninterpreted as indicating a placeholder.\r\n*/\r\nfunction snippet(template) {\r\n    let snippet = Snippet.parse(template);\r\n    return (editor, _completion, from, to) => {\r\n        let { text, ranges } = snippet.instantiate(editor.state, from);\r\n        let spec = {\r\n            changes: { from, to, insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Text.of(text) },\r\n            scrollIntoView: true\r\n        };\r\n        if (ranges.length)\r\n            spec.selection = fieldSelection(ranges, 0);\r\n        if (ranges.length > 1) {\r\n            let active = new ActiveSnippet(ranges, 0);\r\n            let effects = spec.effects = [setActive.of(active)];\r\n            if (editor.state.field(snippetState, false) === undefined)\r\n                effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\r\n        }\r\n        editor.dispatch(editor.state.update(spec));\r\n    };\r\n}\r\nfunction moveField(dir) {\r\n    return ({ state, dispatch }) => {\r\n        let active = state.field(snippetState, false);\r\n        if (!active || dir < 0 && active.active == 0)\r\n            return false;\r\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\r\n        dispatch(state.update({\r\n            selection: fieldSelection(active.ranges, next),\r\n            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))\r\n        }));\r\n        return true;\r\n    };\r\n}\r\n/**\r\nA command that clears the active snippet, if any.\r\n*/\r\nconst clearSnippet = ({ state, dispatch }) => {\r\n    let active = state.field(snippetState, false);\r\n    if (!active)\r\n        return false;\r\n    dispatch(state.update({ effects: setActive.of(null) }));\r\n    return true;\r\n};\r\n/**\r\nMove to the next snippet field, if available.\r\n*/\r\nconst nextSnippetField = /*@__PURE__*/moveField(1);\r\n/**\r\nMove to the previous snippet field, if available.\r\n*/\r\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\r\nconst defaultSnippetKeymap = [\r\n    { key: \"Tab\", run: nextSnippetField, shift: prevSnippetField },\r\n    { key: \"Escape\", run: clearSnippet }\r\n];\r\n/**\r\nA facet that can be used to configure the key bindings used by\r\nsnippets. The default binds Tab to\r\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\r\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\r\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\r\n*/\r\nconst snippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }\r\n});\r\nconst addSnippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Prec.highest(/*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\r\n/**\r\nCreate a completion from a snippet. Returns an object with the\r\nproperties from `completion`, plus an `apply` function that\r\napplies the snippet.\r\n*/\r\nfunction snippetCompletion(template, completion) {\r\n    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });\r\n}\r\nconst snippetPointerHandler = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.domEventHandlers({\r\n    mousedown(event, view) {\r\n        let active = view.state.field(snippetState, false), pos;\r\n        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)\r\n            return false;\r\n        let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\r\n        if (!match || match.field == active.active)\r\n            return false;\r\n        view.dispatch({\r\n            selection: fieldSelection(active.ranges, match.field),\r\n            effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)\r\n        });\r\n        return true;\r\n    }\r\n});\r\n\r\nfunction wordRE(wordChars) {\r\n    let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\r\n    try {\r\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\r\n    }\r\n    catch (_a) {\r\n        return new RegExp(`[\\w${escaped}]`, \"g\");\r\n    }\r\n}\r\nfunction mapRE(re, f) {\r\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\r\n}\r\nconst wordCaches = /*@__PURE__*/Object.create(null);\r\nfunction wordCache(wordChars) {\r\n    return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);\r\n}\r\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\r\n    for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\r\n        let { value } = lines, m;\r\n        wordRE.lastIndex = 0;\r\n        while (m = wordRE.exec(value)) {\r\n            if (!seen[m[0]] && pos + m.index != ignoreAt) {\r\n                result.push({ type: \"text\", label: m[0] });\r\n                seen[m[0]] = true;\r\n                if (result.length >= 2000 /* C.MaxList */)\r\n                    return;\r\n            }\r\n        }\r\n        pos += value.length + 1;\r\n    }\r\n}\r\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\r\n    let big = doc.length >= 1000 /* C.MinCacheLen */;\r\n    let cached = big && cache.get(doc);\r\n    if (cached)\r\n        return cached;\r\n    let result = [], seen = Object.create(null);\r\n    if (doc.children) {\r\n        let pos = 0;\r\n        for (let ch of doc.children) {\r\n            if (ch.length >= 1000 /* C.MinCacheLen */) {\r\n                for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\r\n                    if (!seen[c.label]) {\r\n                        seen[c.label] = true;\r\n                        result.push(c);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                storeWords(ch, wordRE, result, seen, ignoreAt - pos);\r\n            }\r\n            pos += ch.length + 1;\r\n        }\r\n    }\r\n    else {\r\n        storeWords(doc, wordRE, result, seen, ignoreAt);\r\n    }\r\n    if (big && result.length < 2000 /* C.MaxList */)\r\n        cache.set(doc, result);\r\n    return result;\r\n}\r\n/**\r\nA completion source that will scan the document for words (using a\r\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\r\nreturn those as completions.\r\n*/\r\nconst completeAnyWord = context => {\r\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\r\n    let re = wordRE(wordChars);\r\n    let token = context.matchBefore(mapRE(re, s => s + \"$\"));\r\n    if (!token && !context.explicit)\r\n        return null;\r\n    let from = token ? token.from : context.pos;\r\n    let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* C.Range */, from);\r\n    return { from, options, validFor: mapRE(re, s => \"^\" + s) };\r\n};\r\n\r\nconst defaults = {\r\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\r\n    before: \")]}:;>\",\r\n    stringPrefixes: []\r\n};\r\nconst closeBracketEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(value, mapping) {\r\n        let mapped = mapping.mapPos(value, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackAfter);\r\n        return mapped == null ? undefined : mapped;\r\n    }\r\n});\r\nconst skipBracketEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(value, mapping) { return mapping.mapPos(value); }\r\n});\r\nconst closedBracket = /*@__PURE__*/new class extends _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeValue {\r\n};\r\nclosedBracket.startSide = 1;\r\nclosedBracket.endSide = -1;\r\nconst bracketState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty; },\r\n    update(value, tr) {\r\n        if (tr.selection) {\r\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\r\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\r\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1))\r\n                value = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;\r\n        }\r\n        value = value.map(tr.changes);\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(closeBracketEffect))\r\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\r\n            else if (effect.is(skipBracketEffect))\r\n                value = value.update({ filter: from => from != effect.value });\r\n        }\r\n        return value;\r\n    }\r\n});\r\n/**\r\nExtension to enable bracket-closing behavior. When a closeable\r\nbracket is typed, its closing bracket is immediately inserted\r\nafter the cursor. When closing a bracket directly in front of a\r\nclosing bracket inserted by the extension, the cursor moves over\r\nthat bracket.\r\n*/\r\nfunction closeBrackets() {\r\n    return [inputHandler, bracketState];\r\n}\r\nconst definedClosing = \"()[]{}<>\";\r\nfunction closing(ch) {\r\n    for (let i = 0; i < definedClosing.length; i += 2)\r\n        if (definedClosing.charCodeAt(i) == ch)\r\n            return definedClosing.charAt(i + 1);\r\n    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(ch < 128 ? ch : ch + 1);\r\n}\r\nfunction config(state, pos) {\r\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\r\n}\r\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\r\nconst inputHandler = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.inputHandler.of((view, from, to, insert) => {\r\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)\r\n        return false;\r\n    let sel = view.state.selection.main;\r\n    if (insert.length > 2 || insert.length == 2 && (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(insert, 0)) == 1 ||\r\n        from != sel.from || to != sel.to)\r\n        return false;\r\n    let tr = insertBracket(view.state, insert);\r\n    if (!tr)\r\n        return false;\r\n    view.dispatch(tr);\r\n    return true;\r\n});\r\n/**\r\nCommand that implements deleting a pair of matching brackets when\r\nthe cursor is between them.\r\n*/\r\nconst deleteBracketPair = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let conf = config(state, state.selection.main.head);\r\n    let tokens = conf.brackets || defaults.brackets;\r\n    let dont = null, changes = state.changeByRange(range => {\r\n        if (range.empty) {\r\n            let before = prevChar(state.doc, range.head);\r\n            for (let token of tokens) {\r\n                if (token == before && nextChar(state.doc, range.head) == closing((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(token, 0)))\r\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\r\n                        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head - token.length) };\r\n            }\r\n        }\r\n        return { range: dont = range };\r\n    });\r\n    if (!dont)\r\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete.backward\" }));\r\n    return !dont;\r\n};\r\n/**\r\nClose-brackets related key bindings. Binds Backspace to\r\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\r\n*/\r\nconst closeBracketsKeymap = [\r\n    { key: \"Backspace\", run: deleteBracketPair }\r\n];\r\n/**\r\nImplements the extension's behavior on text insertion. If the\r\ngiven string counts as a bracket in the language around the\r\nselection, and replacing the selection with it requires custom\r\nbehavior (inserting a closing version or skipping past a\r\npreviously-closed bracket), this function returns a transaction\r\nrepresenting that custom behavior. (You only need this if you want\r\nto programmatically insert brackets—the\r\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\r\ntake care of running this for user input.)\r\n*/\r\nfunction insertBracket(state, bracket) {\r\n    let conf = config(state, state.selection.main.head);\r\n    let tokens = conf.brackets || defaults.brackets;\r\n    for (let tok of tokens) {\r\n        let closed = closing((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(tok, 0));\r\n        if (bracket == tok)\r\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)\r\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\r\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\r\n            return handleClose(state, tok, closed);\r\n    }\r\n    return null;\r\n}\r\nfunction closedBracketAt(state, pos) {\r\n    let found = false;\r\n    state.field(bracketState).between(0, state.doc.length, from => {\r\n        if (from == pos)\r\n            found = true;\r\n    });\r\n    return found;\r\n}\r\nfunction nextChar(doc, pos) {\r\n    let next = doc.sliceString(pos, pos + 2);\r\n    return next.slice(0, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(next, 0)));\r\n}\r\nfunction prevChar(doc, pos) {\r\n    let prev = doc.sliceString(pos - 2, pos);\r\n    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(prev, 0)) == prev.length ? prev : prev.slice(1);\r\n}\r\nfunction handleOpen(state, open, close, closeBefore) {\r\n    let dont = null, changes = state.changeByRange(range => {\r\n        if (!range.empty)\r\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\r\n                effects: closeBracketEffect.of(range.to + open.length),\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor + open.length, range.head + open.length) };\r\n        let next = nextChar(state.doc, range.head);\r\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\r\n            return { changes: { insert: open + close, from: range.head },\r\n                effects: closeBracketEffect.of(range.head + open.length),\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head + open.length) };\r\n        return { range: dont = range };\r\n    });\r\n    return dont ? null : state.update(changes, {\r\n        scrollIntoView: true,\r\n        userEvent: \"input.type\"\r\n    });\r\n}\r\nfunction handleClose(state, _open, close) {\r\n    let dont = null, moved = state.selection.ranges.map(range => {\r\n        if (range.empty && nextChar(state.doc, range.head) == close)\r\n            return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head + close.length);\r\n        return dont = range;\r\n    });\r\n    return dont ? null : state.update({\r\n        selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(moved, state.selection.mainIndex),\r\n        scrollIntoView: true,\r\n        effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))\r\n    });\r\n}\r\n// Handles cases where the open and close token are the same, and\r\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\r\nfunction handleSame(state, token, allowTriple, config) {\r\n    let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;\r\n    let dont = null, changes = state.changeByRange(range => {\r\n        if (!range.empty)\r\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\r\n                effects: closeBracketEffect.of(range.to + token.length),\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor + token.length, range.head + token.length) };\r\n        let pos = range.head, next = nextChar(state.doc, pos), start;\r\n        if (next == token) {\r\n            if (nodeStart(state, pos)) {\r\n                return { changes: { insert: token + token, from: pos },\r\n                    effects: closeBracketEffect.of(pos + token.length),\r\n                    range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length) };\r\n            }\r\n            else if (closedBracketAt(state, pos)) {\r\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\r\n                return { range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),\r\n                    effects: skipBracketEffect.of(pos) };\r\n            }\r\n        }\r\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\r\n            (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&\r\n            nodeStart(state, start)) {\r\n            return { changes: { insert: token + token + token + token, from: pos },\r\n                effects: closeBracketEffect.of(pos + token.length),\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length) };\r\n        }\r\n        else if (state.charCategorizer(pos)(next) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) {\r\n            if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))\r\n                return { changes: { insert: token + token, from: pos },\r\n                    effects: closeBracketEffect.of(pos + token.length),\r\n                    range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length) };\r\n        }\r\n        return { range: dont = range };\r\n    });\r\n    return dont ? null : state.update(changes, {\r\n        scrollIntoView: true,\r\n        userEvent: \"input.type\"\r\n    });\r\n}\r\nfunction nodeStart(state, pos) {\r\n    let tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(state).resolveInner(pos + 1);\r\n    return tree.parent && tree.from == pos;\r\n}\r\nfunction probablyInString(state, pos, quoteToken, prefixes) {\r\n    let node = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(state).resolveInner(pos, -1);\r\n    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);\r\n    for (let i = 0; i < 5; i++) {\r\n        let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));\r\n        let quotePos = start.indexOf(quoteToken);\r\n        if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {\r\n            let first = node.firstChild;\r\n            while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {\r\n                if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)\r\n                    return false;\r\n                first = first.firstChild;\r\n            }\r\n            return true;\r\n        }\r\n        let parent = node.to == pos && node.parent;\r\n        if (!parent)\r\n            break;\r\n        node = parent;\r\n    }\r\n    return false;\r\n}\r\nfunction canStartStringAt(state, pos, prefixes) {\r\n    let charCat = state.charCategorizer(pos);\r\n    if (charCat(state.sliceDoc(pos - 1, pos)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word)\r\n        return pos;\r\n    for (let prefix of prefixes) {\r\n        let start = pos - prefix.length;\r\n        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word)\r\n            return start;\r\n    }\r\n    return -1;\r\n}\r\n\r\n/**\r\nReturns an extension that enables autocompletion.\r\n*/\r\nfunction autocompletion(config = {}) {\r\n    return [\r\n        completionState,\r\n        completionConfig.of(config),\r\n        completionPlugin,\r\n        completionKeymapExt,\r\n        baseTheme\r\n    ];\r\n}\r\n/**\r\nBasic keybindings for autocompletion.\r\n\r\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\r\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\r\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\r\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\r\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\r\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\r\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\r\n*/\r\nconst completionKeymap = [\r\n    { key: \"Ctrl-Space\", run: startCompletion },\r\n    { key: \"Escape\", run: closeCompletion },\r\n    { key: \"ArrowDown\", run: /*@__PURE__*/moveCompletionSelection(true) },\r\n    { key: \"ArrowUp\", run: /*@__PURE__*/moveCompletionSelection(false) },\r\n    { key: \"PageDown\", run: /*@__PURE__*/moveCompletionSelection(true, \"page\") },\r\n    { key: \"PageUp\", run: /*@__PURE__*/moveCompletionSelection(false, \"page\") },\r\n    { key: \"Enter\", run: acceptCompletion }\r\n];\r\nconst completionKeymapExt = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Prec.highest(/*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\r\n/**\r\nGet the current completion status. When completions are available,\r\nthis will return `\"active\"`. When completions are pending (in the\r\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\r\nreturns `null`.\r\n*/\r\nfunction completionStatus(state) {\r\n    let cState = state.field(completionState, false);\r\n    return cState && cState.active.some(a => a.state == 1 /* State.Pending */) ? \"pending\"\r\n        : cState && cState.active.some(a => a.state != 0 /* State.Inactive */) ? \"active\" : null;\r\n}\r\nconst completionArrayCache = /*@__PURE__*/new WeakMap;\r\n/**\r\nReturns the available completions as an array.\r\n*/\r\nfunction currentCompletions(state) {\r\n    var _a;\r\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\r\n    if (!open || open.disabled)\r\n        return [];\r\n    let completions = completionArrayCache.get(open.options);\r\n    if (!completions)\r\n        completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\r\n    return completions;\r\n}\r\n/**\r\nReturn the currently selected completion, if any.\r\n*/\r\nfunction selectedCompletion(state) {\r\n    var _a;\r\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\r\n    return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;\r\n}\r\n/**\r\nReturns the currently selected position in the active completion\r\nlist, or null if no completions are active.\r\n*/\r\nfunction selectedCompletionIndex(state) {\r\n    var _a;\r\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\r\n    return open && !open.disabled && open.selected >= 0 ? open.selected : null;\r\n}\r\n/**\r\nCreate an effect that can be attached to a transaction to change\r\nthe currently selected completion.\r\n*/\r\nfunction setSelectedCompletion(index) {\r\n    return setSelectedEffect.of(index);\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/autocomplete/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/commands/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@codemirror/commands/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blockComment\": function() { return /* binding */ blockComment; },\n/* harmony export */   \"blockUncomment\": function() { return /* binding */ blockUncomment; },\n/* harmony export */   \"copyLineDown\": function() { return /* binding */ copyLineDown; },\n/* harmony export */   \"copyLineUp\": function() { return /* binding */ copyLineUp; },\n/* harmony export */   \"cursorCharBackward\": function() { return /* binding */ cursorCharBackward; },\n/* harmony export */   \"cursorCharForward\": function() { return /* binding */ cursorCharForward; },\n/* harmony export */   \"cursorCharLeft\": function() { return /* binding */ cursorCharLeft; },\n/* harmony export */   \"cursorCharRight\": function() { return /* binding */ cursorCharRight; },\n/* harmony export */   \"cursorDocEnd\": function() { return /* binding */ cursorDocEnd; },\n/* harmony export */   \"cursorDocStart\": function() { return /* binding */ cursorDocStart; },\n/* harmony export */   \"cursorGroupBackward\": function() { return /* binding */ cursorGroupBackward; },\n/* harmony export */   \"cursorGroupForward\": function() { return /* binding */ cursorGroupForward; },\n/* harmony export */   \"cursorGroupLeft\": function() { return /* binding */ cursorGroupLeft; },\n/* harmony export */   \"cursorGroupRight\": function() { return /* binding */ cursorGroupRight; },\n/* harmony export */   \"cursorLineBoundaryBackward\": function() { return /* binding */ cursorLineBoundaryBackward; },\n/* harmony export */   \"cursorLineBoundaryForward\": function() { return /* binding */ cursorLineBoundaryForward; },\n/* harmony export */   \"cursorLineBoundaryLeft\": function() { return /* binding */ cursorLineBoundaryLeft; },\n/* harmony export */   \"cursorLineBoundaryRight\": function() { return /* binding */ cursorLineBoundaryRight; },\n/* harmony export */   \"cursorLineDown\": function() { return /* binding */ cursorLineDown; },\n/* harmony export */   \"cursorLineEnd\": function() { return /* binding */ cursorLineEnd; },\n/* harmony export */   \"cursorLineStart\": function() { return /* binding */ cursorLineStart; },\n/* harmony export */   \"cursorLineUp\": function() { return /* binding */ cursorLineUp; },\n/* harmony export */   \"cursorMatchingBracket\": function() { return /* binding */ cursorMatchingBracket; },\n/* harmony export */   \"cursorPageDown\": function() { return /* binding */ cursorPageDown; },\n/* harmony export */   \"cursorPageUp\": function() { return /* binding */ cursorPageUp; },\n/* harmony export */   \"cursorSubwordBackward\": function() { return /* binding */ cursorSubwordBackward; },\n/* harmony export */   \"cursorSubwordForward\": function() { return /* binding */ cursorSubwordForward; },\n/* harmony export */   \"cursorSyntaxLeft\": function() { return /* binding */ cursorSyntaxLeft; },\n/* harmony export */   \"cursorSyntaxRight\": function() { return /* binding */ cursorSyntaxRight; },\n/* harmony export */   \"defaultKeymap\": function() { return /* binding */ defaultKeymap; },\n/* harmony export */   \"deleteCharBackward\": function() { return /* binding */ deleteCharBackward; },\n/* harmony export */   \"deleteCharForward\": function() { return /* binding */ deleteCharForward; },\n/* harmony export */   \"deleteGroupBackward\": function() { return /* binding */ deleteGroupBackward; },\n/* harmony export */   \"deleteGroupForward\": function() { return /* binding */ deleteGroupForward; },\n/* harmony export */   \"deleteLine\": function() { return /* binding */ deleteLine; },\n/* harmony export */   \"deleteToLineEnd\": function() { return /* binding */ deleteToLineEnd; },\n/* harmony export */   \"deleteToLineStart\": function() { return /* binding */ deleteToLineStart; },\n/* harmony export */   \"deleteTrailingWhitespace\": function() { return /* binding */ deleteTrailingWhitespace; },\n/* harmony export */   \"emacsStyleKeymap\": function() { return /* binding */ emacsStyleKeymap; },\n/* harmony export */   \"history\": function() { return /* binding */ history; },\n/* harmony export */   \"historyField\": function() { return /* binding */ historyField; },\n/* harmony export */   \"historyKeymap\": function() { return /* binding */ historyKeymap; },\n/* harmony export */   \"indentLess\": function() { return /* binding */ indentLess; },\n/* harmony export */   \"indentMore\": function() { return /* binding */ indentMore; },\n/* harmony export */   \"indentSelection\": function() { return /* binding */ indentSelection; },\n/* harmony export */   \"indentWithTab\": function() { return /* binding */ indentWithTab; },\n/* harmony export */   \"insertBlankLine\": function() { return /* binding */ insertBlankLine; },\n/* harmony export */   \"insertNewline\": function() { return /* binding */ insertNewline; },\n/* harmony export */   \"insertNewlineAndIndent\": function() { return /* binding */ insertNewlineAndIndent; },\n/* harmony export */   \"insertTab\": function() { return /* binding */ insertTab; },\n/* harmony export */   \"invertedEffects\": function() { return /* binding */ invertedEffects; },\n/* harmony export */   \"isolateHistory\": function() { return /* binding */ isolateHistory; },\n/* harmony export */   \"lineComment\": function() { return /* binding */ lineComment; },\n/* harmony export */   \"lineUncomment\": function() { return /* binding */ lineUncomment; },\n/* harmony export */   \"moveLineDown\": function() { return /* binding */ moveLineDown; },\n/* harmony export */   \"moveLineUp\": function() { return /* binding */ moveLineUp; },\n/* harmony export */   \"redo\": function() { return /* binding */ redo; },\n/* harmony export */   \"redoDepth\": function() { return /* binding */ redoDepth; },\n/* harmony export */   \"redoSelection\": function() { return /* binding */ redoSelection; },\n/* harmony export */   \"selectAll\": function() { return /* binding */ selectAll; },\n/* harmony export */   \"selectCharBackward\": function() { return /* binding */ selectCharBackward; },\n/* harmony export */   \"selectCharForward\": function() { return /* binding */ selectCharForward; },\n/* harmony export */   \"selectCharLeft\": function() { return /* binding */ selectCharLeft; },\n/* harmony export */   \"selectCharRight\": function() { return /* binding */ selectCharRight; },\n/* harmony export */   \"selectDocEnd\": function() { return /* binding */ selectDocEnd; },\n/* harmony export */   \"selectDocStart\": function() { return /* binding */ selectDocStart; },\n/* harmony export */   \"selectGroupBackward\": function() { return /* binding */ selectGroupBackward; },\n/* harmony export */   \"selectGroupForward\": function() { return /* binding */ selectGroupForward; },\n/* harmony export */   \"selectGroupLeft\": function() { return /* binding */ selectGroupLeft; },\n/* harmony export */   \"selectGroupRight\": function() { return /* binding */ selectGroupRight; },\n/* harmony export */   \"selectLine\": function() { return /* binding */ selectLine; },\n/* harmony export */   \"selectLineBoundaryBackward\": function() { return /* binding */ selectLineBoundaryBackward; },\n/* harmony export */   \"selectLineBoundaryForward\": function() { return /* binding */ selectLineBoundaryForward; },\n/* harmony export */   \"selectLineBoundaryLeft\": function() { return /* binding */ selectLineBoundaryLeft; },\n/* harmony export */   \"selectLineBoundaryRight\": function() { return /* binding */ selectLineBoundaryRight; },\n/* harmony export */   \"selectLineDown\": function() { return /* binding */ selectLineDown; },\n/* harmony export */   \"selectLineEnd\": function() { return /* binding */ selectLineEnd; },\n/* harmony export */   \"selectLineStart\": function() { return /* binding */ selectLineStart; },\n/* harmony export */   \"selectLineUp\": function() { return /* binding */ selectLineUp; },\n/* harmony export */   \"selectMatchingBracket\": function() { return /* binding */ selectMatchingBracket; },\n/* harmony export */   \"selectPageDown\": function() { return /* binding */ selectPageDown; },\n/* harmony export */   \"selectPageUp\": function() { return /* binding */ selectPageUp; },\n/* harmony export */   \"selectParentSyntax\": function() { return /* binding */ selectParentSyntax; },\n/* harmony export */   \"selectSubwordBackward\": function() { return /* binding */ selectSubwordBackward; },\n/* harmony export */   \"selectSubwordForward\": function() { return /* binding */ selectSubwordForward; },\n/* harmony export */   \"selectSyntaxLeft\": function() { return /* binding */ selectSyntaxLeft; },\n/* harmony export */   \"selectSyntaxRight\": function() { return /* binding */ selectSyntaxRight; },\n/* harmony export */   \"simplifySelection\": function() { return /* binding */ simplifySelection; },\n/* harmony export */   \"splitLine\": function() { return /* binding */ splitLine; },\n/* harmony export */   \"standardKeymap\": function() { return /* binding */ standardKeymap; },\n/* harmony export */   \"toggleBlockComment\": function() { return /* binding */ toggleBlockComment; },\n/* harmony export */   \"toggleBlockCommentByLine\": function() { return /* binding */ toggleBlockCommentByLine; },\n/* harmony export */   \"toggleComment\": function() { return /* binding */ toggleComment; },\n/* harmony export */   \"toggleLineComment\": function() { return /* binding */ toggleLineComment; },\n/* harmony export */   \"transposeChars\": function() { return /* binding */ transposeChars; },\n/* harmony export */   \"undo\": function() { return /* binding */ undo; },\n/* harmony export */   \"undoDepth\": function() { return /* binding */ undoDepth; },\n/* harmony export */   \"undoSelection\": function() { return /* binding */ undoSelection; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/language */ \"./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _lezer_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/common */ \"./node_modules/@lezer/common/dist/index.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\nComment or uncomment the current selection. Will use line comments\r\nif available, otherwise falling back to block comments.\r\n*/\r\nconst toggleComment = target => {\r\n    let config = getConfig(target.state);\r\n    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;\r\n};\r\nfunction command(f, option) {\r\n    return ({ state, dispatch }) => {\r\n        if (state.readOnly)\r\n            return false;\r\n        let tr = f(option, state);\r\n        if (!tr)\r\n            return false;\r\n        dispatch(state.update(tr));\r\n        return true;\r\n    };\r\n}\r\n/**\r\nComment or uncomment the current selection using line comments.\r\nThe line comment syntax is taken from the\r\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\r\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\r\n*/\r\nconst toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);\r\n/**\r\nComment the current selection using line comments.\r\n*/\r\nconst lineComment = /*@__PURE__*/command(changeLineComment, 1 /* CommentOption.Comment */);\r\n/**\r\nUncomment the current selection using line comments.\r\n*/\r\nconst lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* CommentOption.Uncomment */);\r\n/**\r\nComment or uncomment the current selection using block comments.\r\nThe block comment syntax is taken from the\r\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\r\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\r\n*/\r\nconst toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);\r\n/**\r\nComment the current selection using block comments.\r\n*/\r\nconst blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* CommentOption.Comment */);\r\n/**\r\nUncomment the current selection using block comments.\r\n*/\r\nconst blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* CommentOption.Uncomment */);\r\n/**\r\nComment or uncomment the lines around the current selection using\r\nblock comments.\r\n*/\r\nconst toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);\r\nfunction getConfig(state, pos = state.selection.main.head) {\r\n    let data = state.languageDataAt(\"commentTokens\", pos);\r\n    return data.length ? data[0] : {};\r\n}\r\nconst SearchMargin = 50;\r\n/**\r\nDetermines if the given range is block-commented in the given\r\nstate.\r\n*/\r\nfunction findBlockComment(state, { open, close }, from, to) {\r\n    let textBefore = state.sliceDoc(from - SearchMargin, from);\r\n    let textAfter = state.sliceDoc(to, to + SearchMargin);\r\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\r\n    let beforeOff = textBefore.length - spaceBefore;\r\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&\r\n        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\r\n        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },\r\n            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };\r\n    }\r\n    let startText, endText;\r\n    if (to - from <= 2 * SearchMargin) {\r\n        startText = endText = state.sliceDoc(from, to);\r\n    }\r\n    else {\r\n        startText = state.sliceDoc(from, from + SearchMargin);\r\n        endText = state.sliceDoc(to - SearchMargin, to);\r\n    }\r\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\r\n    let endOff = endText.length - endSpace - close.length;\r\n    if (startText.slice(startSpace, startSpace + open.length) == open &&\r\n        endText.slice(endOff, endOff + close.length) == close) {\r\n        return { open: { pos: from + startSpace + open.length,\r\n                margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },\r\n            close: { pos: to - endSpace - close.length,\r\n                margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };\r\n    }\r\n    return null;\r\n}\r\nfunction selectedLineRanges(state) {\r\n    let ranges = [];\r\n    for (let r of state.selection.ranges) {\r\n        let fromLine = state.doc.lineAt(r.from);\r\n        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\r\n        let last = ranges.length - 1;\r\n        if (last >= 0 && ranges[last].to > fromLine.from)\r\n            ranges[last].to = toLine.to;\r\n        else\r\n            ranges.push({ from: fromLine.from, to: toLine.to });\r\n    }\r\n    return ranges;\r\n}\r\n// Performs toggle, comment and uncomment of block comments in\r\n// languages that support them.\r\nfunction changeBlockComment(option, state, ranges = state.selection.ranges) {\r\n    let tokens = ranges.map(r => getConfig(state, r.from).block);\r\n    if (!tokens.every(c => c))\r\n        return null;\r\n    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));\r\n    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {\r\n        return { changes: state.changes(ranges.map((range, i) => {\r\n                if (comments[i])\r\n                    return [];\r\n                return [{ from: range.from, insert: tokens[i].open + \" \" }, { from: range.to, insert: \" \" + tokens[i].close }];\r\n            })) };\r\n    }\r\n    else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {\r\n        let changes = [];\r\n        for (let i = 0, comment; i < comments.length; i++)\r\n            if (comment = comments[i]) {\r\n                let token = tokens[i], { open, close } = comment;\r\n                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });\r\n            }\r\n        return { changes };\r\n    }\r\n    return null;\r\n}\r\n// Performs toggle, comment and uncomment of line comments.\r\nfunction changeLineComment(option, state, ranges = state.selection.ranges) {\r\n    let lines = [];\r\n    let prevLine = -1;\r\n    for (let { from, to } of ranges) {\r\n        let startI = lines.length, minIndent = 1e9;\r\n        for (let pos = from; pos <= to;) {\r\n            let line = state.doc.lineAt(pos);\r\n            if (line.from > prevLine && (from == to || to > line.from)) {\r\n                prevLine = line.from;\r\n                let token = getConfig(state, pos).line;\r\n                if (!token)\r\n                    continue;\r\n                let indent = /^\\s*/.exec(line.text)[0].length;\r\n                let empty = indent == line.length;\r\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\r\n                if (indent < line.text.length && indent < minIndent)\r\n                    minIndent = indent;\r\n                lines.push({ line, comment, token, indent, empty, single: false });\r\n            }\r\n            pos = line.to + 1;\r\n        }\r\n        if (minIndent < 1e9)\r\n            for (let i = startI; i < lines.length; i++)\r\n                if (lines[i].indent < lines[i].line.text.length)\r\n                    lines[i].indent = minIndent;\r\n        if (lines.length == startI + 1)\r\n            lines[startI].single = true;\r\n    }\r\n    if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {\r\n        let changes = [];\r\n        for (let { line, token, indent, empty, single } of lines)\r\n            if (single || !empty)\r\n                changes.push({ from: line.from + indent, insert: token + \" \" });\r\n        let changeSet = state.changes(changes);\r\n        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };\r\n    }\r\n    else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {\r\n        let changes = [];\r\n        for (let { line, comment, token } of lines)\r\n            if (comment >= 0) {\r\n                let from = line.from + comment, to = from + token.length;\r\n                if (line.text[to - line.from] == \" \")\r\n                    to++;\r\n                changes.push({ from, to });\r\n            }\r\n        return { changes };\r\n    }\r\n    return null;\r\n}\r\n\r\nconst fromHistory = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Annotation.define();\r\n/**\r\nTransaction annotation that will prevent that transaction from\r\nbeing combined with other transactions in the undo history. Given\r\n`\"before\"`, it'll prevent merging with previous transactions. With\r\n`\"after\"`, subsequent transactions won't be combined with this\r\none. With `\"full\"`, the transaction is isolated on both sides.\r\n*/\r\nconst isolateHistory = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Annotation.define();\r\n/**\r\nThis facet provides a way to register functions that, given a\r\ntransaction, provide a set of effects that the history should\r\nstore when inverting the transaction. This can be used to\r\nintegrate some kinds of effects in the history, so that they can\r\nbe undone (and redone again).\r\n*/\r\nconst invertedEffects = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define();\r\nconst historyConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(configs, {\r\n            minDepth: 100,\r\n            newGroupDelay: 500\r\n        }, { minDepth: Math.max, newGroupDelay: Math.min });\r\n    }\r\n});\r\nfunction changeEnd(changes) {\r\n    let end = 0;\r\n    changes.iterChangedRanges((_, to) => end = to);\r\n    return end;\r\n}\r\nconst historyField_ = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() {\r\n        return HistoryState.empty;\r\n    },\r\n    update(state, tr) {\r\n        let config = tr.state.facet(historyConfig);\r\n        let fromHist = tr.annotation(fromHistory);\r\n        if (fromHist) {\r\n            let selection = tr.docChanged ? _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.single(changeEnd(tr.changes)) : undefined;\r\n            let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;\r\n            let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;\r\n            if (item)\r\n                other = updateBranch(other, other.length, config.minDepth, item);\r\n            else\r\n                other = addSelection(other, tr.startState.selection);\r\n            return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);\r\n        }\r\n        let isolate = tr.annotation(isolateHistory);\r\n        if (isolate == \"full\" || isolate == \"before\")\r\n            state = state.isolate();\r\n        if (tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.addToHistory) === false)\r\n            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\r\n        let event = HistEvent.fromTransaction(tr);\r\n        let time = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.time), userEvent = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent);\r\n        if (event)\r\n            state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);\r\n        else if (tr.selection)\r\n            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\r\n        if (isolate == \"full\" || isolate == \"after\")\r\n            state = state.isolate();\r\n        return state;\r\n    },\r\n    toJSON(value) {\r\n        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };\r\n    },\r\n    fromJSON(json) {\r\n        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));\r\n    }\r\n});\r\n/**\r\nCreate a history extension with the given configuration.\r\n*/\r\nfunction history(config = {}) {\r\n    return [\r\n        historyField_,\r\n        historyConfig.of(config),\r\n        _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.domEventHandlers({\r\n            beforeinput(e, view) {\r\n                let command = e.inputType == \"historyUndo\" ? undo : e.inputType == \"historyRedo\" ? redo : null;\r\n                if (!command)\r\n                    return false;\r\n                e.preventDefault();\r\n                return command(view);\r\n            }\r\n        })\r\n    ];\r\n}\r\n/**\r\nThe state field used to store the history data. Should probably\r\nonly be used when you want to\r\n[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or\r\n[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way\r\nthat preserves history.\r\n*/\r\nconst historyField = historyField_;\r\nfunction cmd(side, selection) {\r\n    return function ({ state, dispatch }) {\r\n        if (!selection && state.readOnly)\r\n            return false;\r\n        let historyState = state.field(historyField_, false);\r\n        if (!historyState)\r\n            return false;\r\n        let tr = historyState.pop(side, state, selection);\r\n        if (!tr)\r\n            return false;\r\n        dispatch(tr);\r\n        return true;\r\n    };\r\n}\r\n/**\r\nUndo a single group of history events. Returns false if no group\r\nwas available.\r\n*/\r\nconst undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);\r\n/**\r\nRedo a group of history events. Returns false if no group was\r\navailable.\r\n*/\r\nconst redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);\r\n/**\r\nUndo a change or selection change.\r\n*/\r\nconst undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);\r\n/**\r\nRedo a change or selection change.\r\n*/\r\nconst redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);\r\nfunction depth(side) {\r\n    return function (state) {\r\n        let histState = state.field(historyField_, false);\r\n        if (!histState)\r\n            return 0;\r\n        let branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;\r\n        return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\r\n    };\r\n}\r\n/**\r\nThe amount of undoable change events available in a given state.\r\n*/\r\nconst undoDepth = /*@__PURE__*/depth(0 /* BranchName.Done */);\r\n/**\r\nThe amount of redoable change events available in a given state.\r\n*/\r\nconst redoDepth = /*@__PURE__*/depth(1 /* BranchName.Undone */);\r\n// History events store groups of changes or effects that need to be\r\n// undone/redone together.\r\nclass HistEvent {\r\n    constructor(\r\n    // The changes in this event. Normal events hold at least one\r\n    // change or effect. But it may be necessary to store selection\r\n    // events before the first change, in which case a special type of\r\n    // instance is created which doesn't hold any changes, with\r\n    // changes == startSelection == undefined\r\n    changes, \r\n    // The effects associated with this event\r\n    effects, \r\n    // Accumulated mapping (from addToHistory==false) that should be\r\n    // applied to events below this one.\r\n    mapped, \r\n    // The selection before this event\r\n    startSelection, \r\n    // Stores selection changes after this event, to be used for\r\n    // selection undo/redo.\r\n    selectionsAfter) {\r\n        this.changes = changes;\r\n        this.effects = effects;\r\n        this.mapped = mapped;\r\n        this.startSelection = startSelection;\r\n        this.selectionsAfter = selectionsAfter;\r\n    }\r\n    setSelAfter(after) {\r\n        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\r\n    }\r\n    toJSON() {\r\n        var _a, _b, _c;\r\n        return {\r\n            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\r\n            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\r\n            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())\r\n        };\r\n    }\r\n    static fromJSON(json) {\r\n        return new HistEvent(json.changes && _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.ChangeSet.fromJSON(json.changes), [], json.mapped && _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.ChangeDesc.fromJSON(json.mapped), json.startSelection && _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.fromJSON));\r\n    }\r\n    // This does not check `addToHistory` and such, it assumes the\r\n    // transaction needs to be converted to an item. Returns null when\r\n    // there are no changes or effects in the transaction.\r\n    static fromTransaction(tr, selection) {\r\n        let effects = none;\r\n        for (let invert of tr.startState.facet(invertedEffects)) {\r\n            let result = invert(tr);\r\n            if (result.length)\r\n                effects = effects.concat(result);\r\n        }\r\n        if (!effects.length && tr.changes.empty)\r\n            return null;\r\n        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);\r\n    }\r\n    static selection(selections) {\r\n        return new HistEvent(undefined, none, undefined, undefined, selections);\r\n    }\r\n}\r\nfunction updateBranch(branch, to, maxLen, newEvent) {\r\n    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\r\n    let newBranch = branch.slice(start, to);\r\n    newBranch.push(newEvent);\r\n    return newBranch;\r\n}\r\nfunction isAdjacent(a, b) {\r\n    let ranges = [], isAdjacent = false;\r\n    a.iterChangedRanges((f, t) => ranges.push(f, t));\r\n    b.iterChangedRanges((_f, _t, f, t) => {\r\n        for (let i = 0; i < ranges.length;) {\r\n            let from = ranges[i++], to = ranges[i++];\r\n            if (t >= from && f <= to)\r\n                isAdjacent = true;\r\n        }\r\n    });\r\n    return isAdjacent;\r\n}\r\nfunction eqSelectionShape(a, b) {\r\n    return a.ranges.length == b.ranges.length &&\r\n        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;\r\n}\r\nfunction conc(a, b) {\r\n    return !a.length ? b : !b.length ? a : a.concat(b);\r\n}\r\nconst none = [];\r\nconst MaxSelectionsPerEvent = 200;\r\nfunction addSelection(branch, selection) {\r\n    if (!branch.length) {\r\n        return [HistEvent.selection([selection])];\r\n    }\r\n    else {\r\n        let lastEvent = branch[branch.length - 1];\r\n        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));\r\n        if (sels.length && sels[sels.length - 1].eq(selection))\r\n            return branch;\r\n        sels.push(selection);\r\n        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\r\n    }\r\n}\r\n// Assumes the top item has one or more selectionAfter values\r\nfunction popSelection(branch) {\r\n    let last = branch[branch.length - 1];\r\n    let newBranch = branch.slice();\r\n    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\r\n    return newBranch;\r\n}\r\n// Add a mapping to the top event in the given branch. If this maps\r\n// away all the changes and effects in that item, drop it and\r\n// propagate the mapping to the next item.\r\nfunction addMappingToBranch(branch, mapping) {\r\n    if (!branch.length)\r\n        return branch;\r\n    let length = branch.length, selections = none;\r\n    while (length) {\r\n        let event = mapEvent(branch[length - 1], mapping, selections);\r\n        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping\r\n            let result = branch.slice(0, length);\r\n            result[length - 1] = event;\r\n            return result;\r\n        }\r\n        else { // Drop this event, since there's no changes or effects left\r\n            mapping = event.mapped;\r\n            length--;\r\n            selections = event.selectionsAfter;\r\n        }\r\n    }\r\n    return selections.length ? [HistEvent.selection(selections)] : none;\r\n}\r\nfunction mapEvent(event, mapping, extraSelections) {\r\n    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);\r\n    // Change-less events don't store mappings (they are always the last event in a branch)\r\n    if (!event.changes)\r\n        return HistEvent.selection(selections);\r\n    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);\r\n    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\r\n    return new HistEvent(mappedChanges, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\r\n}\r\nconst joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\r\nclass HistoryState {\r\n    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {\r\n        this.done = done;\r\n        this.undone = undone;\r\n        this.prevTime = prevTime;\r\n        this.prevUserEvent = prevUserEvent;\r\n    }\r\n    isolate() {\r\n        return this.prevTime ? new HistoryState(this.done, this.undone) : this;\r\n    }\r\n    addChanges(event, time, userEvent, newGroupDelay, maxLen) {\r\n        let done = this.done, lastEvent = done[done.length - 1];\r\n        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&\r\n            (!userEvent || joinableUserEvent.test(userEvent)) &&\r\n            ((!lastEvent.selectionsAfter.length &&\r\n                time - this.prevTime < newGroupDelay &&\r\n                isAdjacent(lastEvent.changes, event.changes)) ||\r\n                // For compose (but not compose.start) events, always join with previous event\r\n                userEvent == \"input.type.compose\")) {\r\n            done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));\r\n        }\r\n        else {\r\n            done = updateBranch(done, done.length, maxLen, event);\r\n        }\r\n        return new HistoryState(done, none, time, userEvent);\r\n    }\r\n    addSelection(selection, time, userEvent, newGroupDelay) {\r\n        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;\r\n        if (last.length > 0 &&\r\n            time - this.prevTime < newGroupDelay &&\r\n            userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) &&\r\n            eqSelectionShape(last[last.length - 1], selection))\r\n            return this;\r\n        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);\r\n    }\r\n    addMapping(mapping) {\r\n        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\r\n    }\r\n    pop(side, state, selection) {\r\n        let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;\r\n        if (branch.length == 0)\r\n            return null;\r\n        let event = branch[branch.length - 1];\r\n        if (selection && event.selectionsAfter.length) {\r\n            return state.update({\r\n                selection: event.selectionsAfter[event.selectionsAfter.length - 1],\r\n                annotations: fromHistory.of({ side, rest: popSelection(branch) }),\r\n                userEvent: side == 0 /* BranchName.Done */ ? \"select.undo\" : \"select.redo\",\r\n                scrollIntoView: true\r\n            });\r\n        }\r\n        else if (!event.changes) {\r\n            return null;\r\n        }\r\n        else {\r\n            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);\r\n            if (event.mapped)\r\n                rest = addMappingToBranch(rest, event.mapped);\r\n            return state.update({\r\n                changes: event.changes,\r\n                selection: event.startSelection,\r\n                effects: event.effects,\r\n                annotations: fromHistory.of({ side, rest }),\r\n                filter: false,\r\n                userEvent: side == 0 /* BranchName.Done */ ? \"undo\" : \"redo\",\r\n                scrollIntoView: true\r\n            });\r\n        }\r\n    }\r\n}\r\nHistoryState.empty = /*@__PURE__*/new HistoryState(none, none);\r\n/**\r\nDefault key bindings for the undo history.\r\n\r\n- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).\r\n- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).\r\n- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).\r\n- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).\r\n*/\r\nconst historyKeymap = [\r\n    { key: \"Mod-z\", run: undo, preventDefault: true },\r\n    { key: \"Mod-y\", mac: \"Mod-Shift-z\", run: redo, preventDefault: true },\r\n    { linux: \"Ctrl-Shift-z\", run: redo, preventDefault: true },\r\n    { key: \"Mod-u\", run: undoSelection, preventDefault: true },\r\n    { key: \"Alt-u\", mac: \"Mod-Shift-u\", run: redoSelection, preventDefault: true }\r\n];\r\n\r\nfunction updateSel(sel, by) {\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);\r\n}\r\nfunction setSel(state, selection) {\r\n    return state.update({ selection, scrollIntoView: true, userEvent: \"select\" });\r\n}\r\nfunction moveSel({ state, dispatch }, how) {\r\n    let selection = updateSel(state.selection, how);\r\n    if (selection.eq(state.selection))\r\n        return false;\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n}\r\nfunction rangeEnd(range, forward) {\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(forward ? range.to : range.from);\r\n}\r\nfunction cursorByChar(view, forward) {\r\n    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));\r\n}\r\nfunction ltrAtCursor(view) {\r\n    return view.textDirectionAt(view.state.selection.main.head) == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR;\r\n}\r\n/**\r\nMove the selection one character to the left (which is backward in\r\nleft-to-right text, forward in right-to-left text).\r\n*/\r\nconst cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));\r\n/**\r\nMove the selection one character to the right.\r\n*/\r\nconst cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));\r\n/**\r\nMove the selection one character forward.\r\n*/\r\nconst cursorCharForward = view => cursorByChar(view, true);\r\n/**\r\nMove the selection one character backward.\r\n*/\r\nconst cursorCharBackward = view => cursorByChar(view, false);\r\nfunction cursorByGroup(view, forward) {\r\n    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));\r\n}\r\n/**\r\nMove the selection to the left across one group of word or\r\nnon-word (but also non-space) characters.\r\n*/\r\nconst cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));\r\n/**\r\nMove the selection one group to the right.\r\n*/\r\nconst cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));\r\n/**\r\nMove the selection one group forward.\r\n*/\r\nconst cursorGroupForward = view => cursorByGroup(view, true);\r\n/**\r\nMove the selection one group backward.\r\n*/\r\nconst cursorGroupBackward = view => cursorByGroup(view, false);\r\nfunction moveBySubword(view, range, forward) {\r\n    let categorize = view.state.charCategorizer(range.from);\r\n    return view.moveByChar(range, forward, start => {\r\n        let cat = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Space, pos = range.from;\r\n        let done = false, sawUpper = false, sawLower = false;\r\n        let step = (next) => {\r\n            if (done)\r\n                return false;\r\n            pos += forward ? next.length : -next.length;\r\n            let nextCat = categorize(next), ahead;\r\n            if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Space)\r\n                cat = nextCat;\r\n            if (cat != nextCat)\r\n                return false;\r\n            if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) {\r\n                if (next.toLowerCase() == next) {\r\n                    if (!forward && sawUpper)\r\n                        return false;\r\n                    sawLower = true;\r\n                }\r\n                else if (sawLower) {\r\n                    if (forward)\r\n                        return false;\r\n                    done = true;\r\n                }\r\n                else {\r\n                    if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word &&\r\n                        ahead.toLowerCase() == ahead)\r\n                        return false;\r\n                    sawUpper = true;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        step(start);\r\n        return step;\r\n    });\r\n}\r\nfunction cursorBySubword(view, forward) {\r\n    return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));\r\n}\r\n/**\r\nMove the selection one group or camel-case subword forward.\r\n*/\r\nconst cursorSubwordForward = view => cursorBySubword(view, true);\r\n/**\r\nMove the selection one group or camel-case subword backward.\r\n*/\r\nconst cursorSubwordBackward = view => cursorBySubword(view, false);\r\nfunction interestingNode(state, node, bracketProp) {\r\n    if (node.type.prop(bracketProp))\r\n        return true;\r\n    let len = node.to - node.from;\r\n    return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\r\n}\r\nfunction moveBySyntax(state, start, forward) {\r\n    let pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state).resolveInner(start.head);\r\n    let bracketProp = forward ? _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy : _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.openedBy;\r\n    // Scan forward through child nodes to see if there's an interesting\r\n    // node ahead.\r\n    for (let at = start.head;;) {\r\n        let next = forward ? pos.childAfter(at) : pos.childBefore(at);\r\n        if (!next)\r\n            break;\r\n        if (interestingNode(state, next, bracketProp))\r\n            pos = next;\r\n        else\r\n            at = forward ? next.to : next.from;\r\n    }\r\n    let bracket = pos.type.prop(bracketProp), match, newPos;\r\n    if (bracket && (match = forward ? (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, pos.from, 1) : (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, pos.to, -1)) && match.matched)\r\n        newPos = forward ? match.end.to : match.end.from;\r\n    else\r\n        newPos = forward ? pos.to : pos.from;\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(newPos, forward ? -1 : 1);\r\n}\r\n/**\r\nMove the cursor over the next syntactic element to the left.\r\n*/\r\nconst cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\r\n/**\r\nMove the cursor over the next syntactic element to the right.\r\n*/\r\nconst cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\r\nfunction cursorByLine(view, forward) {\r\n    return moveSel(view, range => {\r\n        if (!range.empty)\r\n            return rangeEnd(range, forward);\r\n        let moved = view.moveVertically(range, forward);\r\n        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\r\n    });\r\n}\r\n/**\r\nMove the selection one line up.\r\n*/\r\nconst cursorLineUp = view => cursorByLine(view, false);\r\n/**\r\nMove the selection one line down.\r\n*/\r\nconst cursorLineDown = view => cursorByLine(view, true);\r\nfunction pageHeight(view) {\r\n    return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);\r\n}\r\nfunction cursorByPage(view, forward) {\r\n    let { state } = view, selection = updateSel(state.selection, range => {\r\n        return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);\r\n    });\r\n    if (selection.eq(state.selection))\r\n        return false;\r\n    let startPos = view.coordsAtPos(state.selection.main.head);\r\n    let scrollRect = view.scrollDOM.getBoundingClientRect();\r\n    let effect;\r\n    if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom &&\r\n        startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight)\r\n        effect = _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.scrollIntoView(selection.main.head, { y: \"start\", yMargin: startPos.top - scrollRect.top });\r\n    view.dispatch(setSel(state, selection), { effects: effect });\r\n    return true;\r\n}\r\n/**\r\nMove the selection one page up.\r\n*/\r\nconst cursorPageUp = view => cursorByPage(view, false);\r\n/**\r\nMove the selection one page down.\r\n*/\r\nconst cursorPageDown = view => cursorByPage(view, true);\r\nfunction moveByLineBoundary(view, start, forward) {\r\n    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);\r\n    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))\r\n        moved = view.moveToLineBoundary(start, forward, false);\r\n    if (!forward && moved.head == line.from && line.length) {\r\n        let space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\r\n        if (space && start.head != line.from + space)\r\n            moved = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(line.from + space);\r\n    }\r\n    return moved;\r\n}\r\n/**\r\nMove the selection to the next line wrap point, or to the end of\r\nthe line if there isn't one left on this line.\r\n*/\r\nconst cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));\r\n/**\r\nMove the selection to previous line wrap point, or failing that to\r\nthe start of the line. If the line is indented, and the cursor\r\nisn't already at the end of the indentation, this will move to the\r\nend of the indentation instead of the start of the line.\r\n*/\r\nconst cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));\r\n/**\r\nMove the selection one line wrap point to the left.\r\n*/\r\nconst cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\r\n/**\r\nMove the selection one line wrap point to the right.\r\n*/\r\nconst cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\r\n/**\r\nMove the selection to the start of the line.\r\n*/\r\nconst cursorLineStart = view => moveSel(view, range => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));\r\n/**\r\nMove the selection to the end of the line.\r\n*/\r\nconst cursorLineEnd = view => moveSel(view, range => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));\r\nfunction toMatchingBracket(state, dispatch, extend) {\r\n    let found = false, selection = updateSel(state.selection, range => {\r\n        let matching = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, range.head, -1)\r\n            || (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, range.head, 1)\r\n            || (range.head > 0 && (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, range.head - 1, 1))\r\n            || (range.head < state.doc.length && (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, range.head + 1, -1));\r\n        if (!matching || !matching.end)\r\n            return range;\r\n        found = true;\r\n        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;\r\n        return extend ? _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor, head) : _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(head);\r\n    });\r\n    if (!found)\r\n        return false;\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n}\r\n/**\r\nMove the selection to the bracket matching the one it is currently\r\non, if any.\r\n*/\r\nconst cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);\r\n/**\r\nExtend the selection to the bracket matching the one the selection\r\nhead is currently on, if any.\r\n*/\r\nconst selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);\r\nfunction extendSel(view, how) {\r\n    let selection = updateSel(view.state.selection, range => {\r\n        let head = how(range);\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);\r\n    });\r\n    if (selection.eq(view.state.selection))\r\n        return false;\r\n    view.dispatch(setSel(view.state, selection));\r\n    return true;\r\n}\r\nfunction selectByChar(view, forward) {\r\n    return extendSel(view, range => view.moveByChar(range, forward));\r\n}\r\n/**\r\nMove the selection head one character to the left, while leaving\r\nthe anchor in place.\r\n*/\r\nconst selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));\r\n/**\r\nMove the selection head one character to the right.\r\n*/\r\nconst selectCharRight = view => selectByChar(view, ltrAtCursor(view));\r\n/**\r\nMove the selection head one character forward.\r\n*/\r\nconst selectCharForward = view => selectByChar(view, true);\r\n/**\r\nMove the selection head one character backward.\r\n*/\r\nconst selectCharBackward = view => selectByChar(view, false);\r\nfunction selectByGroup(view, forward) {\r\n    return extendSel(view, range => view.moveByGroup(range, forward));\r\n}\r\n/**\r\nMove the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to\r\nthe left.\r\n*/\r\nconst selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));\r\n/**\r\nMove the selection head one group to the right.\r\n*/\r\nconst selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));\r\n/**\r\nMove the selection head one group forward.\r\n*/\r\nconst selectGroupForward = view => selectByGroup(view, true);\r\n/**\r\nMove the selection head one group backward.\r\n*/\r\nconst selectGroupBackward = view => selectByGroup(view, false);\r\nfunction selectBySubword(view, forward) {\r\n    return extendSel(view, range => moveBySubword(view, range, forward));\r\n}\r\n/**\r\nMove the selection head one group or camel-case subword forward.\r\n*/\r\nconst selectSubwordForward = view => selectBySubword(view, true);\r\n/**\r\nMove the selection head one group or subword backward.\r\n*/\r\nconst selectSubwordBackward = view => selectBySubword(view, false);\r\n/**\r\nMove the selection head over the next syntactic element to the left.\r\n*/\r\nconst selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\r\n/**\r\nMove the selection head over the next syntactic element to the right.\r\n*/\r\nconst selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\r\nfunction selectByLine(view, forward) {\r\n    return extendSel(view, range => view.moveVertically(range, forward));\r\n}\r\n/**\r\nMove the selection head one line up.\r\n*/\r\nconst selectLineUp = view => selectByLine(view, false);\r\n/**\r\nMove the selection head one line down.\r\n*/\r\nconst selectLineDown = view => selectByLine(view, true);\r\nfunction selectByPage(view, forward) {\r\n    return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));\r\n}\r\n/**\r\nMove the selection head one page up.\r\n*/\r\nconst selectPageUp = view => selectByPage(view, false);\r\n/**\r\nMove the selection head one page down.\r\n*/\r\nconst selectPageDown = view => selectByPage(view, true);\r\n/**\r\nMove the selection head to the next line boundary.\r\n*/\r\nconst selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));\r\n/**\r\nMove the selection head to the previous line boundary.\r\n*/\r\nconst selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));\r\n/**\r\nMove the selection head one line boundary to the left.\r\n*/\r\nconst selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\r\n/**\r\nMove the selection head one line boundary to the right.\r\n*/\r\nconst selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\r\n/**\r\nMove the selection head to the start of the line.\r\n*/\r\nconst selectLineStart = view => extendSel(view, range => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.lineBlockAt(range.head).from));\r\n/**\r\nMove the selection head to the end of the line.\r\n*/\r\nconst selectLineEnd = view => extendSel(view, range => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.lineBlockAt(range.head).to));\r\n/**\r\nMove the selection to the start of the document.\r\n*/\r\nconst cursorDocStart = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: 0 }));\r\n    return true;\r\n};\r\n/**\r\nMove the selection to the end of the document.\r\n*/\r\nconst cursorDocEnd = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: state.doc.length }));\r\n    return true;\r\n};\r\n/**\r\nMove the selection head to the start of the document.\r\n*/\r\nconst selectDocStart = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));\r\n    return true;\r\n};\r\n/**\r\nMove the selection head to the end of the document.\r\n*/\r\nconst selectDocEnd = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));\r\n    return true;\r\n};\r\n/**\r\nSelect the entire document.\r\n*/\r\nconst selectAll = ({ state, dispatch }) => {\r\n    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: \"select\" }));\r\n    return true;\r\n};\r\n/**\r\nExpand the selection to cover entire lines.\r\n*/\r\nconst selectLine = ({ state, dispatch }) => {\r\n    let ranges = selectedLineBlocks(state).map(({ from, to }) => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(from, Math.min(to + 1, state.doc.length)));\r\n    dispatch(state.update({ selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges), userEvent: \"select\" }));\r\n    return true;\r\n};\r\n/**\r\nSelect the next syntactic construct that is larger than the\r\nselection. Note that this will only work insofar as the language\r\n[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full\r\nsyntax tree.\r\n*/\r\nconst selectParentSyntax = ({ state, dispatch }) => {\r\n    let selection = updateSel(state.selection, range => {\r\n        var _a;\r\n        let context = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state).resolveInner(range.head, 1);\r\n        while (!((context.from < range.from && context.to >= range.to) ||\r\n            (context.to > range.to && context.from <= range.from) ||\r\n            !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))\r\n            context = context.parent;\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(context.to, context.from);\r\n    });\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n};\r\n/**\r\nSimplify the current selection. When multiple ranges are selected,\r\nreduce it to its main range. Otherwise, if the selection is\r\nnon-empty, convert it to a cursor selection.\r\n*/\r\nconst simplifySelection = ({ state, dispatch }) => {\r\n    let cur = state.selection, selection = null;\r\n    if (cur.ranges.length > 1)\r\n        selection = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create([cur.main]);\r\n    else if (!cur.main.empty)\r\n        selection = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create([_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(cur.main.head)]);\r\n    if (!selection)\r\n        return false;\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n};\r\nfunction deleteBy(target, by) {\r\n    if (target.state.readOnly)\r\n        return false;\r\n    let event = \"delete.selection\", { state } = target;\r\n    let changes = state.changeByRange(range => {\r\n        let { from, to } = range;\r\n        if (from == to) {\r\n            let towards = by(from);\r\n            if (towards < from) {\r\n                event = \"delete.backward\";\r\n                towards = skipAtomic(target, towards, false);\r\n            }\r\n            else if (towards > from) {\r\n                event = \"delete.forward\";\r\n                towards = skipAtomic(target, towards, true);\r\n            }\r\n            from = Math.min(from, towards);\r\n            to = Math.max(to, towards);\r\n        }\r\n        else {\r\n            from = skipAtomic(target, from, false);\r\n            to = skipAtomic(target, to, true);\r\n        }\r\n        return from == to ? { range } : { changes: { from, to }, range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(from) };\r\n    });\r\n    if (changes.changes.empty)\r\n        return false;\r\n    target.dispatch(state.update(changes, {\r\n        scrollIntoView: true,\r\n        userEvent: event,\r\n        effects: event == \"delete.selection\" ? _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.announce.of(state.phrase(\"Selection deleted\")) : undefined\r\n    }));\r\n    return true;\r\n}\r\nfunction skipAtomic(target, pos, forward) {\r\n    if (target instanceof _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView)\r\n        for (let ranges of target.state.facet(_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.atomicRanges).map(f => f(target)))\r\n            ranges.between(pos, pos, (from, to) => {\r\n                if (from < pos && to > pos)\r\n                    pos = forward ? to : from;\r\n            });\r\n    return pos;\r\n}\r\nconst deleteByChar = (target, forward) => deleteBy(target, pos => {\r\n    let { state } = target, line = state.doc.lineAt(pos), before, targetPos;\r\n    if (!forward && pos > line.from && pos < line.from + 200 &&\r\n        !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\r\n        if (before[before.length - 1] == \"\\t\")\r\n            return pos - 1;\r\n        let col = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.countColumn)(before, state.tabSize), drop = col % (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(state) || (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(state);\r\n        for (let i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++)\r\n            pos--;\r\n        targetPos = pos;\r\n    }\r\n    else {\r\n        targetPos = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(line.text, pos - line.from, forward, forward) + line.from;\r\n        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))\r\n            targetPos += forward ? 1 : -1;\r\n    }\r\n    return targetPos;\r\n});\r\n/**\r\nDelete the selection, or, for cursor selections, the character\r\nbefore the cursor.\r\n*/\r\nconst deleteCharBackward = view => deleteByChar(view, false);\r\n/**\r\nDelete the selection or the character after the cursor.\r\n*/\r\nconst deleteCharForward = view => deleteByChar(view, true);\r\nconst deleteByGroup = (target, forward) => deleteBy(target, start => {\r\n    let pos = start, { state } = target, line = state.doc.lineAt(pos);\r\n    let categorize = state.charCategorizer(pos);\r\n    for (let cat = null;;) {\r\n        if (pos == (forward ? line.to : line.from)) {\r\n            if (pos == start && line.number != (forward ? state.doc.lines : 1))\r\n                pos += forward ? 1 : -1;\r\n            break;\r\n        }\r\n        let next = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(line.text, pos - line.from, forward) + line.from;\r\n        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\r\n        let nextCat = categorize(nextChar);\r\n        if (cat != null && nextCat != cat)\r\n            break;\r\n        if (nextChar != \" \" || pos != start)\r\n            cat = nextCat;\r\n        pos = next;\r\n    }\r\n    return pos;\r\n});\r\n/**\r\nDelete the selection or backward until the end of the next\r\n[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of\r\nwhitespace when they consist of a single space.\r\n*/\r\nconst deleteGroupBackward = target => deleteByGroup(target, false);\r\n/**\r\nDelete the selection or forward until the end of the next group.\r\n*/\r\nconst deleteGroupForward = target => deleteByGroup(target, true);\r\n/**\r\nDelete the selection, or, if it is a cursor selection, delete to\r\nthe end of the line. If the cursor is directly at the end of the\r\nline, delete the line break after it.\r\n*/\r\nconst deleteToLineEnd = view => deleteBy(view, pos => {\r\n    let lineEnd = view.lineBlockAt(pos).to;\r\n    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);\r\n});\r\n/**\r\nDelete the selection, or, if it is a cursor selection, delete to\r\nthe start of the line. If the cursor is directly at the start of the\r\nline, delete the line break before it.\r\n*/\r\nconst deleteToLineStart = view => deleteBy(view, pos => {\r\n    let lineStart = view.lineBlockAt(pos).from;\r\n    return pos > lineStart ? lineStart : Math.max(0, pos - 1);\r\n});\r\n/**\r\nDelete all whitespace directly before a line end from the\r\ndocument.\r\n*/\r\nconst deleteTrailingWhitespace = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = [];\r\n    for (let pos = 0, prev = \"\", iter = state.doc.iter();;) {\r\n        iter.next();\r\n        if (iter.lineBreak || iter.done) {\r\n            let trailing = prev.search(/\\s+$/);\r\n            if (trailing > -1)\r\n                changes.push({ from: pos - (prev.length - trailing), to: pos });\r\n            if (iter.done)\r\n                break;\r\n            prev = \"\";\r\n        }\r\n        else {\r\n            prev = iter.value;\r\n        }\r\n        pos += iter.value.length;\r\n    }\r\n    if (!changes.length)\r\n        return false;\r\n    dispatch(state.update({ changes, userEvent: \"delete\" }));\r\n    return true;\r\n};\r\n/**\r\nReplace each selection range with a line break, leaving the cursor\r\non the line before the break.\r\n*/\r\nconst splitLine = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = state.changeByRange(range => {\r\n        return { changes: { from: range.from, to: range.to, insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Text.of([\"\", \"\"]) },\r\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.from) };\r\n    });\r\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\r\n    return true;\r\n};\r\n/**\r\nFlip the characters before and after the cursor(s).\r\n*/\r\nconst transposeChars = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = state.changeByRange(range => {\r\n        if (!range.empty || range.from == 0 || range.from == state.doc.length)\r\n            return { range };\r\n        let pos = range.from, line = state.doc.lineAt(pos);\r\n        let from = pos == line.from ? pos - 1 : (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(line.text, pos - line.from, false) + line.from;\r\n        let to = pos == line.to ? pos + 1 : (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(line.text, pos - line.from, true) + line.from;\r\n        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },\r\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(to) };\r\n    });\r\n    if (changes.changes.empty)\r\n        return false;\r\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"move.character\" }));\r\n    return true;\r\n};\r\nfunction selectedLineBlocks(state) {\r\n    let blocks = [], upto = -1;\r\n    for (let range of state.selection.ranges) {\r\n        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);\r\n        if (!range.empty && range.to == endLine.from)\r\n            endLine = state.doc.lineAt(range.to - 1);\r\n        if (upto >= startLine.number) {\r\n            let prev = blocks[blocks.length - 1];\r\n            prev.to = endLine.to;\r\n            prev.ranges.push(range);\r\n        }\r\n        else {\r\n            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });\r\n        }\r\n        upto = endLine.number + 1;\r\n    }\r\n    return blocks;\r\n}\r\nfunction moveLine(state, dispatch, forward) {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = [], ranges = [];\r\n    for (let block of selectedLineBlocks(state)) {\r\n        if (forward ? block.to == state.doc.length : block.from == 0)\r\n            continue;\r\n        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\r\n        let size = nextLine.length + 1;\r\n        if (forward) {\r\n            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });\r\n            for (let r of block.ranges)\r\n                ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\r\n        }\r\n        else {\r\n            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });\r\n            for (let r of block.ranges)\r\n                ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(r.anchor - size, r.head - size));\r\n        }\r\n    }\r\n    if (!changes.length)\r\n        return false;\r\n    dispatch(state.update({\r\n        changes,\r\n        scrollIntoView: true,\r\n        selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges, state.selection.mainIndex),\r\n        userEvent: \"move.line\"\r\n    }));\r\n    return true;\r\n}\r\n/**\r\nMove the selected lines up one line.\r\n*/\r\nconst moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);\r\n/**\r\nMove the selected lines down one line.\r\n*/\r\nconst moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);\r\nfunction copyLine(state, dispatch, forward) {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = [];\r\n    for (let block of selectedLineBlocks(state)) {\r\n        if (forward)\r\n            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });\r\n        else\r\n            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });\r\n    }\r\n    dispatch(state.update({ changes, scrollIntoView: true, userEvent: \"input.copyline\" }));\r\n    return true;\r\n}\r\n/**\r\nCreate a copy of the selected lines. Keep the selection in the top copy.\r\n*/\r\nconst copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);\r\n/**\r\nCreate a copy of the selected lines. Keep the selection in the bottom copy.\r\n*/\r\nconst copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);\r\n/**\r\nDelete selected lines.\r\n*/\r\nconst deleteLine = view => {\r\n    if (view.state.readOnly)\r\n        return false;\r\n    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {\r\n        if (from > 0)\r\n            from--;\r\n        else if (to < state.doc.length)\r\n            to++;\r\n        return { from, to };\r\n    }));\r\n    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);\r\n    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: \"delete.line\" });\r\n    return true;\r\n};\r\n/**\r\nReplace the selection with a newline.\r\n*/\r\nconst insertNewline = ({ state, dispatch }) => {\r\n    dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: \"input\" }));\r\n    return true;\r\n};\r\nfunction isBetweenBrackets(state, pos) {\r\n    if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1)))\r\n        return { from: pos, to: pos };\r\n    let context = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state).resolveInner(pos);\r\n    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;\r\n    if (before && after && before.to <= pos && after.from >= pos &&\r\n        (closedBy = before.type.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&\r\n        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)\r\n        return { from: before.to, to: after.from };\r\n    return null;\r\n}\r\n/**\r\nReplace the selection with a newline and indent the newly created\r\nline(s). If the current line consists only of whitespace, this\r\nwill also delete that whitespace. When the cursor is between\r\nmatching brackets, an additional newline will be inserted after\r\nthe cursor.\r\n*/\r\nconst insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);\r\n/**\r\nCreate a blank, indented line below the current line.\r\n*/\r\nconst insertBlankLine = /*@__PURE__*/newlineAndIndent(true);\r\nfunction newlineAndIndent(atEof) {\r\n    return ({ state, dispatch }) => {\r\n        if (state.readOnly)\r\n            return false;\r\n        let changes = state.changeByRange(range => {\r\n            let { from, to } = range, line = state.doc.lineAt(from);\r\n            let explode = !atEof && from == to && isBetweenBrackets(state, from);\r\n            if (atEof)\r\n                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\r\n            let cx = new _codemirror_language__WEBPACK_IMPORTED_MODULE_3__.IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });\r\n            let indent = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentation)(cx, from);\r\n            if (indent == null)\r\n                indent = /^\\s*/.exec(state.doc.lineAt(from).text)[0].length;\r\n            while (to < line.to && /\\s/.test(line.text[to - line.from]))\r\n                to++;\r\n            if (explode)\r\n                ({ from, to } = explode);\r\n            else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from)))\r\n                from = line.from;\r\n            let insert = [\"\", (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, indent)];\r\n            if (explode)\r\n                insert.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, cx.lineIndent(line.from, -1)));\r\n            return { changes: { from, to, insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Text.of(insert) },\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(from + 1 + insert[1].length) };\r\n        });\r\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\r\n        return true;\r\n    };\r\n}\r\nfunction changeBySelectedLine(state, f) {\r\n    let atLine = -1;\r\n    return state.changeByRange(range => {\r\n        let changes = [];\r\n        for (let pos = range.from; pos <= range.to;) {\r\n            let line = state.doc.lineAt(pos);\r\n            if (line.number > atLine && (range.empty || range.to > line.from)) {\r\n                f(line, changes, range);\r\n                atLine = line.number;\r\n            }\r\n            pos = line.to + 1;\r\n        }\r\n        let changeSet = state.changes(changes);\r\n        return { changes,\r\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };\r\n    });\r\n}\r\n/**\r\nAuto-indent the selected lines. This uses the [indentation service\r\nfacet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent\r\ninformation.\r\n*/\r\nconst indentSelection = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let updated = Object.create(null);\r\n    let context = new _codemirror_language__WEBPACK_IMPORTED_MODULE_3__.IndentContext(state, { overrideIndentation: start => {\r\n            let found = updated[start];\r\n            return found == null ? -1 : found;\r\n        } });\r\n    let changes = changeBySelectedLine(state, (line, changes, range) => {\r\n        let indent = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentation)(context, line.from);\r\n        if (indent == null)\r\n            return;\r\n        if (!/\\S/.test(line.text))\r\n            indent = 0;\r\n        let cur = /^\\s*/.exec(line.text)[0];\r\n        let norm = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, indent);\r\n        if (cur != norm || range.from < line.from + cur.length) {\r\n            updated[line.from] = indent;\r\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\r\n        }\r\n    });\r\n    if (!changes.changes.empty)\r\n        dispatch(state.update(changes, { userEvent: \"indent\" }));\r\n    return true;\r\n};\r\n/**\r\nAdd a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected\r\nlines.\r\n*/\r\nconst indentMore = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\r\n        changes.push({ from: line.from, insert: state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentUnit) });\r\n    }), { userEvent: \"input.indent\" }));\r\n    return true;\r\n};\r\n/**\r\nRemove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all\r\nselected lines.\r\n*/\r\nconst indentLess = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\r\n        let space = /^\\s*/.exec(line.text)[0];\r\n        if (!space)\r\n            return;\r\n        let col = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.countColumn)(space, state.tabSize), keep = 0;\r\n        let insert = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, Math.max(0, col - (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(state)));\r\n        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))\r\n            keep++;\r\n        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });\r\n    }), { userEvent: \"delete.dedent\" }));\r\n    return true;\r\n};\r\n/**\r\nInsert a tab character at the cursor or, if something is selected,\r\nuse [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire\r\nselection.\r\n*/\r\nconst insertTab = ({ state, dispatch }) => {\r\n    if (state.selection.ranges.some(r => !r.empty))\r\n        return indentMore({ state, dispatch });\r\n    dispatch(state.update(state.replaceSelection(\"\\t\"), { scrollIntoView: true, userEvent: \"input\" }));\r\n    return true;\r\n};\r\n/**\r\nArray of key bindings containing the Emacs-style bindings that are\r\navailable on macOS by default.\r\n\r\n - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\r\n - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\r\n - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\r\n - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\r\n - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\r\n - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\r\n - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\r\n - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\r\n - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)\r\n - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\r\n - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)\r\n - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)\r\n - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)\r\n - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)\r\n*/\r\nconst emacsStyleKeymap = [\r\n    { key: \"Ctrl-b\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\r\n    { key: \"Ctrl-f\", run: cursorCharRight, shift: selectCharRight },\r\n    { key: \"Ctrl-p\", run: cursorLineUp, shift: selectLineUp },\r\n    { key: \"Ctrl-n\", run: cursorLineDown, shift: selectLineDown },\r\n    { key: \"Ctrl-a\", run: cursorLineStart, shift: selectLineStart },\r\n    { key: \"Ctrl-e\", run: cursorLineEnd, shift: selectLineEnd },\r\n    { key: \"Ctrl-d\", run: deleteCharForward },\r\n    { key: \"Ctrl-h\", run: deleteCharBackward },\r\n    { key: \"Ctrl-k\", run: deleteToLineEnd },\r\n    { key: \"Ctrl-Alt-h\", run: deleteGroupBackward },\r\n    { key: \"Ctrl-o\", run: splitLine },\r\n    { key: \"Ctrl-t\", run: transposeChars },\r\n    { key: \"Ctrl-v\", run: cursorPageDown },\r\n];\r\n/**\r\nAn array of key bindings closely sticking to platform-standard or\r\nwidely used bindings. (This includes the bindings from\r\n[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`\r\nproperty changed to `mac`.)\r\n\r\n - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\r\n - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\r\n - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)\r\n - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)\r\n - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\r\n - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\r\n - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\r\n - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\r\n - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\r\n - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\r\n - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\r\n - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\r\n - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\r\n - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\r\n - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)\r\n - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)\r\n - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\r\n - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\r\n - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)\r\n - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)\r\n - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\r\n - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\r\n - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\r\n - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)\r\n - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).\r\n - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).\r\n*/\r\nconst standardKeymap = /*@__PURE__*/[\r\n    { key: \"ArrowLeft\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\r\n    { key: \"Mod-ArrowLeft\", mac: \"Alt-ArrowLeft\", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },\r\n    { mac: \"Cmd-ArrowLeft\", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },\r\n    { key: \"ArrowRight\", run: cursorCharRight, shift: selectCharRight, preventDefault: true },\r\n    { key: \"Mod-ArrowRight\", mac: \"Alt-ArrowRight\", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },\r\n    { mac: \"Cmd-ArrowRight\", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },\r\n    { key: \"ArrowUp\", run: cursorLineUp, shift: selectLineUp, preventDefault: true },\r\n    { mac: \"Cmd-ArrowUp\", run: cursorDocStart, shift: selectDocStart },\r\n    { mac: \"Ctrl-ArrowUp\", run: cursorPageUp, shift: selectPageUp },\r\n    { key: \"ArrowDown\", run: cursorLineDown, shift: selectLineDown, preventDefault: true },\r\n    { mac: \"Cmd-ArrowDown\", run: cursorDocEnd, shift: selectDocEnd },\r\n    { mac: \"Ctrl-ArrowDown\", run: cursorPageDown, shift: selectPageDown },\r\n    { key: \"PageUp\", run: cursorPageUp, shift: selectPageUp },\r\n    { key: \"PageDown\", run: cursorPageDown, shift: selectPageDown },\r\n    { key: \"Home\", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },\r\n    { key: \"Mod-Home\", run: cursorDocStart, shift: selectDocStart },\r\n    { key: \"End\", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },\r\n    { key: \"Mod-End\", run: cursorDocEnd, shift: selectDocEnd },\r\n    { key: \"Enter\", run: insertNewlineAndIndent },\r\n    { key: \"Mod-a\", run: selectAll },\r\n    { key: \"Backspace\", run: deleteCharBackward, shift: deleteCharBackward },\r\n    { key: \"Delete\", run: deleteCharForward },\r\n    { key: \"Mod-Backspace\", mac: \"Alt-Backspace\", run: deleteGroupBackward },\r\n    { key: \"Mod-Delete\", mac: \"Alt-Delete\", run: deleteGroupForward },\r\n    { mac: \"Mod-Backspace\", run: deleteToLineStart },\r\n    { mac: \"Mod-Delete\", run: deleteToLineEnd }\r\n].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));\r\n/**\r\nThe default keymap. Includes all bindings from\r\n[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:\r\n\r\n- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)\r\n- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)\r\n- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)\r\n- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)\r\n- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)\r\n- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)\r\n- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)\r\n- Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)\r\n- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)\r\n- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)\r\n- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)\r\n- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)\r\n- Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)\r\n- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)\r\n- Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)\r\n- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).\r\n- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).\r\n*/\r\nconst defaultKeymap = /*@__PURE__*/[\r\n    { key: \"Alt-ArrowLeft\", mac: \"Ctrl-ArrowLeft\", run: cursorSyntaxLeft, shift: selectSyntaxLeft },\r\n    { key: \"Alt-ArrowRight\", mac: \"Ctrl-ArrowRight\", run: cursorSyntaxRight, shift: selectSyntaxRight },\r\n    { key: \"Alt-ArrowUp\", run: moveLineUp },\r\n    { key: \"Shift-Alt-ArrowUp\", run: copyLineUp },\r\n    { key: \"Alt-ArrowDown\", run: moveLineDown },\r\n    { key: \"Shift-Alt-ArrowDown\", run: copyLineDown },\r\n    { key: \"Escape\", run: simplifySelection },\r\n    { key: \"Mod-Enter\", run: insertBlankLine },\r\n    { key: \"Alt-l\", mac: \"Ctrl-l\", run: selectLine },\r\n    { key: \"Mod-i\", run: selectParentSyntax, preventDefault: true },\r\n    { key: \"Mod-[\", run: indentLess },\r\n    { key: \"Mod-]\", run: indentMore },\r\n    { key: \"Mod-Alt-\\\\\", run: indentSelection },\r\n    { key: \"Shift-Mod-k\", run: deleteLine },\r\n    { key: \"Shift-Mod-\\\\\", run: cursorMatchingBracket },\r\n    { key: \"Mod-/\", run: toggleComment },\r\n    { key: \"Alt-A\", run: toggleBlockComment }\r\n].concat(standardKeymap);\r\n/**\r\nA binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and\r\nShift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).\r\nPlease see the [Tab example](../../examples/tab/) before using\r\nthis.\r\n*/\r\nconst indentWithTab = { key: \"Tab\", run: indentMore, shift: indentLess };\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/commands/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/language/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@codemirror/language/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HighlightStyle\": function() { return /* binding */ HighlightStyle; },\n/* harmony export */   \"IndentContext\": function() { return /* binding */ IndentContext; },\n/* harmony export */   \"LRLanguage\": function() { return /* binding */ LRLanguage; },\n/* harmony export */   \"Language\": function() { return /* binding */ Language; },\n/* harmony export */   \"LanguageDescription\": function() { return /* binding */ LanguageDescription; },\n/* harmony export */   \"LanguageSupport\": function() { return /* binding */ LanguageSupport; },\n/* harmony export */   \"ParseContext\": function() { return /* binding */ ParseContext; },\n/* harmony export */   \"StreamLanguage\": function() { return /* binding */ StreamLanguage; },\n/* harmony export */   \"StringStream\": function() { return /* binding */ StringStream; },\n/* harmony export */   \"TreeIndentContext\": function() { return /* binding */ TreeIndentContext; },\n/* harmony export */   \"bracketMatching\": function() { return /* binding */ bracketMatching; },\n/* harmony export */   \"codeFolding\": function() { return /* binding */ codeFolding; },\n/* harmony export */   \"continuedIndent\": function() { return /* binding */ continuedIndent; },\n/* harmony export */   \"defaultHighlightStyle\": function() { return /* binding */ defaultHighlightStyle; },\n/* harmony export */   \"defineLanguageFacet\": function() { return /* binding */ defineLanguageFacet; },\n/* harmony export */   \"delimitedIndent\": function() { return /* binding */ delimitedIndent; },\n/* harmony export */   \"ensureSyntaxTree\": function() { return /* binding */ ensureSyntaxTree; },\n/* harmony export */   \"flatIndent\": function() { return /* binding */ flatIndent; },\n/* harmony export */   \"foldAll\": function() { return /* binding */ foldAll; },\n/* harmony export */   \"foldCode\": function() { return /* binding */ foldCode; },\n/* harmony export */   \"foldEffect\": function() { return /* binding */ foldEffect; },\n/* harmony export */   \"foldGutter\": function() { return /* binding */ foldGutter; },\n/* harmony export */   \"foldInside\": function() { return /* binding */ foldInside; },\n/* harmony export */   \"foldKeymap\": function() { return /* binding */ foldKeymap; },\n/* harmony export */   \"foldNodeProp\": function() { return /* binding */ foldNodeProp; },\n/* harmony export */   \"foldService\": function() { return /* binding */ foldService; },\n/* harmony export */   \"foldState\": function() { return /* binding */ foldState; },\n/* harmony export */   \"foldable\": function() { return /* binding */ foldable; },\n/* harmony export */   \"foldedRanges\": function() { return /* binding */ foldedRanges; },\n/* harmony export */   \"forceParsing\": function() { return /* binding */ forceParsing; },\n/* harmony export */   \"getIndentUnit\": function() { return /* binding */ getIndentUnit; },\n/* harmony export */   \"getIndentation\": function() { return /* binding */ getIndentation; },\n/* harmony export */   \"highlightingFor\": function() { return /* binding */ highlightingFor; },\n/* harmony export */   \"indentNodeProp\": function() { return /* binding */ indentNodeProp; },\n/* harmony export */   \"indentOnInput\": function() { return /* binding */ indentOnInput; },\n/* harmony export */   \"indentRange\": function() { return /* binding */ indentRange; },\n/* harmony export */   \"indentService\": function() { return /* binding */ indentService; },\n/* harmony export */   \"indentString\": function() { return /* binding */ indentString; },\n/* harmony export */   \"indentUnit\": function() { return /* binding */ indentUnit; },\n/* harmony export */   \"language\": function() { return /* binding */ language; },\n/* harmony export */   \"languageDataProp\": function() { return /* binding */ languageDataProp; },\n/* harmony export */   \"matchBrackets\": function() { return /* binding */ matchBrackets; },\n/* harmony export */   \"syntaxHighlighting\": function() { return /* binding */ syntaxHighlighting; },\n/* harmony export */   \"syntaxParserRunning\": function() { return /* binding */ syntaxParserRunning; },\n/* harmony export */   \"syntaxTree\": function() { return /* binding */ syntaxTree; },\n/* harmony export */   \"syntaxTreeAvailable\": function() { return /* binding */ syntaxTreeAvailable; },\n/* harmony export */   \"unfoldAll\": function() { return /* binding */ unfoldAll; },\n/* harmony export */   \"unfoldCode\": function() { return /* binding */ unfoldCode; },\n/* harmony export */   \"unfoldEffect\": function() { return /* binding */ unfoldEffect; }\n/* harmony export */ });\n/* harmony import */ var _lezer_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/common */ \"./node_modules/@lezer/common/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lezer/highlight */ \"./node_modules/@lezer/highlight/dist/index.js\");\n/* harmony import */ var style_mod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! style-mod */ \"./node_modules/style-mod/src/style-mod.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nvar _a;\r\n/**\r\nNode prop stored in a parser's top syntax node to provide the\r\nfacet that stores language-specific data for that language.\r\n*/\r\nconst languageDataProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\n/**\r\nHelper function to define a facet (to be added to the top syntax\r\nnode(s) for a language via\r\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\r\nused to associate language data with the language. You\r\nprobably only need this when subclassing\r\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\r\n*/\r\nfunction defineLanguageFacet(baseData) {\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n        combine: baseData ? values => values.concat(baseData) : undefined\r\n    });\r\n}\r\n/**\r\nA language object manages parsing and per-language\r\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\r\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\r\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\r\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\r\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\r\nfor stream parsers.\r\n*/\r\nclass Language {\r\n    /**\r\n    Construct a language object. If you need to invoke this\r\n    directly, first define a data facet with\r\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\r\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\r\n    to the language's outer syntax node.\r\n    */\r\n    constructor(\r\n    /**\r\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\r\n    used for this language.\r\n    */\r\n    data, parser, extraExtensions = [], \r\n    /**\r\n    A language name.\r\n    */\r\n    name = \"\") {\r\n        this.data = data;\r\n        this.name = name;\r\n        // Kludge to define EditorState.tree as a debugging helper,\r\n        // without the EditorState package actually knowing about\r\n        // languages and lezer trees.\r\n        if (!_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.EditorState.prototype.hasOwnProperty(\"tree\"))\r\n            Object.defineProperty(_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\r\n        this.parser = parser;\r\n        this.extension = [\r\n            language.of(this),\r\n            _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))\r\n        ].concat(extraExtensions);\r\n    }\r\n    /**\r\n    Query whether this language is active at the given position.\r\n    */\r\n    isActiveAt(state, pos, side = -1) {\r\n        return languageDataFacetAt(state, pos, side) == this.data;\r\n    }\r\n    /**\r\n    Find the document regions that were parsed using this language.\r\n    The returned regions will _include_ any nested languages rooted\r\n    in this language, when those exist.\r\n    */\r\n    findRegions(state) {\r\n        let lang = state.facet(language);\r\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\r\n            return [{ from: 0, to: state.doc.length }];\r\n        if (!lang || !lang.allowsNesting)\r\n            return [];\r\n        let result = [];\r\n        let explore = (tree, from) => {\r\n            if (tree.prop(languageDataProp) == this.data) {\r\n                result.push({ from, to: from + tree.length });\r\n                return;\r\n            }\r\n            let mount = tree.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.mounted);\r\n            if (mount) {\r\n                if (mount.tree.prop(languageDataProp) == this.data) {\r\n                    if (mount.overlay)\r\n                        for (let r of mount.overlay)\r\n                            result.push({ from: r.from + from, to: r.to + from });\r\n                    else\r\n                        result.push({ from: from, to: from + tree.length });\r\n                    return;\r\n                }\r\n                else if (mount.overlay) {\r\n                    let size = result.length;\r\n                    explore(mount.tree, mount.overlay[0].from + from);\r\n                    if (result.length > size)\r\n                        return;\r\n                }\r\n            }\r\n            for (let i = 0; i < tree.children.length; i++) {\r\n                let ch = tree.children[i];\r\n                if (ch instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree)\r\n                    explore(ch, tree.positions[i] + from);\r\n            }\r\n        };\r\n        explore(syntaxTree(state), 0);\r\n        return result;\r\n    }\r\n    /**\r\n    Indicates whether this language allows nested languages. The\r\n    default implementation returns true.\r\n    */\r\n    get allowsNesting() { return true; }\r\n}\r\n/**\r\n@internal\r\n*/\r\nLanguage.setState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateEffect.define();\r\nfunction languageDataFacetAt(state, pos, side) {\r\n    let topLang = state.facet(language);\r\n    if (!topLang)\r\n        return null;\r\n    let facet = topLang.data;\r\n    if (topLang.allowsNesting) {\r\n        for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, _lezer_common__WEBPACK_IMPORTED_MODULE_0__.IterMode.ExcludeBuffers))\r\n            facet = node.type.prop(languageDataProp) || facet;\r\n    }\r\n    return facet;\r\n}\r\n/**\r\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\r\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\r\nparsers.\r\n*/\r\nclass LRLanguage extends Language {\r\n    constructor(data, parser, name) {\r\n        super(data, parser, [], name);\r\n        this.parser = parser;\r\n    }\r\n    /**\r\n    Define a language from a parser.\r\n    */\r\n    static define(spec) {\r\n        let data = defineLanguageFacet(spec.languageData);\r\n        return new LRLanguage(data, spec.parser.configure({\r\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\r\n        }), spec.name);\r\n    }\r\n    /**\r\n    Create a new instance of this language with a reconfigured\r\n    version of its parser and optionally a new name.\r\n    */\r\n    configure(options, name) {\r\n        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\r\n    }\r\n    get allowsNesting() { return this.parser.hasWrappers(); }\r\n}\r\n/**\r\nGet the syntax tree for a state, which is the current (possibly\r\nincomplete) parse tree of the active\r\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\r\nlanguage available.\r\n*/\r\nfunction syntaxTree(state) {\r\n    let field = state.field(Language.state, false);\r\n    return field ? field.tree : _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree.empty;\r\n}\r\n/**\r\nTry to get a parse tree that spans at least up to `upto`. The\r\nmethod will do at most `timeout` milliseconds of work to parse\r\nup to that point if the tree isn't already available.\r\n*/\r\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\r\n    var _a;\r\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\r\n    if (!parse)\r\n        return null;\r\n    let oldVieport = parse.viewport;\r\n    parse.updateViewport({ from: 0, to: upto });\r\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\r\n    parse.updateViewport(oldVieport);\r\n    return result;\r\n}\r\n/**\r\nQueries whether there is a full syntax tree available up to the\r\ngiven document position. If there isn't, the background parse\r\nprocess _might_ still be working and update the tree further, but\r\nthere is no guarantee of that—the parser will [stop\r\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\r\ncertain amount of time or has moved beyond the visible viewport.\r\nAlways returns false if no language has been enabled.\r\n*/\r\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\r\n    var _a;\r\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\r\n}\r\n/**\r\nMove parsing forward, and update the editor state afterwards to\r\nreflect the new tree. Will work for at most `timeout`\r\nmilliseconds. Returns true if the parser managed get to the given\r\nposition in that time.\r\n*/\r\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\r\n    let success = ensureSyntaxTree(view.state, upto, timeout);\r\n    if (success != syntaxTree(view.state))\r\n        view.dispatch({});\r\n    return !!success;\r\n}\r\n/**\r\nTells you whether the language parser is planning to do more\r\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\r\nstopped running, either because it parsed the entire document,\r\nbecause it spent too much time and was cut off, or because there\r\nis no language parser enabled.\r\n*/\r\nfunction syntaxParserRunning(view) {\r\n    var _a;\r\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\r\n}\r\n// Lezer-style Input object for a Text document.\r\nclass DocInput {\r\n    constructor(doc, length = doc.length) {\r\n        this.doc = doc;\r\n        this.length = length;\r\n        this.cursorPos = 0;\r\n        this.string = \"\";\r\n        this.cursor = doc.iter();\r\n    }\r\n    syncTo(pos) {\r\n        this.string = this.cursor.next(pos - this.cursorPos).value;\r\n        this.cursorPos = pos + this.string.length;\r\n        return this.cursorPos - this.string.length;\r\n    }\r\n    chunk(pos) {\r\n        this.syncTo(pos);\r\n        return this.string;\r\n    }\r\n    get lineChunks() { return true; }\r\n    read(from, to) {\r\n        let stringStart = this.cursorPos - this.string.length;\r\n        if (from < stringStart || to >= this.cursorPos)\r\n            return this.doc.sliceString(from, to);\r\n        else\r\n            return this.string.slice(from - stringStart, to - stringStart);\r\n    }\r\n}\r\nlet currentContext = null;\r\n/**\r\nA parse context provided to parsers working on the editor content.\r\n*/\r\nclass ParseContext {\r\n    constructor(parser, \r\n    /**\r\n    The current editor state.\r\n    */\r\n    state, \r\n    /**\r\n    Tree fragments that can be reused by incremental re-parses.\r\n    */\r\n    fragments = [], \r\n    /**\r\n    @internal\r\n    */\r\n    tree, \r\n    /**\r\n    @internal\r\n    */\r\n    treeLen, \r\n    /**\r\n    The current editor viewport (or some overapproximation\r\n    thereof). Intended to be used for opportunistically avoiding\r\n    work (in which case\r\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\r\n    should be called to make sure the parser is restarted when the\r\n    skipped region becomes visible).\r\n    */\r\n    viewport, \r\n    /**\r\n    @internal\r\n    */\r\n    skipped, \r\n    /**\r\n    This is where skipping parsers can register a promise that,\r\n    when resolved, will schedule a new parse. It is cleared when\r\n    the parse worker picks up the promise. @internal\r\n    */\r\n    scheduleOn) {\r\n        this.parser = parser;\r\n        this.state = state;\r\n        this.fragments = fragments;\r\n        this.tree = tree;\r\n        this.treeLen = treeLen;\r\n        this.viewport = viewport;\r\n        this.skipped = skipped;\r\n        this.scheduleOn = scheduleOn;\r\n        this.parse = null;\r\n        /**\r\n        @internal\r\n        */\r\n        this.tempSkipped = [];\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(parser, state, viewport) {\r\n        return new ParseContext(parser, state, [], _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree.empty, 0, viewport, [], null);\r\n    }\r\n    startParse() {\r\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    work(until, upto) {\r\n        if (upto != null && upto >= this.state.doc.length)\r\n            upto = undefined;\r\n        if (this.tree != _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\r\n            this.takeTree();\r\n            return true;\r\n        }\r\n        return this.withContext(() => {\r\n            var _a;\r\n            if (typeof until == \"number\") {\r\n                let endTime = Date.now() + until;\r\n                until = () => Date.now() > endTime;\r\n            }\r\n            if (!this.parse)\r\n                this.parse = this.startParse();\r\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\r\n                upto < this.state.doc.length)\r\n                this.parse.stopAt(upto);\r\n            for (;;) {\r\n                let done = this.parse.advance();\r\n                if (done) {\r\n                    this.fragments = this.withoutTempSkipped(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\r\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\r\n                    this.tree = done;\r\n                    this.parse = null;\r\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\r\n                        this.parse = this.startParse();\r\n                    else\r\n                        return true;\r\n                }\r\n                if (until())\r\n                    return false;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    takeTree() {\r\n        let pos, tree;\r\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\r\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\r\n                this.parse.stopAt(pos);\r\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\r\n            this.treeLen = pos;\r\n            this.tree = tree;\r\n            this.fragments = this.withoutTempSkipped(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.addTree(this.tree, this.fragments, true));\r\n            this.parse = null;\r\n        }\r\n    }\r\n    withContext(f) {\r\n        let prev = currentContext;\r\n        currentContext = this;\r\n        try {\r\n            return f();\r\n        }\r\n        finally {\r\n            currentContext = prev;\r\n        }\r\n    }\r\n    withoutTempSkipped(fragments) {\r\n        for (let r; r = this.tempSkipped.pop();)\r\n            fragments = cutFragments(fragments, r.from, r.to);\r\n        return fragments;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    changes(changes, newState) {\r\n        let { fragments, tree, treeLen, viewport, skipped } = this;\r\n        this.takeTree();\r\n        if (!changes.empty) {\r\n            let ranges = [];\r\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\r\n            fragments = _lezer_common__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.applyChanges(fragments, ranges);\r\n            tree = _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree.empty;\r\n            treeLen = 0;\r\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\r\n            if (this.skipped.length) {\r\n                skipped = [];\r\n                for (let r of this.skipped) {\r\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\r\n                    if (from < to)\r\n                        skipped.push({ from, to });\r\n                }\r\n            }\r\n        }\r\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    updateViewport(viewport) {\r\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\r\n            return false;\r\n        this.viewport = viewport;\r\n        let startLen = this.skipped.length;\r\n        for (let i = 0; i < this.skipped.length; i++) {\r\n            let { from, to } = this.skipped[i];\r\n            if (from < viewport.to && to > viewport.from) {\r\n                this.fragments = cutFragments(this.fragments, from, to);\r\n                this.skipped.splice(i--, 1);\r\n            }\r\n        }\r\n        if (this.skipped.length >= startLen)\r\n            return false;\r\n        this.reset();\r\n        return true;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    reset() {\r\n        if (this.parse) {\r\n            this.takeTree();\r\n            this.parse = null;\r\n        }\r\n    }\r\n    /**\r\n    Notify the parse scheduler that the given region was skipped\r\n    because it wasn't in view, and the parse should be restarted\r\n    when it comes into view.\r\n    */\r\n    skipUntilInView(from, to) {\r\n        this.skipped.push({ from, to });\r\n    }\r\n    /**\r\n    Returns a parser intended to be used as placeholder when\r\n    asynchronously loading a nested parser. It'll skip its input and\r\n    mark it as not-really-parsed, so that the next update will parse\r\n    it again.\r\n    \r\n    When `until` is given, a reparse will be scheduled when that\r\n    promise resolves.\r\n    */\r\n    static getSkippingParser(until) {\r\n        return new class extends _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Parser {\r\n            createParse(input, fragments, ranges) {\r\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\r\n                let parser = {\r\n                    parsedPos: from,\r\n                    advance() {\r\n                        let cx = currentContext;\r\n                        if (cx) {\r\n                            for (let r of ranges)\r\n                                cx.tempSkipped.push(r);\r\n                            if (until)\r\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\r\n                        }\r\n                        this.parsedPos = to;\r\n                        return new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeType.none, [], [], to - from);\r\n                    },\r\n                    stoppedAt: null,\r\n                    stopAt() { }\r\n                };\r\n                return parser;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    isDone(upto) {\r\n        upto = Math.min(upto, this.state.doc.length);\r\n        let frags = this.fragments;\r\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\r\n    }\r\n    /**\r\n    Get the context for the current parse, or `null` if no editor\r\n    parse is in progress.\r\n    */\r\n    static get() { return currentContext; }\r\n}\r\nfunction cutFragments(fragments, from, to) {\r\n    return _lezer_common__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\r\n}\r\nclass LanguageState {\r\n    constructor(\r\n    // A mutable parse state that is used to preserve work done during\r\n    // the lifetime of a state when moving to the next state.\r\n    context) {\r\n        this.context = context;\r\n        this.tree = context.tree;\r\n    }\r\n    apply(tr) {\r\n        if (!tr.docChanged && this.tree == this.context.tree)\r\n            return this;\r\n        let newCx = this.context.changes(tr.changes, tr.state);\r\n        // If the previous parse wasn't done, go forward only up to its\r\n        // end position or the end of the viewport, to avoid slowing down\r\n        // state updates with parse work beyond the viewport.\r\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\r\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\r\n        if (!newCx.work(20 /* Work.Apply */, upto))\r\n            newCx.takeTree();\r\n        return new LanguageState(newCx);\r\n    }\r\n    static init(state) {\r\n        let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\r\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\r\n        if (!parseState.work(20 /* Work.Apply */, vpTo))\r\n            parseState.takeTree();\r\n        return new LanguageState(parseState);\r\n    }\r\n}\r\nLanguage.state = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateField.define({\r\n    create: LanguageState.init,\r\n    update(value, tr) {\r\n        for (let e of tr.effects)\r\n            if (e.is(Language.setState))\r\n                return e.value;\r\n        if (tr.startState.facet(language) != tr.state.facet(language))\r\n            return LanguageState.init(tr.state);\r\n        return value.apply(tr);\r\n    }\r\n});\r\nlet requestIdle = (callback) => {\r\n    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);\r\n    return () => clearTimeout(timeout);\r\n};\r\nif (typeof requestIdleCallback != \"undefined\")\r\n    requestIdle = (callback) => {\r\n        let idle = -1, timeout = setTimeout(() => {\r\n            idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });\r\n        }, 100 /* Work.MinPause */);\r\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\r\n    };\r\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\r\n    ? () => navigator.scheduling.isInputPending() : null;\r\nconst parseWorker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.ViewPlugin.fromClass(class ParseWorker {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.working = null;\r\n        this.workScheduled = 0;\r\n        // End of the current time chunk\r\n        this.chunkEnd = -1;\r\n        // Milliseconds of budget left for this chunk\r\n        this.chunkBudget = -1;\r\n        this.work = this.work.bind(this);\r\n        this.scheduleWork();\r\n    }\r\n    update(update) {\r\n        let cx = this.view.state.field(Language.state).context;\r\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\r\n            this.scheduleWork();\r\n        if (update.docChanged) {\r\n            if (this.view.hasFocus)\r\n                this.chunkBudget += 50 /* Work.ChangeBonus */;\r\n            this.scheduleWork();\r\n        }\r\n        this.checkAsyncSchedule(cx);\r\n    }\r\n    scheduleWork() {\r\n        if (this.working)\r\n            return;\r\n        let { state } = this.view, field = state.field(Language.state);\r\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\r\n            this.working = requestIdle(this.work);\r\n    }\r\n    work(deadline) {\r\n        this.working = null;\r\n        let now = Date.now();\r\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\r\n            this.chunkEnd = now + 30000 /* Work.ChunkTime */;\r\n            this.chunkBudget = 3000 /* Work.ChunkBudget */;\r\n        }\r\n        if (this.chunkBudget <= 0)\r\n            return; // No more budget\r\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\r\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))\r\n            return;\r\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\r\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\r\n        let done = field.context.work(() => {\r\n            return isInputPending && isInputPending() || Date.now() > endTime;\r\n        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\r\n        this.chunkBudget -= Date.now() - now;\r\n        if (done || this.chunkBudget <= 0) {\r\n            field.context.takeTree();\r\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\r\n        }\r\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\r\n            this.scheduleWork();\r\n        this.checkAsyncSchedule(field.context);\r\n    }\r\n    checkAsyncSchedule(cx) {\r\n        if (cx.scheduleOn) {\r\n            this.workScheduled++;\r\n            cx.scheduleOn\r\n                .then(() => this.scheduleWork())\r\n                .catch(err => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.logException)(this.view.state, err))\r\n                .then(() => this.workScheduled--);\r\n            cx.scheduleOn = null;\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.working)\r\n            this.working();\r\n    }\r\n    isWorking() {\r\n        return !!(this.working || this.workScheduled > 0);\r\n    }\r\n}, {\r\n    eventHandlers: { focus() { this.scheduleWork(); } }\r\n});\r\n/**\r\nThe facet used to associate a language with an editor state. Used\r\nby `Language` object's `extension` property (so you don't need to\r\nmanually wrap your languages in this). Can be used to access the\r\ncurrent language on a state.\r\n*/\r\nconst language = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine(languages) { return languages.length ? languages[0] : null; },\r\n    enables: language => [\r\n        Language.state,\r\n        parseWorker,\r\n        _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.contentAttributes.compute([language], state => {\r\n            let lang = state.facet(language);\r\n            return lang && lang.name ? { \"data-language\": lang.name } : {};\r\n        })\r\n    ]\r\n});\r\n/**\r\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\r\noptional set of supporting extensions. Language packages are\r\nencouraged to export a function that optionally takes a\r\nconfiguration object and returns a `LanguageSupport` instance, as\r\nthe main way for client code to use the package.\r\n*/\r\nclass LanguageSupport {\r\n    /**\r\n    Create a language support object.\r\n    */\r\n    constructor(\r\n    /**\r\n    The language object.\r\n    */\r\n    language, \r\n    /**\r\n    An optional set of supporting extensions. When nesting a\r\n    language in another language, the outer language is encouraged\r\n    to include the supporting extensions for its inner languages\r\n    in its own set of support extensions.\r\n    */\r\n    support = []) {\r\n        this.language = language;\r\n        this.support = support;\r\n        this.extension = [language, support];\r\n    }\r\n}\r\n/**\r\nLanguage descriptions are used to store metadata about languages\r\nand to dynamically load them. Their main role is finding the\r\nappropriate language for a filename or dynamically loading nested\r\nparsers.\r\n*/\r\nclass LanguageDescription {\r\n    constructor(\r\n    /**\r\n    The name of this language.\r\n    */\r\n    name, \r\n    /**\r\n    Alternative names for the mode (lowercased, includes `this.name`).\r\n    */\r\n    alias, \r\n    /**\r\n    File extensions associated with this language.\r\n    */\r\n    extensions, \r\n    /**\r\n    Optional filename pattern that should be associated with this\r\n    language.\r\n    */\r\n    filename, loadFunc, \r\n    /**\r\n    If the language has been loaded, this will hold its value.\r\n    */\r\n    support = undefined) {\r\n        this.name = name;\r\n        this.alias = alias;\r\n        this.extensions = extensions;\r\n        this.filename = filename;\r\n        this.loadFunc = loadFunc;\r\n        this.support = support;\r\n        this.loading = null;\r\n    }\r\n    /**\r\n    Start loading the the language. Will return a promise that\r\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\r\n    object when the language successfully loads.\r\n    */\r\n    load() {\r\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\r\n    }\r\n    /**\r\n    Create a language description.\r\n    */\r\n    static of(spec) {\r\n        let { load, support } = spec;\r\n        if (!load) {\r\n            if (!support)\r\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\r\n            load = () => Promise.resolve(support);\r\n        }\r\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\r\n    }\r\n    /**\r\n    Look for a language in the given array of descriptions that\r\n    matches the filename. Will first match\r\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\r\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\r\n    and return the first language that matches.\r\n    */\r\n    static matchFilename(descs, filename) {\r\n        for (let d of descs)\r\n            if (d.filename && d.filename.test(filename))\r\n                return d;\r\n        let ext = /\\.([^.]+)$/.exec(filename);\r\n        if (ext)\r\n            for (let d of descs)\r\n                if (d.extensions.indexOf(ext[1]) > -1)\r\n                    return d;\r\n        return null;\r\n    }\r\n    /**\r\n    Look for a language whose name or alias matches the the given\r\n    name (case-insensitively). If `fuzzy` is true, and no direct\r\n    matchs is found, this'll also search for a language whose name\r\n    or alias occurs in the string (for names shorter than three\r\n    characters, only when surrounded by non-word characters).\r\n    */\r\n    static matchLanguageName(descs, name, fuzzy = true) {\r\n        name = name.toLowerCase();\r\n        for (let d of descs)\r\n            if (d.alias.some(a => a == name))\r\n                return d;\r\n        if (fuzzy)\r\n            for (let d of descs)\r\n                for (let a of d.alias) {\r\n                    let found = name.indexOf(a);\r\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\r\n                        return d;\r\n                }\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\nFacet that defines a way to provide a function that computes the\r\nappropriate indentation depth, as a column number (see\r\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\r\nline. A return value of `null` indicates no indentation can be\r\ndetermined, and the line should inherit the indentation of the one\r\nabove it. A return value of `undefined` defers to the next indent\r\nservice.\r\n*/\r\nconst indentService = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define();\r\n/**\r\nFacet for overriding the unit by which indentation happens.\r\nShould be a string consisting either entirely of spaces or\r\nentirely of tabs. When not set, this defaults to 2 spaces.\r\n*/\r\nconst indentUnit = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine: values => {\r\n        if (!values.length)\r\n            return \"  \";\r\n        if (!/^(?: +|\\t+)$/.test(values[0]))\r\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\r\n        return values[0];\r\n    }\r\n});\r\n/**\r\nReturn the _column width_ of an indent unit in the state.\r\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\r\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\r\ncontains tabs.\r\n*/\r\nfunction getIndentUnit(state) {\r\n    let unit = state.facet(indentUnit);\r\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\r\n}\r\n/**\r\nCreate an indentation string that covers columns 0 to `cols`.\r\nWill use tabs for as much of the columns as possible when the\r\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\r\ntabs.\r\n*/\r\nfunction indentString(state, cols) {\r\n    let result = \"\", ts = state.tabSize;\r\n    if (state.facet(indentUnit).charCodeAt(0) == 9)\r\n        while (cols >= ts) {\r\n            result += \"\\t\";\r\n            cols -= ts;\r\n        }\r\n    for (let i = 0; i < cols; i++)\r\n        result += \" \";\r\n    return result;\r\n}\r\n/**\r\nGet the indentation, as a column number, at the given position.\r\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\r\nthat are registered, and if none of those return an indentation,\r\nthis will check the syntax tree for the [indent node\r\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\r\nnumber when an indentation could be determined, and null\r\notherwise.\r\n*/\r\nfunction getIndentation(context, pos) {\r\n    if (context instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.EditorState)\r\n        context = new IndentContext(context);\r\n    for (let service of context.state.facet(indentService)) {\r\n        let result = service(context, pos);\r\n        if (result !== undefined)\r\n            return result;\r\n    }\r\n    let tree = syntaxTree(context.state);\r\n    return tree ? syntaxIndentation(context, tree, pos) : null;\r\n}\r\n/**\r\nCreate a change set that auto-indents all lines touched by the\r\ngiven document range.\r\n*/\r\nfunction indentRange(state, from, to) {\r\n    let updated = Object.create(null);\r\n    let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });\r\n    let changes = [];\r\n    for (let pos = from; pos <= to;) {\r\n        let line = state.doc.lineAt(pos);\r\n        pos = line.to + 1;\r\n        let indent = getIndentation(context, line.from);\r\n        if (indent == null)\r\n            continue;\r\n        if (!/\\S/.test(line.text))\r\n            indent = 0;\r\n        let cur = /^\\s*/.exec(line.text)[0];\r\n        let norm = indentString(state, indent);\r\n        if (cur != norm) {\r\n            updated[line.from] = indent;\r\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\r\n        }\r\n    }\r\n    return state.changes(changes);\r\n}\r\n/**\r\nIndentation contexts are used when calling [indentation\r\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\r\nuseful in indentation logic, and can selectively override the\r\nindentation reported for some lines.\r\n*/\r\nclass IndentContext {\r\n    /**\r\n    Create an indent context.\r\n    */\r\n    constructor(\r\n    /**\r\n    The editor state.\r\n    */\r\n    state, \r\n    /**\r\n    @internal\r\n    */\r\n    options = {}) {\r\n        this.state = state;\r\n        this.options = options;\r\n        this.unit = getIndentUnit(state);\r\n    }\r\n    /**\r\n    Get a description of the line at the given position, taking\r\n    [simulated line\r\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\r\n    into account. If there is such a break at `pos`, the `bias`\r\n    argument determines whether the part of the line line before or\r\n    after the break is used.\r\n    */\r\n    lineAt(pos, bias = 1) {\r\n        let line = this.state.doc.lineAt(pos);\r\n        let { simulateBreak, simulateDoubleBreak } = this.options;\r\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\r\n            if (simulateDoubleBreak && simulateBreak == pos)\r\n                return { text: \"\", from: pos };\r\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\r\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\r\n            else\r\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\r\n        }\r\n        return line;\r\n    }\r\n    /**\r\n    Get the text directly after `pos`, either the entire line\r\n    or the next 100 characters, whichever is shorter.\r\n    */\r\n    textAfterPos(pos, bias = 1) {\r\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\r\n            return \"\";\r\n        let { text, from } = this.lineAt(pos, bias);\r\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\r\n    }\r\n    /**\r\n    Find the column for the given position.\r\n    */\r\n    column(pos, bias = 1) {\r\n        let { text, from } = this.lineAt(pos, bias);\r\n        let result = this.countColumn(text, pos - from);\r\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\r\n        if (override > -1)\r\n            result += override - this.countColumn(text, text.search(/\\S|$/));\r\n        return result;\r\n    }\r\n    /**\r\n    Find the column position (taking tabs into account) of the given\r\n    position in the given string.\r\n    */\r\n    countColumn(line, pos = line.length) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.countColumn)(line, this.state.tabSize, pos);\r\n    }\r\n    /**\r\n    Find the indentation column of the line at the given point.\r\n    */\r\n    lineIndent(pos, bias = 1) {\r\n        let { text, from } = this.lineAt(pos, bias);\r\n        let override = this.options.overrideIndentation;\r\n        if (override) {\r\n            let overriden = override(from);\r\n            if (overriden > -1)\r\n                return overriden;\r\n        }\r\n        return this.countColumn(text, text.search(/\\S|$/));\r\n    }\r\n    /**\r\n    Returns the [simulated line\r\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\r\n    for this context, if any.\r\n    */\r\n    get simulatedBreak() {\r\n        return this.options.simulateBreak || null;\r\n    }\r\n}\r\n/**\r\nA syntax tree node prop used to associate indentation strategies\r\nwith node types. Such a strategy is a function from an indentation\r\ncontext to a column number (see also\r\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\r\nindicates that no definitive indentation can be determined.\r\n*/\r\nconst indentNodeProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\n// Compute the indentation for a given position from the syntax tree.\r\nfunction syntaxIndentation(cx, ast, pos) {\r\n    return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\r\n}\r\nfunction ignoreClosed(cx) {\r\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\r\n}\r\nfunction indentStrategy(tree) {\r\n    let strategy = tree.type.prop(indentNodeProp);\r\n    if (strategy)\r\n        return strategy;\r\n    let first = tree.firstChild, close;\r\n    if (first && (close = first.type.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy))) {\r\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\r\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\r\n    }\r\n    return tree.parent == null ? topIndent : null;\r\n}\r\nfunction indentFrom(node, pos, base) {\r\n    for (; node; node = node.parent) {\r\n        let strategy = indentStrategy(node);\r\n        if (strategy)\r\n            return strategy(TreeIndentContext.create(base, pos, node));\r\n    }\r\n    return null;\r\n}\r\nfunction topIndent() { return 0; }\r\n/**\r\nObjects of this type provide context information and helper\r\nmethods to indentation functions registered on syntax nodes.\r\n*/\r\nclass TreeIndentContext extends IndentContext {\r\n    constructor(base, \r\n    /**\r\n    The position at which indentation is being computed.\r\n    */\r\n    pos, \r\n    /**\r\n    The syntax tree node to which the indentation strategy\r\n    applies.\r\n    */\r\n    node) {\r\n        super(base.state, base.options);\r\n        this.base = base;\r\n        this.pos = pos;\r\n        this.node = node;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(base, pos, node) {\r\n        return new TreeIndentContext(base, pos, node);\r\n    }\r\n    /**\r\n    Get the text directly after `this.pos`, either the entire line\r\n    or the next 100 characters, whichever is shorter.\r\n    */\r\n    get textAfter() {\r\n        return this.textAfterPos(this.pos);\r\n    }\r\n    /**\r\n    Get the indentation at the reference line for `this.node`, which\r\n    is the line on which it starts, unless there is a node that is\r\n    _not_ a parent of this node covering the start of that line. If\r\n    so, the line at the start of that node is tried, again skipping\r\n    on if it is covered by another such node.\r\n    */\r\n    get baseIndent() {\r\n        let line = this.state.doc.lineAt(this.node.from);\r\n        // Skip line starts that are covered by a sibling (or cousin, etc)\r\n        for (;;) {\r\n            let atBreak = this.node.resolve(line.from);\r\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\r\n                atBreak = atBreak.parent;\r\n            if (isParent(atBreak, this.node))\r\n                break;\r\n            line = this.state.doc.lineAt(atBreak.from);\r\n        }\r\n        return this.lineIndent(line.from);\r\n    }\r\n    /**\r\n    Continue looking for indentations in the node's parent nodes,\r\n    and return the result of that.\r\n    */\r\n    continue() {\r\n        let parent = this.node.parent;\r\n        return parent ? indentFrom(parent, this.pos, this.base) : 0;\r\n    }\r\n}\r\nfunction isParent(parent, of) {\r\n    for (let cur = of; cur; cur = cur.parent)\r\n        if (parent == cur)\r\n            return true;\r\n    return false;\r\n}\r\n// Check whether a delimited node is aligned (meaning there are\r\n// non-skipped nodes on the same line as the opening delimiter). And\r\n// if so, return the opening token.\r\nfunction bracketedAligned(context) {\r\n    let tree = context.node;\r\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\r\n    if (!openToken)\r\n        return null;\r\n    let sim = context.options.simulateBreak;\r\n    let openLine = context.state.doc.lineAt(openToken.from);\r\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\r\n    for (let pos = openToken.to;;) {\r\n        let next = tree.childAfter(pos);\r\n        if (!next || next == last)\r\n            return null;\r\n        if (!next.type.isSkipped)\r\n            return next.from < lineEnd ? openToken : null;\r\n        pos = next.to;\r\n    }\r\n}\r\n/**\r\nAn indentation strategy for delimited (usually bracketed) nodes.\r\nWill, by default, indent one unit more than the parent's base\r\nindent unless the line starts with a closing token. When `align`\r\nis true and there are non-skipped nodes on the node's opening\r\nline, the content of the node will be aligned with the end of the\r\nopening node, like this:\r\n\r\n    foo(bar,\r\n        baz)\r\n*/\r\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\r\n    return (context) => delimitedStrategy(context, align, units, closing);\r\n}\r\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\r\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\r\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\r\n    let aligned = align ? bracketedAligned(context) : null;\r\n    if (aligned)\r\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\r\n    return context.baseIndent + (closed ? 0 : context.unit * units);\r\n}\r\n/**\r\nAn indentation strategy that aligns a node's content to its base\r\nindentation.\r\n*/\r\nconst flatIndent = (context) => context.baseIndent;\r\n/**\r\nCreates an indentation strategy that, by default, indents\r\ncontinued lines one unit more than the node's base indentation.\r\nYou can provide `except` to prevent indentation of lines that\r\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\r\nconstructs), and you can change the amount of units used with the\r\n`units` option.\r\n*/\r\nfunction continuedIndent({ except, units = 1 } = {}) {\r\n    return (context) => {\r\n        let matchExcept = except && except.test(context.textAfter);\r\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\r\n    };\r\n}\r\nconst DontIndentBeyond = 200;\r\n/**\r\nEnables reindentation on input. When a language defines an\r\n`indentOnInput` field in its [language\r\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\r\nexpression, the line at the cursor will be reindented whenever new\r\ntext is typed and the input from the start of the line up to the\r\ncursor matches that regexp.\r\n\r\nTo avoid unneccesary reindents, it is recommended to start the\r\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\r\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\r\nadded at the start of a line.\r\n*/\r\nfunction indentOnInput() {\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.EditorState.transactionFilter.of(tr => {\r\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\r\n            return tr;\r\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\r\n        if (!rules.length)\r\n            return tr;\r\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\r\n        if (head > line.from + DontIndentBeyond)\r\n            return tr;\r\n        let lineStart = doc.sliceString(line.from, head);\r\n        if (!rules.some(r => r.test(lineStart)))\r\n            return tr;\r\n        let { state } = tr, last = -1, changes = [];\r\n        for (let { head } of state.selection.ranges) {\r\n            let line = state.doc.lineAt(head);\r\n            if (line.from == last)\r\n                continue;\r\n            last = line.from;\r\n            let indent = getIndentation(state, line.from);\r\n            if (indent == null)\r\n                continue;\r\n            let cur = /^\\s*/.exec(line.text)[0];\r\n            let norm = indentString(state, indent);\r\n            if (cur != norm)\r\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\r\n        }\r\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\r\n    });\r\n}\r\n\r\n/**\r\nA facet that registers a code folding service. When called with\r\nthe extent of a line, such a function should return a foldable\r\nrange that starts on that line (but continues beyond it), if one\r\ncan be found.\r\n*/\r\nconst foldService = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define();\r\n/**\r\nThis node prop is used to associate folding information with\r\nsyntax node types. Given a syntax node, it should check whether\r\nthat tree is foldable and return the range that can be collapsed\r\nwhen it is.\r\n*/\r\nconst foldNodeProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\n/**\r\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\r\nthe first and the last child of a syntax node. Useful for nodes\r\nthat start and end with delimiters.\r\n*/\r\nfunction foldInside(node) {\r\n    let first = node.firstChild, last = node.lastChild;\r\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\r\n}\r\nfunction syntaxFolding(state, start, end) {\r\n    let tree = syntaxTree(state);\r\n    if (tree.length < end)\r\n        return null;\r\n    let inner = tree.resolveInner(end, 1);\r\n    let found = null;\r\n    for (let cur = inner; cur; cur = cur.parent) {\r\n        if (cur.to <= end || cur.from > end)\r\n            continue;\r\n        if (found && cur.from < start)\r\n            break;\r\n        let prop = cur.type.prop(foldNodeProp);\r\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\r\n            let value = prop(cur, state);\r\n            if (value && value.from <= end && value.from >= start && value.to > end)\r\n                found = value;\r\n        }\r\n    }\r\n    return found;\r\n}\r\nfunction isUnfinished(node) {\r\n    let ch = node.lastChild;\r\n    return ch && ch.to == node.to && ch.type.isError;\r\n}\r\n/**\r\nCheck whether the given line is foldable. First asks any fold\r\nservices registered through\r\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\r\na result, tries to query the [fold node\r\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\r\nof the line.\r\n*/\r\nfunction foldable(state, lineStart, lineEnd) {\r\n    for (let service of state.facet(foldService)) {\r\n        let result = service(state, lineStart, lineEnd);\r\n        if (result)\r\n            return result;\r\n    }\r\n    return syntaxFolding(state, lineStart, lineEnd);\r\n}\r\nfunction mapRange(range, mapping) {\r\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\r\n    return from >= to ? undefined : { from, to };\r\n}\r\n/**\r\nState effect that can be attached to a transaction to fold the\r\ngiven range. (You probably only need this in exceptional\r\ncircumstances—usually you'll just want to let\r\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\r\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\r\n*/\r\nconst foldEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateEffect.define({ map: mapRange });\r\n/**\r\nState effect that unfolds the given range (if it was folded).\r\n*/\r\nconst unfoldEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateEffect.define({ map: mapRange });\r\nfunction selectedLines(view) {\r\n    let lines = [];\r\n    for (let { head } of view.state.selection.ranges) {\r\n        if (lines.some(l => l.from <= head && l.to >= head))\r\n            continue;\r\n        lines.push(view.lineBlockAt(head));\r\n    }\r\n    return lines;\r\n}\r\n/**\r\nThe state field that stores the folded ranges (as a [decoration\r\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\r\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\r\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\r\nstate.\r\n*/\r\nconst foldState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateField.define({\r\n    create() {\r\n        return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;\r\n    },\r\n    update(folded, tr) {\r\n        folded = folded.map(tr.changes);\r\n        for (let e of tr.effects) {\r\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))\r\n                folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });\r\n            else if (e.is(unfoldEffect))\r\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\r\n                    filterFrom: e.value.from, filterTo: e.value.to });\r\n        }\r\n        // Clear folded ranges that cover the selection head\r\n        if (tr.selection) {\r\n            let onSelection = false, { head } = tr.selection.main;\r\n            folded.between(head, head, (a, b) => { if (a < head && b > head)\r\n                onSelection = true; });\r\n            if (onSelection)\r\n                folded = folded.update({\r\n                    filterFrom: head,\r\n                    filterTo: head,\r\n                    filter: (a, b) => b <= head || a >= head\r\n                });\r\n        }\r\n        return folded;\r\n    },\r\n    provide: f => _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.decorations.from(f),\r\n    toJSON(folded, state) {\r\n        let ranges = [];\r\n        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });\r\n        return ranges;\r\n    },\r\n    fromJSON(value) {\r\n        if (!Array.isArray(value) || value.length % 2)\r\n            throw new RangeError(\"Invalid JSON for fold state\");\r\n        let ranges = [];\r\n        for (let i = 0; i < value.length;) {\r\n            let from = value[i++], to = value[i++];\r\n            if (typeof from != \"number\" || typeof to != \"number\")\r\n                throw new RangeError(\"Invalid JSON for fold state\");\r\n            ranges.push(foldWidget.range(from, to));\r\n        }\r\n        return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.set(ranges, true);\r\n    }\r\n});\r\n/**\r\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\r\nin the given state.\r\n*/\r\nfunction foldedRanges(state) {\r\n    return state.field(foldState, false) || _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.RangeSet.empty;\r\n}\r\nfunction findFold(state, from, to) {\r\n    var _a;\r\n    let found = null;\r\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\r\n        if (!found || found.from > from)\r\n            found = { from, to };\r\n    });\r\n    return found;\r\n}\r\nfunction foldExists(folded, from, to) {\r\n    let found = false;\r\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\r\n        found = true; });\r\n    return found;\r\n}\r\nfunction maybeEnable(state, other) {\r\n    return state.field(foldState, false) ? other : other.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateEffect.appendConfig.of(codeFolding()));\r\n}\r\n/**\r\nFold the lines that are selected, if possible.\r\n*/\r\nconst foldCode = view => {\r\n    for (let line of selectedLines(view)) {\r\n        let range = foldable(view.state, line.from, line.to);\r\n        if (range) {\r\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n/**\r\nUnfold folded ranges on selected lines.\r\n*/\r\nconst unfoldCode = view => {\r\n    if (!view.state.field(foldState, false))\r\n        return false;\r\n    let effects = [];\r\n    for (let line of selectedLines(view)) {\r\n        let folded = findFold(view.state, line.from, line.to);\r\n        if (folded)\r\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\r\n    }\r\n    if (effects.length)\r\n        view.dispatch({ effects });\r\n    return effects.length > 0;\r\n};\r\nfunction announceFold(view, range, fold = true) {\r\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\r\n    return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\r\n}\r\n/**\r\nFold all top-level foldable ranges. Note that, in most cases,\r\nfolding information will depend on the [syntax\r\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\r\nreliably when the document hasn't been fully parsed (either\r\nbecause the editor state was only just initialized, or because the\r\ndocument is so big that the parser decided not to parse it\r\nentirely).\r\n*/\r\nconst foldAll = view => {\r\n    let { state } = view, effects = [];\r\n    for (let pos = 0; pos < state.doc.length;) {\r\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\r\n        if (range)\r\n            effects.push(foldEffect.of(range));\r\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\r\n    }\r\n    if (effects.length)\r\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\r\n    return !!effects.length;\r\n};\r\n/**\r\nUnfold all folded code.\r\n*/\r\nconst unfoldAll = view => {\r\n    let field = view.state.field(foldState, false);\r\n    if (!field || !field.size)\r\n        return false;\r\n    let effects = [];\r\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\r\n    view.dispatch({ effects });\r\n    return true;\r\n};\r\n/**\r\nDefault fold-related key bindings.\r\n\r\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\r\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\r\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\r\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\r\n*/\r\nconst foldKeymap = [\r\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\r\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\r\n    { key: \"Ctrl-Alt-[\", run: foldAll },\r\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\r\n];\r\nconst defaultConfig = {\r\n    placeholderDOM: null,\r\n    placeholderText: \"…\"\r\n};\r\nconst foldConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine(values) { return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.combineConfig)(values, defaultConfig); }\r\n});\r\n/**\r\nCreate an extension that configures code folding.\r\n*/\r\nfunction codeFolding(config) {\r\n    let result = [foldState, baseTheme$1];\r\n    if (config)\r\n        result.push(foldConfig.of(config));\r\n    return result;\r\n}\r\nconst foldWidget = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.replace({ widget: /*@__PURE__*/new class extends _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.WidgetType {\r\n        toDOM(view) {\r\n            let { state } = view, conf = state.facet(foldConfig);\r\n            let onclick = (event) => {\r\n                let line = view.lineBlockAt(view.posAtDOM(event.target));\r\n                let folded = findFold(view.state, line.from, line.to);\r\n                if (folded)\r\n                    view.dispatch({ effects: unfoldEffect.of(folded) });\r\n                event.preventDefault();\r\n            };\r\n            if (conf.placeholderDOM)\r\n                return conf.placeholderDOM(view, onclick);\r\n            let element = document.createElement(\"span\");\r\n            element.textContent = conf.placeholderText;\r\n            element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\r\n            element.title = state.phrase(\"unfold\");\r\n            element.className = \"cm-foldPlaceholder\";\r\n            element.onclick = onclick;\r\n            return element;\r\n        }\r\n    } });\r\nconst foldGutterDefaults = {\r\n    openText: \"⌄\",\r\n    closedText: \"›\",\r\n    markerDOM: null,\r\n    domEventHandlers: {},\r\n    foldingChanged: () => false\r\n};\r\nclass FoldMarker extends _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.GutterMarker {\r\n    constructor(config, open) {\r\n        super();\r\n        this.config = config;\r\n        this.open = open;\r\n    }\r\n    eq(other) { return this.config == other.config && this.open == other.open; }\r\n    toDOM(view) {\r\n        if (this.config.markerDOM)\r\n            return this.config.markerDOM(this.open);\r\n        let span = document.createElement(\"span\");\r\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\r\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\r\n        return span;\r\n    }\r\n}\r\n/**\r\nCreate an extension that registers a fold gutter, which shows a\r\nfold status indicator before foldable lines (which can be clicked\r\nto fold or unfold the line).\r\n*/\r\nfunction foldGutter(config = {}) {\r\n    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\r\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\r\n    let markers = _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.from = view.viewport.from;\r\n            this.markers = this.buildMarkers(view);\r\n        }\r\n        update(update) {\r\n            if (update.docChanged || update.viewportChanged ||\r\n                update.startState.facet(language) != update.state.facet(language) ||\r\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\r\n                syntaxTree(update.startState) != syntaxTree(update.state) ||\r\n                fullConfig.foldingChanged(update))\r\n                this.markers = this.buildMarkers(update.view);\r\n        }\r\n        buildMarkers(view) {\r\n            let builder = new _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.RangeSetBuilder();\r\n            for (let line of view.viewportLineBlocks) {\r\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold\r\n                    : foldable(view.state, line.from, line.to) ? canFold : null;\r\n                if (mark)\r\n                    builder.add(line.from, line.from, mark);\r\n            }\r\n            return builder.finish();\r\n        }\r\n    });\r\n    let { domEventHandlers } = fullConfig;\r\n    return [\r\n        markers,\r\n        (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.gutter)({\r\n            class: \"cm-foldGutter\",\r\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.RangeSet.empty; },\r\n            initialSpacer() {\r\n                return new FoldMarker(fullConfig, false);\r\n            },\r\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {\r\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\r\n                        return true;\r\n                    let folded = findFold(view.state, line.from, line.to);\r\n                    if (folded) {\r\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\r\n                        return true;\r\n                    }\r\n                    let range = foldable(view.state, line.from, line.to);\r\n                    if (range) {\r\n                        view.dispatch({ effects: foldEffect.of(range) });\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                } })\r\n        }),\r\n        codeFolding()\r\n    ];\r\n}\r\nconst baseTheme$1 = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.baseTheme({\r\n    \".cm-foldPlaceholder\": {\r\n        backgroundColor: \"#eee\",\r\n        border: \"1px solid #ddd\",\r\n        color: \"#888\",\r\n        borderRadius: \".2em\",\r\n        margin: \"0 1px\",\r\n        padding: \"0 1px\",\r\n        cursor: \"pointer\"\r\n    },\r\n    \".cm-foldGutter span\": {\r\n        padding: \"0 1px\",\r\n        cursor: \"pointer\"\r\n    }\r\n});\r\n\r\n/**\r\nA highlight style associates CSS styles with higlighting\r\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\r\n*/\r\nclass HighlightStyle {\r\n    constructor(\r\n    /**\r\n    The tag styles used to create this highlight style.\r\n    */\r\n    specs, options) {\r\n        this.specs = specs;\r\n        let modSpec;\r\n        function def(spec) {\r\n            let cls = style_mod__WEBPACK_IMPORTED_MODULE_2__.StyleModule.newName();\r\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\r\n            return cls;\r\n        }\r\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\r\n        const scopeOpt = options.scope;\r\n        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data\r\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\r\n        this.style = (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tagHighlighter)(specs.map(style => ({\r\n            tag: style.tag,\r\n            class: style.class || def(Object.assign({}, style, { tag: null }))\r\n        })), {\r\n            all,\r\n        }).style;\r\n        this.module = modSpec ? new style_mod__WEBPACK_IMPORTED_MODULE_2__.StyleModule(modSpec) : null;\r\n        this.themeType = options.themeType;\r\n    }\r\n    /**\r\n    Create a highlighter style that associates the given styles to\r\n    the given tags. The specs must be objects that hold a style tag\r\n    or array of tags in their `tag` property, and either a single\r\n    `class` property providing a static CSS class (for highlighter\r\n    that rely on external styling), or a\r\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\r\n    set of CSS properties (which define the styling for those tags).\r\n    \r\n    The CSS rules created for a highlighter will be emitted in the\r\n    order of the spec's properties. That means that for elements that\r\n    have multiple tags associated with them, styles defined further\r\n    down in the list will have a higher CSS precedence than styles\r\n    defined earlier.\r\n    */\r\n    static define(specs, options) {\r\n        return new HighlightStyle(specs, options || {});\r\n    }\r\n}\r\nconst highlighterFacet = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define();\r\nconst fallbackHighlighter = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine(values) { return values.length ? [values[0]] : null; }\r\n});\r\nfunction getHighlighters(state) {\r\n    let main = state.facet(highlighterFacet);\r\n    return main.length ? main : state.facet(fallbackHighlighter);\r\n}\r\n/**\r\nWrap a highlighter in an editor extension that uses it to apply\r\nsyntax highlighting to the editor content.\r\n\r\nWhen multiple (non-fallback) styles are provided, the styling\r\napplied is the union of the classes they emit.\r\n*/\r\nfunction syntaxHighlighting(highlighter, options) {\r\n    let ext = [treeHighlighter], themeType;\r\n    if (highlighter instanceof HighlightStyle) {\r\n        if (highlighter.module)\r\n            ext.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.styleModule.of(highlighter.module));\r\n        themeType = highlighter.themeType;\r\n    }\r\n    if (options === null || options === void 0 ? void 0 : options.fallback)\r\n        ext.push(fallbackHighlighter.of(highlighter));\r\n    else if (themeType)\r\n        ext.push(highlighterFacet.computeN([_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.darkTheme], state => {\r\n            return state.facet(_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\r\n        }));\r\n    else\r\n        ext.push(highlighterFacet.of(highlighter));\r\n    return ext;\r\n}\r\n/**\r\nReturns the CSS classes (if any) that the highlighters active in\r\nthe state would assign to the given style\r\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\r\n(optional) language\r\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\r\n*/\r\nfunction highlightingFor(state, tags, scope) {\r\n    let highlighters = getHighlighters(state);\r\n    let result = null;\r\n    if (highlighters)\r\n        for (let highlighter of highlighters) {\r\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\r\n                let cls = highlighter.style(tags);\r\n                if (cls)\r\n                    result = result ? result + \" \" + cls : cls;\r\n            }\r\n        }\r\n    return result;\r\n}\r\nclass TreeHighlighter {\r\n    constructor(view) {\r\n        this.markCache = Object.create(null);\r\n        this.tree = syntaxTree(view.state);\r\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\r\n    }\r\n    update(update) {\r\n        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);\r\n        let styleChange = highlighters != getHighlighters(update.startState);\r\n        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {\r\n            this.decorations = this.decorations.map(update.changes);\r\n        }\r\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\r\n            this.tree = tree;\r\n            this.decorations = this.buildDeco(update.view, highlighters);\r\n        }\r\n    }\r\n    buildDeco(view, highlighters) {\r\n        if (!highlighters || !this.tree.length)\r\n            return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;\r\n        let builder = new _codemirror_state__WEBPACK_IMPORTED_MODULE_3__.RangeSetBuilder();\r\n        for (let { from, to } of view.visibleRanges) {\r\n            (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.highlightTree)(this.tree, highlighters, (from, to, style) => {\r\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({ class: style })));\r\n            }, from, to);\r\n        }\r\n        return builder.finish();\r\n    }\r\n}\r\nconst treeHighlighter = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Prec.high(/*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.ViewPlugin.fromClass(TreeHighlighter, {\r\n    decorations: v => v.decorations\r\n}));\r\n/**\r\nA default highlight style (works well with light themes).\r\n*/\r\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.meta,\r\n        color: \"#404740\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.link,\r\n        textDecoration: \"underline\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.heading,\r\n        textDecoration: \"underline\",\r\n        fontWeight: \"bold\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.emphasis,\r\n        fontStyle: \"italic\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.strong,\r\n        fontWeight: \"bold\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.strikethrough,\r\n        textDecoration: \"line-through\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.keyword,\r\n        color: \"#708\" },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.atom, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.bool, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.url, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.contentSeparator, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.labelName],\r\n        color: \"#219\" },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.literal, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.inserted],\r\n        color: \"#164\" },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.string, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.deleted],\r\n        color: \"#a11\" },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.regexp, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.escape, /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.special(_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.string)],\r\n        color: \"#e40\" },\r\n    { tag: /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.variableName),\r\n        color: \"#00f\" },\r\n    { tag: /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.local(_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.variableName),\r\n        color: \"#30a\" },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.typeName, _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.namespace],\r\n        color: \"#085\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.className,\r\n        color: \"#167\" },\r\n    { tag: [/*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.special(_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.variableName), _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.macroName],\r\n        color: \"#256\" },\r\n    { tag: /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName),\r\n        color: \"#00c\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.comment,\r\n        color: \"#940\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.invalid,\r\n        color: \"#f00\" }\r\n]);\r\n\r\nconst baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.baseTheme({\r\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\r\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\r\n});\r\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\r\nconst bracketMatchingConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.combineConfig)(configs, {\r\n            afterCursor: true,\r\n            brackets: DefaultBrackets,\r\n            maxScanDistance: DefaultScanDist,\r\n            renderMatch: defaultRenderMatch\r\n        });\r\n    }\r\n});\r\nconst matchingMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({ class: \"cm-nonmatchingBracket\" });\r\nfunction defaultRenderMatch(match) {\r\n    let decorations = [];\r\n    let mark = match.matched ? matchingMark : nonmatchingMark;\r\n    decorations.push(mark.range(match.start.from, match.start.to));\r\n    if (match.end)\r\n        decorations.push(mark.range(match.end.from, match.end.to));\r\n    return decorations;\r\n}\r\nconst bracketMatchingState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__.StateField.define({\r\n    create() { return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none; },\r\n    update(deco, tr) {\r\n        if (!tr.docChanged && !tr.selection)\r\n            return deco;\r\n        let decorations = [];\r\n        let config = tr.state.facet(bracketMatchingConfig);\r\n        for (let range of tr.state.selection.ranges) {\r\n            if (!range.empty)\r\n                continue;\r\n            let match = matchBrackets(tr.state, range.head, -1, config)\r\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\r\n                || (config.afterCursor &&\r\n                    (matchBrackets(tr.state, range.head, 1, config) ||\r\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\r\n            if (match)\r\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\r\n        }\r\n        return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.set(decorations, true);\r\n    },\r\n    provide: f => _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.decorations.from(f)\r\n});\r\nconst bracketMatchingUnique = [\r\n    bracketMatchingState,\r\n    baseTheme\r\n];\r\n/**\r\nCreate an extension that enables bracket matching. Whenever the\r\ncursor is next to a bracket, that bracket and the one it matches\r\nare highlighted. Or, when no matching bracket is found, another\r\nhighlighting style is used to indicate this.\r\n*/\r\nfunction bracketMatching(config = {}) {\r\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\r\n}\r\nfunction matchingNodes(node, dir, brackets) {\r\n    let byProp = node.prop(dir < 0 ? _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.openedBy : _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy);\r\n    if (byProp)\r\n        return byProp;\r\n    if (node.name.length == 1) {\r\n        let index = brackets.indexOf(node.name);\r\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\r\n            return [brackets[index + dir]];\r\n    }\r\n    return null;\r\n}\r\n/**\r\nFind the matching bracket for the token at `pos`, scanning\r\ndirection `dir`. Only the `brackets` and `maxScanDistance`\r\nproperties are used from `config`, if given. Returns null if no\r\nbracket was found at `pos`, or a match result otherwise.\r\n*/\r\nfunction matchBrackets(state, pos, dir, config = {}) {\r\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\r\n    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);\r\n    for (let cur = node; cur; cur = cur.parent) {\r\n        let matches = matchingNodes(cur.type, dir, brackets);\r\n        if (matches && cur.from < cur.to)\r\n            return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);\r\n    }\r\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\r\n}\r\nfunction matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {\r\n    let parent = token.parent, firstToken = { from: token.from, to: token.to };\r\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\r\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\r\n        do {\r\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\r\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\r\n                    return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };\r\n                }\r\n                else if (matchingNodes(cursor.type, dir, brackets)) {\r\n                    depth++;\r\n                }\r\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\r\n                    if (depth == 0)\r\n                        return {\r\n                            start: firstToken,\r\n                            end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },\r\n                            matched: false\r\n                        };\r\n                    depth--;\r\n                }\r\n            }\r\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\r\n    return { start: firstToken, matched: false };\r\n}\r\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\r\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\r\n    let bracket = brackets.indexOf(startCh);\r\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\r\n        return null;\r\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\r\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\r\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\r\n        let text = iter.value;\r\n        if (dir < 0)\r\n            distance += text.length;\r\n        let basePos = pos + distance * dir;\r\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\r\n            let found = brackets.indexOf(text[pos]);\r\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)\r\n                continue;\r\n            if ((found % 2 == 0) == (dir > 0)) {\r\n                depth++;\r\n            }\r\n            else if (depth == 1) { // Closing\r\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\r\n            }\r\n            else {\r\n                depth--;\r\n            }\r\n        }\r\n        if (dir > 0)\r\n            distance += text.length;\r\n    }\r\n    return iter.done ? { start: startToken, matched: false } : null;\r\n}\r\n\r\n// Counts the column offset in a string, taking tabs into account.\r\n// Used mostly to find indentation.\r\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\r\n    if (end == null) {\r\n        end = string.search(/[^\\s\\u00a0]/);\r\n        if (end == -1)\r\n            end = string.length;\r\n    }\r\n    let n = startValue;\r\n    for (let i = startIndex; i < end; i++) {\r\n        if (string.charCodeAt(i) == 9)\r\n            n += tabSize - (n % tabSize);\r\n        else\r\n            n++;\r\n    }\r\n    return n;\r\n}\r\n/**\r\nEncapsulates a single line of input. Given to stream syntax code,\r\nwhich uses it to tokenize the content.\r\n*/\r\nclass StringStream {\r\n    /**\r\n    Create a stream.\r\n    */\r\n    constructor(\r\n    /**\r\n    The line.\r\n    */\r\n    string, tabSize, \r\n    /**\r\n    The current indent unit size.\r\n    */\r\n    indentUnit) {\r\n        this.string = string;\r\n        this.tabSize = tabSize;\r\n        this.indentUnit = indentUnit;\r\n        /**\r\n        The current position on the line.\r\n        */\r\n        this.pos = 0;\r\n        /**\r\n        The start position of the current token.\r\n        */\r\n        this.start = 0;\r\n        this.lastColumnPos = 0;\r\n        this.lastColumnValue = 0;\r\n    }\r\n    /**\r\n    True if we are at the end of the line.\r\n    */\r\n    eol() { return this.pos >= this.string.length; }\r\n    /**\r\n    True if we are at the start of the line.\r\n    */\r\n    sol() { return this.pos == 0; }\r\n    /**\r\n    Get the next code unit after the current position, or undefined\r\n    if we're at the end of the line.\r\n    */\r\n    peek() { return this.string.charAt(this.pos) || undefined; }\r\n    /**\r\n    Read the next code unit and advance `this.pos`.\r\n    */\r\n    next() {\r\n        if (this.pos < this.string.length)\r\n            return this.string.charAt(this.pos++);\r\n    }\r\n    /**\r\n    Match the next character against the given string, regular\r\n    expression, or predicate. Consume and return it if it matches.\r\n    */\r\n    eat(match) {\r\n        let ch = this.string.charAt(this.pos);\r\n        let ok;\r\n        if (typeof match == \"string\")\r\n            ok = ch == match;\r\n        else\r\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\r\n        if (ok) {\r\n            ++this.pos;\r\n            return ch;\r\n        }\r\n    }\r\n    /**\r\n    Continue matching characters that match the given string,\r\n    regular expression, or predicate function. Return true if any\r\n    characters were consumed.\r\n    */\r\n    eatWhile(match) {\r\n        let start = this.pos;\r\n        while (this.eat(match)) { }\r\n        return this.pos > start;\r\n    }\r\n    /**\r\n    Consume whitespace ahead of `this.pos`. Return true if any was\r\n    found.\r\n    */\r\n    eatSpace() {\r\n        let start = this.pos;\r\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\r\n            ++this.pos;\r\n        return this.pos > start;\r\n    }\r\n    /**\r\n    Move to the end of the line.\r\n    */\r\n    skipToEnd() { this.pos = this.string.length; }\r\n    /**\r\n    Move to directly before the given character, if found on the\r\n    current line.\r\n    */\r\n    skipTo(ch) {\r\n        let found = this.string.indexOf(ch, this.pos);\r\n        if (found > -1) {\r\n            this.pos = found;\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n    Move back `n` characters.\r\n    */\r\n    backUp(n) { this.pos -= n; }\r\n    /**\r\n    Get the column position at `this.pos`.\r\n    */\r\n    column() {\r\n        if (this.lastColumnPos < this.start) {\r\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\r\n            this.lastColumnPos = this.start;\r\n        }\r\n        return this.lastColumnValue;\r\n    }\r\n    /**\r\n    Get the indentation column of the current line.\r\n    */\r\n    indentation() {\r\n        return countCol(this.string, null, this.tabSize);\r\n    }\r\n    /**\r\n    Match the input against the given string or regular expression\r\n    (which should start with a `^`). Return true or the regexp match\r\n    if it matches.\r\n    \r\n    Unless `consume` is set to `false`, this will move `this.pos`\r\n    past the matched text.\r\n    \r\n    When matching a string `caseInsensitive` can be set to true to\r\n    make the match case-insensitive.\r\n    */\r\n    match(pattern, consume, caseInsensitive) {\r\n        if (typeof pattern == \"string\") {\r\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\r\n            let substr = this.string.substr(this.pos, pattern.length);\r\n            if (cased(substr) == cased(pattern)) {\r\n                if (consume !== false)\r\n                    this.pos += pattern.length;\r\n                return true;\r\n            }\r\n            else\r\n                return null;\r\n        }\r\n        else {\r\n            let match = this.string.slice(this.pos).match(pattern);\r\n            if (match && match.index > 0)\r\n                return null;\r\n            if (match && consume !== false)\r\n                this.pos += match[0].length;\r\n            return match;\r\n        }\r\n    }\r\n    /**\r\n    Get the current token.\r\n    */\r\n    current() { return this.string.slice(this.start, this.pos); }\r\n}\r\n\r\nfunction fullParser(spec) {\r\n    return {\r\n        name: spec.name || \"\",\r\n        token: spec.token,\r\n        blankLine: spec.blankLine || (() => { }),\r\n        startState: spec.startState || (() => true),\r\n        copyState: spec.copyState || defaultCopyState,\r\n        indent: spec.indent || (() => null),\r\n        languageData: spec.languageData || {},\r\n        tokenTable: spec.tokenTable || noTokens\r\n    };\r\n}\r\nfunction defaultCopyState(state) {\r\n    if (typeof state != \"object\")\r\n        return state;\r\n    let newState = {};\r\n    for (let prop in state) {\r\n        let val = state[prop];\r\n        newState[prop] = (val instanceof Array ? val.slice() : val);\r\n    }\r\n    return newState;\r\n}\r\n/**\r\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\r\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\r\n*/\r\nclass StreamLanguage extends Language {\r\n    constructor(parser) {\r\n        let data = defineLanguageFacet(parser.languageData);\r\n        let p = fullParser(parser), self;\r\n        let impl = new class extends _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Parser {\r\n            createParse(input, fragments, ranges) {\r\n                return new Parse(self, input, fragments, ranges);\r\n            }\r\n        };\r\n        super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);\r\n        this.topNode = docID(data);\r\n        self = this;\r\n        this.streamParser = p;\r\n        this.stateAfter = new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp({ perNode: true });\r\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\r\n    }\r\n    /**\r\n    Define a stream language.\r\n    */\r\n    static define(spec) { return new StreamLanguage(spec); }\r\n    getIndent(cx, pos) {\r\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\r\n        while (at && at.type != this.topNode)\r\n            at = at.parent;\r\n        if (!at)\r\n            return null;\r\n        let start = findState(this, tree, 0, at.from, pos), statePos, state;\r\n        if (start) {\r\n            state = start.state;\r\n            statePos = start.pos + 1;\r\n        }\r\n        else {\r\n            state = this.streamParser.startState(cx.unit);\r\n            statePos = 0;\r\n        }\r\n        if (pos - statePos > 10000 /* C.MaxIndentScanDist */)\r\n            return null;\r\n        while (statePos < pos) {\r\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\r\n            if (line.length) {\r\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);\r\n                while (stream.pos < end - line.from)\r\n                    readToken(this.streamParser.token, stream, state);\r\n            }\r\n            else {\r\n                this.streamParser.blankLine(state, cx.unit);\r\n            }\r\n            if (end == pos)\r\n                break;\r\n            statePos = line.to + 1;\r\n        }\r\n        let { text } = cx.lineAt(pos);\r\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(text)[1], cx);\r\n    }\r\n    get allowsNesting() { return false; }\r\n}\r\nfunction findState(lang, tree, off, startPos, before) {\r\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\r\n    if (state)\r\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\r\n    for (let i = tree.children.length - 1; i >= 0; i--) {\r\n        let child = tree.children[i], pos = off + tree.positions[i];\r\n        let found = child instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree && pos < before && findState(lang, child, pos, startPos, before);\r\n        if (found)\r\n            return found;\r\n    }\r\n    return null;\r\n}\r\nfunction cutTree(lang, tree, from, to, inside) {\r\n    if (inside && from <= 0 && to >= tree.length)\r\n        return tree;\r\n    if (!inside && tree.type == lang.topNode)\r\n        inside = true;\r\n    for (let i = tree.children.length - 1; i >= 0; i--) {\r\n        let pos = tree.positions[i], child = tree.children[i], inner;\r\n        if (pos < to && child instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree) {\r\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\r\n                break;\r\n            return !inside ? inner\r\n                : new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\r\n    for (let f of fragments) {\r\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\r\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\r\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\r\n            return { state: found.state, tree };\r\n    }\r\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree.empty };\r\n}\r\nclass Parse {\r\n    constructor(lang, input, fragments, ranges) {\r\n        this.lang = lang;\r\n        this.input = input;\r\n        this.fragments = fragments;\r\n        this.ranges = ranges;\r\n        this.stoppedAt = null;\r\n        this.chunks = [];\r\n        this.chunkPos = [];\r\n        this.chunk = [];\r\n        this.chunkReused = undefined;\r\n        this.rangeIndex = 0;\r\n        this.to = ranges[ranges.length - 1].to;\r\n        let context = ParseContext.get(), from = ranges[0].from;\r\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\r\n        this.state = state;\r\n        this.parsedPos = this.chunkStart = from + tree.length;\r\n        for (let i = 0; i < tree.children.length; i++) {\r\n            this.chunks.push(tree.children[i]);\r\n            this.chunkPos.push(tree.positions[i]);\r\n        }\r\n        if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {\r\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\r\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\r\n            this.parsedPos = context.viewport.from;\r\n        }\r\n        this.moveRangeIndex();\r\n    }\r\n    advance() {\r\n        let context = ParseContext.get();\r\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\r\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\r\n        if (context)\r\n            end = Math.min(end, context.viewport.to);\r\n        while (this.parsedPos < end)\r\n            this.parseLine(context);\r\n        if (this.chunkStart < this.parsedPos)\r\n            this.finishChunk();\r\n        if (this.parsedPos >= parseEnd)\r\n            return this.finish();\r\n        if (context && this.parsedPos >= context.viewport.to) {\r\n            context.skipUntilInView(this.parsedPos, parseEnd);\r\n            return this.finish();\r\n        }\r\n        return null;\r\n    }\r\n    stopAt(pos) {\r\n        this.stoppedAt = pos;\r\n    }\r\n    lineAfter(pos) {\r\n        let chunk = this.input.chunk(pos);\r\n        if (!this.input.lineChunks) {\r\n            let eol = chunk.indexOf(\"\\n\");\r\n            if (eol > -1)\r\n                chunk = chunk.slice(0, eol);\r\n        }\r\n        else if (chunk == \"\\n\") {\r\n            chunk = \"\";\r\n        }\r\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\r\n    }\r\n    nextLine() {\r\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\r\n        for (let index = this.rangeIndex;;) {\r\n            let rangeEnd = this.ranges[index].to;\r\n            if (rangeEnd >= end)\r\n                break;\r\n            line = line.slice(0, rangeEnd - (end - line.length));\r\n            index++;\r\n            if (index == this.ranges.length)\r\n                break;\r\n            let rangeStart = this.ranges[index].from;\r\n            let after = this.lineAfter(rangeStart);\r\n            line += after;\r\n            end = rangeStart + after.length;\r\n        }\r\n        return { line, end };\r\n    }\r\n    skipGapsTo(pos, offset, side) {\r\n        for (;;) {\r\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\r\n            if (side > 0 ? end > offPos : end >= offPos)\r\n                break;\r\n            let start = this.ranges[++this.rangeIndex].from;\r\n            offset += start - end;\r\n        }\r\n        return offset;\r\n    }\r\n    moveRangeIndex() {\r\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\r\n            this.rangeIndex++;\r\n    }\r\n    emitToken(id, from, to, size, offset) {\r\n        if (this.ranges.length > 1) {\r\n            offset = this.skipGapsTo(from, offset, 1);\r\n            from += offset;\r\n            let len0 = this.chunk.length;\r\n            offset = this.skipGapsTo(to, offset, -1);\r\n            to += offset;\r\n            size += this.chunk.length - len0;\r\n        }\r\n        this.chunk.push(id, from, to, size);\r\n        return offset;\r\n    }\r\n    parseLine(context) {\r\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\r\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\r\n        if (stream.eol()) {\r\n            streamParser.blankLine(this.state, stream.indentUnit);\r\n        }\r\n        else {\r\n            while (!stream.eol()) {\r\n                let token = readToken(streamParser.token, stream, this.state);\r\n                if (token)\r\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\r\n                if (stream.start > 10000 /* C.MaxLineLength */)\r\n                    break;\r\n            }\r\n        }\r\n        this.parsedPos = end;\r\n        this.moveRangeIndex();\r\n        if (this.parsedPos < this.to)\r\n            this.parsedPos++;\r\n    }\r\n    finishChunk() {\r\n        let tree = _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree.build({\r\n            buffer: this.chunk,\r\n            start: this.chunkStart,\r\n            length: this.parsedPos - this.chunkStart,\r\n            nodeSet,\r\n            topID: 0,\r\n            maxBufferLength: 2048 /* C.ChunkSize */,\r\n            reused: this.chunkReused\r\n        });\r\n        tree = new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\r\n        this.chunks.push(tree);\r\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\r\n        this.chunk = [];\r\n        this.chunkReused = undefined;\r\n        this.chunkStart = this.parsedPos;\r\n    }\r\n    finish() {\r\n        return new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\r\n    }\r\n}\r\nfunction readToken(token, stream, state) {\r\n    stream.start = stream.pos;\r\n    for (let i = 0; i < 10; i++) {\r\n        let result = token(stream, state);\r\n        if (stream.pos > stream.start)\r\n            return result;\r\n    }\r\n    throw new Error(\"Stream parser failed to advance stream.\");\r\n}\r\nconst noTokens = /*@__PURE__*/Object.create(null);\r\nconst typeArray = [_lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeType.none];\r\nconst nodeSet = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeSet(typeArray);\r\nconst warned = [];\r\nconst defaultTable = /*@__PURE__*/Object.create(null);\r\nfor (let [legacyName, name] of [\r\n    [\"variable\", \"variableName\"],\r\n    [\"variable-2\", \"variableName.special\"],\r\n    [\"string-2\", \"string.special\"],\r\n    [\"def\", \"variableName.definition\"],\r\n    [\"tag\", \"tagName\"],\r\n    [\"attribute\", \"attributeName\"],\r\n    [\"type\", \"typeName\"],\r\n    [\"builtin\", \"variableName.standard\"],\r\n    [\"qualifier\", \"modifier\"],\r\n    [\"error\", \"invalid\"],\r\n    [\"header\", \"heading\"],\r\n    [\"property\", \"propertyName\"]\r\n])\r\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\r\nclass TokenTable {\r\n    constructor(extra) {\r\n        this.extra = extra;\r\n        this.table = Object.assign(Object.create(null), defaultTable);\r\n    }\r\n    resolve(tag) {\r\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\r\n    }\r\n}\r\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\r\nfunction warnForPart(part, msg) {\r\n    if (warned.indexOf(part) > -1)\r\n        return;\r\n    warned.push(part);\r\n    console.warn(msg);\r\n}\r\nfunction createTokenType(extra, tagStr) {\r\n    let tag = null;\r\n    for (let part of tagStr.split(\".\")) {\r\n        let value = (extra[part] || _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags[part]);\r\n        if (!value) {\r\n            warnForPart(part, `Unknown highlighting tag ${part}`);\r\n        }\r\n        else if (typeof value == \"function\") {\r\n            if (!tag)\r\n                warnForPart(part, `Modifier ${part} used at start of tag`);\r\n            else\r\n                tag = value(tag);\r\n        }\r\n        else {\r\n            if (tag)\r\n                warnForPart(part, `Tag ${part} used as modifier`);\r\n            else\r\n                tag = value;\r\n        }\r\n    }\r\n    if (!tag)\r\n        return 0;\r\n    let name = tagStr.replace(/ /g, \"_\"), type = _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeType.define({\r\n        id: typeArray.length,\r\n        name,\r\n        props: [(0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.styleTags)({ [name]: tag })]\r\n    });\r\n    typeArray.push(type);\r\n    return type.id;\r\n}\r\nfunction docID(data) {\r\n    let type = _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)] });\r\n    typeArray.push(type);\r\n    return type;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGFuZ3VhZ2UvZGlzdC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBa0c7QUFDMkM7QUFDdkI7QUFDcEM7QUFDMUM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLG1EQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMkRBQVk7QUFDdkI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtRkFBb0M7QUFDakQsa0NBQWtDLG9FQUFxQixZQUFZLFFBQVEsNEJBQTRCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBLFlBQVksMEVBQTJCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtCQUErQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhCQUE4QjtBQUM1RDtBQUNBO0FBQ0Esa0NBQWtDLDJEQUFnQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxzQ0FBc0M7QUFDaEY7QUFDQSxzQ0FBc0Msb0NBQW9DO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwwQkFBMEI7QUFDdEQ7QUFDQSxrQ0FBa0MsK0NBQUk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUVBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxNQUFNLDZCQUE2QixrRUFBdUI7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHFEQUFVO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxxREFBVTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxREFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSw2REFBNkQsK0RBQW9CO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDRDQUE0QztBQUNqRjtBQUNBO0FBQ0EscURBQXFELCtEQUFvQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOENBQThDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRix3QkFBd0I7QUFDeEcsd0JBQXdCLG9FQUF5QjtBQUNqRCxtQkFBbUIscURBQVU7QUFDN0I7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxVQUFVO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRCxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixVQUFVO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaURBQU07QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsK0NBQUksQ0FBQyx3REFBYTtBQUNyRCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLFdBQVcsb0VBQXlCLGVBQWUsNENBQTRDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixtQkFBbUI7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnRUFBaUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELDREQUE0RDtBQUMvRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsa0VBQW9CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixjQUFjLG1CQUFtQixhQUFhO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUVBQWlFO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhEQUFZO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUJBQXFCLFVBQVU7QUFDL0IsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwyREFBWTtBQUMxQyx5QkFBeUIsZ0RBQWdEO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0ZBQW9DO0FBQzVDO0FBQ0EseUNBQXlDLDZCQUE2QjtBQUN0RSxTQUFTO0FBQ1Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdIQUFnSCxxQkFBcUIsWUFBWTtBQUNqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDJEQUFZO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMkRBQVk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDBEQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxnQ0FBZ0MsUUFBUSxxRUFBcUU7QUFDMUo7QUFDQSx5QkFBeUIsVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUEyRDtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQ0FBcUM7QUFDbkQ7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGFBQWE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsOERBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsbURBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDREQUFpQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEtBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtDQUFrQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9CQUFvQixJQUFJO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsK0VBQWdDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJEQUEyRDtBQUMxRjtBQUNBLHVDQUF1QywyQkFBMkI7QUFDbEUsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsMkRBQVk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1EQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDhEQUE4RDtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixLQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxpRUFBa0IsR0FBRyxlQUFlO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpRUFBa0IsR0FBRyxlQUFlO0FBQ3RFO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZ0VBQWlCO0FBQ2hEO0FBQ0EsZUFBZSw2REFBZTtBQUM5QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbURBQW1EO0FBQzVGO0FBQ0EseUNBQXlDO0FBQ3pDLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsT0FBTztBQUM5QyxtREFBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLEtBQUs7QUFDTCxrQkFBa0IseUVBQTJCO0FBQzdDO0FBQ0E7QUFDQSw0REFBNEQsd0JBQXdCO0FBQ3BGO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0REFBYztBQUM3QjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDZEQUFjO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSwwRUFBMkI7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxRkFBcUY7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9FQUFzQixJQUFJLDZEQUE2RCxFQUFFLFVBQVUsRUFBRSx5QkFBeUIsRUFBRSxPQUFPO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFFBQVE7QUFDbEIsc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkNBQTJDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELCtCQUErQixVQUFVLEtBQUs7QUFDMUcsb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sc0RBQXNEO0FBQzVELE1BQU0sd0RBQXdEO0FBQzlELE1BQU0saUNBQWlDO0FBQ3ZDLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJEQUFZO0FBQzVDLHNCQUFzQixPQUFPLGdFQUFhO0FBQzFDLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0VBQWtCLEdBQUcsdUNBQXVDLHdEQUFVO0FBQ3RHO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msa0NBQWtDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EseUJBQXlCLDBEQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixtREFBbUQ7QUFDbkQ7QUFDQSxrQkFBa0Isa0VBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhEQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsVUFBVSxtQkFBbUI7QUFDN0I7QUFDQTtBQUNBLFFBQVEsd0RBQU07QUFDZDtBQUNBLDRCQUE0QixRQUFRLHdGQUF3Riw2REFBYyxHQUFHO0FBQzdJO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsNERBQTRELHVCQUF1QjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxrQ0FBa0M7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsK0JBQStCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtFQUFvQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMERBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdFQUFjO0FBQ25DO0FBQ0Esc0RBQXNELFdBQVcsV0FBVztBQUM1RSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Qsb0NBQW9DLGtEQUFXO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0Esc0NBQXNDLDJEQUFZO0FBQ2xELHlDQUF5QywyREFBWTtBQUNyRCxzQkFBc0I7QUFDdEIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1RUFBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxrRUFBb0I7QUFDaEUsK0JBQStCLGtFQUFvQjtBQUNuRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkRBQWU7QUFDbEMsMEJBQTBCLDhEQUFlO0FBQ3pDLG1CQUFtQixXQUFXO0FBQzlCLFlBQVksK0RBQWE7QUFDekIsd0ZBQXdGLDZEQUFlLEdBQUcsY0FBYztBQUN4SCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0RBQVMsY0FBYyxrRUFBb0I7QUFDaEY7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQUssdURBQVM7QUFDcEIsMEJBQTBCO0FBQzFCLE1BQU0sS0FBSyx1REFBUztBQUNwQixxQ0FBcUM7QUFDckMsTUFBTSxLQUFLLDBEQUFZO0FBQ3ZCO0FBQ0EsNEJBQTRCO0FBQzVCLE1BQU0sS0FBSywyREFBYTtBQUN4Qiw2QkFBNkI7QUFDN0IsTUFBTSxLQUFLLHlEQUFXO0FBQ3RCLDRCQUE0QjtBQUM1QixNQUFNLEtBQUssZ0VBQWtCO0FBQzdCLHdDQUF3QztBQUN4QyxNQUFNLEtBQUssMERBQVk7QUFDdkIsdUJBQXVCO0FBQ3ZCLE1BQU0sTUFBTSx1REFBUyxFQUFFLHVEQUFTLEVBQUUsc0RBQVEsRUFBRSxtRUFBcUIsRUFBRSw0REFBYztBQUNqRix1QkFBdUI7QUFDdkIsTUFBTSxNQUFNLDBEQUFZLEVBQUUsMkRBQWE7QUFDdkMsdUJBQXVCO0FBQ3ZCLE1BQU0sTUFBTSx5REFBVyxFQUFFLDBEQUFZO0FBQ3JDLHVCQUF1QjtBQUN2QixNQUFNLE1BQU0seURBQVcsRUFBRSx5REFBVyxlQUFlLDBEQUFZLENBQUMseURBQVc7QUFDM0UsdUJBQXVCO0FBQ3ZCLE1BQU0sa0JBQWtCLDZEQUFlLENBQUMsK0RBQWlCO0FBQ3pELHVCQUF1QjtBQUN2QixNQUFNLGtCQUFrQix3REFBVSxDQUFDLCtEQUFpQjtBQUNwRCx1QkFBdUI7QUFDdkIsTUFBTSxNQUFNLDJEQUFhLEVBQUUsNERBQWM7QUFDekMsdUJBQXVCO0FBQ3ZCLE1BQU0sS0FBSyw0REFBYztBQUN6Qix1QkFBdUI7QUFDdkIsTUFBTSxtQkFBbUIsMERBQVksQ0FBQywrREFBaUIsR0FBRyw0REFBYztBQUN4RSx1QkFBdUI7QUFDdkIsTUFBTSxrQkFBa0IsNkRBQWUsQ0FBQywrREFBaUI7QUFDekQsdUJBQXVCO0FBQ3ZCLE1BQU0sS0FBSywwREFBWTtBQUN2Qix1QkFBdUI7QUFDdkIsTUFBTSxLQUFLLDBEQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrRUFBb0I7QUFDbkQsMENBQTBDLDhCQUE4QjtBQUN4RSw2Q0FBNkM7QUFDN0MsQ0FBQztBQUNELHdEQUF3RDtBQUN4RCwyQ0FBMkMsMkRBQVk7QUFDdkQ7QUFDQSxlQUFlLGdFQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsQ0FBQztBQUNELGtDQUFrQyw2REFBZSxHQUFHLDZCQUE2QixrQ0FBa0MsNkRBQWUsR0FBRyxnQ0FBZ0M7QUFDcks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxnRUFBaUI7QUFDM0QsZUFBZSxPQUFPLDZEQUFlLEdBQUc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDREQUFjO0FBQzdCLEtBQUs7QUFDTCxrQkFBa0IseUVBQTJCO0FBQzdDLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsNERBQWlCLEdBQUcsNERBQWlCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0EseUJBQXlCLEtBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwwQkFBMEIsa0NBQWtDO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsa0NBQWtDO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLDJCQUEyQixtREFBbUQ7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0YsWUFBWTtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMseUJBQXlCLDBCQUEwQiw0Q0FBNEM7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvQ0FBb0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGlEQUFNO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbURBQVEsR0FBRyxlQUFlO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBLHFDQUFxQywrQ0FBSTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0EseUNBQXlDLCtDQUFJO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwrQ0FBSTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhLHlGQUF5RixxREFBVTtBQUNoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBLHdCQUF3QiwwQkFBMEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxZQUFZLGlDQUFpQyxlQUFlO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG1CQUFtQiwrQ0FBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrQ0FBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHdEQUFhO0FBQ2hDLGlDQUFpQyxrREFBTztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msa0RBQUk7QUFDeEM7QUFDQSwwREFBMEQsS0FBSztBQUMvRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsTUFBTTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE1BQU07QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELDBEQUFlO0FBQ2hFO0FBQ0E7QUFDQSxnQkFBZ0IsMkRBQVMsR0FBRyxhQUFhO0FBQ3pDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMERBQWUsR0FBRyxtRkFBbUY7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDNHRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sYW5ndWFnZS9kaXN0L2luZGV4LmpzP2ViNTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZVByb3AsIEl0ZXJNb2RlLCBUcmVlLCBUcmVlRnJhZ21lbnQsIFBhcnNlciwgTm9kZVR5cGUsIE5vZGVTZXQgfSBmcm9tICdAbGV6ZXIvY29tbW9uJztcclxuaW1wb3J0IHsgU3RhdGVFZmZlY3QsIFN0YXRlRmllbGQsIEZhY2V0LCBFZGl0b3JTdGF0ZSwgY291bnRDb2x1bW4sIGNvbWJpbmVDb25maWcsIFJhbmdlU2V0LCBSYW5nZVNldEJ1aWxkZXIsIFByZWMgfSBmcm9tICdAY29kZW1pcnJvci9zdGF0ZSc7XHJcbmltcG9ydCB7IFZpZXdQbHVnaW4sIGxvZ0V4Y2VwdGlvbiwgRWRpdG9yVmlldywgRGVjb3JhdGlvbiwgV2lkZ2V0VHlwZSwgZ3V0dGVyLCBHdXR0ZXJNYXJrZXIgfSBmcm9tICdAY29kZW1pcnJvci92aWV3JztcclxuaW1wb3J0IHsgdGFncywgdGFnSGlnaGxpZ2h0ZXIsIGhpZ2hsaWdodFRyZWUsIHN0eWxlVGFncyB9IGZyb20gJ0BsZXplci9oaWdobGlnaHQnO1xyXG5pbXBvcnQgeyBTdHlsZU1vZHVsZSB9IGZyb20gJ3N0eWxlLW1vZCc7XHJcblxyXG52YXIgX2E7XHJcbi8qKlxyXG5Ob2RlIHByb3Agc3RvcmVkIGluIGEgcGFyc2VyJ3MgdG9wIHN5bnRheCBub2RlIHRvIHByb3ZpZGUgdGhlXHJcbmZhY2V0IHRoYXQgc3RvcmVzIGxhbmd1YWdlLXNwZWNpZmljIGRhdGEgZm9yIHRoYXQgbGFuZ3VhZ2UuXHJcbiovXHJcbmNvbnN0IGxhbmd1YWdlRGF0YVByb3AgPSAvKkBfX1BVUkVfXyovbmV3IE5vZGVQcm9wKCk7XHJcbi8qKlxyXG5IZWxwZXIgZnVuY3Rpb24gdG8gZGVmaW5lIGEgZmFjZXQgKHRvIGJlIGFkZGVkIHRvIHRoZSB0b3Agc3ludGF4XHJcbm5vZGUocykgZm9yIGEgbGFuZ3VhZ2UgdmlhXHJcbltgbGFuZ3VhZ2VEYXRhUHJvcGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UubGFuZ3VhZ2VEYXRhUHJvcCkpLCB0aGF0IHdpbGwgYmVcclxudXNlZCB0byBhc3NvY2lhdGUgbGFuZ3VhZ2UgZGF0YSB3aXRoIHRoZSBsYW5ndWFnZS4gWW91XHJcbnByb2JhYmx5IG9ubHkgbmVlZCB0aGlzIHdoZW4gc3ViY2xhc3NpbmdcclxuW2BMYW5ndWFnZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuTGFuZ3VhZ2UpLlxyXG4qL1xyXG5mdW5jdGlvbiBkZWZpbmVMYW5ndWFnZUZhY2V0KGJhc2VEYXRhKSB7XHJcbiAgICByZXR1cm4gRmFjZXQuZGVmaW5lKHtcclxuICAgICAgICBjb21iaW5lOiBiYXNlRGF0YSA/IHZhbHVlcyA9PiB2YWx1ZXMuY29uY2F0KGJhc2VEYXRhKSA6IHVuZGVmaW5lZFxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbkEgbGFuZ3VhZ2Ugb2JqZWN0IG1hbmFnZXMgcGFyc2luZyBhbmQgcGVyLWxhbmd1YWdlXHJcblttZXRhZGF0YV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5sYW5ndWFnZURhdGFBdCkuIFBhcnNlIGRhdGEgaXNcclxubWFuYWdlZCBhcyBhIFtMZXplcl0oaHR0cHM6Ly9sZXplci5jb2RlbWlycm9yLm5ldCkgdHJlZS4gVGhlIGNsYXNzXHJcbmNhbiBiZSB1c2VkIGRpcmVjdGx5LCB2aWEgdGhlIFtgTFJMYW5ndWFnZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuTFJMYW5ndWFnZSlcclxuc3ViY2xhc3MgZm9yIFtMZXplcl0oaHR0cHM6Ly9sZXplci5jb2RlbWlycm9yLm5ldC8pIExSIHBhcnNlcnMsIG9yXHJcbnZpYSB0aGUgW2BTdHJlYW1MYW5ndWFnZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuU3RyZWFtTGFuZ3VhZ2UpIHN1YmNsYXNzXHJcbmZvciBzdHJlYW0gcGFyc2Vycy5cclxuKi9cclxuY2xhc3MgTGFuZ3VhZ2Uge1xyXG4gICAgLyoqXHJcbiAgICBDb25zdHJ1Y3QgYSBsYW5ndWFnZSBvYmplY3QuIElmIHlvdSBuZWVkIHRvIGludm9rZSB0aGlzXHJcbiAgICBkaXJlY3RseSwgZmlyc3QgZGVmaW5lIGEgZGF0YSBmYWNldCB3aXRoXHJcbiAgICBbYGRlZmluZUxhbmd1YWdlRmFjZXRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmRlZmluZUxhbmd1YWdlRmFjZXQpLCBhbmQgdGhlblxyXG4gICAgY29uZmlndXJlIHlvdXIgcGFyc2VyIHRvIFthdHRhY2hdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UubGFuZ3VhZ2VEYXRhUHJvcCkgaXRcclxuICAgIHRvIHRoZSBsYW5ndWFnZSdzIG91dGVyIHN5bnRheCBub2RlLlxyXG4gICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICBUaGUgW2xhbmd1YWdlIGRhdGFdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUubGFuZ3VhZ2VEYXRhQXQpIGZhY2V0XHJcbiAgICB1c2VkIGZvciB0aGlzIGxhbmd1YWdlLlxyXG4gICAgKi9cclxuICAgIGRhdGEsIHBhcnNlciwgZXh0cmFFeHRlbnNpb25zID0gW10sIFxyXG4gICAgLyoqXHJcbiAgICBBIGxhbmd1YWdlIG5hbWUuXHJcbiAgICAqL1xyXG4gICAgbmFtZSA9IFwiXCIpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgLy8gS2x1ZGdlIHRvIGRlZmluZSBFZGl0b3JTdGF0ZS50cmVlIGFzIGEgZGVidWdnaW5nIGhlbHBlcixcclxuICAgICAgICAvLyB3aXRob3V0IHRoZSBFZGl0b3JTdGF0ZSBwYWNrYWdlIGFjdHVhbGx5IGtub3dpbmcgYWJvdXRcclxuICAgICAgICAvLyBsYW5ndWFnZXMgYW5kIGxlemVyIHRyZWVzLlxyXG4gICAgICAgIGlmICghRWRpdG9yU3RhdGUucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwidHJlZVwiKSlcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVkaXRvclN0YXRlLnByb3RvdHlwZSwgXCJ0cmVlXCIsIHsgZ2V0KCkgeyByZXR1cm4gc3ludGF4VHJlZSh0aGlzKTsgfSB9KTtcclxuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbiA9IFtcclxuICAgICAgICAgICAgbGFuZ3VhZ2Uub2YodGhpcyksXHJcbiAgICAgICAgICAgIEVkaXRvclN0YXRlLmxhbmd1YWdlRGF0YS5vZigoc3RhdGUsIHBvcywgc2lkZSkgPT4gc3RhdGUuZmFjZXQobGFuZ3VhZ2VEYXRhRmFjZXRBdChzdGF0ZSwgcG9zLCBzaWRlKSkpXHJcbiAgICAgICAgXS5jb25jYXQoZXh0cmFFeHRlbnNpb25zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgUXVlcnkgd2hldGhlciB0aGlzIGxhbmd1YWdlIGlzIGFjdGl2ZSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uXHJcbiAgICAqL1xyXG4gICAgaXNBY3RpdmVBdChzdGF0ZSwgcG9zLCBzaWRlID0gLTEpIHtcclxuICAgICAgICByZXR1cm4gbGFuZ3VhZ2VEYXRhRmFjZXRBdChzdGF0ZSwgcG9zLCBzaWRlKSA9PSB0aGlzLmRhdGE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIEZpbmQgdGhlIGRvY3VtZW50IHJlZ2lvbnMgdGhhdCB3ZXJlIHBhcnNlZCB1c2luZyB0aGlzIGxhbmd1YWdlLlxyXG4gICAgVGhlIHJldHVybmVkIHJlZ2lvbnMgd2lsbCBfaW5jbHVkZV8gYW55IG5lc3RlZCBsYW5ndWFnZXMgcm9vdGVkXHJcbiAgICBpbiB0aGlzIGxhbmd1YWdlLCB3aGVuIHRob3NlIGV4aXN0LlxyXG4gICAgKi9cclxuICAgIGZpbmRSZWdpb25zKHN0YXRlKSB7XHJcbiAgICAgICAgbGV0IGxhbmcgPSBzdGF0ZS5mYWNldChsYW5ndWFnZSk7XHJcbiAgICAgICAgaWYgKChsYW5nID09PSBudWxsIHx8IGxhbmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxhbmcuZGF0YSkgPT0gdGhpcy5kYXRhKVxyXG4gICAgICAgICAgICByZXR1cm4gW3sgZnJvbTogMCwgdG86IHN0YXRlLmRvYy5sZW5ndGggfV07XHJcbiAgICAgICAgaWYgKCFsYW5nIHx8ICFsYW5nLmFsbG93c05lc3RpbmcpXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgbGV0IGV4cGxvcmUgPSAodHJlZSwgZnJvbSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHJlZS5wcm9wKGxhbmd1YWdlRGF0YVByb3ApID09IHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBmcm9tLCB0bzogZnJvbSArIHRyZWUubGVuZ3RoIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBtb3VudCA9IHRyZWUucHJvcChOb2RlUHJvcC5tb3VudGVkKTtcclxuICAgICAgICAgICAgaWYgKG1vdW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobW91bnQudHJlZS5wcm9wKGxhbmd1YWdlRGF0YVByb3ApID09IHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3VudC5vdmVybGF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByIG9mIG1vdW50Lm92ZXJsYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGZyb206IHIuZnJvbSArIGZyb20sIHRvOiByLnRvICsgZnJvbSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZnJvbTogZnJvbSwgdG86IGZyb20gKyB0cmVlLmxlbmd0aCB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb3VudC5vdmVybGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgPSByZXN1bHQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmUobW91bnQudHJlZSwgbW91bnQub3ZlcmxheVswXS5mcm9tICsgZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiBzaXplKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2ggPSB0cmVlLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoIGluc3RhbmNlb2YgVHJlZSlcclxuICAgICAgICAgICAgICAgICAgICBleHBsb3JlKGNoLCB0cmVlLnBvc2l0aW9uc1tpXSArIGZyb20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBleHBsb3JlKHN5bnRheFRyZWUoc3RhdGUpLCAwKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGxhbmd1YWdlIGFsbG93cyBuZXN0ZWQgbGFuZ3VhZ2VzLiBUaGVcclxuICAgIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJucyB0cnVlLlxyXG4gICAgKi9cclxuICAgIGdldCBhbGxvd3NOZXN0aW5nKCkgeyByZXR1cm4gdHJ1ZTsgfVxyXG59XHJcbi8qKlxyXG5AaW50ZXJuYWxcclxuKi9cclxuTGFuZ3VhZ2Uuc2V0U3RhdGUgPSAvKkBfX1BVUkVfXyovU3RhdGVFZmZlY3QuZGVmaW5lKCk7XHJcbmZ1bmN0aW9uIGxhbmd1YWdlRGF0YUZhY2V0QXQoc3RhdGUsIHBvcywgc2lkZSkge1xyXG4gICAgbGV0IHRvcExhbmcgPSBzdGF0ZS5mYWNldChsYW5ndWFnZSk7XHJcbiAgICBpZiAoIXRvcExhbmcpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgZmFjZXQgPSB0b3BMYW5nLmRhdGE7XHJcbiAgICBpZiAodG9wTGFuZy5hbGxvd3NOZXN0aW5nKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbm9kZSA9IHN5bnRheFRyZWUoc3RhdGUpLnRvcE5vZGU7IG5vZGU7IG5vZGUgPSBub2RlLmVudGVyKHBvcywgc2lkZSwgSXRlck1vZGUuRXhjbHVkZUJ1ZmZlcnMpKVxyXG4gICAgICAgICAgICBmYWNldCA9IG5vZGUudHlwZS5wcm9wKGxhbmd1YWdlRGF0YVByb3ApIHx8IGZhY2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhY2V0O1xyXG59XHJcbi8qKlxyXG5BIHN1YmNsYXNzIG9mIFtgTGFuZ3VhZ2VgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlKSBmb3IgdXNlIHdpdGggTGV6ZXJcclxuW0xSIHBhcnNlcnNdKGh0dHBzOi8vbGV6ZXIuY29kZW1pcnJvci5uZXQvZG9jcy9yZWYjbHIuTFJQYXJzZXIpXHJcbnBhcnNlcnMuXHJcbiovXHJcbmNsYXNzIExSTGFuZ3VhZ2UgZXh0ZW5kcyBMYW5ndWFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBwYXJzZXIsIG5hbWUpIHtcclxuICAgICAgICBzdXBlcihkYXRhLCBwYXJzZXIsIFtdLCBuYW1lKTtcclxuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgRGVmaW5lIGEgbGFuZ3VhZ2UgZnJvbSBhIHBhcnNlci5cclxuICAgICovXHJcbiAgICBzdGF0aWMgZGVmaW5lKHNwZWMpIHtcclxuICAgICAgICBsZXQgZGF0YSA9IGRlZmluZUxhbmd1YWdlRmFjZXQoc3BlYy5sYW5ndWFnZURhdGEpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTFJMYW5ndWFnZShkYXRhLCBzcGVjLnBhcnNlci5jb25maWd1cmUoe1xyXG4gICAgICAgICAgICBwcm9wczogW2xhbmd1YWdlRGF0YVByb3AuYWRkKHR5cGUgPT4gdHlwZS5pc1RvcCA/IGRhdGEgOiB1bmRlZmluZWQpXVxyXG4gICAgICAgIH0pLCBzcGVjLm5hbWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBsYW5ndWFnZSB3aXRoIGEgcmVjb25maWd1cmVkXHJcbiAgICB2ZXJzaW9uIG9mIGl0cyBwYXJzZXIgYW5kIG9wdGlvbmFsbHkgYSBuZXcgbmFtZS5cclxuICAgICovXHJcbiAgICBjb25maWd1cmUob3B0aW9ucywgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTFJMYW5ndWFnZSh0aGlzLmRhdGEsIHRoaXMucGFyc2VyLmNvbmZpZ3VyZShvcHRpb25zKSwgbmFtZSB8fCB0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGFsbG93c05lc3RpbmcoKSB7IHJldHVybiB0aGlzLnBhcnNlci5oYXNXcmFwcGVycygpOyB9XHJcbn1cclxuLyoqXHJcbkdldCB0aGUgc3ludGF4IHRyZWUgZm9yIGEgc3RhdGUsIHdoaWNoIGlzIHRoZSBjdXJyZW50IChwb3NzaWJseVxyXG5pbmNvbXBsZXRlKSBwYXJzZSB0cmVlIG9mIHRoZSBhY3RpdmVcclxuW2xhbmd1YWdlXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlKSwgb3IgdGhlIGVtcHR5IHRyZWUgaWYgdGhlcmUgaXMgbm9cclxubGFuZ3VhZ2UgYXZhaWxhYmxlLlxyXG4qL1xyXG5mdW5jdGlvbiBzeW50YXhUcmVlKHN0YXRlKSB7XHJcbiAgICBsZXQgZmllbGQgPSBzdGF0ZS5maWVsZChMYW5ndWFnZS5zdGF0ZSwgZmFsc2UpO1xyXG4gICAgcmV0dXJuIGZpZWxkID8gZmllbGQudHJlZSA6IFRyZWUuZW1wdHk7XHJcbn1cclxuLyoqXHJcblRyeSB0byBnZXQgYSBwYXJzZSB0cmVlIHRoYXQgc3BhbnMgYXQgbGVhc3QgdXAgdG8gYHVwdG9gLiBUaGVcclxubWV0aG9kIHdpbGwgZG8gYXQgbW9zdCBgdGltZW91dGAgbWlsbGlzZWNvbmRzIG9mIHdvcmsgdG8gcGFyc2VcclxudXAgdG8gdGhhdCBwb2ludCBpZiB0aGUgdHJlZSBpc24ndCBhbHJlYWR5IGF2YWlsYWJsZS5cclxuKi9cclxuZnVuY3Rpb24gZW5zdXJlU3ludGF4VHJlZShzdGF0ZSwgdXB0bywgdGltZW91dCA9IDUwKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBsZXQgcGFyc2UgPSAoX2EgPSBzdGF0ZS5maWVsZChMYW5ndWFnZS5zdGF0ZSwgZmFsc2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29udGV4dDtcclxuICAgIGlmICghcGFyc2UpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgb2xkVmllcG9ydCA9IHBhcnNlLnZpZXdwb3J0O1xyXG4gICAgcGFyc2UudXBkYXRlVmlld3BvcnQoeyBmcm9tOiAwLCB0bzogdXB0byB9KTtcclxuICAgIGxldCByZXN1bHQgPSBwYXJzZS5pc0RvbmUodXB0bykgfHwgcGFyc2Uud29yayh0aW1lb3V0LCB1cHRvKSA/IHBhcnNlLnRyZWUgOiBudWxsO1xyXG4gICAgcGFyc2UudXBkYXRlVmlld3BvcnQob2xkVmllcG9ydCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG5RdWVyaWVzIHdoZXRoZXIgdGhlcmUgaXMgYSBmdWxsIHN5bnRheCB0cmVlIGF2YWlsYWJsZSB1cCB0byB0aGVcclxuZ2l2ZW4gZG9jdW1lbnQgcG9zaXRpb24uIElmIHRoZXJlIGlzbid0LCB0aGUgYmFja2dyb3VuZCBwYXJzZVxyXG5wcm9jZXNzIF9taWdodF8gc3RpbGwgYmUgd29ya2luZyBhbmQgdXBkYXRlIHRoZSB0cmVlIGZ1cnRoZXIsIGJ1dFxyXG50aGVyZSBpcyBubyBndWFyYW50ZWUgb2YgdGhhdOKAlHRoZSBwYXJzZXIgd2lsbCBbc3RvcFxyXG53b3JraW5nXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLnN5bnRheFBhcnNlclJ1bm5pbmcpIHdoZW4gaXQgaGFzIHNwZW50IGFcclxuY2VydGFpbiBhbW91bnQgb2YgdGltZSBvciBoYXMgbW92ZWQgYmV5b25kIHRoZSB2aXNpYmxlIHZpZXdwb3J0LlxyXG5BbHdheXMgcmV0dXJucyBmYWxzZSBpZiBubyBsYW5ndWFnZSBoYXMgYmVlbiBlbmFibGVkLlxyXG4qL1xyXG5mdW5jdGlvbiBzeW50YXhUcmVlQXZhaWxhYmxlKHN0YXRlLCB1cHRvID0gc3RhdGUuZG9jLmxlbmd0aCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgcmV0dXJuICgoX2EgPSBzdGF0ZS5maWVsZChMYW5ndWFnZS5zdGF0ZSwgZmFsc2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29udGV4dC5pc0RvbmUodXB0bykpIHx8IGZhbHNlO1xyXG59XHJcbi8qKlxyXG5Nb3ZlIHBhcnNpbmcgZm9yd2FyZCwgYW5kIHVwZGF0ZSB0aGUgZWRpdG9yIHN0YXRlIGFmdGVyd2FyZHMgdG9cclxucmVmbGVjdCB0aGUgbmV3IHRyZWUuIFdpbGwgd29yayBmb3IgYXQgbW9zdCBgdGltZW91dGBcclxubWlsbGlzZWNvbmRzLiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhcnNlciBtYW5hZ2VkIGdldCB0byB0aGUgZ2l2ZW5cclxucG9zaXRpb24gaW4gdGhhdCB0aW1lLlxyXG4qL1xyXG5mdW5jdGlvbiBmb3JjZVBhcnNpbmcodmlldywgdXB0byA9IHZpZXcudmlld3BvcnQudG8sIHRpbWVvdXQgPSAxMDApIHtcclxuICAgIGxldCBzdWNjZXNzID0gZW5zdXJlU3ludGF4VHJlZSh2aWV3LnN0YXRlLCB1cHRvLCB0aW1lb3V0KTtcclxuICAgIGlmIChzdWNjZXNzICE9IHN5bnRheFRyZWUodmlldy5zdGF0ZSkpXHJcbiAgICAgICAgdmlldy5kaXNwYXRjaCh7fSk7XHJcbiAgICByZXR1cm4gISFzdWNjZXNzO1xyXG59XHJcbi8qKlxyXG5UZWxscyB5b3Ugd2hldGhlciB0aGUgbGFuZ3VhZ2UgcGFyc2VyIGlzIHBsYW5uaW5nIHRvIGRvIG1vcmVcclxucGFyc2luZyB3b3JrIChpbiBhIGByZXF1ZXN0SWRsZUNhbGxiYWNrYCBwc2V1ZG8tdGhyZWFkKSBvciBoYXNcclxuc3RvcHBlZCBydW5uaW5nLCBlaXRoZXIgYmVjYXVzZSBpdCBwYXJzZWQgdGhlIGVudGlyZSBkb2N1bWVudCxcclxuYmVjYXVzZSBpdCBzcGVudCB0b28gbXVjaCB0aW1lIGFuZCB3YXMgY3V0IG9mZiwgb3IgYmVjYXVzZSB0aGVyZVxyXG5pcyBubyBsYW5ndWFnZSBwYXJzZXIgZW5hYmxlZC5cclxuKi9cclxuZnVuY3Rpb24gc3ludGF4UGFyc2VyUnVubmluZyh2aWV3KSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICByZXR1cm4gKChfYSA9IHZpZXcucGx1Z2luKHBhcnNlV29ya2VyKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzV29ya2luZygpKSB8fCBmYWxzZTtcclxufVxyXG4vLyBMZXplci1zdHlsZSBJbnB1dCBvYmplY3QgZm9yIGEgVGV4dCBkb2N1bWVudC5cclxuY2xhc3MgRG9jSW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoZG9jLCBsZW5ndGggPSBkb2MubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XHJcbiAgICAgICAgdGhpcy5jdXJzb3JQb3MgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RyaW5nID0gXCJcIjtcclxuICAgICAgICB0aGlzLmN1cnNvciA9IGRvYy5pdGVyKCk7XHJcbiAgICB9XHJcbiAgICBzeW5jVG8ocG9zKSB7XHJcbiAgICAgICAgdGhpcy5zdHJpbmcgPSB0aGlzLmN1cnNvci5uZXh0KHBvcyAtIHRoaXMuY3Vyc29yUG9zKS52YWx1ZTtcclxuICAgICAgICB0aGlzLmN1cnNvclBvcyA9IHBvcyArIHRoaXMuc3RyaW5nLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJzb3JQb3MgLSB0aGlzLnN0cmluZy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBjaHVuayhwb3MpIHtcclxuICAgICAgICB0aGlzLnN5bmNUbyhwb3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZztcclxuICAgIH1cclxuICAgIGdldCBsaW5lQ2h1bmtzKCkgeyByZXR1cm4gdHJ1ZTsgfVxyXG4gICAgcmVhZChmcm9tLCB0bykge1xyXG4gICAgICAgIGxldCBzdHJpbmdTdGFydCA9IHRoaXMuY3Vyc29yUG9zIC0gdGhpcy5zdHJpbmcubGVuZ3RoO1xyXG4gICAgICAgIGlmIChmcm9tIDwgc3RyaW5nU3RhcnQgfHwgdG8gPj0gdGhpcy5jdXJzb3JQb3MpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvYy5zbGljZVN0cmluZyhmcm9tLCB0byk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmcuc2xpY2UoZnJvbSAtIHN0cmluZ1N0YXJ0LCB0byAtIHN0cmluZ1N0YXJ0KTtcclxuICAgIH1cclxufVxyXG5sZXQgY3VycmVudENvbnRleHQgPSBudWxsO1xyXG4vKipcclxuQSBwYXJzZSBjb250ZXh0IHByb3ZpZGVkIHRvIHBhcnNlcnMgd29ya2luZyBvbiB0aGUgZWRpdG9yIGNvbnRlbnQuXHJcbiovXHJcbmNsYXNzIFBhcnNlQ29udGV4dCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIFxyXG4gICAgLyoqXHJcbiAgICBUaGUgY3VycmVudCBlZGl0b3Igc3RhdGUuXHJcbiAgICAqL1xyXG4gICAgc3RhdGUsIFxyXG4gICAgLyoqXHJcbiAgICBUcmVlIGZyYWdtZW50cyB0aGF0IGNhbiBiZSByZXVzZWQgYnkgaW5jcmVtZW50YWwgcmUtcGFyc2VzLlxyXG4gICAgKi9cclxuICAgIGZyYWdtZW50cyA9IFtdLCBcclxuICAgIC8qKlxyXG4gICAgQGludGVybmFsXHJcbiAgICAqL1xyXG4gICAgdHJlZSwgXHJcbiAgICAvKipcclxuICAgIEBpbnRlcm5hbFxyXG4gICAgKi9cclxuICAgIHRyZWVMZW4sIFxyXG4gICAgLyoqXHJcbiAgICBUaGUgY3VycmVudCBlZGl0b3Igdmlld3BvcnQgKG9yIHNvbWUgb3ZlcmFwcHJveGltYXRpb25cclxuICAgIHRoZXJlb2YpLiBJbnRlbmRlZCB0byBiZSB1c2VkIGZvciBvcHBvcnR1bmlzdGljYWxseSBhdm9pZGluZ1xyXG4gICAgd29yayAoaW4gd2hpY2ggY2FzZVxyXG4gICAgW2Bza2lwVW50aWxJblZpZXdgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLlBhcnNlQ29udGV4dC5za2lwVW50aWxJblZpZXcpXHJcbiAgICBzaG91bGQgYmUgY2FsbGVkIHRvIG1ha2Ugc3VyZSB0aGUgcGFyc2VyIGlzIHJlc3RhcnRlZCB3aGVuIHRoZVxyXG4gICAgc2tpcHBlZCByZWdpb24gYmVjb21lcyB2aXNpYmxlKS5cclxuICAgICovXHJcbiAgICB2aWV3cG9ydCwgXHJcbiAgICAvKipcclxuICAgIEBpbnRlcm5hbFxyXG4gICAgKi9cclxuICAgIHNraXBwZWQsIFxyXG4gICAgLyoqXHJcbiAgICBUaGlzIGlzIHdoZXJlIHNraXBwaW5nIHBhcnNlcnMgY2FuIHJlZ2lzdGVyIGEgcHJvbWlzZSB0aGF0LFxyXG4gICAgd2hlbiByZXNvbHZlZCwgd2lsbCBzY2hlZHVsZSBhIG5ldyBwYXJzZS4gSXQgaXMgY2xlYXJlZCB3aGVuXHJcbiAgICB0aGUgcGFyc2Ugd29ya2VyIHBpY2tzIHVwIHRoZSBwcm9taXNlLiBAaW50ZXJuYWxcclxuICAgICovXHJcbiAgICBzY2hlZHVsZU9uKSB7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMuZnJhZ21lbnRzID0gZnJhZ21lbnRzO1xyXG4gICAgICAgIHRoaXMudHJlZSA9IHRyZWU7XHJcbiAgICAgICAgdGhpcy50cmVlTGVuID0gdHJlZUxlbjtcclxuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XHJcbiAgICAgICAgdGhpcy5za2lwcGVkID0gc2tpcHBlZDtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlT24gPSBzY2hlZHVsZU9uO1xyXG4gICAgICAgIHRoaXMucGFyc2UgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgIEBpbnRlcm5hbFxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy50ZW1wU2tpcHBlZCA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBAaW50ZXJuYWxcclxuICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlKHBhcnNlciwgc3RhdGUsIHZpZXdwb3J0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZUNvbnRleHQocGFyc2VyLCBzdGF0ZSwgW10sIFRyZWUuZW1wdHksIDAsIHZpZXdwb3J0LCBbXSwgbnVsbCk7XHJcbiAgICB9XHJcbiAgICBzdGFydFBhcnNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlci5zdGFydFBhcnNlKG5ldyBEb2NJbnB1dCh0aGlzLnN0YXRlLmRvYyksIHRoaXMuZnJhZ21lbnRzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgQGludGVybmFsXHJcbiAgICAqL1xyXG4gICAgd29yayh1bnRpbCwgdXB0bykge1xyXG4gICAgICAgIGlmICh1cHRvICE9IG51bGwgJiYgdXB0byA+PSB0aGlzLnN0YXRlLmRvYy5sZW5ndGgpXHJcbiAgICAgICAgICAgIHVwdG8gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMudHJlZSAhPSBUcmVlLmVtcHR5ICYmIHRoaXMuaXNEb25lKHVwdG8gIT09IG51bGwgJiYgdXB0byAhPT0gdm9pZCAwID8gdXB0byA6IHRoaXMuc3RhdGUuZG9jLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgdGhpcy50YWtlVHJlZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aENvbnRleHQoKCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdW50aWwgPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpICsgdW50aWw7XHJcbiAgICAgICAgICAgICAgICB1bnRpbCA9ICgpID0+IERhdGUubm93KCkgPiBlbmRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJzZSlcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2UgPSB0aGlzLnN0YXJ0UGFyc2UoKTtcclxuICAgICAgICAgICAgaWYgKHVwdG8gIT0gbnVsbCAmJiAodGhpcy5wYXJzZS5zdG9wcGVkQXQgPT0gbnVsbCB8fCB0aGlzLnBhcnNlLnN0b3BwZWRBdCA+IHVwdG8pICYmXHJcbiAgICAgICAgICAgICAgICB1cHRvIDwgdGhpcy5zdGF0ZS5kb2MubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZS5zdG9wQXQodXB0byk7XHJcbiAgICAgICAgICAgIGZvciAoOzspIHtcclxuICAgICAgICAgICAgICAgIGxldCBkb25lID0gdGhpcy5wYXJzZS5hZHZhbmNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnJhZ21lbnRzID0gdGhpcy53aXRob3V0VGVtcFNraXBwZWQoVHJlZUZyYWdtZW50LmFkZFRyZWUoZG9uZSwgdGhpcy5mcmFnbWVudHMsIHRoaXMucGFyc2Uuc3RvcHBlZEF0ICE9IG51bGwpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVMZW4gPSAoX2EgPSB0aGlzLnBhcnNlLnN0b3BwZWRBdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5zdGF0ZS5kb2MubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZSA9IGRvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJlZUxlbiA8ICh1cHRvICE9PSBudWxsICYmIHVwdG8gIT09IHZvaWQgMCA/IHVwdG8gOiB0aGlzLnN0YXRlLmRvYy5sZW5ndGgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlID0gdGhpcy5zdGFydFBhcnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1bnRpbCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBAaW50ZXJuYWxcclxuICAgICovXHJcbiAgICB0YWtlVHJlZSgpIHtcclxuICAgICAgICBsZXQgcG9zLCB0cmVlO1xyXG4gICAgICAgIGlmICh0aGlzLnBhcnNlICYmIChwb3MgPSB0aGlzLnBhcnNlLnBhcnNlZFBvcykgPj0gdGhpcy50cmVlTGVuKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcnNlLnN0b3BwZWRBdCA9PSBudWxsIHx8IHRoaXMucGFyc2Uuc3RvcHBlZEF0ID4gcG9zKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZS5zdG9wQXQocG9zKTtcclxuICAgICAgICAgICAgdGhpcy53aXRoQ29udGV4dCgoKSA9PiB7IHdoaWxlICghKHRyZWUgPSB0aGlzLnBhcnNlLmFkdmFuY2UoKSkpIHsgfSB9KTtcclxuICAgICAgICAgICAgdGhpcy50cmVlTGVuID0gcG9zO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xyXG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50cyA9IHRoaXMud2l0aG91dFRlbXBTa2lwcGVkKFRyZWVGcmFnbWVudC5hZGRUcmVlKHRoaXMudHJlZSwgdGhpcy5mcmFnbWVudHMsIHRydWUpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJzZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2l0aENvbnRleHQoZikge1xyXG4gICAgICAgIGxldCBwcmV2ID0gY3VycmVudENvbnRleHQ7XHJcbiAgICAgICAgY3VycmVudENvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICBjdXJyZW50Q29udGV4dCA9IHByZXY7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2l0aG91dFRlbXBTa2lwcGVkKGZyYWdtZW50cykge1xyXG4gICAgICAgIGZvciAobGV0IHI7IHIgPSB0aGlzLnRlbXBTa2lwcGVkLnBvcCgpOylcclxuICAgICAgICAgICAgZnJhZ21lbnRzID0gY3V0RnJhZ21lbnRzKGZyYWdtZW50cywgci5mcm9tLCByLnRvKTtcclxuICAgICAgICByZXR1cm4gZnJhZ21lbnRzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBAaW50ZXJuYWxcclxuICAgICovXHJcbiAgICBjaGFuZ2VzKGNoYW5nZXMsIG5ld1N0YXRlKSB7XHJcbiAgICAgICAgbGV0IHsgZnJhZ21lbnRzLCB0cmVlLCB0cmVlTGVuLCB2aWV3cG9ydCwgc2tpcHBlZCB9ID0gdGhpcztcclxuICAgICAgICB0aGlzLnRha2VUcmVlKCk7XHJcbiAgICAgICAgaWYgKCFjaGFuZ2VzLmVtcHR5KSB7XHJcbiAgICAgICAgICAgIGxldCByYW5nZXMgPSBbXTtcclxuICAgICAgICAgICAgY2hhbmdlcy5pdGVyQ2hhbmdlZFJhbmdlcygoZnJvbUEsIHRvQSwgZnJvbUIsIHRvQikgPT4gcmFuZ2VzLnB1c2goeyBmcm9tQSwgdG9BLCBmcm9tQiwgdG9CIH0pKTtcclxuICAgICAgICAgICAgZnJhZ21lbnRzID0gVHJlZUZyYWdtZW50LmFwcGx5Q2hhbmdlcyhmcmFnbWVudHMsIHJhbmdlcyk7XHJcbiAgICAgICAgICAgIHRyZWUgPSBUcmVlLmVtcHR5O1xyXG4gICAgICAgICAgICB0cmVlTGVuID0gMDtcclxuICAgICAgICAgICAgdmlld3BvcnQgPSB7IGZyb206IGNoYW5nZXMubWFwUG9zKHZpZXdwb3J0LmZyb20sIC0xKSwgdG86IGNoYW5nZXMubWFwUG9zKHZpZXdwb3J0LnRvLCAxKSB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5za2lwcGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgciBvZiB0aGlzLnNraXBwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IGNoYW5nZXMubWFwUG9zKHIuZnJvbSwgMSksIHRvID0gY2hhbmdlcy5tYXBQb3Moci50bywgLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tIDwgdG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBwZWQucHVzaCh7IGZyb20sIHRvIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VDb250ZXh0KHRoaXMucGFyc2VyLCBuZXdTdGF0ZSwgZnJhZ21lbnRzLCB0cmVlLCB0cmVlTGVuLCB2aWV3cG9ydCwgc2tpcHBlZCwgdGhpcy5zY2hlZHVsZU9uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgQGludGVybmFsXHJcbiAgICAqL1xyXG4gICAgdXBkYXRlVmlld3BvcnQodmlld3BvcnQpIHtcclxuICAgICAgICBpZiAodGhpcy52aWV3cG9ydC5mcm9tID09IHZpZXdwb3J0LmZyb20gJiYgdGhpcy52aWV3cG9ydC50byA9PSB2aWV3cG9ydC50bylcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydDtcclxuICAgICAgICBsZXQgc3RhcnRMZW4gPSB0aGlzLnNraXBwZWQubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5za2lwcGVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB7IGZyb20sIHRvIH0gPSB0aGlzLnNraXBwZWRbaV07XHJcbiAgICAgICAgICAgIGlmIChmcm9tIDwgdmlld3BvcnQudG8gJiYgdG8gPiB2aWV3cG9ydC5mcm9tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50cyA9IGN1dEZyYWdtZW50cyh0aGlzLmZyYWdtZW50cywgZnJvbSwgdG8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5za2lwcGVkLnNwbGljZShpLS0sIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNraXBwZWQubGVuZ3RoID49IHN0YXJ0TGVuKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBAaW50ZXJuYWxcclxuICAgICovXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJzZSkge1xyXG4gICAgICAgICAgICB0aGlzLnRha2VUcmVlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyc2UgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgTm90aWZ5IHRoZSBwYXJzZSBzY2hlZHVsZXIgdGhhdCB0aGUgZ2l2ZW4gcmVnaW9uIHdhcyBza2lwcGVkXHJcbiAgICBiZWNhdXNlIGl0IHdhc24ndCBpbiB2aWV3LCBhbmQgdGhlIHBhcnNlIHNob3VsZCBiZSByZXN0YXJ0ZWRcclxuICAgIHdoZW4gaXQgY29tZXMgaW50byB2aWV3LlxyXG4gICAgKi9cclxuICAgIHNraXBVbnRpbEluVmlldyhmcm9tLCB0bykge1xyXG4gICAgICAgIHRoaXMuc2tpcHBlZC5wdXNoKHsgZnJvbSwgdG8gfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIFJldHVybnMgYSBwYXJzZXIgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBwbGFjZWhvbGRlciB3aGVuXHJcbiAgICBhc3luY2hyb25vdXNseSBsb2FkaW5nIGEgbmVzdGVkIHBhcnNlci4gSXQnbGwgc2tpcCBpdHMgaW5wdXQgYW5kXHJcbiAgICBtYXJrIGl0IGFzIG5vdC1yZWFsbHktcGFyc2VkLCBzbyB0aGF0IHRoZSBuZXh0IHVwZGF0ZSB3aWxsIHBhcnNlXHJcbiAgICBpdCBhZ2Fpbi5cclxuICAgIFxyXG4gICAgV2hlbiBgdW50aWxgIGlzIGdpdmVuLCBhIHJlcGFyc2Ugd2lsbCBiZSBzY2hlZHVsZWQgd2hlbiB0aGF0XHJcbiAgICBwcm9taXNlIHJlc29sdmVzLlxyXG4gICAgKi9cclxuICAgIHN0YXRpYyBnZXRTa2lwcGluZ1BhcnNlcih1bnRpbCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgY2xhc3MgZXh0ZW5kcyBQYXJzZXIge1xyXG4gICAgICAgICAgICBjcmVhdGVQYXJzZShpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBmcm9tID0gcmFuZ2VzWzBdLmZyb20sIHRvID0gcmFuZ2VzW3Jhbmdlcy5sZW5ndGggLSAxXS50bztcclxuICAgICAgICAgICAgICAgIGxldCBwYXJzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkUG9zOiBmcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2UoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeCA9IGN1cnJlbnRDb250ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHIgb2YgcmFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN4LnRlbXBTa2lwcGVkLnB1c2gocik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW50aWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3guc2NoZWR1bGVPbiA9IGN4LnNjaGVkdWxlT24gPyBQcm9taXNlLmFsbChbY3guc2NoZWR1bGVPbiwgdW50aWxdKSA6IHVudGlsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VkUG9zID0gdG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVHJlZShOb2RlVHlwZS5ub25lLCBbXSwgW10sIHRvIC0gZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdG9wcGVkQXQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcEF0KCkgeyB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIEBpbnRlcm5hbFxyXG4gICAgKi9cclxuICAgIGlzRG9uZSh1cHRvKSB7XHJcbiAgICAgICAgdXB0byA9IE1hdGgubWluKHVwdG8sIHRoaXMuc3RhdGUuZG9jLmxlbmd0aCk7XHJcbiAgICAgICAgbGV0IGZyYWdzID0gdGhpcy5mcmFnbWVudHM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlZUxlbiA+PSB1cHRvICYmIGZyYWdzLmxlbmd0aCAmJiBmcmFnc1swXS5mcm9tID09IDAgJiYgZnJhZ3NbMF0udG8gPj0gdXB0bztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgR2V0IHRoZSBjb250ZXh0IGZvciB0aGUgY3VycmVudCBwYXJzZSwgb3IgYG51bGxgIGlmIG5vIGVkaXRvclxyXG4gICAgcGFyc2UgaXMgaW4gcHJvZ3Jlc3MuXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGdldCgpIHsgcmV0dXJuIGN1cnJlbnRDb250ZXh0OyB9XHJcbn1cclxuZnVuY3Rpb24gY3V0RnJhZ21lbnRzKGZyYWdtZW50cywgZnJvbSwgdG8pIHtcclxuICAgIHJldHVybiBUcmVlRnJhZ21lbnQuYXBwbHlDaGFuZ2VzKGZyYWdtZW50cywgW3sgZnJvbUE6IGZyb20sIHRvQTogdG8sIGZyb21COiBmcm9tLCB0b0I6IHRvIH1dKTtcclxufVxyXG5jbGFzcyBMYW5ndWFnZVN0YXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLy8gQSBtdXRhYmxlIHBhcnNlIHN0YXRlIHRoYXQgaXMgdXNlZCB0byBwcmVzZXJ2ZSB3b3JrIGRvbmUgZHVyaW5nXHJcbiAgICAvLyB0aGUgbGlmZXRpbWUgb2YgYSBzdGF0ZSB3aGVuIG1vdmluZyB0byB0aGUgbmV4dCBzdGF0ZS5cclxuICAgIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMudHJlZSA9IGNvbnRleHQudHJlZTtcclxuICAgIH1cclxuICAgIGFwcGx5KHRyKSB7XHJcbiAgICAgICAgaWYgKCF0ci5kb2NDaGFuZ2VkICYmIHRoaXMudHJlZSA9PSB0aGlzLmNvbnRleHQudHJlZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgbGV0IG5ld0N4ID0gdGhpcy5jb250ZXh0LmNoYW5nZXModHIuY2hhbmdlcywgdHIuc3RhdGUpO1xyXG4gICAgICAgIC8vIElmIHRoZSBwcmV2aW91cyBwYXJzZSB3YXNuJ3QgZG9uZSwgZ28gZm9yd2FyZCBvbmx5IHVwIHRvIGl0c1xyXG4gICAgICAgIC8vIGVuZCBwb3NpdGlvbiBvciB0aGUgZW5kIG9mIHRoZSB2aWV3cG9ydCwgdG8gYXZvaWQgc2xvd2luZyBkb3duXHJcbiAgICAgICAgLy8gc3RhdGUgdXBkYXRlcyB3aXRoIHBhcnNlIHdvcmsgYmV5b25kIHRoZSB2aWV3cG9ydC5cclxuICAgICAgICBsZXQgdXB0byA9IHRoaXMuY29udGV4dC50cmVlTGVuID09IHRyLnN0YXJ0U3RhdGUuZG9jLmxlbmd0aCA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA6IE1hdGgubWF4KHRyLmNoYW5nZXMubWFwUG9zKHRoaXMuY29udGV4dC50cmVlTGVuKSwgbmV3Q3gudmlld3BvcnQudG8pO1xyXG4gICAgICAgIGlmICghbmV3Q3gud29yaygyMCAvKiBXb3JrLkFwcGx5ICovLCB1cHRvKSlcclxuICAgICAgICAgICAgbmV3Q3gudGFrZVRyZWUoKTtcclxuICAgICAgICByZXR1cm4gbmV3IExhbmd1YWdlU3RhdGUobmV3Q3gpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGluaXQoc3RhdGUpIHtcclxuICAgICAgICBsZXQgdnBUbyA9IE1hdGgubWluKDMwMDAgLyogV29yay5Jbml0Vmlld3BvcnQgKi8sIHN0YXRlLmRvYy5sZW5ndGgpO1xyXG4gICAgICAgIGxldCBwYXJzZVN0YXRlID0gUGFyc2VDb250ZXh0LmNyZWF0ZShzdGF0ZS5mYWNldChsYW5ndWFnZSkucGFyc2VyLCBzdGF0ZSwgeyBmcm9tOiAwLCB0bzogdnBUbyB9KTtcclxuICAgICAgICBpZiAoIXBhcnNlU3RhdGUud29yaygyMCAvKiBXb3JrLkFwcGx5ICovLCB2cFRvKSlcclxuICAgICAgICAgICAgcGFyc2VTdGF0ZS50YWtlVHJlZSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGFuZ3VhZ2VTdGF0ZShwYXJzZVN0YXRlKTtcclxuICAgIH1cclxufVxyXG5MYW5ndWFnZS5zdGF0ZSA9IC8qQF9fUFVSRV9fKi9TdGF0ZUZpZWxkLmRlZmluZSh7XHJcbiAgICBjcmVhdGU6IExhbmd1YWdlU3RhdGUuaW5pdCxcclxuICAgIHVwZGF0ZSh2YWx1ZSwgdHIpIHtcclxuICAgICAgICBmb3IgKGxldCBlIG9mIHRyLmVmZmVjdHMpXHJcbiAgICAgICAgICAgIGlmIChlLmlzKExhbmd1YWdlLnNldFN0YXRlKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLnZhbHVlO1xyXG4gICAgICAgIGlmICh0ci5zdGFydFN0YXRlLmZhY2V0KGxhbmd1YWdlKSAhPSB0ci5zdGF0ZS5mYWNldChsYW5ndWFnZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBMYW5ndWFnZVN0YXRlLmluaXQodHIuc3RhdGUpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5hcHBseSh0cik7XHJcbiAgICB9XHJcbn0pO1xyXG5sZXQgcmVxdWVzdElkbGUgPSAoY2FsbGJhY2spID0+IHtcclxuICAgIGxldCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjaygpLCA1MDAgLyogV29yay5NYXhQYXVzZSAqLyk7XHJcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG59O1xyXG5pZiAodHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2sgIT0gXCJ1bmRlZmluZWRcIilcclxuICAgIHJlcXVlc3RJZGxlID0gKGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgbGV0IGlkbGUgPSAtMSwgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZGxlID0gcmVxdWVzdElkbGVDYWxsYmFjayhjYWxsYmFjaywgeyB0aW1lb3V0OiA1MDAgLyogV29yay5NYXhQYXVzZSAqLyAtIDEwMCAvKiBXb3JrLk1pblBhdXNlICovIH0pO1xyXG4gICAgICAgIH0sIDEwMCAvKiBXb3JrLk1pblBhdXNlICovKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gaWRsZSA8IDAgPyBjbGVhclRpbWVvdXQodGltZW91dCkgOiBjYW5jZWxJZGxlQ2FsbGJhY2soaWRsZSk7XHJcbiAgICB9O1xyXG5jb25zdCBpc0lucHV0UGVuZGluZyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAoKF9hID0gbmF2aWdhdG9yLnNjaGVkdWxpbmcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0lucHV0UGVuZGluZylcclxuICAgID8gKCkgPT4gbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcoKSA6IG51bGw7XHJcbmNvbnN0IHBhcnNlV29ya2VyID0gLypAX19QVVJFX18qL1ZpZXdQbHVnaW4uZnJvbUNsYXNzKGNsYXNzIFBhcnNlV29ya2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgICAgIHRoaXMud29ya2luZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy53b3JrU2NoZWR1bGVkID0gMDtcclxuICAgICAgICAvLyBFbmQgb2YgdGhlIGN1cnJlbnQgdGltZSBjaHVua1xyXG4gICAgICAgIHRoaXMuY2h1bmtFbmQgPSAtMTtcclxuICAgICAgICAvLyBNaWxsaXNlY29uZHMgb2YgYnVkZ2V0IGxlZnQgZm9yIHRoaXMgY2h1bmtcclxuICAgICAgICB0aGlzLmNodW5rQnVkZ2V0ID0gLTE7XHJcbiAgICAgICAgdGhpcy53b3JrID0gdGhpcy53b3JrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZVdvcmsoKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcclxuICAgICAgICBsZXQgY3ggPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQoTGFuZ3VhZ2Uuc3RhdGUpLmNvbnRleHQ7XHJcbiAgICAgICAgaWYgKGN4LnVwZGF0ZVZpZXdwb3J0KHVwZGF0ZS52aWV3LnZpZXdwb3J0KSB8fCB0aGlzLnZpZXcudmlld3BvcnQudG8gPiBjeC50cmVlTGVuKVxyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlV29yaygpO1xyXG4gICAgICAgIGlmICh1cGRhdGUuZG9jQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aWV3Lmhhc0ZvY3VzKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaHVua0J1ZGdldCArPSA1MCAvKiBXb3JrLkNoYW5nZUJvbnVzICovO1xyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlV29yaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoZWNrQXN5bmNTY2hlZHVsZShjeCk7XHJcbiAgICB9XHJcbiAgICBzY2hlZHVsZVdvcmsoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud29ya2luZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGxldCB7IHN0YXRlIH0gPSB0aGlzLnZpZXcsIGZpZWxkID0gc3RhdGUuZmllbGQoTGFuZ3VhZ2Uuc3RhdGUpO1xyXG4gICAgICAgIGlmIChmaWVsZC50cmVlICE9IGZpZWxkLmNvbnRleHQudHJlZSB8fCAhZmllbGQuY29udGV4dC5pc0RvbmUoc3RhdGUuZG9jLmxlbmd0aCkpXHJcbiAgICAgICAgICAgIHRoaXMud29ya2luZyA9IHJlcXVlc3RJZGxlKHRoaXMud29yayk7XHJcbiAgICB9XHJcbiAgICB3b3JrKGRlYWRsaW5lKSB7XHJcbiAgICAgICAgdGhpcy53b3JraW5nID0gbnVsbDtcclxuICAgICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAodGhpcy5jaHVua0VuZCA8IG5vdyAmJiAodGhpcy5jaHVua0VuZCA8IDAgfHwgdGhpcy52aWV3Lmhhc0ZvY3VzKSkgeyAvLyBTdGFydCBhIG5ldyBjaHVua1xyXG4gICAgICAgICAgICB0aGlzLmNodW5rRW5kID0gbm93ICsgMzAwMDAgLyogV29yay5DaHVua1RpbWUgKi87XHJcbiAgICAgICAgICAgIHRoaXMuY2h1bmtCdWRnZXQgPSAzMDAwIC8qIFdvcmsuQ2h1bmtCdWRnZXQgKi87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNodW5rQnVkZ2V0IDw9IDApXHJcbiAgICAgICAgICAgIHJldHVybjsgLy8gTm8gbW9yZSBidWRnZXRcclxuICAgICAgICBsZXQgeyBzdGF0ZSwgdmlld3BvcnQ6IHsgdG86IHZwVG8gfSB9ID0gdGhpcy52aWV3LCBmaWVsZCA9IHN0YXRlLmZpZWxkKExhbmd1YWdlLnN0YXRlKTtcclxuICAgICAgICBpZiAoZmllbGQudHJlZSA9PSBmaWVsZC5jb250ZXh0LnRyZWUgJiYgZmllbGQuY29udGV4dC5pc0RvbmUodnBUbyArIDEwMDAwMCAvKiBXb3JrLk1heFBhcnNlQWhlYWQgKi8pKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpICsgTWF0aC5taW4odGhpcy5jaHVua0J1ZGdldCwgMTAwIC8qIFdvcmsuU2xpY2UgKi8sIGRlYWRsaW5lICYmICFpc0lucHV0UGVuZGluZyA/IE1hdGgubWF4KDI1IC8qIFdvcmsuTWluU2xpY2UgKi8sIGRlYWRsaW5lLnRpbWVSZW1haW5pbmcoKSAtIDUpIDogMWU5KTtcclxuICAgICAgICBsZXQgdmlld3BvcnRGaXJzdCA9IGZpZWxkLmNvbnRleHQudHJlZUxlbiA8IHZwVG8gJiYgc3RhdGUuZG9jLmxlbmd0aCA+IHZwVG8gKyAxMDAwO1xyXG4gICAgICAgIGxldCBkb25lID0gZmllbGQuY29udGV4dC53b3JrKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzSW5wdXRQZW5kaW5nICYmIGlzSW5wdXRQZW5kaW5nKCkgfHwgRGF0ZS5ub3coKSA+IGVuZFRpbWU7XHJcbiAgICAgICAgfSwgdnBUbyArICh2aWV3cG9ydEZpcnN0ID8gMCA6IDEwMDAwMCAvKiBXb3JrLk1heFBhcnNlQWhlYWQgKi8pKTtcclxuICAgICAgICB0aGlzLmNodW5rQnVkZ2V0IC09IERhdGUubm93KCkgLSBub3c7XHJcbiAgICAgICAgaWYgKGRvbmUgfHwgdGhpcy5jaHVua0J1ZGdldCA8PSAwKSB7XHJcbiAgICAgICAgICAgIGZpZWxkLmNvbnRleHQudGFrZVRyZWUoKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogTGFuZ3VhZ2Uuc2V0U3RhdGUub2YobmV3IExhbmd1YWdlU3RhdGUoZmllbGQuY29udGV4dCkpIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jaHVua0J1ZGdldCA+IDAgJiYgIShkb25lICYmICF2aWV3cG9ydEZpcnN0KSlcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVdvcmsoKTtcclxuICAgICAgICB0aGlzLmNoZWNrQXN5bmNTY2hlZHVsZShmaWVsZC5jb250ZXh0KTtcclxuICAgIH1cclxuICAgIGNoZWNrQXN5bmNTY2hlZHVsZShjeCkge1xyXG4gICAgICAgIGlmIChjeC5zY2hlZHVsZU9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMud29ya1NjaGVkdWxlZCsrO1xyXG4gICAgICAgICAgICBjeC5zY2hlZHVsZU9uXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLnNjaGVkdWxlV29yaygpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBsb2dFeGNlcHRpb24odGhpcy52aWV3LnN0YXRlLCBlcnIpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy53b3JrU2NoZWR1bGVkLS0pO1xyXG4gICAgICAgICAgICBjeC5zY2hlZHVsZU9uID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLndvcmtpbmcpXHJcbiAgICAgICAgICAgIHRoaXMud29ya2luZygpO1xyXG4gICAgfVxyXG4gICAgaXNXb3JraW5nKCkge1xyXG4gICAgICAgIHJldHVybiAhISh0aGlzLndvcmtpbmcgfHwgdGhpcy53b3JrU2NoZWR1bGVkID4gMCk7XHJcbiAgICB9XHJcbn0sIHtcclxuICAgIGV2ZW50SGFuZGxlcnM6IHsgZm9jdXMoKSB7IHRoaXMuc2NoZWR1bGVXb3JrKCk7IH0gfVxyXG59KTtcclxuLyoqXHJcblRoZSBmYWNldCB1c2VkIHRvIGFzc29jaWF0ZSBhIGxhbmd1YWdlIHdpdGggYW4gZWRpdG9yIHN0YXRlLiBVc2VkXHJcbmJ5IGBMYW5ndWFnZWAgb2JqZWN0J3MgYGV4dGVuc2lvbmAgcHJvcGVydHkgKHNvIHlvdSBkb24ndCBuZWVkIHRvXHJcbm1hbnVhbGx5IHdyYXAgeW91ciBsYW5ndWFnZXMgaW4gdGhpcykuIENhbiBiZSB1c2VkIHRvIGFjY2VzcyB0aGVcclxuY3VycmVudCBsYW5ndWFnZSBvbiBhIHN0YXRlLlxyXG4qL1xyXG5jb25zdCBsYW5ndWFnZSA9IC8qQF9fUFVSRV9fKi9GYWNldC5kZWZpbmUoe1xyXG4gICAgY29tYmluZShsYW5ndWFnZXMpIHsgcmV0dXJuIGxhbmd1YWdlcy5sZW5ndGggPyBsYW5ndWFnZXNbMF0gOiBudWxsOyB9LFxyXG4gICAgZW5hYmxlczogbGFuZ3VhZ2UgPT4gW1xyXG4gICAgICAgIExhbmd1YWdlLnN0YXRlLFxyXG4gICAgICAgIHBhcnNlV29ya2VyLFxyXG4gICAgICAgIEVkaXRvclZpZXcuY29udGVudEF0dHJpYnV0ZXMuY29tcHV0ZShbbGFuZ3VhZ2VdLCBzdGF0ZSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBsYW5nID0gc3RhdGUuZmFjZXQobGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZyAmJiBsYW5nLm5hbWUgPyB7IFwiZGF0YS1sYW5ndWFnZVwiOiBsYW5nLm5hbWUgfSA6IHt9O1xyXG4gICAgICAgIH0pXHJcbiAgICBdXHJcbn0pO1xyXG4vKipcclxuVGhpcyBjbGFzcyBidW5kbGVzIGEgW2xhbmd1YWdlXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlKSB3aXRoIGFuXHJcbm9wdGlvbmFsIHNldCBvZiBzdXBwb3J0aW5nIGV4dGVuc2lvbnMuIExhbmd1YWdlIHBhY2thZ2VzIGFyZVxyXG5lbmNvdXJhZ2VkIHRvIGV4cG9ydCBhIGZ1bmN0aW9uIHRoYXQgb3B0aW9uYWxseSB0YWtlcyBhXHJcbmNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZCByZXR1cm5zIGEgYExhbmd1YWdlU3VwcG9ydGAgaW5zdGFuY2UsIGFzXHJcbnRoZSBtYWluIHdheSBmb3IgY2xpZW50IGNvZGUgdG8gdXNlIHRoZSBwYWNrYWdlLlxyXG4qL1xyXG5jbGFzcyBMYW5ndWFnZVN1cHBvcnQge1xyXG4gICAgLyoqXHJcbiAgICBDcmVhdGUgYSBsYW5ndWFnZSBzdXBwb3J0IG9iamVjdC5cclxuICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKlxyXG4gICAgVGhlIGxhbmd1YWdlIG9iamVjdC5cclxuICAgICovXHJcbiAgICBsYW5ndWFnZSwgXHJcbiAgICAvKipcclxuICAgIEFuIG9wdGlvbmFsIHNldCBvZiBzdXBwb3J0aW5nIGV4dGVuc2lvbnMuIFdoZW4gbmVzdGluZyBhXHJcbiAgICBsYW5ndWFnZSBpbiBhbm90aGVyIGxhbmd1YWdlLCB0aGUgb3V0ZXIgbGFuZ3VhZ2UgaXMgZW5jb3VyYWdlZFxyXG4gICAgdG8gaW5jbHVkZSB0aGUgc3VwcG9ydGluZyBleHRlbnNpb25zIGZvciBpdHMgaW5uZXIgbGFuZ3VhZ2VzXHJcbiAgICBpbiBpdHMgb3duIHNldCBvZiBzdXBwb3J0IGV4dGVuc2lvbnMuXHJcbiAgICAqL1xyXG4gICAgc3VwcG9ydCA9IFtdKSB7XHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydCA9IHN1cHBvcnQ7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBbbGFuZ3VhZ2UsIHN1cHBvcnRdO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG5MYW5ndWFnZSBkZXNjcmlwdGlvbnMgYXJlIHVzZWQgdG8gc3RvcmUgbWV0YWRhdGEgYWJvdXQgbGFuZ3VhZ2VzXHJcbmFuZCB0byBkeW5hbWljYWxseSBsb2FkIHRoZW0uIFRoZWlyIG1haW4gcm9sZSBpcyBmaW5kaW5nIHRoZVxyXG5hcHByb3ByaWF0ZSBsYW5ndWFnZSBmb3IgYSBmaWxlbmFtZSBvciBkeW5hbWljYWxseSBsb2FkaW5nIG5lc3RlZFxyXG5wYXJzZXJzLlxyXG4qL1xyXG5jbGFzcyBMYW5ndWFnZURlc2NyaXB0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICBUaGUgbmFtZSBvZiB0aGlzIGxhbmd1YWdlLlxyXG4gICAgKi9cclxuICAgIG5hbWUsIFxyXG4gICAgLyoqXHJcbiAgICBBbHRlcm5hdGl2ZSBuYW1lcyBmb3IgdGhlIG1vZGUgKGxvd2VyY2FzZWQsIGluY2x1ZGVzIGB0aGlzLm5hbWVgKS5cclxuICAgICovXHJcbiAgICBhbGlhcywgXHJcbiAgICAvKipcclxuICAgIEZpbGUgZXh0ZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhpcyBsYW5ndWFnZS5cclxuICAgICovXHJcbiAgICBleHRlbnNpb25zLCBcclxuICAgIC8qKlxyXG4gICAgT3B0aW9uYWwgZmlsZW5hbWUgcGF0dGVybiB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHdpdGggdGhpc1xyXG4gICAgbGFuZ3VhZ2UuXHJcbiAgICAqL1xyXG4gICAgZmlsZW5hbWUsIGxvYWRGdW5jLCBcclxuICAgIC8qKlxyXG4gICAgSWYgdGhlIGxhbmd1YWdlIGhhcyBiZWVuIGxvYWRlZCwgdGhpcyB3aWxsIGhvbGQgaXRzIHZhbHVlLlxyXG4gICAgKi9cclxuICAgIHN1cHBvcnQgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuYWxpYXMgPSBhbGlhcztcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xyXG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcclxuICAgICAgICB0aGlzLmxvYWRGdW5jID0gbG9hZEZ1bmM7XHJcbiAgICAgICAgdGhpcy5zdXBwb3J0ID0gc3VwcG9ydDtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBTdGFydCBsb2FkaW5nIHRoZSB0aGUgbGFuZ3VhZ2UuIFdpbGwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0XHJcbiAgICByZXNvbHZlcyB0byBhIFtgTGFuZ3VhZ2VTdXBwb3J0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5MYW5ndWFnZVN1cHBvcnQpXHJcbiAgICBvYmplY3Qgd2hlbiB0aGUgbGFuZ3VhZ2Ugc3VjY2Vzc2Z1bGx5IGxvYWRzLlxyXG4gICAgKi9cclxuICAgIGxvYWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGluZyB8fCAodGhpcy5sb2FkaW5nID0gdGhpcy5sb2FkRnVuYygpLnRoZW4oc3VwcG9ydCA9PiB0aGlzLnN1cHBvcnQgPSBzdXBwb3J0LCBlcnIgPT4geyB0aGlzLmxvYWRpbmcgPSBudWxsOyB0aHJvdyBlcnI7IH0pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgQ3JlYXRlIGEgbGFuZ3VhZ2UgZGVzY3JpcHRpb24uXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIG9mKHNwZWMpIHtcclxuICAgICAgICBsZXQgeyBsb2FkLCBzdXBwb3J0IH0gPSBzcGVjO1xyXG4gICAgICAgIGlmICghbG9hZCkge1xyXG4gICAgICAgICAgICBpZiAoIXN1cHBvcnQpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk11c3QgcGFzcyBlaXRoZXIgJ2xvYWQnIG9yICdzdXBwb3J0JyB0byBMYW5ndWFnZURlc2NyaXB0aW9uLm9mXCIpO1xyXG4gICAgICAgICAgICBsb2FkID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHN1cHBvcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IExhbmd1YWdlRGVzY3JpcHRpb24oc3BlYy5uYW1lLCAoc3BlYy5hbGlhcyB8fCBbXSkuY29uY2F0KHNwZWMubmFtZSkubWFwKHMgPT4gcy50b0xvd2VyQ2FzZSgpKSwgc3BlYy5leHRlbnNpb25zIHx8IFtdLCBzcGVjLmZpbGVuYW1lLCBsb2FkLCBzdXBwb3J0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgTG9vayBmb3IgYSBsYW5ndWFnZSBpbiB0aGUgZ2l2ZW4gYXJyYXkgb2YgZGVzY3JpcHRpb25zIHRoYXRcclxuICAgIG1hdGNoZXMgdGhlIGZpbGVuYW1lLiBXaWxsIGZpcnN0IG1hdGNoXHJcbiAgICBbYGZpbGVuYW1lYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5MYW5ndWFnZURlc2NyaXB0aW9uLmZpbGVuYW1lKSBwYXR0ZXJucyxcclxuICAgIGFuZCB0aGVuIFtleHRlbnNpb25zXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlRGVzY3JpcHRpb24uZXh0ZW5zaW9ucyksXHJcbiAgICBhbmQgcmV0dXJuIHRoZSBmaXJzdCBsYW5ndWFnZSB0aGF0IG1hdGNoZXMuXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIG1hdGNoRmlsZW5hbWUoZGVzY3MsIGZpbGVuYW1lKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZCBvZiBkZXNjcylcclxuICAgICAgICAgICAgaWYgKGQuZmlsZW5hbWUgJiYgZC5maWxlbmFtZS50ZXN0KGZpbGVuYW1lKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIGxldCBleHQgPSAvXFwuKFteLl0rKSQvLmV4ZWMoZmlsZW5hbWUpO1xyXG4gICAgICAgIGlmIChleHQpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGQgb2YgZGVzY3MpXHJcbiAgICAgICAgICAgICAgICBpZiAoZC5leHRlbnNpb25zLmluZGV4T2YoZXh0WzFdKSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBMb29rIGZvciBhIGxhbmd1YWdlIHdob3NlIG5hbWUgb3IgYWxpYXMgbWF0Y2hlcyB0aGUgdGhlIGdpdmVuXHJcbiAgICBuYW1lIChjYXNlLWluc2Vuc2l0aXZlbHkpLiBJZiBgZnV6enlgIGlzIHRydWUsIGFuZCBubyBkaXJlY3RcclxuICAgIG1hdGNocyBpcyBmb3VuZCwgdGhpcydsbCBhbHNvIHNlYXJjaCBmb3IgYSBsYW5ndWFnZSB3aG9zZSBuYW1lXHJcbiAgICBvciBhbGlhcyBvY2N1cnMgaW4gdGhlIHN0cmluZyAoZm9yIG5hbWVzIHNob3J0ZXIgdGhhbiB0aHJlZVxyXG4gICAgY2hhcmFjdGVycywgb25seSB3aGVuIHN1cnJvdW5kZWQgYnkgbm9uLXdvcmQgY2hhcmFjdGVycykuXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIG1hdGNoTGFuZ3VhZ2VOYW1lKGRlc2NzLCBuYW1lLCBmdXp6eSA9IHRydWUpIHtcclxuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGZvciAobGV0IGQgb2YgZGVzY3MpXHJcbiAgICAgICAgICAgIGlmIChkLmFsaWFzLnNvbWUoYSA9PiBhID09IG5hbWUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgaWYgKGZ1enp5KVxyXG4gICAgICAgICAgICBmb3IgKGxldCBkIG9mIGRlc2NzKVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYSBvZiBkLmFsaWFzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kID0gbmFtZS5pbmRleE9mKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xICYmIChhLmxlbmd0aCA+IDIgfHwgIS9cXHcvLnRlc3QobmFtZVtmb3VuZCAtIDFdKSAmJiAhL1xcdy8udGVzdChuYW1lW2ZvdW5kICsgYS5sZW5ndGhdKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuRmFjZXQgdGhhdCBkZWZpbmVzIGEgd2F5IHRvIHByb3ZpZGUgYSBmdW5jdGlvbiB0aGF0IGNvbXB1dGVzIHRoZVxyXG5hcHByb3ByaWF0ZSBpbmRlbnRhdGlvbiBkZXB0aCwgYXMgYSBjb2x1bW4gbnVtYmVyIChzZWVcclxuW2BpbmRlbnRTdHJpbmdgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudFN0cmluZykpLCBhdCB0aGUgc3RhcnQgb2YgYSBnaXZlblxyXG5saW5lLiBBIHJldHVybiB2YWx1ZSBvZiBgbnVsbGAgaW5kaWNhdGVzIG5vIGluZGVudGF0aW9uIGNhbiBiZVxyXG5kZXRlcm1pbmVkLCBhbmQgdGhlIGxpbmUgc2hvdWxkIGluaGVyaXQgdGhlIGluZGVudGF0aW9uIG9mIHRoZSBvbmVcclxuYWJvdmUgaXQuIEEgcmV0dXJuIHZhbHVlIG9mIGB1bmRlZmluZWRgIGRlZmVycyB0byB0aGUgbmV4dCBpbmRlbnRcclxuc2VydmljZS5cclxuKi9cclxuY29uc3QgaW5kZW50U2VydmljZSA9IC8qQF9fUFVSRV9fKi9GYWNldC5kZWZpbmUoKTtcclxuLyoqXHJcbkZhY2V0IGZvciBvdmVycmlkaW5nIHRoZSB1bml0IGJ5IHdoaWNoIGluZGVudGF0aW9uIGhhcHBlbnMuXHJcblNob3VsZCBiZSBhIHN0cmluZyBjb25zaXN0aW5nIGVpdGhlciBlbnRpcmVseSBvZiBzcGFjZXMgb3JcclxuZW50aXJlbHkgb2YgdGFicy4gV2hlbiBub3Qgc2V0LCB0aGlzIGRlZmF1bHRzIHRvIDIgc3BhY2VzLlxyXG4qL1xyXG5jb25zdCBpbmRlbnRVbml0ID0gLypAX19QVVJFX18qL0ZhY2V0LmRlZmluZSh7XHJcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4ge1xyXG4gICAgICAgIGlmICghdmFsdWVzLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIFwiICBcIjtcclxuICAgICAgICBpZiAoIS9eKD86ICt8XFx0KykkLy50ZXN0KHZhbHVlc1swXSkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5kZW50IHVuaXQ6IFwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWVzWzBdKSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlc1swXTtcclxuICAgIH1cclxufSk7XHJcbi8qKlxyXG5SZXR1cm4gdGhlIF9jb2x1bW4gd2lkdGhfIG9mIGFuIGluZGVudCB1bml0IGluIHRoZSBzdGF0ZS5cclxuRGV0ZXJtaW5lZCBieSB0aGUgW2BpbmRlbnRVbml0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5pbmRlbnRVbml0KVxyXG5mYWNldCwgYW5kIFtgdGFiU2l6ZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGVedGFiU2l6ZSkgd2hlbiB0aGF0XHJcbmNvbnRhaW5zIHRhYnMuXHJcbiovXHJcbmZ1bmN0aW9uIGdldEluZGVudFVuaXQoc3RhdGUpIHtcclxuICAgIGxldCB1bml0ID0gc3RhdGUuZmFjZXQoaW5kZW50VW5pdCk7XHJcbiAgICByZXR1cm4gdW5pdC5jaGFyQ29kZUF0KDApID09IDkgPyBzdGF0ZS50YWJTaXplICogdW5pdC5sZW5ndGggOiB1bml0Lmxlbmd0aDtcclxufVxyXG4vKipcclxuQ3JlYXRlIGFuIGluZGVudGF0aW9uIHN0cmluZyB0aGF0IGNvdmVycyBjb2x1bW5zIDAgdG8gYGNvbHNgLlxyXG5XaWxsIHVzZSB0YWJzIGZvciBhcyBtdWNoIG9mIHRoZSBjb2x1bW5zIGFzIHBvc3NpYmxlIHdoZW4gdGhlXHJcbltgaW5kZW50VW5pdGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuaW5kZW50VW5pdCkgZmFjZXQgY29udGFpbnNcclxudGFicy5cclxuKi9cclxuZnVuY3Rpb24gaW5kZW50U3RyaW5nKHN0YXRlLCBjb2xzKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gXCJcIiwgdHMgPSBzdGF0ZS50YWJTaXplO1xyXG4gICAgaWYgKHN0YXRlLmZhY2V0KGluZGVudFVuaXQpLmNoYXJDb2RlQXQoMCkgPT0gOSlcclxuICAgICAgICB3aGlsZSAoY29scyA+PSB0cykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXHRcIjtcclxuICAgICAgICAgICAgY29scyAtPSB0cztcclxuICAgICAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHM7IGkrKylcclxuICAgICAgICByZXN1bHQgKz0gXCIgXCI7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG5HZXQgdGhlIGluZGVudGF0aW9uLCBhcyBhIGNvbHVtbiBudW1iZXIsIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cclxuV2lsbCBmaXJzdCBjb25zdWx0IGFueSBbaW5kZW50IHNlcnZpY2VzXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudFNlcnZpY2UpXHJcbnRoYXQgYXJlIHJlZ2lzdGVyZWQsIGFuZCBpZiBub25lIG9mIHRob3NlIHJldHVybiBhbiBpbmRlbnRhdGlvbixcclxudGhpcyB3aWxsIGNoZWNrIHRoZSBzeW50YXggdHJlZSBmb3IgdGhlIFtpbmRlbnQgbm9kZVxyXG5wcm9wXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudE5vZGVQcm9wKSBhbmQgdXNlIHRoYXQgaWYgZm91bmQuIFJldHVybnMgYVxyXG5udW1iZXIgd2hlbiBhbiBpbmRlbnRhdGlvbiBjb3VsZCBiZSBkZXRlcm1pbmVkLCBhbmQgbnVsbFxyXG5vdGhlcndpc2UuXHJcbiovXHJcbmZ1bmN0aW9uIGdldEluZGVudGF0aW9uKGNvbnRleHQsIHBvcykge1xyXG4gICAgaWYgKGNvbnRleHQgaW5zdGFuY2VvZiBFZGl0b3JTdGF0ZSlcclxuICAgICAgICBjb250ZXh0ID0gbmV3IEluZGVudENvbnRleHQoY29udGV4dCk7XHJcbiAgICBmb3IgKGxldCBzZXJ2aWNlIG9mIGNvbnRleHQuc3RhdGUuZmFjZXQoaW5kZW50U2VydmljZSkpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gc2VydmljZShjb250ZXh0LCBwb3MpO1xyXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGxldCB0cmVlID0gc3ludGF4VHJlZShjb250ZXh0LnN0YXRlKTtcclxuICAgIHJldHVybiB0cmVlID8gc3ludGF4SW5kZW50YXRpb24oY29udGV4dCwgdHJlZSwgcG9zKSA6IG51bGw7XHJcbn1cclxuLyoqXHJcbkNyZWF0ZSBhIGNoYW5nZSBzZXQgdGhhdCBhdXRvLWluZGVudHMgYWxsIGxpbmVzIHRvdWNoZWQgYnkgdGhlXHJcbmdpdmVuIGRvY3VtZW50IHJhbmdlLlxyXG4qL1xyXG5mdW5jdGlvbiBpbmRlbnRSYW5nZShzdGF0ZSwgZnJvbSwgdG8pIHtcclxuICAgIGxldCB1cGRhdGVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIGxldCBjb250ZXh0ID0gbmV3IEluZGVudENvbnRleHQoc3RhdGUsIHsgb3ZlcnJpZGVJbmRlbnRhdGlvbjogc3RhcnQgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSB1cGRhdGVkW3N0YXJ0XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogLTE7IH0gfSk7XHJcbiAgICBsZXQgY2hhbmdlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgcG9zID0gZnJvbTsgcG9zIDw9IHRvOykge1xyXG4gICAgICAgIGxldCBsaW5lID0gc3RhdGUuZG9jLmxpbmVBdChwb3MpO1xyXG4gICAgICAgIHBvcyA9IGxpbmUudG8gKyAxO1xyXG4gICAgICAgIGxldCBpbmRlbnQgPSBnZXRJbmRlbnRhdGlvbihjb250ZXh0LCBsaW5lLmZyb20pO1xyXG4gICAgICAgIGlmIChpbmRlbnQgPT0gbnVsbClcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKCEvXFxTLy50ZXN0KGxpbmUudGV4dCkpXHJcbiAgICAgICAgICAgIGluZGVudCA9IDA7XHJcbiAgICAgICAgbGV0IGN1ciA9IC9eXFxzKi8uZXhlYyhsaW5lLnRleHQpWzBdO1xyXG4gICAgICAgIGxldCBub3JtID0gaW5kZW50U3RyaW5nKHN0YXRlLCBpbmRlbnQpO1xyXG4gICAgICAgIGlmIChjdXIgIT0gbm9ybSkge1xyXG4gICAgICAgICAgICB1cGRhdGVkW2xpbmUuZnJvbV0gPSBpbmRlbnQ7XHJcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7IGZyb206IGxpbmUuZnJvbSwgdG86IGxpbmUuZnJvbSArIGN1ci5sZW5ndGgsIGluc2VydDogbm9ybSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RhdGUuY2hhbmdlcyhjaGFuZ2VzKTtcclxufVxyXG4vKipcclxuSW5kZW50YXRpb24gY29udGV4dHMgYXJlIHVzZWQgd2hlbiBjYWxsaW5nIFtpbmRlbnRhdGlvblxyXG5zZXJ2aWNlc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5pbmRlbnRTZXJ2aWNlKS4gVGhleSBwcm92aWRlIGhlbHBlciB1dGlsaXRpZXNcclxudXNlZnVsIGluIGluZGVudGF0aW9uIGxvZ2ljLCBhbmQgY2FuIHNlbGVjdGl2ZWx5IG92ZXJyaWRlIHRoZVxyXG5pbmRlbnRhdGlvbiByZXBvcnRlZCBmb3Igc29tZSBsaW5lcy5cclxuKi9cclxuY2xhc3MgSW5kZW50Q29udGV4dCB7XHJcbiAgICAvKipcclxuICAgIENyZWF0ZSBhbiBpbmRlbnQgY29udGV4dC5cclxuICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKlxyXG4gICAgVGhlIGVkaXRvciBzdGF0ZS5cclxuICAgICovXHJcbiAgICBzdGF0ZSwgXHJcbiAgICAvKipcclxuICAgIEBpbnRlcm5hbFxyXG4gICAgKi9cclxuICAgIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMudW5pdCA9IGdldEluZGVudFVuaXQoc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBHZXQgYSBkZXNjcmlwdGlvbiBvZiB0aGUgbGluZSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24sIHRha2luZ1xyXG4gICAgW3NpbXVsYXRlZCBsaW5lXHJcbiAgICBicmVha3NdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuSW5kZW50Q29udGV4dC5jb25zdHJ1Y3Rvcl5vcHRpb25zLnNpbXVsYXRlQnJlYWspXHJcbiAgICBpbnRvIGFjY291bnQuIElmIHRoZXJlIGlzIHN1Y2ggYSBicmVhayBhdCBgcG9zYCwgdGhlIGBiaWFzYFxyXG4gICAgYXJndW1lbnQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXJ0IG9mIHRoZSBsaW5lIGxpbmUgYmVmb3JlIG9yXHJcbiAgICBhZnRlciB0aGUgYnJlYWsgaXMgdXNlZC5cclxuICAgICovXHJcbiAgICBsaW5lQXQocG9zLCBiaWFzID0gMSkge1xyXG4gICAgICAgIGxldCBsaW5lID0gdGhpcy5zdGF0ZS5kb2MubGluZUF0KHBvcyk7XHJcbiAgICAgICAgbGV0IHsgc2ltdWxhdGVCcmVhaywgc2ltdWxhdGVEb3VibGVCcmVhayB9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgIGlmIChzaW11bGF0ZUJyZWFrICE9IG51bGwgJiYgc2ltdWxhdGVCcmVhayA+PSBsaW5lLmZyb20gJiYgc2ltdWxhdGVCcmVhayA8PSBsaW5lLnRvKSB7XHJcbiAgICAgICAgICAgIGlmIChzaW11bGF0ZURvdWJsZUJyZWFrICYmIHNpbXVsYXRlQnJlYWsgPT0gcG9zKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdGV4dDogXCJcIiwgZnJvbTogcG9zIH07XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGJpYXMgPCAwID8gc2ltdWxhdGVCcmVhayA8IHBvcyA6IHNpbXVsYXRlQnJlYWsgPD0gcG9zKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdGV4dDogbGluZS50ZXh0LnNsaWNlKHNpbXVsYXRlQnJlYWsgLSBsaW5lLmZyb20pLCBmcm9tOiBzaW11bGF0ZUJyZWFrIH07XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRleHQ6IGxpbmUudGV4dC5zbGljZSgwLCBzaW11bGF0ZUJyZWFrIC0gbGluZS5mcm9tKSwgZnJvbTogbGluZS5mcm9tIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaW5lO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBHZXQgdGhlIHRleHQgZGlyZWN0bHkgYWZ0ZXIgYHBvc2AsIGVpdGhlciB0aGUgZW50aXJlIGxpbmVcclxuICAgIG9yIHRoZSBuZXh0IDEwMCBjaGFyYWN0ZXJzLCB3aGljaGV2ZXIgaXMgc2hvcnRlci5cclxuICAgICovXHJcbiAgICB0ZXh0QWZ0ZXJQb3MocG9zLCBiaWFzID0gMSkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2ltdWxhdGVEb3VibGVCcmVhayAmJiBwb3MgPT0gdGhpcy5vcHRpb25zLnNpbXVsYXRlQnJlYWspXHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIGxldCB7IHRleHQsIGZyb20gfSA9IHRoaXMubGluZUF0KHBvcywgYmlhcyk7XHJcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UocG9zIC0gZnJvbSwgTWF0aC5taW4odGV4dC5sZW5ndGgsIHBvcyArIDEwMCAtIGZyb20pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgRmluZCB0aGUgY29sdW1uIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24uXHJcbiAgICAqL1xyXG4gICAgY29sdW1uKHBvcywgYmlhcyA9IDEpIHtcclxuICAgICAgICBsZXQgeyB0ZXh0LCBmcm9tIH0gPSB0aGlzLmxpbmVBdChwb3MsIGJpYXMpO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmNvdW50Q29sdW1uKHRleHQsIHBvcyAtIGZyb20pO1xyXG4gICAgICAgIGxldCBvdmVycmlkZSA9IHRoaXMub3B0aW9ucy5vdmVycmlkZUluZGVudGF0aW9uID8gdGhpcy5vcHRpb25zLm92ZXJyaWRlSW5kZW50YXRpb24oZnJvbSkgOiAtMTtcclxuICAgICAgICBpZiAob3ZlcnJpZGUgPiAtMSlcclxuICAgICAgICAgICAgcmVzdWx0ICs9IG92ZXJyaWRlIC0gdGhpcy5jb3VudENvbHVtbih0ZXh0LCB0ZXh0LnNlYXJjaCgvXFxTfCQvKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgRmluZCB0aGUgY29sdW1uIHBvc2l0aW9uICh0YWtpbmcgdGFicyBpbnRvIGFjY291bnQpIG9mIHRoZSBnaXZlblxyXG4gICAgcG9zaXRpb24gaW4gdGhlIGdpdmVuIHN0cmluZy5cclxuICAgICovXHJcbiAgICBjb3VudENvbHVtbihsaW5lLCBwb3MgPSBsaW5lLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBjb3VudENvbHVtbihsaW5lLCB0aGlzLnN0YXRlLnRhYlNpemUsIHBvcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIEZpbmQgdGhlIGluZGVudGF0aW9uIGNvbHVtbiBvZiB0aGUgbGluZSBhdCB0aGUgZ2l2ZW4gcG9pbnQuXHJcbiAgICAqL1xyXG4gICAgbGluZUluZGVudChwb3MsIGJpYXMgPSAxKSB7XHJcbiAgICAgICAgbGV0IHsgdGV4dCwgZnJvbSB9ID0gdGhpcy5saW5lQXQocG9zLCBiaWFzKTtcclxuICAgICAgICBsZXQgb3ZlcnJpZGUgPSB0aGlzLm9wdGlvbnMub3ZlcnJpZGVJbmRlbnRhdGlvbjtcclxuICAgICAgICBpZiAob3ZlcnJpZGUpIHtcclxuICAgICAgICAgICAgbGV0IG92ZXJyaWRlbiA9IG92ZXJyaWRlKGZyb20pO1xyXG4gICAgICAgICAgICBpZiAob3ZlcnJpZGVuID4gLTEpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb3VudENvbHVtbih0ZXh0LCB0ZXh0LnNlYXJjaCgvXFxTfCQvKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIFJldHVybnMgdGhlIFtzaW11bGF0ZWQgbGluZVxyXG4gICAgYnJlYWtdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuSW5kZW50Q29udGV4dC5jb25zdHJ1Y3Rvcl5vcHRpb25zLnNpbXVsYXRlQnJlYWspXHJcbiAgICBmb3IgdGhpcyBjb250ZXh0LCBpZiBhbnkuXHJcbiAgICAqL1xyXG4gICAgZ2V0IHNpbXVsYXRlZEJyZWFrKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc2ltdWxhdGVCcmVhayB8fCBudWxsO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG5BIHN5bnRheCB0cmVlIG5vZGUgcHJvcCB1c2VkIHRvIGFzc29jaWF0ZSBpbmRlbnRhdGlvbiBzdHJhdGVnaWVzXHJcbndpdGggbm9kZSB0eXBlcy4gU3VjaCBhIHN0cmF0ZWd5IGlzIGEgZnVuY3Rpb24gZnJvbSBhbiBpbmRlbnRhdGlvblxyXG5jb250ZXh0IHRvIGEgY29sdW1uIG51bWJlciAoc2VlIGFsc29cclxuW2BpbmRlbnRTdHJpbmdgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudFN0cmluZykpIG9yIG51bGwsIHdoZXJlIG51bGxcclxuaW5kaWNhdGVzIHRoYXQgbm8gZGVmaW5pdGl2ZSBpbmRlbnRhdGlvbiBjYW4gYmUgZGV0ZXJtaW5lZC5cclxuKi9cclxuY29uc3QgaW5kZW50Tm9kZVByb3AgPSAvKkBfX1BVUkVfXyovbmV3IE5vZGVQcm9wKCk7XHJcbi8vIENvbXB1dGUgdGhlIGluZGVudGF0aW9uIGZvciBhIGdpdmVuIHBvc2l0aW9uIGZyb20gdGhlIHN5bnRheCB0cmVlLlxyXG5mdW5jdGlvbiBzeW50YXhJbmRlbnRhdGlvbihjeCwgYXN0LCBwb3MpIHtcclxuICAgIHJldHVybiBpbmRlbnRGcm9tKGFzdC5yZXNvbHZlSW5uZXIocG9zKS5lbnRlclVuZmluaXNoZWROb2Rlc0JlZm9yZShwb3MpLCBwb3MsIGN4KTtcclxufVxyXG5mdW5jdGlvbiBpZ25vcmVDbG9zZWQoY3gpIHtcclxuICAgIHJldHVybiBjeC5wb3MgPT0gY3gub3B0aW9ucy5zaW11bGF0ZUJyZWFrICYmIGN4Lm9wdGlvbnMuc2ltdWxhdGVEb3VibGVCcmVhaztcclxufVxyXG5mdW5jdGlvbiBpbmRlbnRTdHJhdGVneSh0cmVlKSB7XHJcbiAgICBsZXQgc3RyYXRlZ3kgPSB0cmVlLnR5cGUucHJvcChpbmRlbnROb2RlUHJvcCk7XHJcbiAgICBpZiAoc3RyYXRlZ3kpXHJcbiAgICAgICAgcmV0dXJuIHN0cmF0ZWd5O1xyXG4gICAgbGV0IGZpcnN0ID0gdHJlZS5maXJzdENoaWxkLCBjbG9zZTtcclxuICAgIGlmIChmaXJzdCAmJiAoY2xvc2UgPSBmaXJzdC50eXBlLnByb3AoTm9kZVByb3AuY2xvc2VkQnkpKSkge1xyXG4gICAgICAgIGxldCBsYXN0ID0gdHJlZS5sYXN0Q2hpbGQsIGNsb3NlZCA9IGxhc3QgJiYgY2xvc2UuaW5kZXhPZihsYXN0Lm5hbWUpID4gLTE7XHJcbiAgICAgICAgcmV0dXJuIGN4ID0+IGRlbGltaXRlZFN0cmF0ZWd5KGN4LCB0cnVlLCAxLCB1bmRlZmluZWQsIGNsb3NlZCAmJiAhaWdub3JlQ2xvc2VkKGN4KSA/IGxhc3QuZnJvbSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJlZS5wYXJlbnQgPT0gbnVsbCA/IHRvcEluZGVudCA6IG51bGw7XHJcbn1cclxuZnVuY3Rpb24gaW5kZW50RnJvbShub2RlLCBwb3MsIGJhc2UpIHtcclxuICAgIGZvciAoOyBub2RlOyBub2RlID0gbm9kZS5wYXJlbnQpIHtcclxuICAgICAgICBsZXQgc3RyYXRlZ3kgPSBpbmRlbnRTdHJhdGVneShub2RlKTtcclxuICAgICAgICBpZiAoc3RyYXRlZ3kpXHJcbiAgICAgICAgICAgIHJldHVybiBzdHJhdGVneShUcmVlSW5kZW50Q29udGV4dC5jcmVhdGUoYmFzZSwgcG9zLCBub2RlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5mdW5jdGlvbiB0b3BJbmRlbnQoKSB7IHJldHVybiAwOyB9XHJcbi8qKlxyXG5PYmplY3RzIG9mIHRoaXMgdHlwZSBwcm92aWRlIGNvbnRleHQgaW5mb3JtYXRpb24gYW5kIGhlbHBlclxyXG5tZXRob2RzIHRvIGluZGVudGF0aW9uIGZ1bmN0aW9ucyByZWdpc3RlcmVkIG9uIHN5bnRheCBub2Rlcy5cclxuKi9cclxuY2xhc3MgVHJlZUluZGVudENvbnRleHQgZXh0ZW5kcyBJbmRlbnRDb250ZXh0IHtcclxuICAgIGNvbnN0cnVjdG9yKGJhc2UsIFxyXG4gICAgLyoqXHJcbiAgICBUaGUgcG9zaXRpb24gYXQgd2hpY2ggaW5kZW50YXRpb24gaXMgYmVpbmcgY29tcHV0ZWQuXHJcbiAgICAqL1xyXG4gICAgcG9zLCBcclxuICAgIC8qKlxyXG4gICAgVGhlIHN5bnRheCB0cmVlIG5vZGUgdG8gd2hpY2ggdGhlIGluZGVudGF0aW9uIHN0cmF0ZWd5XHJcbiAgICBhcHBsaWVzLlxyXG4gICAgKi9cclxuICAgIG5vZGUpIHtcclxuICAgICAgICBzdXBlcihiYXNlLnN0YXRlLCBiYXNlLm9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuYmFzZSA9IGJhc2U7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XHJcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgQGludGVybmFsXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZShiYXNlLCBwb3MsIG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFRyZWVJbmRlbnRDb250ZXh0KGJhc2UsIHBvcywgbm9kZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIEdldCB0aGUgdGV4dCBkaXJlY3RseSBhZnRlciBgdGhpcy5wb3NgLCBlaXRoZXIgdGhlIGVudGlyZSBsaW5lXHJcbiAgICBvciB0aGUgbmV4dCAxMDAgY2hhcmFjdGVycywgd2hpY2hldmVyIGlzIHNob3J0ZXIuXHJcbiAgICAqL1xyXG4gICAgZ2V0IHRleHRBZnRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0QWZ0ZXJQb3ModGhpcy5wb3MpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBHZXQgdGhlIGluZGVudGF0aW9uIGF0IHRoZSByZWZlcmVuY2UgbGluZSBmb3IgYHRoaXMubm9kZWAsIHdoaWNoXHJcbiAgICBpcyB0aGUgbGluZSBvbiB3aGljaCBpdCBzdGFydHMsIHVubGVzcyB0aGVyZSBpcyBhIG5vZGUgdGhhdCBpc1xyXG4gICAgX25vdF8gYSBwYXJlbnQgb2YgdGhpcyBub2RlIGNvdmVyaW5nIHRoZSBzdGFydCBvZiB0aGF0IGxpbmUuIElmXHJcbiAgICBzbywgdGhlIGxpbmUgYXQgdGhlIHN0YXJ0IG9mIHRoYXQgbm9kZSBpcyB0cmllZCwgYWdhaW4gc2tpcHBpbmdcclxuICAgIG9uIGlmIGl0IGlzIGNvdmVyZWQgYnkgYW5vdGhlciBzdWNoIG5vZGUuXHJcbiAgICAqL1xyXG4gICAgZ2V0IGJhc2VJbmRlbnQoKSB7XHJcbiAgICAgICAgbGV0IGxpbmUgPSB0aGlzLnN0YXRlLmRvYy5saW5lQXQodGhpcy5ub2RlLmZyb20pO1xyXG4gICAgICAgIC8vIFNraXAgbGluZSBzdGFydHMgdGhhdCBhcmUgY292ZXJlZCBieSBhIHNpYmxpbmcgKG9yIGNvdXNpbiwgZXRjKVxyXG4gICAgICAgIGZvciAoOzspIHtcclxuICAgICAgICAgICAgbGV0IGF0QnJlYWsgPSB0aGlzLm5vZGUucmVzb2x2ZShsaW5lLmZyb20pO1xyXG4gICAgICAgICAgICB3aGlsZSAoYXRCcmVhay5wYXJlbnQgJiYgYXRCcmVhay5wYXJlbnQuZnJvbSA9PSBhdEJyZWFrLmZyb20pXHJcbiAgICAgICAgICAgICAgICBhdEJyZWFrID0gYXRCcmVhay5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmIChpc1BhcmVudChhdEJyZWFrLCB0aGlzLm5vZGUpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGxpbmUgPSB0aGlzLnN0YXRlLmRvYy5saW5lQXQoYXRCcmVhay5mcm9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZUluZGVudChsaW5lLmZyb20pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBDb250aW51ZSBsb29raW5nIGZvciBpbmRlbnRhdGlvbnMgaW4gdGhlIG5vZGUncyBwYXJlbnQgbm9kZXMsXHJcbiAgICBhbmQgcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhhdC5cclxuICAgICovXHJcbiAgICBjb250aW51ZSgpIHtcclxuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5ub2RlLnBhcmVudDtcclxuICAgICAgICByZXR1cm4gcGFyZW50ID8gaW5kZW50RnJvbShwYXJlbnQsIHRoaXMucG9zLCB0aGlzLmJhc2UpIDogMDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc1BhcmVudChwYXJlbnQsIG9mKSB7XHJcbiAgICBmb3IgKGxldCBjdXIgPSBvZjsgY3VyOyBjdXIgPSBjdXIucGFyZW50KVxyXG4gICAgICAgIGlmIChwYXJlbnQgPT0gY3VyKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyBDaGVjayB3aGV0aGVyIGEgZGVsaW1pdGVkIG5vZGUgaXMgYWxpZ25lZCAobWVhbmluZyB0aGVyZSBhcmVcclxuLy8gbm9uLXNraXBwZWQgbm9kZXMgb24gdGhlIHNhbWUgbGluZSBhcyB0aGUgb3BlbmluZyBkZWxpbWl0ZXIpLiBBbmRcclxuLy8gaWYgc28sIHJldHVybiB0aGUgb3BlbmluZyB0b2tlbi5cclxuZnVuY3Rpb24gYnJhY2tldGVkQWxpZ25lZChjb250ZXh0KSB7XHJcbiAgICBsZXQgdHJlZSA9IGNvbnRleHQubm9kZTtcclxuICAgIGxldCBvcGVuVG9rZW4gPSB0cmVlLmNoaWxkQWZ0ZXIodHJlZS5mcm9tKSwgbGFzdCA9IHRyZWUubGFzdENoaWxkO1xyXG4gICAgaWYgKCFvcGVuVG9rZW4pXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgc2ltID0gY29udGV4dC5vcHRpb25zLnNpbXVsYXRlQnJlYWs7XHJcbiAgICBsZXQgb3BlbkxpbmUgPSBjb250ZXh0LnN0YXRlLmRvYy5saW5lQXQob3BlblRva2VuLmZyb20pO1xyXG4gICAgbGV0IGxpbmVFbmQgPSBzaW0gPT0gbnVsbCB8fCBzaW0gPD0gb3BlbkxpbmUuZnJvbSA/IG9wZW5MaW5lLnRvIDogTWF0aC5taW4ob3BlbkxpbmUudG8sIHNpbSk7XHJcbiAgICBmb3IgKGxldCBwb3MgPSBvcGVuVG9rZW4udG87Oykge1xyXG4gICAgICAgIGxldCBuZXh0ID0gdHJlZS5jaGlsZEFmdGVyKHBvcyk7XHJcbiAgICAgICAgaWYgKCFuZXh0IHx8IG5leHQgPT0gbGFzdClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKCFuZXh0LnR5cGUuaXNTa2lwcGVkKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV4dC5mcm9tIDwgbGluZUVuZCA/IG9wZW5Ub2tlbiA6IG51bGw7XHJcbiAgICAgICAgcG9zID0gbmV4dC50bztcclxuICAgIH1cclxufVxyXG4vKipcclxuQW4gaW5kZW50YXRpb24gc3RyYXRlZ3kgZm9yIGRlbGltaXRlZCAodXN1YWxseSBicmFja2V0ZWQpIG5vZGVzLlxyXG5XaWxsLCBieSBkZWZhdWx0LCBpbmRlbnQgb25lIHVuaXQgbW9yZSB0aGFuIHRoZSBwYXJlbnQncyBiYXNlXHJcbmluZGVudCB1bmxlc3MgdGhlIGxpbmUgc3RhcnRzIHdpdGggYSBjbG9zaW5nIHRva2VuLiBXaGVuIGBhbGlnbmBcclxuaXMgdHJ1ZSBhbmQgdGhlcmUgYXJlIG5vbi1za2lwcGVkIG5vZGVzIG9uIHRoZSBub2RlJ3Mgb3BlbmluZ1xyXG5saW5lLCB0aGUgY29udGVudCBvZiB0aGUgbm9kZSB3aWxsIGJlIGFsaWduZWQgd2l0aCB0aGUgZW5kIG9mIHRoZVxyXG5vcGVuaW5nIG5vZGUsIGxpa2UgdGhpczpcclxuXHJcbiAgICBmb28oYmFyLFxyXG4gICAgICAgIGJheilcclxuKi9cclxuZnVuY3Rpb24gZGVsaW1pdGVkSW5kZW50KHsgY2xvc2luZywgYWxpZ24gPSB0cnVlLCB1bml0cyA9IDEgfSkge1xyXG4gICAgcmV0dXJuIChjb250ZXh0KSA9PiBkZWxpbWl0ZWRTdHJhdGVneShjb250ZXh0LCBhbGlnbiwgdW5pdHMsIGNsb3NpbmcpO1xyXG59XHJcbmZ1bmN0aW9uIGRlbGltaXRlZFN0cmF0ZWd5KGNvbnRleHQsIGFsaWduLCB1bml0cywgY2xvc2luZywgY2xvc2VkQXQpIHtcclxuICAgIGxldCBhZnRlciA9IGNvbnRleHQudGV4dEFmdGVyLCBzcGFjZSA9IGFmdGVyLm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aDtcclxuICAgIGxldCBjbG9zZWQgPSBjbG9zaW5nICYmIGFmdGVyLnNsaWNlKHNwYWNlLCBzcGFjZSArIGNsb3NpbmcubGVuZ3RoKSA9PSBjbG9zaW5nIHx8IGNsb3NlZEF0ID09IGNvbnRleHQucG9zICsgc3BhY2U7XHJcbiAgICBsZXQgYWxpZ25lZCA9IGFsaWduID8gYnJhY2tldGVkQWxpZ25lZChjb250ZXh0KSA6IG51bGw7XHJcbiAgICBpZiAoYWxpZ25lZClcclxuICAgICAgICByZXR1cm4gY2xvc2VkID8gY29udGV4dC5jb2x1bW4oYWxpZ25lZC5mcm9tKSA6IGNvbnRleHQuY29sdW1uKGFsaWduZWQudG8pO1xyXG4gICAgcmV0dXJuIGNvbnRleHQuYmFzZUluZGVudCArIChjbG9zZWQgPyAwIDogY29udGV4dC51bml0ICogdW5pdHMpO1xyXG59XHJcbi8qKlxyXG5BbiBpbmRlbnRhdGlvbiBzdHJhdGVneSB0aGF0IGFsaWducyBhIG5vZGUncyBjb250ZW50IHRvIGl0cyBiYXNlXHJcbmluZGVudGF0aW9uLlxyXG4qL1xyXG5jb25zdCBmbGF0SW5kZW50ID0gKGNvbnRleHQpID0+IGNvbnRleHQuYmFzZUluZGVudDtcclxuLyoqXHJcbkNyZWF0ZXMgYW4gaW5kZW50YXRpb24gc3RyYXRlZ3kgdGhhdCwgYnkgZGVmYXVsdCwgaW5kZW50c1xyXG5jb250aW51ZWQgbGluZXMgb25lIHVuaXQgbW9yZSB0aGFuIHRoZSBub2RlJ3MgYmFzZSBpbmRlbnRhdGlvbi5cclxuWW91IGNhbiBwcm92aWRlIGBleGNlcHRgIHRvIHByZXZlbnQgaW5kZW50YXRpb24gb2YgbGluZXMgdGhhdFxyXG5tYXRjaCBhIHBhdHRlcm4gKGZvciBleGFtcGxlIGAvXmVsc2VcXGIvYCBpbiBgaWZgL2BlbHNlYFxyXG5jb25zdHJ1Y3RzKSwgYW5kIHlvdSBjYW4gY2hhbmdlIHRoZSBhbW91bnQgb2YgdW5pdHMgdXNlZCB3aXRoIHRoZVxyXG5gdW5pdHNgIG9wdGlvbi5cclxuKi9cclxuZnVuY3Rpb24gY29udGludWVkSW5kZW50KHsgZXhjZXB0LCB1bml0cyA9IDEgfSA9IHt9KSB7XHJcbiAgICByZXR1cm4gKGNvbnRleHQpID0+IHtcclxuICAgICAgICBsZXQgbWF0Y2hFeGNlcHQgPSBleGNlcHQgJiYgZXhjZXB0LnRlc3QoY29udGV4dC50ZXh0QWZ0ZXIpO1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmJhc2VJbmRlbnQgKyAobWF0Y2hFeGNlcHQgPyAwIDogdW5pdHMgKiBjb250ZXh0LnVuaXQpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBEb250SW5kZW50QmV5b25kID0gMjAwO1xyXG4vKipcclxuRW5hYmxlcyByZWluZGVudGF0aW9uIG9uIGlucHV0LiBXaGVuIGEgbGFuZ3VhZ2UgZGVmaW5lcyBhblxyXG5gaW5kZW50T25JbnB1dGAgZmllbGQgaW4gaXRzIFtsYW5ndWFnZVxyXG5kYXRhXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLmxhbmd1YWdlRGF0YUF0KSwgd2hpY2ggbXVzdCBob2xkIGEgcmVndWxhclxyXG5leHByZXNzaW9uLCB0aGUgbGluZSBhdCB0aGUgY3Vyc29yIHdpbGwgYmUgcmVpbmRlbnRlZCB3aGVuZXZlciBuZXdcclxudGV4dCBpcyB0eXBlZCBhbmQgdGhlIGlucHV0IGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBsaW5lIHVwIHRvIHRoZVxyXG5jdXJzb3IgbWF0Y2hlcyB0aGF0IHJlZ2V4cC5cclxuXHJcblRvIGF2b2lkIHVubmVjY2VzYXJ5IHJlaW5kZW50cywgaXQgaXMgcmVjb21tZW5kZWQgdG8gc3RhcnQgdGhlXHJcbnJlZ2V4cCB3aXRoIGBeYCAodXN1YWxseSBmb2xsb3dlZCBieSBgXFxzKmApLCBhbmQgZW5kIGl0IHdpdGggYCRgLlxyXG5Gb3IgZXhhbXBsZSwgYC9eXFxzKlxcfSQvYCB3aWxsIHJlaW5kZW50IHdoZW4gYSBjbG9zaW5nIGJyYWNlIGlzXHJcbmFkZGVkIGF0IHRoZSBzdGFydCBvZiBhIGxpbmUuXHJcbiovXHJcbmZ1bmN0aW9uIGluZGVudE9uSW5wdXQoKSB7XHJcbiAgICByZXR1cm4gRWRpdG9yU3RhdGUudHJhbnNhY3Rpb25GaWx0ZXIub2YodHIgPT4ge1xyXG4gICAgICAgIGlmICghdHIuZG9jQ2hhbmdlZCB8fCAhdHIuaXNVc2VyRXZlbnQoXCJpbnB1dC50eXBlXCIpICYmICF0ci5pc1VzZXJFdmVudChcImlucHV0LmNvbXBsZXRlXCIpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHI7XHJcbiAgICAgICAgbGV0IHJ1bGVzID0gdHIuc3RhcnRTdGF0ZS5sYW5ndWFnZURhdGFBdChcImluZGVudE9uSW5wdXRcIiwgdHIuc3RhcnRTdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkKTtcclxuICAgICAgICBpZiAoIXJ1bGVzLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRyO1xyXG4gICAgICAgIGxldCBkb2MgPSB0ci5uZXdEb2MsIHsgaGVhZCB9ID0gdHIubmV3U2VsZWN0aW9uLm1haW4sIGxpbmUgPSBkb2MubGluZUF0KGhlYWQpO1xyXG4gICAgICAgIGlmIChoZWFkID4gbGluZS5mcm9tICsgRG9udEluZGVudEJleW9uZClcclxuICAgICAgICAgICAgcmV0dXJuIHRyO1xyXG4gICAgICAgIGxldCBsaW5lU3RhcnQgPSBkb2Muc2xpY2VTdHJpbmcobGluZS5mcm9tLCBoZWFkKTtcclxuICAgICAgICBpZiAoIXJ1bGVzLnNvbWUociA9PiByLnRlc3QobGluZVN0YXJ0KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0cjtcclxuICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gdHIsIGxhc3QgPSAtMSwgY2hhbmdlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHsgaGVhZCB9IG9mIHN0YXRlLnNlbGVjdGlvbi5yYW5nZXMpIHtcclxuICAgICAgICAgICAgbGV0IGxpbmUgPSBzdGF0ZS5kb2MubGluZUF0KGhlYWQpO1xyXG4gICAgICAgICAgICBpZiAobGluZS5mcm9tID09IGxhc3QpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgbGFzdCA9IGxpbmUuZnJvbTtcclxuICAgICAgICAgICAgbGV0IGluZGVudCA9IGdldEluZGVudGF0aW9uKHN0YXRlLCBsaW5lLmZyb20pO1xyXG4gICAgICAgICAgICBpZiAoaW5kZW50ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgbGV0IGN1ciA9IC9eXFxzKi8uZXhlYyhsaW5lLnRleHQpWzBdO1xyXG4gICAgICAgICAgICBsZXQgbm9ybSA9IGluZGVudFN0cmluZyhzdGF0ZSwgaW5kZW50KTtcclxuICAgICAgICAgICAgaWYgKGN1ciAhPSBub3JtKVxyXG4gICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHsgZnJvbTogbGluZS5mcm9tLCB0bzogbGluZS5mcm9tICsgY3VyLmxlbmd0aCwgaW5zZXJ0OiBub3JtIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2hhbmdlcy5sZW5ndGggPyBbdHIsIHsgY2hhbmdlcywgc2VxdWVudGlhbDogdHJ1ZSB9XSA6IHRyO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG5BIGZhY2V0IHRoYXQgcmVnaXN0ZXJzIGEgY29kZSBmb2xkaW5nIHNlcnZpY2UuIFdoZW4gY2FsbGVkIHdpdGhcclxudGhlIGV4dGVudCBvZiBhIGxpbmUsIHN1Y2ggYSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgZm9sZGFibGVcclxucmFuZ2UgdGhhdCBzdGFydHMgb24gdGhhdCBsaW5lIChidXQgY29udGludWVzIGJleW9uZCBpdCksIGlmIG9uZVxyXG5jYW4gYmUgZm91bmQuXHJcbiovXHJcbmNvbnN0IGZvbGRTZXJ2aWNlID0gLypAX19QVVJFX18qL0ZhY2V0LmRlZmluZSgpO1xyXG4vKipcclxuVGhpcyBub2RlIHByb3AgaXMgdXNlZCB0byBhc3NvY2lhdGUgZm9sZGluZyBpbmZvcm1hdGlvbiB3aXRoXHJcbnN5bnRheCBub2RlIHR5cGVzLiBHaXZlbiBhIHN5bnRheCBub2RlLCBpdCBzaG91bGQgY2hlY2sgd2hldGhlclxyXG50aGF0IHRyZWUgaXMgZm9sZGFibGUgYW5kIHJldHVybiB0aGUgcmFuZ2UgdGhhdCBjYW4gYmUgY29sbGFwc2VkXHJcbndoZW4gaXQgaXMuXHJcbiovXHJcbmNvbnN0IGZvbGROb2RlUHJvcCA9IC8qQF9fUFVSRV9fKi9uZXcgTm9kZVByb3AoKTtcclxuLyoqXHJcbltGb2xkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmZvbGROb2RlUHJvcCkgZnVuY3Rpb24gdGhhdCBmb2xkcyBldmVyeXRoaW5nIGJ1dFxyXG50aGUgZmlyc3QgYW5kIHRoZSBsYXN0IGNoaWxkIG9mIGEgc3ludGF4IG5vZGUuIFVzZWZ1bCBmb3Igbm9kZXNcclxudGhhdCBzdGFydCBhbmQgZW5kIHdpdGggZGVsaW1pdGVycy5cclxuKi9cclxuZnVuY3Rpb24gZm9sZEluc2lkZShub2RlKSB7XHJcbiAgICBsZXQgZmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQsIGxhc3QgPSBub2RlLmxhc3RDaGlsZDtcclxuICAgIHJldHVybiBmaXJzdCAmJiBmaXJzdC50byA8IGxhc3QuZnJvbSA/IHsgZnJvbTogZmlyc3QudG8sIHRvOiBsYXN0LnR5cGUuaXNFcnJvciA/IG5vZGUudG8gOiBsYXN0LmZyb20gfSA6IG51bGw7XHJcbn1cclxuZnVuY3Rpb24gc3ludGF4Rm9sZGluZyhzdGF0ZSwgc3RhcnQsIGVuZCkge1xyXG4gICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKHN0YXRlKTtcclxuICAgIGlmICh0cmVlLmxlbmd0aCA8IGVuZClcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIGxldCBpbm5lciA9IHRyZWUucmVzb2x2ZUlubmVyKGVuZCwgMSk7XHJcbiAgICBsZXQgZm91bmQgPSBudWxsO1xyXG4gICAgZm9yIChsZXQgY3VyID0gaW5uZXI7IGN1cjsgY3VyID0gY3VyLnBhcmVudCkge1xyXG4gICAgICAgIGlmIChjdXIudG8gPD0gZW5kIHx8IGN1ci5mcm9tID4gZW5kKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBpZiAoZm91bmQgJiYgY3VyLmZyb20gPCBzdGFydClcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgbGV0IHByb3AgPSBjdXIudHlwZS5wcm9wKGZvbGROb2RlUHJvcCk7XHJcbiAgICAgICAgaWYgKHByb3AgJiYgKGN1ci50byA8IHRyZWUubGVuZ3RoIC0gNTAgfHwgdHJlZS5sZW5ndGggPT0gc3RhdGUuZG9jLmxlbmd0aCB8fCAhaXNVbmZpbmlzaGVkKGN1cikpKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHByb3AoY3VyLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5mcm9tIDw9IGVuZCAmJiB2YWx1ZS5mcm9tID49IHN0YXJ0ICYmIHZhbHVlLnRvID4gZW5kKVxyXG4gICAgICAgICAgICAgICAgZm91bmQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZm91bmQ7XHJcbn1cclxuZnVuY3Rpb24gaXNVbmZpbmlzaGVkKG5vZGUpIHtcclxuICAgIGxldCBjaCA9IG5vZGUubGFzdENoaWxkO1xyXG4gICAgcmV0dXJuIGNoICYmIGNoLnRvID09IG5vZGUudG8gJiYgY2gudHlwZS5pc0Vycm9yO1xyXG59XHJcbi8qKlxyXG5DaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBsaW5lIGlzIGZvbGRhYmxlLiBGaXJzdCBhc2tzIGFueSBmb2xkXHJcbnNlcnZpY2VzIHJlZ2lzdGVyZWQgdGhyb3VnaFxyXG5bYGZvbGRTZXJ2aWNlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5mb2xkU2VydmljZSksIGFuZCBpZiBub25lIG9mIHRoZW0gcmV0dXJuXHJcbmEgcmVzdWx0LCB0cmllcyB0byBxdWVyeSB0aGUgW2ZvbGQgbm9kZVxyXG5wcm9wXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmZvbGROb2RlUHJvcCkgb2Ygc3ludGF4IG5vZGVzIHRoYXQgY292ZXIgdGhlIGVuZFxyXG5vZiB0aGUgbGluZS5cclxuKi9cclxuZnVuY3Rpb24gZm9sZGFibGUoc3RhdGUsIGxpbmVTdGFydCwgbGluZUVuZCkge1xyXG4gICAgZm9yIChsZXQgc2VydmljZSBvZiBzdGF0ZS5mYWNldChmb2xkU2VydmljZSkpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gc2VydmljZShzdGF0ZSwgbGluZVN0YXJ0LCBsaW5lRW5kKTtcclxuICAgICAgICBpZiAocmVzdWx0KVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN5bnRheEZvbGRpbmcoc3RhdGUsIGxpbmVTdGFydCwgbGluZUVuZCk7XHJcbn1cclxuZnVuY3Rpb24gbWFwUmFuZ2UocmFuZ2UsIG1hcHBpbmcpIHtcclxuICAgIGxldCBmcm9tID0gbWFwcGluZy5tYXBQb3MocmFuZ2UuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBQb3MocmFuZ2UudG8sIC0xKTtcclxuICAgIHJldHVybiBmcm9tID49IHRvID8gdW5kZWZpbmVkIDogeyBmcm9tLCB0byB9O1xyXG59XHJcbi8qKlxyXG5TdGF0ZSBlZmZlY3QgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYSB0cmFuc2FjdGlvbiB0byBmb2xkIHRoZVxyXG5naXZlbiByYW5nZS4gKFlvdSBwcm9iYWJseSBvbmx5IG5lZWQgdGhpcyBpbiBleGNlcHRpb25hbFxyXG5jaXJjdW1zdGFuY2Vz4oCUdXN1YWxseSB5b3UnbGwganVzdCB3YW50IHRvIGxldFxyXG5bYGZvbGRDb2RlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5mb2xkQ29kZSkgYW5kIHRoZSBbZm9sZFxyXG5ndXR0ZXJdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZm9sZEd1dHRlcikgY3JlYXRlIHRoZSB0cmFuc2FjdGlvbnMuKVxyXG4qL1xyXG5jb25zdCBmb2xkRWZmZWN0ID0gLypAX19QVVJFX18qL1N0YXRlRWZmZWN0LmRlZmluZSh7IG1hcDogbWFwUmFuZ2UgfSk7XHJcbi8qKlxyXG5TdGF0ZSBlZmZlY3QgdGhhdCB1bmZvbGRzIHRoZSBnaXZlbiByYW5nZSAoaWYgaXQgd2FzIGZvbGRlZCkuXHJcbiovXHJcbmNvbnN0IHVuZm9sZEVmZmVjdCA9IC8qQF9fUFVSRV9fKi9TdGF0ZUVmZmVjdC5kZWZpbmUoeyBtYXA6IG1hcFJhbmdlIH0pO1xyXG5mdW5jdGlvbiBzZWxlY3RlZExpbmVzKHZpZXcpIHtcclxuICAgIGxldCBsaW5lcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgeyBoZWFkIH0gb2Ygdmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGxpbmVzLnNvbWUobCA9PiBsLmZyb20gPD0gaGVhZCAmJiBsLnRvID49IGhlYWQpKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBsaW5lcy5wdXNoKHZpZXcubGluZUJsb2NrQXQoaGVhZCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpbmVzO1xyXG59XHJcbi8qKlxyXG5UaGUgc3RhdGUgZmllbGQgdGhhdCBzdG9yZXMgdGhlIGZvbGRlZCByYW5nZXMgKGFzIGEgW2RlY29yYXRpb25cclxuc2V0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRGVjb3JhdGlvblNldCkpLiBDYW4gYmUgcGFzc2VkIHRvXHJcbltgRWRpdG9yU3RhdGUudG9KU09OYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS50b0pTT04pIGFuZFxyXG5bYGZyb21KU09OYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV5mcm9tSlNPTikgdG8gc2VyaWFsaXplIHRoZSBmb2xkXHJcbnN0YXRlLlxyXG4qL1xyXG5jb25zdCBmb2xkU3RhdGUgPSAvKkBfX1BVUkVfXyovU3RhdGVGaWVsZC5kZWZpbmUoe1xyXG4gICAgY3JlYXRlKCkge1xyXG4gICAgICAgIHJldHVybiBEZWNvcmF0aW9uLm5vbmU7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlKGZvbGRlZCwgdHIpIHtcclxuICAgICAgICBmb2xkZWQgPSBmb2xkZWQubWFwKHRyLmNoYW5nZXMpO1xyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdHIuZWZmZWN0cykge1xyXG4gICAgICAgICAgICBpZiAoZS5pcyhmb2xkRWZmZWN0KSAmJiAhZm9sZEV4aXN0cyhmb2xkZWQsIGUudmFsdWUuZnJvbSwgZS52YWx1ZS50bykpXHJcbiAgICAgICAgICAgICAgICBmb2xkZWQgPSBmb2xkZWQudXBkYXRlKHsgYWRkOiBbZm9sZFdpZGdldC5yYW5nZShlLnZhbHVlLmZyb20sIGUudmFsdWUudG8pXSB9KTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZS5pcyh1bmZvbGRFZmZlY3QpKVxyXG4gICAgICAgICAgICAgICAgZm9sZGVkID0gZm9sZGVkLnVwZGF0ZSh7IGZpbHRlcjogKGZyb20sIHRvKSA9PiBlLnZhbHVlLmZyb20gIT0gZnJvbSB8fCBlLnZhbHVlLnRvICE9IHRvLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlckZyb206IGUudmFsdWUuZnJvbSwgZmlsdGVyVG86IGUudmFsdWUudG8gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENsZWFyIGZvbGRlZCByYW5nZXMgdGhhdCBjb3ZlciB0aGUgc2VsZWN0aW9uIGhlYWRcclxuICAgICAgICBpZiAodHIuc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBvblNlbGVjdGlvbiA9IGZhbHNlLCB7IGhlYWQgfSA9IHRyLnNlbGVjdGlvbi5tYWluO1xyXG4gICAgICAgICAgICBmb2xkZWQuYmV0d2VlbihoZWFkLCBoZWFkLCAoYSwgYikgPT4geyBpZiAoYSA8IGhlYWQgJiYgYiA+IGhlYWQpXHJcbiAgICAgICAgICAgICAgICBvblNlbGVjdGlvbiA9IHRydWU7IH0pO1xyXG4gICAgICAgICAgICBpZiAob25TZWxlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICBmb2xkZWQgPSBmb2xkZWQudXBkYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGcm9tOiBoZWFkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclRvOiBoZWFkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogKGEsIGIpID0+IGIgPD0gaGVhZCB8fCBhID49IGhlYWRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm9sZGVkO1xyXG4gICAgfSxcclxuICAgIHByb3ZpZGU6IGYgPT4gRWRpdG9yVmlldy5kZWNvcmF0aW9ucy5mcm9tKGYpLFxyXG4gICAgdG9KU09OKGZvbGRlZCwgc3RhdGUpIHtcclxuICAgICAgICBsZXQgcmFuZ2VzID0gW107XHJcbiAgICAgICAgZm9sZGVkLmJldHdlZW4oMCwgc3RhdGUuZG9jLmxlbmd0aCwgKGZyb20sIHRvKSA9PiB7IHJhbmdlcy5wdXNoKGZyb20sIHRvKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJhbmdlcztcclxuICAgIH0sXHJcbiAgICBmcm9tSlNPTih2YWx1ZSkge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoICUgMilcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIEpTT04gZm9yIGZvbGQgc3RhdGVcIik7XHJcbiAgICAgICAgbGV0IHJhbmdlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOykge1xyXG4gICAgICAgICAgICBsZXQgZnJvbSA9IHZhbHVlW2krK10sIHRvID0gdmFsdWVbaSsrXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIHRvICE9IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgSlNPTiBmb3IgZm9sZCBzdGF0ZVwiKTtcclxuICAgICAgICAgICAgcmFuZ2VzLnB1c2goZm9sZFdpZGdldC5yYW5nZShmcm9tLCB0bykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbi5zZXQocmFuZ2VzLCB0cnVlKTtcclxuICAgIH1cclxufSk7XHJcbi8qKlxyXG5HZXQgYSBbcmFuZ2Ugc2V0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlJhbmdlU2V0KSBjb250YWluaW5nIHRoZSBmb2xkZWQgcmFuZ2VzXHJcbmluIHRoZSBnaXZlbiBzdGF0ZS5cclxuKi9cclxuZnVuY3Rpb24gZm9sZGVkUmFuZ2VzKHN0YXRlKSB7XHJcbiAgICByZXR1cm4gc3RhdGUuZmllbGQoZm9sZFN0YXRlLCBmYWxzZSkgfHwgUmFuZ2VTZXQuZW1wdHk7XHJcbn1cclxuZnVuY3Rpb24gZmluZEZvbGQoc3RhdGUsIGZyb20sIHRvKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBsZXQgZm91bmQgPSBudWxsO1xyXG4gICAgKF9hID0gc3RhdGUuZmllbGQoZm9sZFN0YXRlLCBmYWxzZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5iZXR3ZWVuKGZyb20sIHRvLCAoZnJvbSwgdG8pID0+IHtcclxuICAgICAgICBpZiAoIWZvdW5kIHx8IGZvdW5kLmZyb20gPiBmcm9tKVxyXG4gICAgICAgICAgICBmb3VuZCA9IHsgZnJvbSwgdG8gfTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZvdW5kO1xyXG59XHJcbmZ1bmN0aW9uIGZvbGRFeGlzdHMoZm9sZGVkLCBmcm9tLCB0bykge1xyXG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb2xkZWQuYmV0d2Vlbihmcm9tLCBmcm9tLCAoYSwgYikgPT4geyBpZiAoYSA9PSBmcm9tICYmIGIgPT0gdG8pXHJcbiAgICAgICAgZm91bmQgPSB0cnVlOyB9KTtcclxuICAgIHJldHVybiBmb3VuZDtcclxufVxyXG5mdW5jdGlvbiBtYXliZUVuYWJsZShzdGF0ZSwgb3RoZXIpIHtcclxuICAgIHJldHVybiBzdGF0ZS5maWVsZChmb2xkU3RhdGUsIGZhbHNlKSA/IG90aGVyIDogb3RoZXIuY29uY2F0KFN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZy5vZihjb2RlRm9sZGluZygpKSk7XHJcbn1cclxuLyoqXHJcbkZvbGQgdGhlIGxpbmVzIHRoYXQgYXJlIHNlbGVjdGVkLCBpZiBwb3NzaWJsZS5cclxuKi9cclxuY29uc3QgZm9sZENvZGUgPSB2aWV3ID0+IHtcclxuICAgIGZvciAobGV0IGxpbmUgb2Ygc2VsZWN0ZWRMaW5lcyh2aWV3KSkge1xyXG4gICAgICAgIGxldCByYW5nZSA9IGZvbGRhYmxlKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50byk7XHJcbiAgICAgICAgaWYgKHJhbmdlKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBtYXliZUVuYWJsZSh2aWV3LnN0YXRlLCBbZm9sZEVmZmVjdC5vZihyYW5nZSksIGFubm91bmNlRm9sZCh2aWV3LCByYW5nZSldKSB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG4vKipcclxuVW5mb2xkIGZvbGRlZCByYW5nZXMgb24gc2VsZWN0ZWQgbGluZXMuXHJcbiovXHJcbmNvbnN0IHVuZm9sZENvZGUgPSB2aWV3ID0+IHtcclxuICAgIGlmICghdmlldy5zdGF0ZS5maWVsZChmb2xkU3RhdGUsIGZhbHNlKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBsZXQgZWZmZWN0cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgbGluZSBvZiBzZWxlY3RlZExpbmVzKHZpZXcpKSB7XHJcbiAgICAgICAgbGV0IGZvbGRlZCA9IGZpbmRGb2xkKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50byk7XHJcbiAgICAgICAgaWYgKGZvbGRlZClcclxuICAgICAgICAgICAgZWZmZWN0cy5wdXNoKHVuZm9sZEVmZmVjdC5vZihmb2xkZWQpLCBhbm5vdW5jZUZvbGQodmlldywgZm9sZGVkLCBmYWxzZSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVmZmVjdHMubGVuZ3RoKVxyXG4gICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzIH0pO1xyXG4gICAgcmV0dXJuIGVmZmVjdHMubGVuZ3RoID4gMDtcclxufTtcclxuZnVuY3Rpb24gYW5ub3VuY2VGb2xkKHZpZXcsIHJhbmdlLCBmb2xkID0gdHJ1ZSkge1xyXG4gICAgbGV0IGxpbmVGcm9tID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHJhbmdlLmZyb20pLm51bWJlciwgbGluZVRvID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHJhbmdlLnRvKS5udW1iZXI7XHJcbiAgICByZXR1cm4gRWRpdG9yVmlldy5hbm5vdW5jZS5vZihgJHt2aWV3LnN0YXRlLnBocmFzZShmb2xkID8gXCJGb2xkZWQgbGluZXNcIiA6IFwiVW5mb2xkZWQgbGluZXNcIil9ICR7bGluZUZyb219ICR7dmlldy5zdGF0ZS5waHJhc2UoXCJ0b1wiKX0gJHtsaW5lVG99LmApO1xyXG59XHJcbi8qKlxyXG5Gb2xkIGFsbCB0b3AtbGV2ZWwgZm9sZGFibGUgcmFuZ2VzLiBOb3RlIHRoYXQsIGluIG1vc3QgY2FzZXMsXHJcbmZvbGRpbmcgaW5mb3JtYXRpb24gd2lsbCBkZXBlbmQgb24gdGhlIFtzeW50YXhcclxudHJlZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5zeW50YXhUcmVlKSwgYW5kIGZvbGRpbmcgZXZlcnl0aGluZyBtYXkgbm90IHdvcmtcclxucmVsaWFibHkgd2hlbiB0aGUgZG9jdW1lbnQgaGFzbid0IGJlZW4gZnVsbHkgcGFyc2VkIChlaXRoZXJcclxuYmVjYXVzZSB0aGUgZWRpdG9yIHN0YXRlIHdhcyBvbmx5IGp1c3QgaW5pdGlhbGl6ZWQsIG9yIGJlY2F1c2UgdGhlXHJcbmRvY3VtZW50IGlzIHNvIGJpZyB0aGF0IHRoZSBwYXJzZXIgZGVjaWRlZCBub3QgdG8gcGFyc2UgaXRcclxuZW50aXJlbHkpLlxyXG4qL1xyXG5jb25zdCBmb2xkQWxsID0gdmlldyA9PiB7XHJcbiAgICBsZXQgeyBzdGF0ZSB9ID0gdmlldywgZWZmZWN0cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgc3RhdGUuZG9jLmxlbmd0aDspIHtcclxuICAgICAgICBsZXQgbGluZSA9IHZpZXcubGluZUJsb2NrQXQocG9zKSwgcmFuZ2UgPSBmb2xkYWJsZShzdGF0ZSwgbGluZS5mcm9tLCBsaW5lLnRvKTtcclxuICAgICAgICBpZiAocmFuZ2UpXHJcbiAgICAgICAgICAgIGVmZmVjdHMucHVzaChmb2xkRWZmZWN0Lm9mKHJhbmdlKSk7XHJcbiAgICAgICAgcG9zID0gKHJhbmdlID8gdmlldy5saW5lQmxvY2tBdChyYW5nZS50bykgOiBsaW5lKS50byArIDE7XHJcbiAgICB9XHJcbiAgICBpZiAoZWZmZWN0cy5sZW5ndGgpXHJcbiAgICAgICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IG1heWJlRW5hYmxlKHZpZXcuc3RhdGUsIGVmZmVjdHMpIH0pO1xyXG4gICAgcmV0dXJuICEhZWZmZWN0cy5sZW5ndGg7XHJcbn07XHJcbi8qKlxyXG5VbmZvbGQgYWxsIGZvbGRlZCBjb2RlLlxyXG4qL1xyXG5jb25zdCB1bmZvbGRBbGwgPSB2aWV3ID0+IHtcclxuICAgIGxldCBmaWVsZCA9IHZpZXcuc3RhdGUuZmllbGQoZm9sZFN0YXRlLCBmYWxzZSk7XHJcbiAgICBpZiAoIWZpZWxkIHx8ICFmaWVsZC5zaXplKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGxldCBlZmZlY3RzID0gW107XHJcbiAgICBmaWVsZC5iZXR3ZWVuKDAsIHZpZXcuc3RhdGUuZG9jLmxlbmd0aCwgKGZyb20sIHRvKSA9PiB7IGVmZmVjdHMucHVzaCh1bmZvbGRFZmZlY3Qub2YoeyBmcm9tLCB0byB9KSk7IH0pO1xyXG4gICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHMgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuLyoqXHJcbkRlZmF1bHQgZm9sZC1yZWxhdGVkIGtleSBiaW5kaW5ncy5cclxuXHJcbiAtIEN0cmwtU2hpZnQtWyAoQ21kLUFsdC1bIG9uIG1hY09TKTogW2Bmb2xkQ29kZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZm9sZENvZGUpLlxyXG4gLSBDdHJsLVNoaWZ0LV0gKENtZC1BbHQtXSBvbiBtYWNPUyk6IFtgdW5mb2xkQ29kZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UudW5mb2xkQ29kZSkuXHJcbiAtIEN0cmwtQWx0LVs6IFtgZm9sZEFsbGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZm9sZEFsbCkuXHJcbiAtIEN0cmwtQWx0LV06IFtgdW5mb2xkQWxsYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS51bmZvbGRBbGwpLlxyXG4qL1xyXG5jb25zdCBmb2xkS2V5bWFwID0gW1xyXG4gICAgeyBrZXk6IFwiQ3RybC1TaGlmdC1bXCIsIG1hYzogXCJDbWQtQWx0LVtcIiwgcnVuOiBmb2xkQ29kZSB9LFxyXG4gICAgeyBrZXk6IFwiQ3RybC1TaGlmdC1dXCIsIG1hYzogXCJDbWQtQWx0LV1cIiwgcnVuOiB1bmZvbGRDb2RlIH0sXHJcbiAgICB7IGtleTogXCJDdHJsLUFsdC1bXCIsIHJ1bjogZm9sZEFsbCB9LFxyXG4gICAgeyBrZXk6IFwiQ3RybC1BbHQtXVwiLCBydW46IHVuZm9sZEFsbCB9XHJcbl07XHJcbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XHJcbiAgICBwbGFjZWhvbGRlckRPTTogbnVsbCxcclxuICAgIHBsYWNlaG9sZGVyVGV4dDogXCLigKZcIlxyXG59O1xyXG5jb25zdCBmb2xkQ29uZmlnID0gLypAX19QVVJFX18qL0ZhY2V0LmRlZmluZSh7XHJcbiAgICBjb21iaW5lKHZhbHVlcykgeyByZXR1cm4gY29tYmluZUNvbmZpZyh2YWx1ZXMsIGRlZmF1bHRDb25maWcpOyB9XHJcbn0pO1xyXG4vKipcclxuQ3JlYXRlIGFuIGV4dGVuc2lvbiB0aGF0IGNvbmZpZ3VyZXMgY29kZSBmb2xkaW5nLlxyXG4qL1xyXG5mdW5jdGlvbiBjb2RlRm9sZGluZyhjb25maWcpIHtcclxuICAgIGxldCByZXN1bHQgPSBbZm9sZFN0YXRlLCBiYXNlVGhlbWUkMV07XHJcbiAgICBpZiAoY29uZmlnKVxyXG4gICAgICAgIHJlc3VsdC5wdXNoKGZvbGRDb25maWcub2YoY29uZmlnKSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmNvbnN0IGZvbGRXaWRnZXQgPSAvKkBfX1BVUkVfXyovRGVjb3JhdGlvbi5yZXBsYWNlKHsgd2lkZ2V0OiAvKkBfX1BVUkVfXyovbmV3IGNsYXNzIGV4dGVuZHMgV2lkZ2V0VHlwZSB7XHJcbiAgICAgICAgdG9ET00odmlldykge1xyXG4gICAgICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gdmlldywgY29uZiA9IHN0YXRlLmZhY2V0KGZvbGRDb25maWcpO1xyXG4gICAgICAgICAgICBsZXQgb25jbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSB2aWV3LmxpbmVCbG9ja0F0KHZpZXcucG9zQXRET00oZXZlbnQudGFyZ2V0KSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm9sZGVkID0gZmluZEZvbGQodmlldy5zdGF0ZSwgbGluZS5mcm9tLCBsaW5lLnRvKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb2xkZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHVuZm9sZEVmZmVjdC5vZihmb2xkZWQpIH0pO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGNvbmYucGxhY2Vob2xkZXJET00pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZi5wbGFjZWhvbGRlckRPTSh2aWV3LCBvbmNsaWNrKTtcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGNvbmYucGxhY2Vob2xkZXJUZXh0O1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgc3RhdGUucGhyYXNlKFwiZm9sZGVkIGNvZGVcIikpO1xyXG4gICAgICAgICAgICBlbGVtZW50LnRpdGxlID0gc3RhdGUucGhyYXNlKFwidW5mb2xkXCIpO1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFwiY20tZm9sZFBsYWNlaG9sZGVyXCI7XHJcbiAgICAgICAgICAgIGVsZW1lbnQub25jbGljayA9IG9uY2xpY2s7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH0gfSk7XHJcbmNvbnN0IGZvbGRHdXR0ZXJEZWZhdWx0cyA9IHtcclxuICAgIG9wZW5UZXh0OiBcIuKMhFwiLFxyXG4gICAgY2xvc2VkVGV4dDogXCLigLpcIixcclxuICAgIG1hcmtlckRPTTogbnVsbCxcclxuICAgIGRvbUV2ZW50SGFuZGxlcnM6IHt9LFxyXG4gICAgZm9sZGluZ0NoYW5nZWQ6ICgpID0+IGZhbHNlXHJcbn07XHJcbmNsYXNzIEZvbGRNYXJrZXIgZXh0ZW5kcyBHdXR0ZXJNYXJrZXIge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBvcGVuKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLm9wZW4gPSBvcGVuO1xyXG4gICAgfVxyXG4gICAgZXEob3RoZXIpIHsgcmV0dXJuIHRoaXMuY29uZmlnID09IG90aGVyLmNvbmZpZyAmJiB0aGlzLm9wZW4gPT0gb3RoZXIub3BlbjsgfVxyXG4gICAgdG9ET00odmlldykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5tYXJrZXJET00pXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5tYXJrZXJET00odGhpcy5vcGVuKTtcclxuICAgICAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSB0aGlzLm9wZW4gPyB0aGlzLmNvbmZpZy5vcGVuVGV4dCA6IHRoaXMuY29uZmlnLmNsb3NlZFRleHQ7XHJcbiAgICAgICAgc3Bhbi50aXRsZSA9IHZpZXcuc3RhdGUucGhyYXNlKHRoaXMub3BlbiA/IFwiRm9sZCBsaW5lXCIgOiBcIlVuZm9sZCBsaW5lXCIpO1xyXG4gICAgICAgIHJldHVybiBzcGFuO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG5DcmVhdGUgYW4gZXh0ZW5zaW9uIHRoYXQgcmVnaXN0ZXJzIGEgZm9sZCBndXR0ZXIsIHdoaWNoIHNob3dzIGFcclxuZm9sZCBzdGF0dXMgaW5kaWNhdG9yIGJlZm9yZSBmb2xkYWJsZSBsaW5lcyAod2hpY2ggY2FuIGJlIGNsaWNrZWRcclxudG8gZm9sZCBvciB1bmZvbGQgdGhlIGxpbmUpLlxyXG4qL1xyXG5mdW5jdGlvbiBmb2xkR3V0dGVyKGNvbmZpZyA9IHt9KSB7XHJcbiAgICBsZXQgZnVsbENvbmZpZyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZm9sZEd1dHRlckRlZmF1bHRzKSwgY29uZmlnKTtcclxuICAgIGxldCBjYW5Gb2xkID0gbmV3IEZvbGRNYXJrZXIoZnVsbENvbmZpZywgdHJ1ZSksIGNhblVuZm9sZCA9IG5ldyBGb2xkTWFya2VyKGZ1bGxDb25maWcsIGZhbHNlKTtcclxuICAgIGxldCBtYXJrZXJzID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5mcm9tID0gdmlldy52aWV3cG9ydC5mcm9tO1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtlcnMgPSB0aGlzLmJ1aWxkTWFya2Vycyh2aWV3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlLmRvY0NoYW5nZWQgfHwgdXBkYXRlLnZpZXdwb3J0Q2hhbmdlZCB8fFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlLnN0YXJ0U3RhdGUuZmFjZXQobGFuZ3VhZ2UpICE9IHVwZGF0ZS5zdGF0ZS5mYWNldChsYW5ndWFnZSkgfHxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZS5zdGFydFN0YXRlLmZpZWxkKGZvbGRTdGF0ZSwgZmFsc2UpICE9IHVwZGF0ZS5zdGF0ZS5maWVsZChmb2xkU3RhdGUsIGZhbHNlKSB8fFxyXG4gICAgICAgICAgICAgICAgc3ludGF4VHJlZSh1cGRhdGUuc3RhcnRTdGF0ZSkgIT0gc3ludGF4VHJlZSh1cGRhdGUuc3RhdGUpIHx8XHJcbiAgICAgICAgICAgICAgICBmdWxsQ29uZmlnLmZvbGRpbmdDaGFuZ2VkKHVwZGF0ZSkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnMgPSB0aGlzLmJ1aWxkTWFya2Vycyh1cGRhdGUudmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJ1aWxkTWFya2Vycyh2aWV3KSB7XHJcbiAgICAgICAgICAgIGxldCBidWlsZGVyID0gbmV3IFJhbmdlU2V0QnVpbGRlcigpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIHZpZXcudmlld3BvcnRMaW5lQmxvY2tzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWFyayA9IGZpbmRGb2xkKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50bykgPyBjYW5VbmZvbGRcclxuICAgICAgICAgICAgICAgICAgICA6IGZvbGRhYmxlKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50bykgPyBjYW5Gb2xkIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChtYXJrKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKGxpbmUuZnJvbSwgbGluZS5mcm9tLCBtYXJrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGxldCB7IGRvbUV2ZW50SGFuZGxlcnMgfSA9IGZ1bGxDb25maWc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIG1hcmtlcnMsXHJcbiAgICAgICAgZ3V0dGVyKHtcclxuICAgICAgICAgICAgY2xhc3M6IFwiY20tZm9sZEd1dHRlclwiLFxyXG4gICAgICAgICAgICBtYXJrZXJzKHZpZXcpIHsgdmFyIF9hOyByZXR1cm4gKChfYSA9IHZpZXcucGx1Z2luKG1hcmtlcnMpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFya2VycykgfHwgUmFuZ2VTZXQuZW1wdHk7IH0sXHJcbiAgICAgICAgICAgIGluaXRpYWxTcGFjZXIoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZvbGRNYXJrZXIoZnVsbENvbmZpZywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkb21FdmVudEhhbmRsZXJzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRvbUV2ZW50SGFuZGxlcnMpLCB7IGNsaWNrOiAodmlldywgbGluZSwgZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9tRXZlbnRIYW5kbGVycy5jbGljayAmJiBkb21FdmVudEhhbmRsZXJzLmNsaWNrKHZpZXcsIGxpbmUsIGV2ZW50KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvbGRlZCA9IGZpbmRGb2xkKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50byk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvbGRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdW5mb2xkRWZmZWN0Lm9mKGZvbGRlZCkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZ2UgPSBmb2xkYWJsZSh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogZm9sZEVmZmVjdC5vZihyYW5nZSkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IH0pXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgY29kZUZvbGRpbmcoKVxyXG4gICAgXTtcclxufVxyXG5jb25zdCBiYXNlVGhlbWUkMSA9IC8qQF9fUFVSRV9fKi9FZGl0b3JWaWV3LmJhc2VUaGVtZSh7XHJcbiAgICBcIi5jbS1mb2xkUGxhY2Vob2xkZXJcIjoge1xyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjZWVlXCIsXHJcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjZGRkXCIsXHJcbiAgICAgICAgY29sb3I6IFwiIzg4OFwiLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogXCIuMmVtXCIsXHJcbiAgICAgICAgbWFyZ2luOiBcIjAgMXB4XCIsXHJcbiAgICAgICAgcGFkZGluZzogXCIwIDFweFwiLFxyXG4gICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCJcclxuICAgIH0sXHJcbiAgICBcIi5jbS1mb2xkR3V0dGVyIHNwYW5cIjoge1xyXG4gICAgICAgIHBhZGRpbmc6IFwiMCAxcHhcIixcclxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbkEgaGlnaGxpZ2h0IHN0eWxlIGFzc29jaWF0ZXMgQ1NTIHN0eWxlcyB3aXRoIGhpZ2xpZ2h0aW5nXHJcblt0YWdzXShodHRwczovL2xlemVyLmNvZGVtaXJyb3IubmV0L2RvY3MvcmVmI2hpZ2hsaWdodC5UYWcpLlxyXG4qL1xyXG5jbGFzcyBIaWdobGlnaHRTdHlsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKlxyXG4gICAgVGhlIHRhZyBzdHlsZXMgdXNlZCB0byBjcmVhdGUgdGhpcyBoaWdobGlnaHQgc3R5bGUuXHJcbiAgICAqL1xyXG4gICAgc3BlY3MsIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLnNwZWNzID0gc3BlY3M7XHJcbiAgICAgICAgbGV0IG1vZFNwZWM7XHJcbiAgICAgICAgZnVuY3Rpb24gZGVmKHNwZWMpIHtcclxuICAgICAgICAgICAgbGV0IGNscyA9IFN0eWxlTW9kdWxlLm5ld05hbWUoKTtcclxuICAgICAgICAgICAgKG1vZFNwZWMgfHwgKG1vZFNwZWMgPSBPYmplY3QuY3JlYXRlKG51bGwpKSlbXCIuXCIgKyBjbHNdID0gc3BlYztcclxuICAgICAgICAgICAgcmV0dXJuIGNscztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWxsID0gdHlwZW9mIG9wdGlvbnMuYWxsID09IFwic3RyaW5nXCIgPyBvcHRpb25zLmFsbCA6IG9wdGlvbnMuYWxsID8gZGVmKG9wdGlvbnMuYWxsKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBzY29wZU9wdCA9IG9wdGlvbnMuc2NvcGU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlT3B0IGluc3RhbmNlb2YgTGFuZ3VhZ2UgPyAodHlwZSkgPT4gdHlwZS5wcm9wKGxhbmd1YWdlRGF0YVByb3ApID09IHNjb3BlT3B0LmRhdGFcclxuICAgICAgICAgICAgOiBzY29wZU9wdCA/ICh0eXBlKSA9PiB0eXBlID09IHNjb3BlT3B0IDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuc3R5bGUgPSB0YWdIaWdobGlnaHRlcihzcGVjcy5tYXAoc3R5bGUgPT4gKHtcclxuICAgICAgICAgICAgdGFnOiBzdHlsZS50YWcsXHJcbiAgICAgICAgICAgIGNsYXNzOiBzdHlsZS5jbGFzcyB8fCBkZWYoT2JqZWN0LmFzc2lnbih7fSwgc3R5bGUsIHsgdGFnOiBudWxsIH0pKVxyXG4gICAgICAgIH0pKSwge1xyXG4gICAgICAgICAgICBhbGwsXHJcbiAgICAgICAgfSkuc3R5bGU7XHJcbiAgICAgICAgdGhpcy5tb2R1bGUgPSBtb2RTcGVjID8gbmV3IFN0eWxlTW9kdWxlKG1vZFNwZWMpIDogbnVsbDtcclxuICAgICAgICB0aGlzLnRoZW1lVHlwZSA9IG9wdGlvbnMudGhlbWVUeXBlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBDcmVhdGUgYSBoaWdobGlnaHRlciBzdHlsZSB0aGF0IGFzc29jaWF0ZXMgdGhlIGdpdmVuIHN0eWxlcyB0b1xyXG4gICAgdGhlIGdpdmVuIHRhZ3MuIFRoZSBzcGVjcyBtdXN0IGJlIG9iamVjdHMgdGhhdCBob2xkIGEgc3R5bGUgdGFnXHJcbiAgICBvciBhcnJheSBvZiB0YWdzIGluIHRoZWlyIGB0YWdgIHByb3BlcnR5LCBhbmQgZWl0aGVyIGEgc2luZ2xlXHJcbiAgICBgY2xhc3NgIHByb3BlcnR5IHByb3ZpZGluZyBhIHN0YXRpYyBDU1MgY2xhc3MgKGZvciBoaWdobGlnaHRlclxyXG4gICAgdGhhdCByZWx5IG9uIGV4dGVybmFsIHN0eWxpbmcpLCBvciBhXHJcbiAgICBbYHN0eWxlLW1vZGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJpam5oL3N0eWxlLW1vZCNkb2N1bWVudGF0aW9uKS1zdHlsZVxyXG4gICAgc2V0IG9mIENTUyBwcm9wZXJ0aWVzICh3aGljaCBkZWZpbmUgdGhlIHN0eWxpbmcgZm9yIHRob3NlIHRhZ3MpLlxyXG4gICAgXHJcbiAgICBUaGUgQ1NTIHJ1bGVzIGNyZWF0ZWQgZm9yIGEgaGlnaGxpZ2h0ZXIgd2lsbCBiZSBlbWl0dGVkIGluIHRoZVxyXG4gICAgb3JkZXIgb2YgdGhlIHNwZWMncyBwcm9wZXJ0aWVzLiBUaGF0IG1lYW5zIHRoYXQgZm9yIGVsZW1lbnRzIHRoYXRcclxuICAgIGhhdmUgbXVsdGlwbGUgdGFncyBhc3NvY2lhdGVkIHdpdGggdGhlbSwgc3R5bGVzIGRlZmluZWQgZnVydGhlclxyXG4gICAgZG93biBpbiB0aGUgbGlzdCB3aWxsIGhhdmUgYSBoaWdoZXIgQ1NTIHByZWNlZGVuY2UgdGhhbiBzdHlsZXNcclxuICAgIGRlZmluZWQgZWFybGllci5cclxuICAgICovXHJcbiAgICBzdGF0aWMgZGVmaW5lKHNwZWNzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHRTdHlsZShzcGVjcywgb3B0aW9ucyB8fCB7fSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgaGlnaGxpZ2h0ZXJGYWNldCA9IC8qQF9fUFVSRV9fKi9GYWNldC5kZWZpbmUoKTtcclxuY29uc3QgZmFsbGJhY2tIaWdobGlnaHRlciA9IC8qQF9fUFVSRV9fKi9GYWNldC5kZWZpbmUoe1xyXG4gICAgY29tYmluZSh2YWx1ZXMpIHsgcmV0dXJuIHZhbHVlcy5sZW5ndGggPyBbdmFsdWVzWzBdXSA6IG51bGw7IH1cclxufSk7XHJcbmZ1bmN0aW9uIGdldEhpZ2hsaWdodGVycyhzdGF0ZSkge1xyXG4gICAgbGV0IG1haW4gPSBzdGF0ZS5mYWNldChoaWdobGlnaHRlckZhY2V0KTtcclxuICAgIHJldHVybiBtYWluLmxlbmd0aCA/IG1haW4gOiBzdGF0ZS5mYWNldChmYWxsYmFja0hpZ2hsaWdodGVyKTtcclxufVxyXG4vKipcclxuV3JhcCBhIGhpZ2hsaWdodGVyIGluIGFuIGVkaXRvciBleHRlbnNpb24gdGhhdCB1c2VzIGl0IHRvIGFwcGx5XHJcbnN5bnRheCBoaWdobGlnaHRpbmcgdG8gdGhlIGVkaXRvciBjb250ZW50LlxyXG5cclxuV2hlbiBtdWx0aXBsZSAobm9uLWZhbGxiYWNrKSBzdHlsZXMgYXJlIHByb3ZpZGVkLCB0aGUgc3R5bGluZ1xyXG5hcHBsaWVkIGlzIHRoZSB1bmlvbiBvZiB0aGUgY2xhc3NlcyB0aGV5IGVtaXQuXHJcbiovXHJcbmZ1bmN0aW9uIHN5bnRheEhpZ2hsaWdodGluZyhoaWdobGlnaHRlciwgb3B0aW9ucykge1xyXG4gICAgbGV0IGV4dCA9IFt0cmVlSGlnaGxpZ2h0ZXJdLCB0aGVtZVR5cGU7XHJcbiAgICBpZiAoaGlnaGxpZ2h0ZXIgaW5zdGFuY2VvZiBIaWdobGlnaHRTdHlsZSkge1xyXG4gICAgICAgIGlmIChoaWdobGlnaHRlci5tb2R1bGUpXHJcbiAgICAgICAgICAgIGV4dC5wdXNoKEVkaXRvclZpZXcuc3R5bGVNb2R1bGUub2YoaGlnaGxpZ2h0ZXIubW9kdWxlKSk7XHJcbiAgICAgICAgdGhlbWVUeXBlID0gaGlnaGxpZ2h0ZXIudGhlbWVUeXBlO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mYWxsYmFjaylcclxuICAgICAgICBleHQucHVzaChmYWxsYmFja0hpZ2hsaWdodGVyLm9mKGhpZ2hsaWdodGVyKSk7XHJcbiAgICBlbHNlIGlmICh0aGVtZVR5cGUpXHJcbiAgICAgICAgZXh0LnB1c2goaGlnaGxpZ2h0ZXJGYWNldC5jb21wdXRlTihbRWRpdG9yVmlldy5kYXJrVGhlbWVdLCBzdGF0ZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5mYWNldChFZGl0b3JWaWV3LmRhcmtUaGVtZSkgPT0gKHRoZW1lVHlwZSA9PSBcImRhcmtcIikgPyBbaGlnaGxpZ2h0ZXJdIDogW107XHJcbiAgICAgICAgfSkpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIGV4dC5wdXNoKGhpZ2hsaWdodGVyRmFjZXQub2YoaGlnaGxpZ2h0ZXIpKTtcclxuICAgIHJldHVybiBleHQ7XHJcbn1cclxuLyoqXHJcblJldHVybnMgdGhlIENTUyBjbGFzc2VzIChpZiBhbnkpIHRoYXQgdGhlIGhpZ2hsaWdodGVycyBhY3RpdmUgaW5cclxudGhlIHN0YXRlIHdvdWxkIGFzc2lnbiB0byB0aGUgZ2l2ZW4gc3R5bGVcclxuW3RhZ3NdKGh0dHBzOi8vbGV6ZXIuY29kZW1pcnJvci5uZXQvZG9jcy9yZWYjaGlnaGxpZ2h0LlRhZykgYW5kXHJcbihvcHRpb25hbCkgbGFuZ3VhZ2VcclxuW3Njb3BlXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkhpZ2hsaWdodFN0eWxlXmRlZmluZV5vcHRpb25zLnNjb3BlKS5cclxuKi9cclxuZnVuY3Rpb24gaGlnaGxpZ2h0aW5nRm9yKHN0YXRlLCB0YWdzLCBzY29wZSkge1xyXG4gICAgbGV0IGhpZ2hsaWdodGVycyA9IGdldEhpZ2hsaWdodGVycyhzdGF0ZSk7XHJcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgIGlmIChoaWdobGlnaHRlcnMpXHJcbiAgICAgICAgZm9yIChsZXQgaGlnaGxpZ2h0ZXIgb2YgaGlnaGxpZ2h0ZXJzKSB7XHJcbiAgICAgICAgICAgIGlmICghaGlnaGxpZ2h0ZXIuc2NvcGUgfHwgc2NvcGUgJiYgaGlnaGxpZ2h0ZXIuc2NvcGUoc2NvcGUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2xzID0gaGlnaGxpZ2h0ZXIuc3R5bGUodGFncyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xzKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCA/IHJlc3VsdCArIFwiIFwiICsgY2xzIDogY2xzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5jbGFzcyBUcmVlSGlnaGxpZ2h0ZXIge1xyXG4gICAgY29uc3RydWN0b3Iodmlldykge1xyXG4gICAgICAgIHRoaXMubWFya0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICB0aGlzLnRyZWUgPSBzeW50YXhUcmVlKHZpZXcuc3RhdGUpO1xyXG4gICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmJ1aWxkRGVjbyh2aWV3LCBnZXRIaWdobGlnaHRlcnModmlldy5zdGF0ZSkpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKHVwZGF0ZSkge1xyXG4gICAgICAgIGxldCB0cmVlID0gc3ludGF4VHJlZSh1cGRhdGUuc3RhdGUpLCBoaWdobGlnaHRlcnMgPSBnZXRIaWdobGlnaHRlcnModXBkYXRlLnN0YXRlKTtcclxuICAgICAgICBsZXQgc3R5bGVDaGFuZ2UgPSBoaWdobGlnaHRlcnMgIT0gZ2V0SGlnaGxpZ2h0ZXJzKHVwZGF0ZS5zdGFydFN0YXRlKTtcclxuICAgICAgICBpZiAodHJlZS5sZW5ndGggPCB1cGRhdGUudmlldy52aWV3cG9ydC50byAmJiAhc3R5bGVDaGFuZ2UgJiYgdHJlZS50eXBlID09IHRoaXMudHJlZS50eXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmRlY29yYXRpb25zLm1hcCh1cGRhdGUuY2hhbmdlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRyZWUgIT0gdGhpcy50cmVlIHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQgfHwgc3R5bGVDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy50cmVlID0gdHJlZTtcclxuICAgICAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IHRoaXMuYnVpbGREZWNvKHVwZGF0ZS52aWV3LCBoaWdobGlnaHRlcnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGJ1aWxkRGVjbyh2aWV3LCBoaWdobGlnaHRlcnMpIHtcclxuICAgICAgICBpZiAoIWhpZ2hsaWdodGVycyB8fCAhdGhpcy50cmVlLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIERlY29yYXRpb24ubm9uZTtcclxuICAgICAgICBsZXQgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXIoKTtcclxuICAgICAgICBmb3IgKGxldCB7IGZyb20sIHRvIH0gb2Ygdmlldy52aXNpYmxlUmFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodFRyZWUodGhpcy50cmVlLCBoaWdobGlnaHRlcnMsIChmcm9tLCB0bywgc3R5bGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKGZyb20sIHRvLCB0aGlzLm1hcmtDYWNoZVtzdHlsZV0gfHwgKHRoaXMubWFya0NhY2hlW3N0eWxlXSA9IERlY29yYXRpb24ubWFyayh7IGNsYXNzOiBzdHlsZSB9KSkpO1xyXG4gICAgICAgICAgICB9LCBmcm9tLCB0byk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHRyZWVIaWdobGlnaHRlciA9IC8qQF9fUFVSRV9fKi9QcmVjLmhpZ2goLypAX19QVVJFX18qL1ZpZXdQbHVnaW4uZnJvbUNsYXNzKFRyZWVIaWdobGlnaHRlciwge1xyXG4gICAgZGVjb3JhdGlvbnM6IHYgPT4gdi5kZWNvcmF0aW9uc1xyXG59KSk7XHJcbi8qKlxyXG5BIGRlZmF1bHQgaGlnaGxpZ2h0IHN0eWxlICh3b3JrcyB3ZWxsIHdpdGggbGlnaHQgdGhlbWVzKS5cclxuKi9cclxuY29uc3QgZGVmYXVsdEhpZ2hsaWdodFN0eWxlID0gLypAX19QVVJFX18qL0hpZ2hsaWdodFN0eWxlLmRlZmluZShbXHJcbiAgICB7IHRhZzogdGFncy5tZXRhLFxyXG4gICAgICAgIGNvbG9yOiBcIiM0MDQ3NDBcIiB9LFxyXG4gICAgeyB0YWc6IHRhZ3MubGluayxcclxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIiB9LFxyXG4gICAgeyB0YWc6IHRhZ3MuaGVhZGluZyxcclxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIixcclxuICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIiB9LFxyXG4gICAgeyB0YWc6IHRhZ3MuZW1waGFzaXMsXHJcbiAgICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiIH0sXHJcbiAgICB7IHRhZzogdGFncy5zdHJvbmcsXHJcbiAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIgfSxcclxuICAgIHsgdGFnOiB0YWdzLnN0cmlrZXRocm91Z2gsXHJcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwibGluZS10aHJvdWdoXCIgfSxcclxuICAgIHsgdGFnOiB0YWdzLmtleXdvcmQsXHJcbiAgICAgICAgY29sb3I6IFwiIzcwOFwiIH0sXHJcbiAgICB7IHRhZzogW3RhZ3MuYXRvbSwgdGFncy5ib29sLCB0YWdzLnVybCwgdGFncy5jb250ZW50U2VwYXJhdG9yLCB0YWdzLmxhYmVsTmFtZV0sXHJcbiAgICAgICAgY29sb3I6IFwiIzIxOVwiIH0sXHJcbiAgICB7IHRhZzogW3RhZ3MubGl0ZXJhbCwgdGFncy5pbnNlcnRlZF0sXHJcbiAgICAgICAgY29sb3I6IFwiIzE2NFwiIH0sXHJcbiAgICB7IHRhZzogW3RhZ3Muc3RyaW5nLCB0YWdzLmRlbGV0ZWRdLFxyXG4gICAgICAgIGNvbG9yOiBcIiNhMTFcIiB9LFxyXG4gICAgeyB0YWc6IFt0YWdzLnJlZ2V4cCwgdGFncy5lc2NhcGUsIC8qQF9fUFVSRV9fKi90YWdzLnNwZWNpYWwodGFncy5zdHJpbmcpXSxcclxuICAgICAgICBjb2xvcjogXCIjZTQwXCIgfSxcclxuICAgIHsgdGFnOiAvKkBfX1BVUkVfXyovdGFncy5kZWZpbml0aW9uKHRhZ3MudmFyaWFibGVOYW1lKSxcclxuICAgICAgICBjb2xvcjogXCIjMDBmXCIgfSxcclxuICAgIHsgdGFnOiAvKkBfX1BVUkVfXyovdGFncy5sb2NhbCh0YWdzLnZhcmlhYmxlTmFtZSksXHJcbiAgICAgICAgY29sb3I6IFwiIzMwYVwiIH0sXHJcbiAgICB7IHRhZzogW3RhZ3MudHlwZU5hbWUsIHRhZ3MubmFtZXNwYWNlXSxcclxuICAgICAgICBjb2xvcjogXCIjMDg1XCIgfSxcclxuICAgIHsgdGFnOiB0YWdzLmNsYXNzTmFtZSxcclxuICAgICAgICBjb2xvcjogXCIjMTY3XCIgfSxcclxuICAgIHsgdGFnOiBbLypAX19QVVJFX18qL3RhZ3Muc3BlY2lhbCh0YWdzLnZhcmlhYmxlTmFtZSksIHRhZ3MubWFjcm9OYW1lXSxcclxuICAgICAgICBjb2xvcjogXCIjMjU2XCIgfSxcclxuICAgIHsgdGFnOiAvKkBfX1BVUkVfXyovdGFncy5kZWZpbml0aW9uKHRhZ3MucHJvcGVydHlOYW1lKSxcclxuICAgICAgICBjb2xvcjogXCIjMDBjXCIgfSxcclxuICAgIHsgdGFnOiB0YWdzLmNvbW1lbnQsXHJcbiAgICAgICAgY29sb3I6IFwiIzk0MFwiIH0sXHJcbiAgICB7IHRhZzogdGFncy5pbnZhbGlkLFxyXG4gICAgICAgIGNvbG9yOiBcIiNmMDBcIiB9XHJcbl0pO1xyXG5cclxuY29uc3QgYmFzZVRoZW1lID0gLypAX19QVVJFX18qL0VkaXRvclZpZXcuYmFzZVRoZW1lKHtcclxuICAgIFwiJi5jbS1mb2N1c2VkIC5jbS1tYXRjaGluZ0JyYWNrZXRcIjogeyBiYWNrZ3JvdW5kQ29sb3I6IFwiIzMyOGM4MjUyXCIgfSxcclxuICAgIFwiJi5jbS1mb2N1c2VkIC5jbS1ub25tYXRjaGluZ0JyYWNrZXRcIjogeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI2JiNTU1NTQ0XCIgfVxyXG59KTtcclxuY29uc3QgRGVmYXVsdFNjYW5EaXN0ID0gMTAwMDAsIERlZmF1bHRCcmFja2V0cyA9IFwiKClbXXt9XCI7XHJcbmNvbnN0IGJyYWNrZXRNYXRjaGluZ0NvbmZpZyA9IC8qQF9fUFVSRV9fKi9GYWNldC5kZWZpbmUoe1xyXG4gICAgY29tYmluZShjb25maWdzKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVDb25maWcoY29uZmlncywge1xyXG4gICAgICAgICAgICBhZnRlckN1cnNvcjogdHJ1ZSxcclxuICAgICAgICAgICAgYnJhY2tldHM6IERlZmF1bHRCcmFja2V0cyxcclxuICAgICAgICAgICAgbWF4U2NhbkRpc3RhbmNlOiBEZWZhdWx0U2NhbkRpc3QsXHJcbiAgICAgICAgICAgIHJlbmRlck1hdGNoOiBkZWZhdWx0UmVuZGVyTWF0Y2hcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcbmNvbnN0IG1hdGNoaW5nTWFyayA9IC8qQF9fUFVSRV9fKi9EZWNvcmF0aW9uLm1hcmsoeyBjbGFzczogXCJjbS1tYXRjaGluZ0JyYWNrZXRcIiB9KSwgbm9ubWF0Y2hpbmdNYXJrID0gLypAX19QVVJFX18qL0RlY29yYXRpb24ubWFyayh7IGNsYXNzOiBcImNtLW5vbm1hdGNoaW5nQnJhY2tldFwiIH0pO1xyXG5mdW5jdGlvbiBkZWZhdWx0UmVuZGVyTWF0Y2gobWF0Y2gpIHtcclxuICAgIGxldCBkZWNvcmF0aW9ucyA9IFtdO1xyXG4gICAgbGV0IG1hcmsgPSBtYXRjaC5tYXRjaGVkID8gbWF0Y2hpbmdNYXJrIDogbm9ubWF0Y2hpbmdNYXJrO1xyXG4gICAgZGVjb3JhdGlvbnMucHVzaChtYXJrLnJhbmdlKG1hdGNoLnN0YXJ0LmZyb20sIG1hdGNoLnN0YXJ0LnRvKSk7XHJcbiAgICBpZiAobWF0Y2guZW5kKVxyXG4gICAgICAgIGRlY29yYXRpb25zLnB1c2gobWFyay5yYW5nZShtYXRjaC5lbmQuZnJvbSwgbWF0Y2guZW5kLnRvKSk7XHJcbiAgICByZXR1cm4gZGVjb3JhdGlvbnM7XHJcbn1cclxuY29uc3QgYnJhY2tldE1hdGNoaW5nU3RhdGUgPSAvKkBfX1BVUkVfXyovU3RhdGVGaWVsZC5kZWZpbmUoe1xyXG4gICAgY3JlYXRlKCkgeyByZXR1cm4gRGVjb3JhdGlvbi5ub25lOyB9LFxyXG4gICAgdXBkYXRlKGRlY28sIHRyKSB7XHJcbiAgICAgICAgaWYgKCF0ci5kb2NDaGFuZ2VkICYmICF0ci5zZWxlY3Rpb24pXHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvO1xyXG4gICAgICAgIGxldCBkZWNvcmF0aW9ucyA9IFtdO1xyXG4gICAgICAgIGxldCBjb25maWcgPSB0ci5zdGF0ZS5mYWNldChicmFja2V0TWF0Y2hpbmdDb25maWcpO1xyXG4gICAgICAgIGZvciAobGV0IHJhbmdlIG9mIHRyLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKCFyYW5nZS5lbXB0eSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBtYXRjaEJyYWNrZXRzKHRyLnN0YXRlLCByYW5nZS5oZWFkLCAtMSwgY29uZmlnKVxyXG4gICAgICAgICAgICAgICAgfHwgKHJhbmdlLmhlYWQgPiAwICYmIG1hdGNoQnJhY2tldHModHIuc3RhdGUsIHJhbmdlLmhlYWQgLSAxLCAxLCBjb25maWcpKVxyXG4gICAgICAgICAgICAgICAgfHwgKGNvbmZpZy5hZnRlckN1cnNvciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChtYXRjaEJyYWNrZXRzKHRyLnN0YXRlLCByYW5nZS5oZWFkLCAxLCBjb25maWcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyYW5nZS5oZWFkIDwgdHIuc3RhdGUuZG9jLmxlbmd0aCAmJiBtYXRjaEJyYWNrZXRzKHRyLnN0YXRlLCByYW5nZS5oZWFkICsgMSwgLTEsIGNvbmZpZykpKSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaClcclxuICAgICAgICAgICAgICAgIGRlY29yYXRpb25zID0gZGVjb3JhdGlvbnMuY29uY2F0KGNvbmZpZy5yZW5kZXJNYXRjaChtYXRjaCwgdHIuc3RhdGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIERlY29yYXRpb24uc2V0KGRlY29yYXRpb25zLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBwcm92aWRlOiBmID0+IEVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmKVxyXG59KTtcclxuY29uc3QgYnJhY2tldE1hdGNoaW5nVW5pcXVlID0gW1xyXG4gICAgYnJhY2tldE1hdGNoaW5nU3RhdGUsXHJcbiAgICBiYXNlVGhlbWVcclxuXTtcclxuLyoqXHJcbkNyZWF0ZSBhbiBleHRlbnNpb24gdGhhdCBlbmFibGVzIGJyYWNrZXQgbWF0Y2hpbmcuIFdoZW5ldmVyIHRoZVxyXG5jdXJzb3IgaXMgbmV4dCB0byBhIGJyYWNrZXQsIHRoYXQgYnJhY2tldCBhbmQgdGhlIG9uZSBpdCBtYXRjaGVzXHJcbmFyZSBoaWdobGlnaHRlZC4gT3IsIHdoZW4gbm8gbWF0Y2hpbmcgYnJhY2tldCBpcyBmb3VuZCwgYW5vdGhlclxyXG5oaWdobGlnaHRpbmcgc3R5bGUgaXMgdXNlZCB0byBpbmRpY2F0ZSB0aGlzLlxyXG4qL1xyXG5mdW5jdGlvbiBicmFja2V0TWF0Y2hpbmcoY29uZmlnID0ge30pIHtcclxuICAgIHJldHVybiBbYnJhY2tldE1hdGNoaW5nQ29uZmlnLm9mKGNvbmZpZyksIGJyYWNrZXRNYXRjaGluZ1VuaXF1ZV07XHJcbn1cclxuZnVuY3Rpb24gbWF0Y2hpbmdOb2Rlcyhub2RlLCBkaXIsIGJyYWNrZXRzKSB7XHJcbiAgICBsZXQgYnlQcm9wID0gbm9kZS5wcm9wKGRpciA8IDAgPyBOb2RlUHJvcC5vcGVuZWRCeSA6IE5vZGVQcm9wLmNsb3NlZEJ5KTtcclxuICAgIGlmIChieVByb3ApXHJcbiAgICAgICAgcmV0dXJuIGJ5UHJvcDtcclxuICAgIGlmIChub2RlLm5hbWUubGVuZ3RoID09IDEpIHtcclxuICAgICAgICBsZXQgaW5kZXggPSBicmFja2V0cy5pbmRleE9mKG5vZGUubmFtZSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEgJiYgaW5kZXggJSAyID09IChkaXIgPCAwID8gMSA6IDApKVxyXG4gICAgICAgICAgICByZXR1cm4gW2JyYWNrZXRzW2luZGV4ICsgZGlyXV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG4vKipcclxuRmluZCB0aGUgbWF0Y2hpbmcgYnJhY2tldCBmb3IgdGhlIHRva2VuIGF0IGBwb3NgLCBzY2FubmluZ1xyXG5kaXJlY3Rpb24gYGRpcmAuIE9ubHkgdGhlIGBicmFja2V0c2AgYW5kIGBtYXhTY2FuRGlzdGFuY2VgXHJcbnByb3BlcnRpZXMgYXJlIHVzZWQgZnJvbSBgY29uZmlnYCwgaWYgZ2l2ZW4uIFJldHVybnMgbnVsbCBpZiBub1xyXG5icmFja2V0IHdhcyBmb3VuZCBhdCBgcG9zYCwgb3IgYSBtYXRjaCByZXN1bHQgb3RoZXJ3aXNlLlxyXG4qL1xyXG5mdW5jdGlvbiBtYXRjaEJyYWNrZXRzKHN0YXRlLCBwb3MsIGRpciwgY29uZmlnID0ge30pIHtcclxuICAgIGxldCBtYXhTY2FuRGlzdGFuY2UgPSBjb25maWcubWF4U2NhbkRpc3RhbmNlIHx8IERlZmF1bHRTY2FuRGlzdCwgYnJhY2tldHMgPSBjb25maWcuYnJhY2tldHMgfHwgRGVmYXVsdEJyYWNrZXRzO1xyXG4gICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKHN0YXRlKSwgbm9kZSA9IHRyZWUucmVzb2x2ZUlubmVyKHBvcywgZGlyKTtcclxuICAgIGZvciAobGV0IGN1ciA9IG5vZGU7IGN1cjsgY3VyID0gY3VyLnBhcmVudCkge1xyXG4gICAgICAgIGxldCBtYXRjaGVzID0gbWF0Y2hpbmdOb2RlcyhjdXIudHlwZSwgZGlyLCBicmFja2V0cyk7XHJcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgY3VyLmZyb20gPCBjdXIudG8pXHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaE1hcmtlZEJyYWNrZXRzKHN0YXRlLCBwb3MsIGRpciwgY3VyLCBtYXRjaGVzLCBicmFja2V0cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hQbGFpbkJyYWNrZXRzKHN0YXRlLCBwb3MsIGRpciwgdHJlZSwgbm9kZS50eXBlLCBtYXhTY2FuRGlzdGFuY2UsIGJyYWNrZXRzKTtcclxufVxyXG5mdW5jdGlvbiBtYXRjaE1hcmtlZEJyYWNrZXRzKF9zdGF0ZSwgX3BvcywgZGlyLCB0b2tlbiwgbWF0Y2hpbmcsIGJyYWNrZXRzKSB7XHJcbiAgICBsZXQgcGFyZW50ID0gdG9rZW4ucGFyZW50LCBmaXJzdFRva2VuID0geyBmcm9tOiB0b2tlbi5mcm9tLCB0bzogdG9rZW4udG8gfTtcclxuICAgIGxldCBkZXB0aCA9IDAsIGN1cnNvciA9IHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5jdXJzb3IoKTtcclxuICAgIGlmIChjdXJzb3IgJiYgKGRpciA8IDAgPyBjdXJzb3IuY2hpbGRCZWZvcmUodG9rZW4uZnJvbSkgOiBjdXJzb3IuY2hpbGRBZnRlcih0b2tlbi50bykpKVxyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKGRpciA8IDAgPyBjdXJzb3IudG8gPD0gdG9rZW4uZnJvbSA6IGN1cnNvci5mcm9tID49IHRva2VuLnRvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGggPT0gMCAmJiBtYXRjaGluZy5pbmRleE9mKGN1cnNvci50eXBlLm5hbWUpID4gLTEgJiYgY3Vyc29yLmZyb20gPCBjdXJzb3IudG8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzdGFydDogZmlyc3RUb2tlbiwgZW5kOiB7IGZyb206IGN1cnNvci5mcm9tLCB0bzogY3Vyc29yLnRvIH0sIG1hdGNoZWQ6IHRydWUgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoaW5nTm9kZXMoY3Vyc29yLnR5cGUsIGRpciwgYnJhY2tldHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoaW5nTm9kZXMoY3Vyc29yLnR5cGUsIC1kaXIsIGJyYWNrZXRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZpcnN0VG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGN1cnNvci5mcm9tID09IGN1cnNvci50byA/IHVuZGVmaW5lZCA6IHsgZnJvbTogY3Vyc29yLmZyb20sIHRvOiBjdXJzb3IudG8gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGgtLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKGRpciA8IDAgPyBjdXJzb3IucHJldlNpYmxpbmcoKSA6IGN1cnNvci5uZXh0U2libGluZygpKTtcclxuICAgIHJldHVybiB7IHN0YXJ0OiBmaXJzdFRva2VuLCBtYXRjaGVkOiBmYWxzZSB9O1xyXG59XHJcbmZ1bmN0aW9uIG1hdGNoUGxhaW5CcmFja2V0cyhzdGF0ZSwgcG9zLCBkaXIsIHRyZWUsIHRva2VuVHlwZSwgbWF4U2NhbkRpc3RhbmNlLCBicmFja2V0cykge1xyXG4gICAgbGV0IHN0YXJ0Q2ggPSBkaXIgPCAwID8gc3RhdGUuc2xpY2VEb2MocG9zIC0gMSwgcG9zKSA6IHN0YXRlLnNsaWNlRG9jKHBvcywgcG9zICsgMSk7XHJcbiAgICBsZXQgYnJhY2tldCA9IGJyYWNrZXRzLmluZGV4T2Yoc3RhcnRDaCk7XHJcbiAgICBpZiAoYnJhY2tldCA8IDAgfHwgKGJyYWNrZXQgJSAyID09IDApICE9IChkaXIgPiAwKSlcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIGxldCBzdGFydFRva2VuID0geyBmcm9tOiBkaXIgPCAwID8gcG9zIC0gMSA6IHBvcywgdG86IGRpciA+IDAgPyBwb3MgKyAxIDogcG9zIH07XHJcbiAgICBsZXQgaXRlciA9IHN0YXRlLmRvYy5pdGVyUmFuZ2UocG9zLCBkaXIgPiAwID8gc3RhdGUuZG9jLmxlbmd0aCA6IDApLCBkZXB0aCA9IDA7XHJcbiAgICBmb3IgKGxldCBkaXN0YW5jZSA9IDA7ICEoaXRlci5uZXh0KCkpLmRvbmUgJiYgZGlzdGFuY2UgPD0gbWF4U2NhbkRpc3RhbmNlOykge1xyXG4gICAgICAgIGxldCB0ZXh0ID0gaXRlci52YWx1ZTtcclxuICAgICAgICBpZiAoZGlyIDwgMClcclxuICAgICAgICAgICAgZGlzdGFuY2UgKz0gdGV4dC5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGJhc2VQb3MgPSBwb3MgKyBkaXN0YW5jZSAqIGRpcjtcclxuICAgICAgICBmb3IgKGxldCBwb3MgPSBkaXIgPiAwID8gMCA6IHRleHQubGVuZ3RoIC0gMSwgZW5kID0gZGlyID4gMCA/IHRleHQubGVuZ3RoIDogLTE7IHBvcyAhPSBlbmQ7IHBvcyArPSBkaXIpIHtcclxuICAgICAgICAgICAgbGV0IGZvdW5kID0gYnJhY2tldHMuaW5kZXhPZih0ZXh0W3Bvc10pO1xyXG4gICAgICAgICAgICBpZiAoZm91bmQgPCAwIHx8IHRyZWUucmVzb2x2ZUlubmVyKGJhc2VQb3MgKyBwb3MsIDEpLnR5cGUgIT0gdG9rZW5UeXBlKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmICgoZm91bmQgJSAyID09IDApID09IChkaXIgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgZGVwdGgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkZXB0aCA9PSAxKSB7IC8vIENsb3NpbmdcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydFRva2VuLCBlbmQ6IHsgZnJvbTogYmFzZVBvcyArIHBvcywgdG86IGJhc2VQb3MgKyBwb3MgKyAxIH0sIG1hdGNoZWQ6IChmb3VuZCA+PiAxKSA9PSAoYnJhY2tldCA+PiAxKSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVwdGgtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlyID4gMClcclxuICAgICAgICAgICAgZGlzdGFuY2UgKz0gdGV4dC5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlci5kb25lID8geyBzdGFydDogc3RhcnRUb2tlbiwgbWF0Y2hlZDogZmFsc2UgfSA6IG51bGw7XHJcbn1cclxuXHJcbi8vIENvdW50cyB0aGUgY29sdW1uIG9mZnNldCBpbiBhIHN0cmluZywgdGFraW5nIHRhYnMgaW50byBhY2NvdW50LlxyXG4vLyBVc2VkIG1vc3RseSB0byBmaW5kIGluZGVudGF0aW9uLlxyXG5mdW5jdGlvbiBjb3VudENvbChzdHJpbmcsIGVuZCwgdGFiU2l6ZSwgc3RhcnRJbmRleCA9IDAsIHN0YXJ0VmFsdWUgPSAwKSB7XHJcbiAgICBpZiAoZW5kID09IG51bGwpIHtcclxuICAgICAgICBlbmQgPSBzdHJpbmcuc2VhcmNoKC9bXlxcc1xcdTAwYTBdLyk7XHJcbiAgICAgICAgaWYgKGVuZCA9PSAtMSlcclxuICAgICAgICAgICAgZW5kID0gc3RyaW5nLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGxldCBuID0gc3RhcnRWYWx1ZTtcclxuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kOyBpKyspIHtcclxuICAgICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgPT0gOSlcclxuICAgICAgICAgICAgbiArPSB0YWJTaXplIC0gKG4gJSB0YWJTaXplKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIG4rKztcclxuICAgIH1cclxuICAgIHJldHVybiBuO1xyXG59XHJcbi8qKlxyXG5FbmNhcHN1bGF0ZXMgYSBzaW5nbGUgbGluZSBvZiBpbnB1dC4gR2l2ZW4gdG8gc3RyZWFtIHN5bnRheCBjb2RlLFxyXG53aGljaCB1c2VzIGl0IHRvIHRva2VuaXplIHRoZSBjb250ZW50LlxyXG4qL1xyXG5jbGFzcyBTdHJpbmdTdHJlYW0ge1xyXG4gICAgLyoqXHJcbiAgICBDcmVhdGUgYSBzdHJlYW0uXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAvKipcclxuICAgIFRoZSBsaW5lLlxyXG4gICAgKi9cclxuICAgIHN0cmluZywgdGFiU2l6ZSwgXHJcbiAgICAvKipcclxuICAgIFRoZSBjdXJyZW50IGluZGVudCB1bml0IHNpemUuXHJcbiAgICAqL1xyXG4gICAgaW5kZW50VW5pdCkge1xyXG4gICAgICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xyXG4gICAgICAgIHRoaXMudGFiU2l6ZSA9IHRhYlNpemU7XHJcbiAgICAgICAgdGhpcy5pbmRlbnRVbml0ID0gaW5kZW50VW5pdDtcclxuICAgICAgICAvKipcclxuICAgICAgICBUaGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgbGluZS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucG9zID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgdG9rZW4uXHJcbiAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnN0YXJ0ID0gMDtcclxuICAgICAgICB0aGlzLmxhc3RDb2x1bW5Qb3MgPSAwO1xyXG4gICAgICAgIHRoaXMubGFzdENvbHVtblZhbHVlID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgVHJ1ZSBpZiB3ZSBhcmUgYXQgdGhlIGVuZCBvZiB0aGUgbGluZS5cclxuICAgICovXHJcbiAgICBlb2woKSB7IHJldHVybiB0aGlzLnBvcyA+PSB0aGlzLnN0cmluZy5sZW5ndGg7IH1cclxuICAgIC8qKlxyXG4gICAgVHJ1ZSBpZiB3ZSBhcmUgYXQgdGhlIHN0YXJ0IG9mIHRoZSBsaW5lLlxyXG4gICAgKi9cclxuICAgIHNvbCgpIHsgcmV0dXJuIHRoaXMucG9zID09IDA7IH1cclxuICAgIC8qKlxyXG4gICAgR2V0IHRoZSBuZXh0IGNvZGUgdW5pdCBhZnRlciB0aGUgY3VycmVudCBwb3NpdGlvbiwgb3IgdW5kZWZpbmVkXHJcbiAgICBpZiB3ZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lLlxyXG4gICAgKi9cclxuICAgIHBlZWsoKSB7IHJldHVybiB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MpIHx8IHVuZGVmaW5lZDsgfVxyXG4gICAgLyoqXHJcbiAgICBSZWFkIHRoZSBuZXh0IGNvZGUgdW5pdCBhbmQgYWR2YW5jZSBgdGhpcy5wb3NgLlxyXG4gICAgKi9cclxuICAgIG5leHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucG9zIDwgdGhpcy5zdHJpbmcubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKyspO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBNYXRjaCB0aGUgbmV4dCBjaGFyYWN0ZXIgYWdhaW5zdCB0aGUgZ2l2ZW4gc3RyaW5nLCByZWd1bGFyXHJcbiAgICBleHByZXNzaW9uLCBvciBwcmVkaWNhdGUuIENvbnN1bWUgYW5kIHJldHVybiBpdCBpZiBpdCBtYXRjaGVzLlxyXG4gICAgKi9cclxuICAgIGVhdChtYXRjaCkge1xyXG4gICAgICAgIGxldCBjaCA9IHRoaXMuc3RyaW5nLmNoYXJBdCh0aGlzLnBvcyk7XHJcbiAgICAgICAgbGV0IG9rO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWF0Y2ggPT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgb2sgPSBjaCA9PSBtYXRjaDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIG9rID0gY2ggJiYgKG1hdGNoIGluc3RhbmNlb2YgUmVnRXhwID8gbWF0Y2gudGVzdChjaCkgOiBtYXRjaChjaCkpO1xyXG4gICAgICAgIGlmIChvaykge1xyXG4gICAgICAgICAgICArK3RoaXMucG9zO1xyXG4gICAgICAgICAgICByZXR1cm4gY2g7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBDb250aW51ZSBtYXRjaGluZyBjaGFyYWN0ZXJzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHN0cmluZyxcclxuICAgIHJlZ3VsYXIgZXhwcmVzc2lvbiwgb3IgcHJlZGljYXRlIGZ1bmN0aW9uLiBSZXR1cm4gdHJ1ZSBpZiBhbnlcclxuICAgIGNoYXJhY3RlcnMgd2VyZSBjb25zdW1lZC5cclxuICAgICovXHJcbiAgICBlYXRXaGlsZShtYXRjaCkge1xyXG4gICAgICAgIGxldCBzdGFydCA9IHRoaXMucG9zO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmVhdChtYXRjaCkpIHsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnBvcyA+IHN0YXJ0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBDb25zdW1lIHdoaXRlc3BhY2UgYWhlYWQgb2YgYHRoaXMucG9zYC4gUmV0dXJuIHRydWUgaWYgYW55IHdhc1xyXG4gICAgZm91bmQuXHJcbiAgICAqL1xyXG4gICAgZWF0U3BhY2UoKSB7XHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5wb3M7XHJcbiAgICAgICAgd2hpbGUgKC9bXFxzXFx1MDBhMF0vLnRlc3QodGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKSkpXHJcbiAgICAgICAgICAgICsrdGhpcy5wb3M7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zID4gc3RhcnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIE1vdmUgdG8gdGhlIGVuZCBvZiB0aGUgbGluZS5cclxuICAgICovXHJcbiAgICBza2lwVG9FbmQoKSB7IHRoaXMucG9zID0gdGhpcy5zdHJpbmcubGVuZ3RoOyB9XHJcbiAgICAvKipcclxuICAgIE1vdmUgdG8gZGlyZWN0bHkgYmVmb3JlIHRoZSBnaXZlbiBjaGFyYWN0ZXIsIGlmIGZvdW5kIG9uIHRoZVxyXG4gICAgY3VycmVudCBsaW5lLlxyXG4gICAgKi9cclxuICAgIHNraXBUbyhjaCkge1xyXG4gICAgICAgIGxldCBmb3VuZCA9IHRoaXMuc3RyaW5nLmluZGV4T2YoY2gsIHRoaXMucG9zKTtcclxuICAgICAgICBpZiAoZm91bmQgPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnBvcyA9IGZvdW5kO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIE1vdmUgYmFjayBgbmAgY2hhcmFjdGVycy5cclxuICAgICovXHJcbiAgICBiYWNrVXAobikgeyB0aGlzLnBvcyAtPSBuOyB9XHJcbiAgICAvKipcclxuICAgIEdldCB0aGUgY29sdW1uIHBvc2l0aW9uIGF0IGB0aGlzLnBvc2AuXHJcbiAgICAqL1xyXG4gICAgY29sdW1uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxhc3RDb2x1bW5Qb3MgPCB0aGlzLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdENvbHVtblZhbHVlID0gY291bnRDb2wodGhpcy5zdHJpbmcsIHRoaXMuc3RhcnQsIHRoaXMudGFiU2l6ZSwgdGhpcy5sYXN0Q29sdW1uUG9zLCB0aGlzLmxhc3RDb2x1bW5WYWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdENvbHVtblBvcyA9IHRoaXMuc3RhcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RDb2x1bW5WYWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgR2V0IHRoZSBpbmRlbnRhdGlvbiBjb2x1bW4gb2YgdGhlIGN1cnJlbnQgbGluZS5cclxuICAgICovXHJcbiAgICBpbmRlbnRhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gY291bnRDb2wodGhpcy5zdHJpbmcsIG51bGwsIHRoaXMudGFiU2l6ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIE1hdGNoIHRoZSBpbnB1dCBhZ2FpbnN0IHRoZSBnaXZlbiBzdHJpbmcgb3IgcmVndWxhciBleHByZXNzaW9uXHJcbiAgICAod2hpY2ggc2hvdWxkIHN0YXJ0IHdpdGggYSBgXmApLiBSZXR1cm4gdHJ1ZSBvciB0aGUgcmVnZXhwIG1hdGNoXHJcbiAgICBpZiBpdCBtYXRjaGVzLlxyXG4gICAgXHJcbiAgICBVbmxlc3MgYGNvbnN1bWVgIGlzIHNldCB0byBgZmFsc2VgLCB0aGlzIHdpbGwgbW92ZSBgdGhpcy5wb3NgXHJcbiAgICBwYXN0IHRoZSBtYXRjaGVkIHRleHQuXHJcbiAgICBcclxuICAgIFdoZW4gbWF0Y2hpbmcgYSBzdHJpbmcgYGNhc2VJbnNlbnNpdGl2ZWAgY2FuIGJlIHNldCB0byB0cnVlIHRvXHJcbiAgICBtYWtlIHRoZSBtYXRjaCBjYXNlLWluc2Vuc2l0aXZlLlxyXG4gICAgKi9cclxuICAgIG1hdGNoKHBhdHRlcm4sIGNvbnN1bWUsIGNhc2VJbnNlbnNpdGl2ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBjYXNlZCA9IChzdHIpID0+IGNhc2VJbnNlbnNpdGl2ZSA/IHN0ci50b0xvd2VyQ2FzZSgpIDogc3RyO1xyXG4gICAgICAgICAgICBsZXQgc3Vic3RyID0gdGhpcy5zdHJpbmcuc3Vic3RyKHRoaXMucG9zLCBwYXR0ZXJuLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGlmIChjYXNlZChzdWJzdHIpID09IGNhc2VkKHBhdHRlcm4pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uc3VtZSAhPT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3MgKz0gcGF0dGVybi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IHRoaXMuc3RyaW5nLnNsaWNlKHRoaXMucG9zKS5tYXRjaChwYXR0ZXJuKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmluZGV4ID4gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2ggJiYgY29uc3VtZSAhPT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyArPSBtYXRjaFswXS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgIEdldCB0aGUgY3VycmVudCB0b2tlbi5cclxuICAgICovXHJcbiAgICBjdXJyZW50KCkgeyByZXR1cm4gdGhpcy5zdHJpbmcuc2xpY2UodGhpcy5zdGFydCwgdGhpcy5wb3MpOyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZ1bGxQYXJzZXIoc3BlYykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiBzcGVjLm5hbWUgfHwgXCJcIixcclxuICAgICAgICB0b2tlbjogc3BlYy50b2tlbixcclxuICAgICAgICBibGFua0xpbmU6IHNwZWMuYmxhbmtMaW5lIHx8ICgoKSA9PiB7IH0pLFxyXG4gICAgICAgIHN0YXJ0U3RhdGU6IHNwZWMuc3RhcnRTdGF0ZSB8fCAoKCkgPT4gdHJ1ZSksXHJcbiAgICAgICAgY29weVN0YXRlOiBzcGVjLmNvcHlTdGF0ZSB8fCBkZWZhdWx0Q29weVN0YXRlLFxyXG4gICAgICAgIGluZGVudDogc3BlYy5pbmRlbnQgfHwgKCgpID0+IG51bGwpLFxyXG4gICAgICAgIGxhbmd1YWdlRGF0YTogc3BlYy5sYW5ndWFnZURhdGEgfHwge30sXHJcbiAgICAgICAgdG9rZW5UYWJsZTogc3BlYy50b2tlblRhYmxlIHx8IG5vVG9rZW5zXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGRlZmF1bHRDb3B5U3RhdGUoc3RhdGUpIHtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgIT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICBsZXQgbmV3U3RhdGUgPSB7fTtcclxuICAgIGZvciAobGV0IHByb3AgaW4gc3RhdGUpIHtcclxuICAgICAgICBsZXQgdmFsID0gc3RhdGVbcHJvcF07XHJcbiAgICAgICAgbmV3U3RhdGVbcHJvcF0gPSAodmFsIGluc3RhbmNlb2YgQXJyYXkgPyB2YWwuc2xpY2UoKSA6IHZhbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3U3RhdGU7XHJcbn1cclxuLyoqXHJcbkEgW2xhbmd1YWdlXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlKSBjbGFzcyBiYXNlZCBvbiBhIENvZGVNaXJyb3JcclxuNS1zdHlsZSBbc3RyZWFtaW5nIHBhcnNlcl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5TdHJlYW1QYXJzZXIpLlxyXG4qL1xyXG5jbGFzcyBTdHJlYW1MYW5ndWFnZSBleHRlbmRzIExhbmd1YWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xyXG4gICAgICAgIGxldCBkYXRhID0gZGVmaW5lTGFuZ3VhZ2VGYWNldChwYXJzZXIubGFuZ3VhZ2VEYXRhKTtcclxuICAgICAgICBsZXQgcCA9IGZ1bGxQYXJzZXIocGFyc2VyKSwgc2VsZjtcclxuICAgICAgICBsZXQgaW1wbCA9IG5ldyBjbGFzcyBleHRlbmRzIFBhcnNlciB7XHJcbiAgICAgICAgICAgIGNyZWF0ZVBhcnNlKGlucHV0LCBmcmFnbWVudHMsIHJhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJzZShzZWxmLCBpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdXBlcihkYXRhLCBpbXBsLCBbaW5kZW50U2VydmljZS5vZigoY3gsIHBvcykgPT4gdGhpcy5nZXRJbmRlbnQoY3gsIHBvcykpXSwgcGFyc2VyLm5hbWUpO1xyXG4gICAgICAgIHRoaXMudG9wTm9kZSA9IGRvY0lEKGRhdGEpO1xyXG4gICAgICAgIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtUGFyc2VyID0gcDtcclxuICAgICAgICB0aGlzLnN0YXRlQWZ0ZXIgPSBuZXcgTm9kZVByb3AoeyBwZXJOb2RlOiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMudG9rZW5UYWJsZSA9IHBhcnNlci50b2tlblRhYmxlID8gbmV3IFRva2VuVGFibGUocC50b2tlblRhYmxlKSA6IGRlZmF1bHRUb2tlblRhYmxlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICBEZWZpbmUgYSBzdHJlYW0gbGFuZ3VhZ2UuXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGRlZmluZShzcGVjKSB7IHJldHVybiBuZXcgU3RyZWFtTGFuZ3VhZ2Uoc3BlYyk7IH1cclxuICAgIGdldEluZGVudChjeCwgcG9zKSB7XHJcbiAgICAgICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKGN4LnN0YXRlKSwgYXQgPSB0cmVlLnJlc29sdmUocG9zKTtcclxuICAgICAgICB3aGlsZSAoYXQgJiYgYXQudHlwZSAhPSB0aGlzLnRvcE5vZGUpXHJcbiAgICAgICAgICAgIGF0ID0gYXQucGFyZW50O1xyXG4gICAgICAgIGlmICghYXQpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGxldCBzdGFydCA9IGZpbmRTdGF0ZSh0aGlzLCB0cmVlLCAwLCBhdC5mcm9tLCBwb3MpLCBzdGF0ZVBvcywgc3RhdGU7XHJcbiAgICAgICAgaWYgKHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHN0YXRlID0gc3RhcnQuc3RhdGU7XHJcbiAgICAgICAgICAgIHN0YXRlUG9zID0gc3RhcnQucG9zICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXRlID0gdGhpcy5zdHJlYW1QYXJzZXIuc3RhcnRTdGF0ZShjeC51bml0KTtcclxuICAgICAgICAgICAgc3RhdGVQb3MgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocG9zIC0gc3RhdGVQb3MgPiAxMDAwMCAvKiBDLk1heEluZGVudFNjYW5EaXN0ICovKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB3aGlsZSAoc3RhdGVQb3MgPCBwb3MpIHtcclxuICAgICAgICAgICAgbGV0IGxpbmUgPSBjeC5zdGF0ZS5kb2MubGluZUF0KHN0YXRlUG9zKSwgZW5kID0gTWF0aC5taW4ocG9zLCBsaW5lLnRvKTtcclxuICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyZWFtID0gbmV3IFN0cmluZ1N0cmVhbShsaW5lLnRleHQsIGN4LnN0YXRlLnRhYlNpemUsIGN4LnVuaXQpO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0cmVhbS5wb3MgPCBlbmQgLSBsaW5lLmZyb20pXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZFRva2VuKHRoaXMuc3RyZWFtUGFyc2VyLnRva2VuLCBzdHJlYW0sIHN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtUGFyc2VyLmJsYW5rTGluZShzdGF0ZSwgY3gudW5pdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVuZCA9PSBwb3MpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgc3RhdGVQb3MgPSBsaW5lLnRvICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHsgdGV4dCB9ID0gY3gubGluZUF0KHBvcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtUGFyc2VyLmluZGVudChzdGF0ZSwgL15cXHMqKC4qKS8uZXhlYyh0ZXh0KVsxXSwgY3gpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGFsbG93c05lc3RpbmcoKSB7IHJldHVybiBmYWxzZTsgfVxyXG59XHJcbmZ1bmN0aW9uIGZpbmRTdGF0ZShsYW5nLCB0cmVlLCBvZmYsIHN0YXJ0UG9zLCBiZWZvcmUpIHtcclxuICAgIGxldCBzdGF0ZSA9IG9mZiA+PSBzdGFydFBvcyAmJiBvZmYgKyB0cmVlLmxlbmd0aCA8PSBiZWZvcmUgJiYgdHJlZS5wcm9wKGxhbmcuc3RhdGVBZnRlcik7XHJcbiAgICBpZiAoc3RhdGUpXHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdGU6IGxhbmcuc3RyZWFtUGFyc2VyLmNvcHlTdGF0ZShzdGF0ZSksIHBvczogb2ZmICsgdHJlZS5sZW5ndGggfTtcclxuICAgIGZvciAobGV0IGkgPSB0cmVlLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgbGV0IGNoaWxkID0gdHJlZS5jaGlsZHJlbltpXSwgcG9zID0gb2ZmICsgdHJlZS5wb3NpdGlvbnNbaV07XHJcbiAgICAgICAgbGV0IGZvdW5kID0gY2hpbGQgaW5zdGFuY2VvZiBUcmVlICYmIHBvcyA8IGJlZm9yZSAmJiBmaW5kU3RhdGUobGFuZywgY2hpbGQsIHBvcywgc3RhcnRQb3MsIGJlZm9yZSk7XHJcbiAgICAgICAgaWYgKGZvdW5kKVxyXG4gICAgICAgICAgICByZXR1cm4gZm91bmQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5mdW5jdGlvbiBjdXRUcmVlKGxhbmcsIHRyZWUsIGZyb20sIHRvLCBpbnNpZGUpIHtcclxuICAgIGlmIChpbnNpZGUgJiYgZnJvbSA8PSAwICYmIHRvID49IHRyZWUubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiB0cmVlO1xyXG4gICAgaWYgKCFpbnNpZGUgJiYgdHJlZS50eXBlID09IGxhbmcudG9wTm9kZSlcclxuICAgICAgICBpbnNpZGUgPSB0cnVlO1xyXG4gICAgZm9yIChsZXQgaSA9IHRyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBsZXQgcG9zID0gdHJlZS5wb3NpdGlvbnNbaV0sIGNoaWxkID0gdHJlZS5jaGlsZHJlbltpXSwgaW5uZXI7XHJcbiAgICAgICAgaWYgKHBvcyA8IHRvICYmIGNoaWxkIGluc3RhbmNlb2YgVHJlZSkge1xyXG4gICAgICAgICAgICBpZiAoIShpbm5lciA9IGN1dFRyZWUobGFuZywgY2hpbGQsIGZyb20gLSBwb3MsIHRvIC0gcG9zLCBpbnNpZGUpKSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICByZXR1cm4gIWluc2lkZSA/IGlubmVyXHJcbiAgICAgICAgICAgICAgICA6IG5ldyBUcmVlKHRyZWUudHlwZSwgdHJlZS5jaGlsZHJlbi5zbGljZSgwLCBpKS5jb25jYXQoaW5uZXIpLCB0cmVlLnBvc2l0aW9ucy5zbGljZSgwLCBpICsgMSksIHBvcyArIGlubmVyLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZnVuY3Rpb24gZmluZFN0YXJ0SW5GcmFnbWVudHMobGFuZywgZnJhZ21lbnRzLCBzdGFydFBvcywgZWRpdG9yU3RhdGUpIHtcclxuICAgIGZvciAobGV0IGYgb2YgZnJhZ21lbnRzKSB7XHJcbiAgICAgICAgbGV0IGZyb20gPSBmLmZyb20gKyAoZi5vcGVuU3RhcnQgPyAyNSA6IDApLCB0byA9IGYudG8gLSAoZi5vcGVuRW5kID8gMjUgOiAwKTtcclxuICAgICAgICBsZXQgZm91bmQgPSBmcm9tIDw9IHN0YXJ0UG9zICYmIHRvID4gc3RhcnRQb3MgJiYgZmluZFN0YXRlKGxhbmcsIGYudHJlZSwgMCAtIGYub2Zmc2V0LCBzdGFydFBvcywgdG8pLCB0cmVlO1xyXG4gICAgICAgIGlmIChmb3VuZCAmJiAodHJlZSA9IGN1dFRyZWUobGFuZywgZi50cmVlLCBzdGFydFBvcyArIGYub2Zmc2V0LCBmb3VuZC5wb3MgKyBmLm9mZnNldCwgZmFsc2UpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdGU6IGZvdW5kLnN0YXRlLCB0cmVlIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBzdGF0ZTogbGFuZy5zdHJlYW1QYXJzZXIuc3RhcnRTdGF0ZShlZGl0b3JTdGF0ZSA/IGdldEluZGVudFVuaXQoZWRpdG9yU3RhdGUpIDogNCksIHRyZWU6IFRyZWUuZW1wdHkgfTtcclxufVxyXG5jbGFzcyBQYXJzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihsYW5nLCBpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHtcclxuICAgICAgICB0aGlzLmxhbmcgPSBsYW5nO1xyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgICAgICB0aGlzLmZyYWdtZW50cyA9IGZyYWdtZW50cztcclxuICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlcztcclxuICAgICAgICB0aGlzLnN0b3BwZWRBdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaHVua3MgPSBbXTtcclxuICAgICAgICB0aGlzLmNodW5rUG9zID0gW107XHJcbiAgICAgICAgdGhpcy5jaHVuayA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2h1bmtSZXVzZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5yYW5nZUluZGV4ID0gMDtcclxuICAgICAgICB0aGlzLnRvID0gcmFuZ2VzW3Jhbmdlcy5sZW5ndGggLSAxXS50bztcclxuICAgICAgICBsZXQgY29udGV4dCA9IFBhcnNlQ29udGV4dC5nZXQoKSwgZnJvbSA9IHJhbmdlc1swXS5mcm9tO1xyXG4gICAgICAgIGxldCB7IHN0YXRlLCB0cmVlIH0gPSBmaW5kU3RhcnRJbkZyYWdtZW50cyhsYW5nLCBmcmFnbWVudHMsIGZyb20sIGNvbnRleHQgPT09IG51bGwgfHwgY29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGV4dC5zdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMucGFyc2VkUG9zID0gdGhpcy5jaHVua1N0YXJ0ID0gZnJvbSArIHRyZWUubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJlZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRyZWUuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB0aGlzLmNodW5rUG9zLnB1c2godHJlZS5wb3NpdGlvbnNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29udGV4dCAmJiB0aGlzLnBhcnNlZFBvcyA8IGNvbnRleHQudmlld3BvcnQuZnJvbSAtIDEwMDAwMCAvKiBDLk1heERpc3RhbmNlQmVmb3JlVmlld3BvcnQgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMubGFuZy5zdHJlYW1QYXJzZXIuc3RhcnRTdGF0ZShnZXRJbmRlbnRVbml0KGNvbnRleHQuc3RhdGUpKTtcclxuICAgICAgICAgICAgY29udGV4dC5za2lwVW50aWxJblZpZXcodGhpcy5wYXJzZWRQb3MsIGNvbnRleHQudmlld3BvcnQuZnJvbSk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VkUG9zID0gY29udGV4dC52aWV3cG9ydC5mcm9tO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdmVSYW5nZUluZGV4KCk7XHJcbiAgICB9XHJcbiAgICBhZHZhbmNlKCkge1xyXG4gICAgICAgIGxldCBjb250ZXh0ID0gUGFyc2VDb250ZXh0LmdldCgpO1xyXG4gICAgICAgIGxldCBwYXJzZUVuZCA9IHRoaXMuc3RvcHBlZEF0ID09IG51bGwgPyB0aGlzLnRvIDogTWF0aC5taW4odGhpcy50bywgdGhpcy5zdG9wcGVkQXQpO1xyXG4gICAgICAgIGxldCBlbmQgPSBNYXRoLm1pbihwYXJzZUVuZCwgdGhpcy5jaHVua1N0YXJ0ICsgMjA0OCAvKiBDLkNodW5rU2l6ZSAqLyk7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpXHJcbiAgICAgICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgY29udGV4dC52aWV3cG9ydC50byk7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMucGFyc2VkUG9zIDwgZW5kKVxyXG4gICAgICAgICAgICB0aGlzLnBhcnNlTGluZShjb250ZXh0KTtcclxuICAgICAgICBpZiAodGhpcy5jaHVua1N0YXJ0IDwgdGhpcy5wYXJzZWRQb3MpXHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoQ2h1bmsoKTtcclxuICAgICAgICBpZiAodGhpcy5wYXJzZWRQb3MgPj0gcGFyc2VFbmQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaCgpO1xyXG4gICAgICAgIGlmIChjb250ZXh0ICYmIHRoaXMucGFyc2VkUG9zID49IGNvbnRleHQudmlld3BvcnQudG8pIHtcclxuICAgICAgICAgICAgY29udGV4dC5za2lwVW50aWxJblZpZXcodGhpcy5wYXJzZWRQb3MsIHBhcnNlRW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgc3RvcEF0KHBvcykge1xyXG4gICAgICAgIHRoaXMuc3RvcHBlZEF0ID0gcG9zO1xyXG4gICAgfVxyXG4gICAgbGluZUFmdGVyKHBvcykge1xyXG4gICAgICAgIGxldCBjaHVuayA9IHRoaXMuaW5wdXQuY2h1bmsocG9zKTtcclxuICAgICAgICBpZiAoIXRoaXMuaW5wdXQubGluZUNodW5rcykge1xyXG4gICAgICAgICAgICBsZXQgZW9sID0gY2h1bmsuaW5kZXhPZihcIlxcblwiKTtcclxuICAgICAgICAgICAgaWYgKGVvbCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgY2h1bmsgPSBjaHVuay5zbGljZSgwLCBlb2wpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaHVuayA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgIGNodW5rID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvcyArIGNodW5rLmxlbmd0aCA8PSB0aGlzLnRvID8gY2h1bmsgOiBjaHVuay5zbGljZSgwLCB0aGlzLnRvIC0gcG9zKTtcclxuICAgIH1cclxuICAgIG5leHRMaW5lKCkge1xyXG4gICAgICAgIGxldCBmcm9tID0gdGhpcy5wYXJzZWRQb3MsIGxpbmUgPSB0aGlzLmxpbmVBZnRlcihmcm9tKSwgZW5kID0gZnJvbSArIGxpbmUubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5yYW5nZUluZGV4OzspIHtcclxuICAgICAgICAgICAgbGV0IHJhbmdlRW5kID0gdGhpcy5yYW5nZXNbaW5kZXhdLnRvO1xyXG4gICAgICAgICAgICBpZiAocmFuZ2VFbmQgPj0gZW5kKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnNsaWNlKDAsIHJhbmdlRW5kIC0gKGVuZCAtIGxpbmUubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PSB0aGlzLnJhbmdlcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgbGV0IHJhbmdlU3RhcnQgPSB0aGlzLnJhbmdlc1tpbmRleF0uZnJvbTtcclxuICAgICAgICAgICAgbGV0IGFmdGVyID0gdGhpcy5saW5lQWZ0ZXIocmFuZ2VTdGFydCk7XHJcbiAgICAgICAgICAgIGxpbmUgKz0gYWZ0ZXI7XHJcbiAgICAgICAgICAgIGVuZCA9IHJhbmdlU3RhcnQgKyBhZnRlci5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGxpbmUsIGVuZCB9O1xyXG4gICAgfVxyXG4gICAgc2tpcEdhcHNUbyhwb3MsIG9mZnNldCwgc2lkZSkge1xyXG4gICAgICAgIGZvciAoOzspIHtcclxuICAgICAgICAgICAgbGV0IGVuZCA9IHRoaXMucmFuZ2VzW3RoaXMucmFuZ2VJbmRleF0udG8sIG9mZlBvcyA9IHBvcyArIG9mZnNldDtcclxuICAgICAgICAgICAgaWYgKHNpZGUgPiAwID8gZW5kID4gb2ZmUG9zIDogZW5kID49IG9mZlBvcylcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnJhbmdlc1srK3RoaXMucmFuZ2VJbmRleF0uZnJvbTtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IHN0YXJ0IC0gZW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgbW92ZVJhbmdlSW5kZXgoKSB7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMucmFuZ2VzW3RoaXMucmFuZ2VJbmRleF0udG8gPCB0aGlzLnBhcnNlZFBvcylcclxuICAgICAgICAgICAgdGhpcy5yYW5nZUluZGV4Kys7XHJcbiAgICB9XHJcbiAgICBlbWl0VG9rZW4oaWQsIGZyb20sIHRvLCBzaXplLCBvZmZzZXQpIHtcclxuICAgICAgICBpZiAodGhpcy5yYW5nZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnNraXBHYXBzVG8oZnJvbSwgb2Zmc2V0LCAxKTtcclxuICAgICAgICAgICAgZnJvbSArPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIGxldCBsZW4wID0gdGhpcy5jaHVuay5sZW5ndGg7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IHRoaXMuc2tpcEdhcHNUbyh0bywgb2Zmc2V0LCAtMSk7XHJcbiAgICAgICAgICAgIHRvICs9IG9mZnNldDtcclxuICAgICAgICAgICAgc2l6ZSArPSB0aGlzLmNodW5rLmxlbmd0aCAtIGxlbjA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2h1bmsucHVzaChpZCwgZnJvbSwgdG8sIHNpemUpO1xyXG4gICAgICAgIHJldHVybiBvZmZzZXQ7XHJcbiAgICB9XHJcbiAgICBwYXJzZUxpbmUoY29udGV4dCkge1xyXG4gICAgICAgIGxldCB7IGxpbmUsIGVuZCB9ID0gdGhpcy5uZXh0TGluZSgpLCBvZmZzZXQgPSAwLCB7IHN0cmVhbVBhcnNlciB9ID0gdGhpcy5sYW5nO1xyXG4gICAgICAgIGxldCBzdHJlYW0gPSBuZXcgU3RyaW5nU3RyZWFtKGxpbmUsIGNvbnRleHQgPyBjb250ZXh0LnN0YXRlLnRhYlNpemUgOiA0LCBjb250ZXh0ID8gZ2V0SW5kZW50VW5pdChjb250ZXh0LnN0YXRlKSA6IDIpO1xyXG4gICAgICAgIGlmIChzdHJlYW0uZW9sKCkpIHtcclxuICAgICAgICAgICAgc3RyZWFtUGFyc2VyLmJsYW5rTGluZSh0aGlzLnN0YXRlLCBzdHJlYW0uaW5kZW50VW5pdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAoIXN0cmVhbS5lb2woKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRva2VuID0gcmVhZFRva2VuKHN0cmVhbVBhcnNlci50b2tlbiwgc3RyZWFtLCB0aGlzLnN0YXRlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbilcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmVtaXRUb2tlbih0aGlzLmxhbmcudG9rZW5UYWJsZS5yZXNvbHZlKHRva2VuKSwgdGhpcy5wYXJzZWRQb3MgKyBzdHJlYW0uc3RhcnQsIHRoaXMucGFyc2VkUG9zICsgc3RyZWFtLnBvcywgNCwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChzdHJlYW0uc3RhcnQgPiAxMDAwMCAvKiBDLk1heExpbmVMZW5ndGggKi8pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYXJzZWRQb3MgPSBlbmQ7XHJcbiAgICAgICAgdGhpcy5tb3ZlUmFuZ2VJbmRleCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnBhcnNlZFBvcyA8IHRoaXMudG8pXHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VkUG9zKys7XHJcbiAgICB9XHJcbiAgICBmaW5pc2hDaHVuaygpIHtcclxuICAgICAgICBsZXQgdHJlZSA9IFRyZWUuYnVpbGQoe1xyXG4gICAgICAgICAgICBidWZmZXI6IHRoaXMuY2h1bmssXHJcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLmNodW5rU3RhcnQsXHJcbiAgICAgICAgICAgIGxlbmd0aDogdGhpcy5wYXJzZWRQb3MgLSB0aGlzLmNodW5rU3RhcnQsXHJcbiAgICAgICAgICAgIG5vZGVTZXQsXHJcbiAgICAgICAgICAgIHRvcElEOiAwLFxyXG4gICAgICAgICAgICBtYXhCdWZmZXJMZW5ndGg6IDIwNDggLyogQy5DaHVua1NpemUgKi8sXHJcbiAgICAgICAgICAgIHJldXNlZDogdGhpcy5jaHVua1JldXNlZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRyZWUgPSBuZXcgVHJlZSh0cmVlLnR5cGUsIHRyZWUuY2hpbGRyZW4sIHRyZWUucG9zaXRpb25zLCB0cmVlLmxlbmd0aCwgW1t0aGlzLmxhbmcuc3RhdGVBZnRlciwgdGhpcy5sYW5nLnN0cmVhbVBhcnNlci5jb3B5U3RhdGUodGhpcy5zdGF0ZSldXSk7XHJcbiAgICAgICAgdGhpcy5jaHVua3MucHVzaCh0cmVlKTtcclxuICAgICAgICB0aGlzLmNodW5rUG9zLnB1c2godGhpcy5jaHVua1N0YXJ0IC0gdGhpcy5yYW5nZXNbMF0uZnJvbSk7XHJcbiAgICAgICAgdGhpcy5jaHVuayA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2h1bmtSZXVzZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jaHVua1N0YXJ0ID0gdGhpcy5wYXJzZWRQb3M7XHJcbiAgICB9XHJcbiAgICBmaW5pc2goKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVlKHRoaXMubGFuZy50b3BOb2RlLCB0aGlzLmNodW5rcywgdGhpcy5jaHVua1BvcywgdGhpcy5wYXJzZWRQb3MgLSB0aGlzLnJhbmdlc1swXS5mcm9tKS5iYWxhbmNlKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVhZFRva2VuKHRva2VuLCBzdHJlYW0sIHN0YXRlKSB7XHJcbiAgICBzdHJlYW0uc3RhcnQgPSBzdHJlYW0ucG9zO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRva2VuKHN0cmVhbSwgc3RhdGUpO1xyXG4gICAgICAgIGlmIChzdHJlYW0ucG9zID4gc3RyZWFtLnN0YXJ0KVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtIHBhcnNlciBmYWlsZWQgdG8gYWR2YW5jZSBzdHJlYW0uXCIpO1xyXG59XHJcbmNvbnN0IG5vVG9rZW5zID0gLypAX19QVVJFX18qL09iamVjdC5jcmVhdGUobnVsbCk7XHJcbmNvbnN0IHR5cGVBcnJheSA9IFtOb2RlVHlwZS5ub25lXTtcclxuY29uc3Qgbm9kZVNldCA9IC8qQF9fUFVSRV9fKi9uZXcgTm9kZVNldCh0eXBlQXJyYXkpO1xyXG5jb25zdCB3YXJuZWQgPSBbXTtcclxuY29uc3QgZGVmYXVsdFRhYmxlID0gLypAX19QVVJFX18qL09iamVjdC5jcmVhdGUobnVsbCk7XHJcbmZvciAobGV0IFtsZWdhY3lOYW1lLCBuYW1lXSBvZiBbXHJcbiAgICBbXCJ2YXJpYWJsZVwiLCBcInZhcmlhYmxlTmFtZVwiXSxcclxuICAgIFtcInZhcmlhYmxlLTJcIiwgXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiXSxcclxuICAgIFtcInN0cmluZy0yXCIsIFwic3RyaW5nLnNwZWNpYWxcIl0sXHJcbiAgICBbXCJkZWZcIiwgXCJ2YXJpYWJsZU5hbWUuZGVmaW5pdGlvblwiXSxcclxuICAgIFtcInRhZ1wiLCBcInRhZ05hbWVcIl0sXHJcbiAgICBbXCJhdHRyaWJ1dGVcIiwgXCJhdHRyaWJ1dGVOYW1lXCJdLFxyXG4gICAgW1widHlwZVwiLCBcInR5cGVOYW1lXCJdLFxyXG4gICAgW1wiYnVpbHRpblwiLCBcInZhcmlhYmxlTmFtZS5zdGFuZGFyZFwiXSxcclxuICAgIFtcInF1YWxpZmllclwiLCBcIm1vZGlmaWVyXCJdLFxyXG4gICAgW1wiZXJyb3JcIiwgXCJpbnZhbGlkXCJdLFxyXG4gICAgW1wiaGVhZGVyXCIsIFwiaGVhZGluZ1wiXSxcclxuICAgIFtcInByb3BlcnR5XCIsIFwicHJvcGVydHlOYW1lXCJdXHJcbl0pXHJcbiAgICBkZWZhdWx0VGFibGVbbGVnYWN5TmFtZV0gPSAvKkBfX1BVUkVfXyovY3JlYXRlVG9rZW5UeXBlKG5vVG9rZW5zLCBuYW1lKTtcclxuY2xhc3MgVG9rZW5UYWJsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihleHRyYSkge1xyXG4gICAgICAgIHRoaXMuZXh0cmEgPSBleHRyYTtcclxuICAgICAgICB0aGlzLnRhYmxlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBkZWZhdWx0VGFibGUpO1xyXG4gICAgfVxyXG4gICAgcmVzb2x2ZSh0YWcpIHtcclxuICAgICAgICByZXR1cm4gIXRhZyA/IDAgOiB0aGlzLnRhYmxlW3RhZ10gfHwgKHRoaXMudGFibGVbdGFnXSA9IGNyZWF0ZVRva2VuVHlwZSh0aGlzLmV4dHJhLCB0YWcpKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBkZWZhdWx0VG9rZW5UYWJsZSA9IC8qQF9fUFVSRV9fKi9uZXcgVG9rZW5UYWJsZShub1Rva2Vucyk7XHJcbmZ1bmN0aW9uIHdhcm5Gb3JQYXJ0KHBhcnQsIG1zZykge1xyXG4gICAgaWYgKHdhcm5lZC5pbmRleE9mKHBhcnQpID4gLTEpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgd2FybmVkLnB1c2gocGFydCk7XHJcbiAgICBjb25zb2xlLndhcm4obXNnKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVUb2tlblR5cGUoZXh0cmEsIHRhZ1N0cikge1xyXG4gICAgbGV0IHRhZyA9IG51bGw7XHJcbiAgICBmb3IgKGxldCBwYXJ0IG9mIHRhZ1N0ci5zcGxpdChcIi5cIikpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSAoZXh0cmFbcGFydF0gfHwgdGFnc1twYXJ0XSk7XHJcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICB3YXJuRm9yUGFydChwYXJ0LCBgVW5rbm93biBoaWdobGlnaHRpbmcgdGFnICR7cGFydH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBpZiAoIXRhZylcclxuICAgICAgICAgICAgICAgIHdhcm5Gb3JQYXJ0KHBhcnQsIGBNb2RpZmllciAke3BhcnR9IHVzZWQgYXQgc3RhcnQgb2YgdGFnYCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRhZyA9IHZhbHVlKHRhZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGFnKVxyXG4gICAgICAgICAgICAgICAgd2FybkZvclBhcnQocGFydCwgYFRhZyAke3BhcnR9IHVzZWQgYXMgbW9kaWZpZXJgKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGFnID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCF0YWcpXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICBsZXQgbmFtZSA9IHRhZ1N0ci5yZXBsYWNlKC8gL2csIFwiX1wiKSwgdHlwZSA9IE5vZGVUeXBlLmRlZmluZSh7XHJcbiAgICAgICAgaWQ6IHR5cGVBcnJheS5sZW5ndGgsXHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBwcm9wczogW3N0eWxlVGFncyh7IFtuYW1lXTogdGFnIH0pXVxyXG4gICAgfSk7XHJcbiAgICB0eXBlQXJyYXkucHVzaCh0eXBlKTtcclxuICAgIHJldHVybiB0eXBlLmlkO1xyXG59XHJcbmZ1bmN0aW9uIGRvY0lEKGRhdGEpIHtcclxuICAgIGxldCB0eXBlID0gTm9kZVR5cGUuZGVmaW5lKHsgaWQ6IHR5cGVBcnJheS5sZW5ndGgsIG5hbWU6IFwiRG9jdW1lbnRcIiwgcHJvcHM6IFtsYW5ndWFnZURhdGFQcm9wLmFkZCgoKSA9PiBkYXRhKV0gfSk7XHJcbiAgICB0eXBlQXJyYXkucHVzaCh0eXBlKTtcclxuICAgIHJldHVybiB0eXBlO1xyXG59XHJcblxyXG5leHBvcnQgeyBIaWdobGlnaHRTdHlsZSwgSW5kZW50Q29udGV4dCwgTFJMYW5ndWFnZSwgTGFuZ3VhZ2UsIExhbmd1YWdlRGVzY3JpcHRpb24sIExhbmd1YWdlU3VwcG9ydCwgUGFyc2VDb250ZXh0LCBTdHJlYW1MYW5ndWFnZSwgU3RyaW5nU3RyZWFtLCBUcmVlSW5kZW50Q29udGV4dCwgYnJhY2tldE1hdGNoaW5nLCBjb2RlRm9sZGluZywgY29udGludWVkSW5kZW50LCBkZWZhdWx0SGlnaGxpZ2h0U3R5bGUsIGRlZmluZUxhbmd1YWdlRmFjZXQsIGRlbGltaXRlZEluZGVudCwgZW5zdXJlU3ludGF4VHJlZSwgZmxhdEluZGVudCwgZm9sZEFsbCwgZm9sZENvZGUsIGZvbGRFZmZlY3QsIGZvbGRHdXR0ZXIsIGZvbGRJbnNpZGUsIGZvbGRLZXltYXAsIGZvbGROb2RlUHJvcCwgZm9sZFNlcnZpY2UsIGZvbGRTdGF0ZSwgZm9sZGFibGUsIGZvbGRlZFJhbmdlcywgZm9yY2VQYXJzaW5nLCBnZXRJbmRlbnRVbml0LCBnZXRJbmRlbnRhdGlvbiwgaGlnaGxpZ2h0aW5nRm9yLCBpbmRlbnROb2RlUHJvcCwgaW5kZW50T25JbnB1dCwgaW5kZW50UmFuZ2UsIGluZGVudFNlcnZpY2UsIGluZGVudFN0cmluZywgaW5kZW50VW5pdCwgbGFuZ3VhZ2UsIGxhbmd1YWdlRGF0YVByb3AsIG1hdGNoQnJhY2tldHMsIHN5bnRheEhpZ2hsaWdodGluZywgc3ludGF4UGFyc2VyUnVubmluZywgc3ludGF4VHJlZSwgc3ludGF4VHJlZUF2YWlsYWJsZSwgdW5mb2xkQWxsLCB1bmZvbGRDb2RlLCB1bmZvbGRFZmZlY3QgfTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/language/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/lint/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@codemirror/lint/dist/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closeLintPanel\": function() { return /* binding */ closeLintPanel; },\n/* harmony export */   \"diagnosticCount\": function() { return /* binding */ diagnosticCount; },\n/* harmony export */   \"forEachDiagnostic\": function() { return /* binding */ forEachDiagnostic; },\n/* harmony export */   \"forceLinting\": function() { return /* binding */ forceLinting; },\n/* harmony export */   \"lintGutter\": function() { return /* binding */ lintGutter; },\n/* harmony export */   \"lintKeymap\": function() { return /* binding */ lintKeymap; },\n/* harmony export */   \"linter\": function() { return /* binding */ linter; },\n/* harmony export */   \"nextDiagnostic\": function() { return /* binding */ nextDiagnostic; },\n/* harmony export */   \"openLintPanel\": function() { return /* binding */ openLintPanel; },\n/* harmony export */   \"setDiagnostics\": function() { return /* binding */ setDiagnostics; },\n/* harmony export */   \"setDiagnosticsEffect\": function() { return /* binding */ setDiagnosticsEffect; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var crelt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crelt */ \"./node_modules/crelt/index.es.js\");\n\r\n\r\n\r\n\r\nclass SelectedDiagnostic {\r\n    constructor(from, to, diagnostic) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.diagnostic = diagnostic;\r\n    }\r\n}\r\nclass LintState {\r\n    constructor(diagnostics, panel, selected) {\r\n        this.diagnostics = diagnostics;\r\n        this.panel = panel;\r\n        this.selected = selected;\r\n    }\r\n    static init(diagnostics, panel, state) {\r\n        // Filter the list of diagnostics for which to create markers\r\n        let markedDiagnostics = diagnostics;\r\n        let diagnosticFilter = state.facet(lintConfig).markerFilter;\r\n        if (diagnosticFilter)\r\n            markedDiagnostics = diagnosticFilter(markedDiagnostics);\r\n        let ranges = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.set(markedDiagnostics.map((d) => {\r\n            // For zero-length ranges or ranges covering only a line break, create a widget\r\n            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)\r\n                ? _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.widget({\r\n                    widget: new DiagnosticWidget(d),\r\n                    diagnostic: d\r\n                }).range(d.from)\r\n                : _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({\r\n                    attributes: { class: \"cm-lintRange cm-lintRange-\" + d.severity },\r\n                    diagnostic: d\r\n                }).range(d.from, d.to);\r\n        }), true);\r\n        return new LintState(ranges, panel, findDiagnostic(ranges));\r\n    }\r\n}\r\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\r\n    let found = null;\r\n    diagnostics.between(after, 1e9, (from, to, { spec }) => {\r\n        if (diagnostic && spec.diagnostic != diagnostic)\r\n            return;\r\n        found = new SelectedDiagnostic(from, to, spec.diagnostic);\r\n        return false;\r\n    });\r\n    return found;\r\n}\r\nfunction hideTooltip(tr, tooltip) {\r\n    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));\r\n}\r\nfunction maybeEnableLint(state, effects) {\r\n    return state.field(lintState, false) ? effects : effects.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.appendConfig.of([\r\n        lintState,\r\n        _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.decorations.compute([lintState], state => {\r\n            let { selected, panel } = state.field(lintState);\r\n            return !selected || !panel || selected.from == selected.to ? _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none : _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.set([\r\n                activeMark.range(selected.from, selected.to)\r\n            ]);\r\n        }),\r\n        (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.hoverTooltip)(lintTooltip, { hideOn: hideTooltip }),\r\n        baseTheme\r\n    ]));\r\n}\r\n/**\r\nReturns a transaction spec which updates the current set of\r\ndiagnostics, and enables the lint extension if if wasn't already\r\nactive.\r\n*/\r\nfunction setDiagnostics(state, diagnostics) {\r\n    return {\r\n        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\r\n    };\r\n}\r\n/**\r\nThe state effect that updates the set of active diagnostics. Can\r\nbe useful when writing an extension that needs to track these.\r\n*/\r\nconst setDiagnosticsEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\nconst togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\nconst movePanelSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\nconst lintState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({\r\n    create() {\r\n        return new LintState(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none, null, null);\r\n    },\r\n    update(value, tr) {\r\n        if (tr.docChanged) {\r\n            let mapped = value.diagnostics.map(tr.changes), selected = null;\r\n            if (value.selected) {\r\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\r\n                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\r\n            }\r\n            value = new LintState(mapped, value.panel, selected);\r\n        }\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setDiagnosticsEffect)) {\r\n                value = LintState.init(effect.value, value.panel, tr.state);\r\n            }\r\n            else if (effect.is(togglePanel)) {\r\n                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\r\n            }\r\n            else if (effect.is(movePanelSelection)) {\r\n                value = new LintState(value.diagnostics, value.panel, effect.value);\r\n            }\r\n        }\r\n        return value;\r\n    },\r\n    provide: f => [_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.showPanel.from(f, val => val.panel),\r\n        _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.decorations.from(f, s => s.diagnostics)]\r\n});\r\n/**\r\nReturns the number of active lint diagnostics in the given state.\r\n*/\r\nfunction diagnosticCount(state) {\r\n    let lint = state.field(lintState, false);\r\n    return lint ? lint.diagnostics.size : 0;\r\n}\r\nconst activeMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({ class: \"cm-lintRange cm-lintRange-active\" });\r\nfunction lintTooltip(view, pos, side) {\r\n    let { diagnostics } = view.state.field(lintState);\r\n    let found = [], stackStart = 2e8, stackEnd = 0;\r\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {\r\n        if (pos >= from && pos <= to &&\r\n            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {\r\n            found.push(spec.diagnostic);\r\n            stackStart = Math.min(from, stackStart);\r\n            stackEnd = Math.max(to, stackEnd);\r\n        }\r\n    });\r\n    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;\r\n    if (diagnosticFilter)\r\n        found = diagnosticFilter(found);\r\n    if (!found.length)\r\n        return null;\r\n    return {\r\n        pos: stackStart,\r\n        end: stackEnd,\r\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\r\n        create() {\r\n            return { dom: diagnosticsTooltip(view, found) };\r\n        }\r\n    };\r\n}\r\nfunction diagnosticsTooltip(view, diagnostics) {\r\n    return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\", { class: \"cm-tooltip-lint\" }, diagnostics.map(d => renderDiagnostic(view, d, false)));\r\n}\r\n/**\r\nCommand to open and focus the lint panel.\r\n*/\r\nconst openLintPanel = (view) => {\r\n    let field = view.state.field(lintState, false);\r\n    if (!field || !field.panel)\r\n        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });\r\n    let panel = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.getPanel)(view, LintPanel.open);\r\n    if (panel)\r\n        panel.dom.querySelector(\".cm-panel-lint ul\").focus();\r\n    return true;\r\n};\r\n/**\r\nCommand to close the lint panel, when open.\r\n*/\r\nconst closeLintPanel = (view) => {\r\n    let field = view.state.field(lintState, false);\r\n    if (!field || !field.panel)\r\n        return false;\r\n    view.dispatch({ effects: togglePanel.of(false) });\r\n    return true;\r\n};\r\n/**\r\nMove the selection to the next diagnostic.\r\n*/\r\nconst nextDiagnostic = (view) => {\r\n    let field = view.state.field(lintState, false);\r\n    if (!field)\r\n        return false;\r\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\r\n    if (!next.value) {\r\n        next = field.diagnostics.iter(0);\r\n        if (!next.value || next.from == sel.from && next.to == sel.to)\r\n            return false;\r\n    }\r\n    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });\r\n    return true;\r\n};\r\n/**\r\nA set of default key bindings for the lint functionality.\r\n\r\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\r\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\r\n*/\r\nconst lintKeymap = [\r\n    { key: \"Mod-Shift-m\", run: openLintPanel, preventDefault: true },\r\n    { key: \"F8\", run: nextDiagnostic }\r\n];\r\nconst lintPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.timeout = -1;\r\n        this.set = true;\r\n        let { delay } = view.state.facet(lintConfig);\r\n        this.lintTime = Date.now() + delay;\r\n        this.run = this.run.bind(this);\r\n        this.timeout = setTimeout(this.run, delay);\r\n    }\r\n    run() {\r\n        let now = Date.now();\r\n        if (now < this.lintTime - 10) {\r\n            setTimeout(this.run, this.lintTime - now);\r\n        }\r\n        else {\r\n            this.set = false;\r\n            let { state } = this.view, { sources } = state.facet(lintConfig);\r\n            Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {\r\n                let all = annotations.reduce((a, b) => a.concat(b));\r\n                if (this.view.state.doc == state.doc)\r\n                    this.view.dispatch(setDiagnostics(this.view.state, all));\r\n            }, error => { (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.logException)(this.view.state, error); });\r\n        }\r\n    }\r\n    update(update) {\r\n        let config = update.state.facet(lintConfig);\r\n        if (update.docChanged || config != update.startState.facet(lintConfig)) {\r\n            this.lintTime = Date.now() + config.delay;\r\n            if (!this.set) {\r\n                this.set = true;\r\n                this.timeout = setTimeout(this.run, config.delay);\r\n            }\r\n        }\r\n    }\r\n    force() {\r\n        if (this.set) {\r\n            this.lintTime = Date.now();\r\n            this.run();\r\n        }\r\n    }\r\n    destroy() {\r\n        clearTimeout(this.timeout);\r\n    }\r\n});\r\nconst lintConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine(input) {\r\n        return Object.assign({ sources: input.map(i => i.source) }, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(input.map(i => i.config), {\r\n            delay: 750,\r\n            markerFilter: null,\r\n            tooltipFilter: null\r\n        }));\r\n    },\r\n    enables: lintPlugin\r\n});\r\n/**\r\nGiven a diagnostic source, this function returns an extension that\r\nenables linting with that source. It will be called whenever the\r\neditor is idle (after its content changed).\r\n*/\r\nfunction linter(source, config = {}) {\r\n    return lintConfig.of({ source, config });\r\n}\r\n/**\r\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\r\neditor is idle to run right away.\r\n*/\r\nfunction forceLinting(view) {\r\n    let plugin = view.plugin(lintPlugin);\r\n    if (plugin)\r\n        plugin.force();\r\n}\r\nfunction assignKeys(actions) {\r\n    let assigned = [];\r\n    if (actions)\r\n        actions: for (let { name } of actions) {\r\n            for (let i = 0; i < name.length; i++) {\r\n                let ch = name[i];\r\n                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\r\n                    assigned.push(ch);\r\n                    continue actions;\r\n                }\r\n            }\r\n            assigned.push(\"\");\r\n        }\r\n    return assigned;\r\n}\r\nfunction renderDiagnostic(view, diagnostic, inPanel) {\r\n    var _a;\r\n    let keys = inPanel ? assignKeys(diagnostic.actions) : [];\r\n    return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"li\", { class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity }, (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\", { class: \"cm-diagnosticText\" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\r\n        let click = (e) => {\r\n            e.preventDefault();\r\n            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\r\n            if (found)\r\n                action.apply(view, found.from, found.to);\r\n        };\r\n        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\r\n        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),\r\n            (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"u\", name.slice(keyIndex, keyIndex + 1)),\r\n            name.slice(keyIndex + 1)];\r\n        return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", {\r\n            type: \"button\",\r\n            class: \"cm-diagnosticAction\",\r\n            onclick: click,\r\n            onmousedown: click,\r\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\r\n        }, nameElt);\r\n    }), diagnostic.source && (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", { class: \"cm-diagnosticSource\" }, diagnostic.source));\r\n}\r\nclass DiagnosticWidget extends _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.WidgetType {\r\n    constructor(diagnostic) {\r\n        super();\r\n        this.diagnostic = diagnostic;\r\n    }\r\n    eq(other) { return other.diagnostic == this.diagnostic; }\r\n    toDOM() {\r\n        return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\", { class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity });\r\n    }\r\n}\r\nclass PanelItem {\r\n    constructor(view, diagnostic) {\r\n        this.diagnostic = diagnostic;\r\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\r\n        this.dom = renderDiagnostic(view, diagnostic, true);\r\n        this.dom.id = this.id;\r\n        this.dom.setAttribute(\"role\", \"option\");\r\n    }\r\n}\r\nclass LintPanel {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.items = [];\r\n        let onkeydown = (event) => {\r\n            if (event.keyCode == 27) { // Escape\r\n                closeLintPanel(this.view);\r\n                this.view.focus();\r\n            }\r\n            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp\r\n                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\r\n            }\r\n            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown\r\n                this.moveSelection((this.selectedIndex + 1) % this.items.length);\r\n            }\r\n            else if (event.keyCode == 36) { // Home\r\n                this.moveSelection(0);\r\n            }\r\n            else if (event.keyCode == 35) { // End\r\n                this.moveSelection(this.items.length - 1);\r\n            }\r\n            else if (event.keyCode == 13) { // Enter\r\n                this.view.focus();\r\n            }\r\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z\r\n                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\r\n                for (let i = 0; i < keys.length; i++)\r\n                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\r\n                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\r\n                        if (found)\r\n                            diagnostic.actions[i].apply(view, found.from, found.to);\r\n                    }\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n        };\r\n        let onclick = (event) => {\r\n            for (let i = 0; i < this.items.length; i++) {\r\n                if (this.items[i].dom.contains(event.target))\r\n                    this.moveSelection(i);\r\n            }\r\n        };\r\n        this.list = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\", {\r\n            tabIndex: 0,\r\n            role: \"listbox\",\r\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\r\n            onkeydown,\r\n            onclick\r\n        });\r\n        this.dom = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", { class: \"cm-panel-lint\" }, this.list, (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", {\r\n            type: \"button\",\r\n            name: \"close\",\r\n            \"aria-label\": this.view.state.phrase(\"close\"),\r\n            onclick: () => closeLintPanel(this.view)\r\n        }, \"×\"));\r\n        this.update();\r\n    }\r\n    get selectedIndex() {\r\n        let selected = this.view.state.field(lintState).selected;\r\n        if (!selected)\r\n            return -1;\r\n        for (let i = 0; i < this.items.length; i++)\r\n            if (this.items[i].diagnostic == selected.diagnostic)\r\n                return i;\r\n        return -1;\r\n    }\r\n    update() {\r\n        let { diagnostics, selected } = this.view.state.field(lintState);\r\n        let i = 0, needsSync = false, newSelectedItem = null;\r\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {\r\n            let found = -1, item;\r\n            for (let j = i; j < this.items.length; j++)\r\n                if (this.items[j].diagnostic == spec.diagnostic) {\r\n                    found = j;\r\n                    break;\r\n                }\r\n            if (found < 0) {\r\n                item = new PanelItem(this.view, spec.diagnostic);\r\n                this.items.splice(i, 0, item);\r\n                needsSync = true;\r\n            }\r\n            else {\r\n                item = this.items[found];\r\n                if (found > i) {\r\n                    this.items.splice(i, found - i);\r\n                    needsSync = true;\r\n                }\r\n            }\r\n            if (selected && item.diagnostic == selected.diagnostic) {\r\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\r\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\r\n                    newSelectedItem = item;\r\n                }\r\n            }\r\n            else if (item.dom.hasAttribute(\"aria-selected\")) {\r\n                item.dom.removeAttribute(\"aria-selected\");\r\n            }\r\n            i++;\r\n        });\r\n        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\r\n            needsSync = true;\r\n            this.items.pop();\r\n        }\r\n        if (this.items.length == 0) {\r\n            this.items.push(new PanelItem(this.view, {\r\n                from: -1, to: -1,\r\n                severity: \"info\",\r\n                message: this.view.state.phrase(\"No diagnostics\")\r\n            }));\r\n            needsSync = true;\r\n        }\r\n        if (newSelectedItem) {\r\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\r\n            this.view.requestMeasure({\r\n                key: this,\r\n                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),\r\n                write: ({ sel, panel }) => {\r\n                    if (sel.top < panel.top)\r\n                        this.list.scrollTop -= panel.top - sel.top;\r\n                    else if (sel.bottom > panel.bottom)\r\n                        this.list.scrollTop += sel.bottom - panel.bottom;\r\n                }\r\n            });\r\n        }\r\n        else if (this.selectedIndex < 0) {\r\n            this.list.removeAttribute(\"aria-activedescendant\");\r\n        }\r\n        if (needsSync)\r\n            this.sync();\r\n    }\r\n    sync() {\r\n        let domPos = this.list.firstChild;\r\n        function rm() {\r\n            let prev = domPos;\r\n            domPos = prev.nextSibling;\r\n            prev.remove();\r\n        }\r\n        for (let item of this.items) {\r\n            if (item.dom.parentNode == this.list) {\r\n                while (domPos != item.dom)\r\n                    rm();\r\n                domPos = item.dom.nextSibling;\r\n            }\r\n            else {\r\n                this.list.insertBefore(item.dom, domPos);\r\n            }\r\n        }\r\n        while (domPos)\r\n            rm();\r\n    }\r\n    moveSelection(selectedIndex) {\r\n        if (this.selectedIndex < 0)\r\n            return;\r\n        let field = this.view.state.field(lintState);\r\n        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\r\n        if (!selection)\r\n            return;\r\n        this.view.dispatch({\r\n            selection: { anchor: selection.from, head: selection.to },\r\n            scrollIntoView: true,\r\n            effects: movePanelSelection.of(selection)\r\n        });\r\n    }\r\n    static open(view) { return new LintPanel(view); }\r\n}\r\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\r\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\r\n}\r\nfunction underline(color) {\r\n    return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\r\n}\r\nconst baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({\r\n    \".cm-diagnostic\": {\r\n        padding: \"3px 6px 3px 8px\",\r\n        marginLeft: \"-1px\",\r\n        display: \"block\",\r\n        whiteSpace: \"pre-wrap\"\r\n    },\r\n    \".cm-diagnostic-error\": { borderLeft: \"5px solid #d11\" },\r\n    \".cm-diagnostic-warning\": { borderLeft: \"5px solid orange\" },\r\n    \".cm-diagnostic-info\": { borderLeft: \"5px solid #999\" },\r\n    \".cm-diagnosticAction\": {\r\n        font: \"inherit\",\r\n        border: \"none\",\r\n        padding: \"2px 4px\",\r\n        backgroundColor: \"#444\",\r\n        color: \"white\",\r\n        borderRadius: \"3px\",\r\n        marginLeft: \"8px\"\r\n    },\r\n    \".cm-diagnosticSource\": {\r\n        fontSize: \"70%\",\r\n        opacity: .7\r\n    },\r\n    \".cm-lintRange\": {\r\n        backgroundPosition: \"left bottom\",\r\n        backgroundRepeat: \"repeat-x\",\r\n        paddingBottom: \"0.7px\",\r\n    },\r\n    \".cm-lintRange-error\": { backgroundImage: /*@__PURE__*/underline(\"#d11\") },\r\n    \".cm-lintRange-warning\": { backgroundImage: /*@__PURE__*/underline(\"orange\") },\r\n    \".cm-lintRange-info\": { backgroundImage: /*@__PURE__*/underline(\"#999\") },\r\n    \".cm-lintRange-active\": { backgroundColor: \"#ffdd9980\" },\r\n    \".cm-tooltip-lint\": {\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    \".cm-lintPoint\": {\r\n        position: \"relative\",\r\n        \"&:after\": {\r\n            content: '\"\"',\r\n            position: \"absolute\",\r\n            bottom: 0,\r\n            left: \"-2px\",\r\n            borderLeft: \"3px solid transparent\",\r\n            borderRight: \"3px solid transparent\",\r\n            borderBottom: \"4px solid #d11\"\r\n        }\r\n    },\r\n    \".cm-lintPoint-warning\": {\r\n        \"&:after\": { borderBottomColor: \"orange\" }\r\n    },\r\n    \".cm-lintPoint-info\": {\r\n        \"&:after\": { borderBottomColor: \"#999\" }\r\n    },\r\n    \".cm-panel.cm-panel-lint\": {\r\n        position: \"relative\",\r\n        \"& ul\": {\r\n            maxHeight: \"100px\",\r\n            overflowY: \"auto\",\r\n            \"& [aria-selected]\": {\r\n                backgroundColor: \"#ddd\",\r\n                \"& u\": { textDecoration: \"underline\" }\r\n            },\r\n            \"&:focus [aria-selected]\": {\r\n                background_fallback: \"#bdf\",\r\n                backgroundColor: \"Highlight\",\r\n                color_fallback: \"white\",\r\n                color: \"HighlightText\"\r\n            },\r\n            \"& u\": { textDecoration: \"none\" },\r\n            padding: 0,\r\n            margin: 0\r\n        },\r\n        \"& [name=close]\": {\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            right: \"2px\",\r\n            background: \"inherit\",\r\n            border: \"none\",\r\n            font: \"inherit\",\r\n            padding: 0,\r\n            margin: 0\r\n        }\r\n    }\r\n});\r\nclass LintGutterMarker extends _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.GutterMarker {\r\n    constructor(diagnostics) {\r\n        super();\r\n        this.diagnostics = diagnostics;\r\n        this.severity = diagnostics.reduce((max, d) => {\r\n            let s = d.severity;\r\n            return s == \"error\" || s == \"warning\" && max == \"info\" ? s : max;\r\n        }, \"info\");\r\n    }\r\n    toDOM(view) {\r\n        let elt = document.createElement(\"div\");\r\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\r\n        let diagnostics = this.diagnostics;\r\n        let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;\r\n        if (diagnosticsFilter)\r\n            diagnostics = diagnosticsFilter(diagnostics);\r\n        if (diagnostics.length)\r\n            elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);\r\n        return elt;\r\n    }\r\n}\r\nfunction trackHoverOn(view, marker) {\r\n    let mousemove = (event) => {\r\n        let rect = marker.getBoundingClientRect();\r\n        if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ &&\r\n            event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */)\r\n            return;\r\n        for (let target = event.target; target; target = target.parentNode) {\r\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\"))\r\n                return;\r\n        }\r\n        window.removeEventListener(\"mousemove\", mousemove);\r\n        if (view.state.field(lintGutterTooltip))\r\n            view.dispatch({ effects: setLintGutterTooltip.of(null) });\r\n    };\r\n    window.addEventListener(\"mousemove\", mousemove);\r\n}\r\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\r\n    function hovered() {\r\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\r\n        const linePos = view.coordsAtPos(line.from);\r\n        if (linePos) {\r\n            view.dispatch({ effects: setLintGutterTooltip.of({\r\n                    pos: line.from,\r\n                    above: false,\r\n                    create() {\r\n                        return {\r\n                            dom: diagnosticsTooltip(view, diagnostics),\r\n                            getCoords: () => marker.getBoundingClientRect()\r\n                        };\r\n                    }\r\n                }) });\r\n        }\r\n        marker.onmouseout = marker.onmousemove = null;\r\n        trackHoverOn(view, marker);\r\n    }\r\n    let { hoverTime } = view.state.facet(lintGutterConfig);\r\n    let hoverTimeout = setTimeout(hovered, hoverTime);\r\n    marker.onmouseout = () => {\r\n        clearTimeout(hoverTimeout);\r\n        marker.onmouseout = marker.onmousemove = null;\r\n    };\r\n    marker.onmousemove = () => {\r\n        clearTimeout(hoverTimeout);\r\n        hoverTimeout = setTimeout(hovered, hoverTime);\r\n    };\r\n}\r\nfunction markersForDiagnostics(doc, diagnostics) {\r\n    let byLine = Object.create(null);\r\n    for (let diagnostic of diagnostics) {\r\n        let line = doc.lineAt(diagnostic.from);\r\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\r\n    }\r\n    let markers = [];\r\n    for (let line in byLine) {\r\n        markers.push(new LintGutterMarker(byLine[line]).range(+line));\r\n    }\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.of(markers, true);\r\n}\r\nconst lintGutterExtension = /*@__PURE__*/(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.gutter)({\r\n    class: \"cm-gutter-lint\",\r\n    markers: view => view.state.field(lintGutterMarkers),\r\n});\r\nconst lintGutterMarkers = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({\r\n    create() {\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.empty;\r\n    },\r\n    update(markers, tr) {\r\n        markers = markers.map(tr.changes);\r\n        let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setDiagnosticsEffect)) {\r\n                let diagnostics = effect.value;\r\n                if (diagnosticFilter)\r\n                    diagnostics = diagnosticFilter(diagnostics || []);\r\n                markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\r\n            }\r\n        }\r\n        return markers;\r\n    }\r\n});\r\nconst setLintGutterTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\nconst lintGutterTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({\r\n    create() { return null; },\r\n    update(tooltip, tr) {\r\n        if (tooltip && tr.docChanged)\r\n            tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });\r\n        return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\r\n    },\r\n    provide: field => _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.showTooltip.from(field)\r\n});\r\nconst lintGutterTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({\r\n    \".cm-gutter-lint\": {\r\n        width: \"1.4em\",\r\n        \"& .cm-gutterElement\": {\r\n            padding: \".2em\"\r\n        }\r\n    },\r\n    \".cm-lint-marker\": {\r\n        width: \"1em\",\r\n        height: \"1em\"\r\n    },\r\n    \".cm-lint-marker-info\": {\r\n        content: /*@__PURE__*/svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\r\n    },\r\n    \".cm-lint-marker-warning\": {\r\n        content: /*@__PURE__*/svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`),\r\n    },\r\n    \".cm-lint-marker-error\": {\r\n        content: /*@__PURE__*/svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\r\n    },\r\n});\r\nconst lintGutterConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(configs, {\r\n            hoverTime: 300 /* Hover.Time */,\r\n            markerFilter: null,\r\n            tooltipFilter: null\r\n        });\r\n    }\r\n});\r\n/**\r\nReturns an extension that installs a gutter showing markers for\r\neach line that has diagnostics, which can be hovered over to see\r\nthe diagnostics.\r\n*/\r\nfunction lintGutter(config = {}) {\r\n    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\r\n}\r\n/**\r\nIterate over the marked diagnostics for the given editor state,\r\ncalling `f` for each of them. Note that, if the document changed\r\nsince the diagnostics werecreated, the `Diagnostic` object will\r\nhold the original outdated position, whereas the `to` and `from`\r\narguments hold the diagnostic's current position.\r\n*/\r\nfunction forEachDiagnostic(state, f) {\r\n    let lState = state.field(lintState, false);\r\n    if (lState && lState.diagnostics.size)\r\n        for (let iter = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.iter([lState.diagnostics]); iter.value; iter.next())\r\n            f(iter.value.spec.diagnostic, iter.from, iter.to);\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/lint/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/search/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@codemirror/search/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RegExpCursor\": function() { return /* binding */ RegExpCursor; },\n/* harmony export */   \"SearchCursor\": function() { return /* binding */ SearchCursor; },\n/* harmony export */   \"SearchQuery\": function() { return /* binding */ SearchQuery; },\n/* harmony export */   \"closeSearchPanel\": function() { return /* binding */ closeSearchPanel; },\n/* harmony export */   \"findNext\": function() { return /* binding */ findNext; },\n/* harmony export */   \"findPrevious\": function() { return /* binding */ findPrevious; },\n/* harmony export */   \"getSearchQuery\": function() { return /* binding */ getSearchQuery; },\n/* harmony export */   \"gotoLine\": function() { return /* binding */ gotoLine; },\n/* harmony export */   \"highlightSelectionMatches\": function() { return /* binding */ highlightSelectionMatches; },\n/* harmony export */   \"openSearchPanel\": function() { return /* binding */ openSearchPanel; },\n/* harmony export */   \"replaceAll\": function() { return /* binding */ replaceAll; },\n/* harmony export */   \"replaceNext\": function() { return /* binding */ replaceNext; },\n/* harmony export */   \"search\": function() { return /* binding */ search; },\n/* harmony export */   \"searchKeymap\": function() { return /* binding */ searchKeymap; },\n/* harmony export */   \"searchPanelOpen\": function() { return /* binding */ searchPanelOpen; },\n/* harmony export */   \"selectMatches\": function() { return /* binding */ selectMatches; },\n/* harmony export */   \"selectNextOccurrence\": function() { return /* binding */ selectNextOccurrence; },\n/* harmony export */   \"selectSelectionMatches\": function() { return /* binding */ selectSelectionMatches; },\n/* harmony export */   \"setSearchQuery\": function() { return /* binding */ setSearchQuery; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var crelt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crelt */ \"./node_modules/crelt/index.es.js\");\n\r\n\r\n\r\n\r\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\r\n    ? x => x.normalize(\"NFKD\") : x => x;\r\n/**\r\nA search cursor provides an iterator over text matches in a\r\ndocument.\r\n*/\r\nclass SearchCursor {\r\n    /**\r\n    Create a text cursor. The query is the search string, `from` to\r\n    `to` provides the region to search.\r\n    \r\n    When `normalize` is given, it will be called, on both the query\r\n    string and the content it is matched against, before comparing.\r\n    You can, for example, create a case-insensitive search by\r\n    passing `s => s.toLowerCase()`.\r\n    \r\n    Text is always normalized with\r\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\r\n    (when supported).\r\n    */\r\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\r\n        this.test = test;\r\n        /**\r\n        The current match (only holds a meaningful value after\r\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\r\n        `done` is false).\r\n        */\r\n        this.value = { from: 0, to: 0 };\r\n        /**\r\n        Whether the end of the iterated region has been reached.\r\n        */\r\n        this.done = false;\r\n        this.matches = [];\r\n        this.buffer = \"\";\r\n        this.bufferPos = 0;\r\n        this.iter = text.iterRange(from, to);\r\n        this.bufferStart = from;\r\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\r\n        this.query = this.normalize(query);\r\n    }\r\n    peek() {\r\n        if (this.bufferPos == this.buffer.length) {\r\n            this.bufferStart += this.buffer.length;\r\n            this.iter.next();\r\n            if (this.iter.done)\r\n                return -1;\r\n            this.bufferPos = 0;\r\n            this.buffer = this.iter.value;\r\n        }\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(this.buffer, this.bufferPos);\r\n    }\r\n    /**\r\n    Look for the next match. Updates the iterator's\r\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\r\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\r\n    at least once before using the cursor.\r\n    */\r\n    next() {\r\n        while (this.matches.length)\r\n            this.matches.pop();\r\n        return this.nextOverlapping();\r\n    }\r\n    /**\r\n    The `next` method will ignore matches that partially overlap a\r\n    previous match. This method behaves like `next`, but includes\r\n    such matches.\r\n    */\r\n    nextOverlapping() {\r\n        for (;;) {\r\n            let next = this.peek();\r\n            if (next < 0) {\r\n                this.done = true;\r\n                return this;\r\n            }\r\n            let str = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(next), start = this.bufferStart + this.bufferPos;\r\n            this.bufferPos += (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);\r\n            let norm = this.normalize(str);\r\n            for (let i = 0, pos = start;; i++) {\r\n                let code = norm.charCodeAt(i);\r\n                let match = this.match(code, pos);\r\n                if (match) {\r\n                    this.value = match;\r\n                    return this;\r\n                }\r\n                if (i == norm.length - 1)\r\n                    break;\r\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\r\n                    pos++;\r\n            }\r\n        }\r\n    }\r\n    match(code, pos) {\r\n        let match = null;\r\n        for (let i = 0; i < this.matches.length; i += 2) {\r\n            let index = this.matches[i], keep = false;\r\n            if (this.query.charCodeAt(index) == code) {\r\n                if (index == this.query.length - 1) {\r\n                    match = { from: this.matches[i + 1], to: pos + 1 };\r\n                }\r\n                else {\r\n                    this.matches[i]++;\r\n                    keep = true;\r\n                }\r\n            }\r\n            if (!keep) {\r\n                this.matches.splice(i, 2);\r\n                i -= 2;\r\n            }\r\n        }\r\n        if (this.query.charCodeAt(0) == code) {\r\n            if (this.query.length == 1)\r\n                match = { from: pos, to: pos + 1 };\r\n            else\r\n                this.matches.push(1, pos);\r\n        }\r\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))\r\n            match = null;\r\n        return match;\r\n    }\r\n}\r\nif (typeof Symbol != \"undefined\")\r\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\r\n\r\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\r\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\r\n/**\r\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\r\nbut searches for a regular expression pattern instead of a plain\r\nstring.\r\n*/\r\nclass RegExpCursor {\r\n    /**\r\n    Create a cursor that will search the given range in the given\r\n    document. `query` should be the raw pattern (as you'd pass it to\r\n    `new RegExp`).\r\n    */\r\n    constructor(text, query, options, from = 0, to = text.length) {\r\n        this.text = text;\r\n        this.to = to;\r\n        this.curLine = \"\";\r\n        /**\r\n        Set to `true` when the cursor has reached the end of the search\r\n        range.\r\n        */\r\n        this.done = false;\r\n        /**\r\n        Will contain an object with the extent of the match and the\r\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\r\n        sucessfully finds a match.\r\n        */\r\n        this.value = empty;\r\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\r\n            return new MultilineRegExpCursor(text, query, options, from, to);\r\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\r\n        this.test = options === null || options === void 0 ? void 0 : options.test;\r\n        this.iter = text.iter();\r\n        let startLine = text.lineAt(from);\r\n        this.curLineStart = startLine.from;\r\n        this.matchPos = toCharEnd(text, from);\r\n        this.getLine(this.curLineStart);\r\n    }\r\n    getLine(skip) {\r\n        this.iter.next(skip);\r\n        if (this.iter.lineBreak) {\r\n            this.curLine = \"\";\r\n        }\r\n        else {\r\n            this.curLine = this.iter.value;\r\n            if (this.curLineStart + this.curLine.length > this.to)\r\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\r\n            this.iter.next();\r\n        }\r\n    }\r\n    nextLine() {\r\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\r\n        if (this.curLineStart > this.to)\r\n            this.curLine = \"\";\r\n        else\r\n            this.getLine(0);\r\n    }\r\n    /**\r\n    Move to the next match, if there is one.\r\n    */\r\n    next() {\r\n        for (let off = this.matchPos - this.curLineStart;;) {\r\n            this.re.lastIndex = off;\r\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\r\n            if (match) {\r\n                let from = this.curLineStart + match.index, to = from + match[0].length;\r\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\r\n                if (from == this.curLineStart + this.curLine.length)\r\n                    this.nextLine();\r\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\r\n                    this.value = { from, to, match };\r\n                    return this;\r\n                }\r\n                off = this.matchPos - this.curLineStart;\r\n            }\r\n            else if (this.curLineStart + this.curLine.length < this.to) {\r\n                this.nextLine();\r\n                off = 0;\r\n            }\r\n            else {\r\n                this.done = true;\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst flattened = /*@__PURE__*/new WeakMap();\r\n// Reusable (partially) flattened document strings\r\nclass FlattenedDoc {\r\n    constructor(from, text) {\r\n        this.from = from;\r\n        this.text = text;\r\n    }\r\n    get to() { return this.from + this.text.length; }\r\n    static get(doc, from, to) {\r\n        let cached = flattened.get(doc);\r\n        if (!cached || cached.from >= to || cached.to <= from) {\r\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\r\n            flattened.set(doc, flat);\r\n            return flat;\r\n        }\r\n        if (cached.from == from && cached.to == to)\r\n            return cached;\r\n        let { text, from: cachedFrom } = cached;\r\n        if (cachedFrom > from) {\r\n            text = doc.sliceString(from, cachedFrom) + text;\r\n            cachedFrom = from;\r\n        }\r\n        if (cached.to < to)\r\n            text += doc.sliceString(cached.to, to);\r\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\r\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\r\n    }\r\n}\r\nclass MultilineRegExpCursor {\r\n    constructor(text, query, options, from, to) {\r\n        this.text = text;\r\n        this.to = to;\r\n        this.done = false;\r\n        this.value = empty;\r\n        this.matchPos = toCharEnd(text, from);\r\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\r\n        this.test = options === null || options === void 0 ? void 0 : options.test;\r\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\r\n    }\r\n    chunkEnd(pos) {\r\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\r\n    }\r\n    next() {\r\n        for (;;) {\r\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\r\n            let match = this.re.exec(this.flat.text);\r\n            // Skip empty matches directly after the last match\r\n            if (match && !match[0] && match.index == off) {\r\n                this.re.lastIndex = off + 1;\r\n                match = this.re.exec(this.flat.text);\r\n            }\r\n            if (match) {\r\n                let from = this.flat.from + match.index, to = from + match[0].length;\r\n                // If a match goes almost to the end of a noncomplete chunk, try\r\n                // again, since it'll likely be able to match more\r\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\r\n                    (!this.test || this.test(from, to, match))) {\r\n                    this.value = { from, to, match };\r\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\r\n                    return this;\r\n                }\r\n            }\r\n            if (this.flat.to == this.to) {\r\n                this.done = true;\r\n                return this;\r\n            }\r\n            // Grow the flattened doc\r\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\r\n        }\r\n    }\r\n}\r\nif (typeof Symbol != \"undefined\") {\r\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\r\n        function () { return this; };\r\n}\r\nfunction validRegExp(source) {\r\n    try {\r\n        new RegExp(source, baseFlags);\r\n        return true;\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}\r\nfunction toCharEnd(text, pos) {\r\n    if (pos >= text.length)\r\n        return pos;\r\n    let line = text.lineAt(pos), next;\r\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\r\n        pos++;\r\n    return pos;\r\n}\r\n\r\nfunction createLineDialog(view) {\r\n    let input = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\", { class: \"cm-textfield\", name: \"line\" });\r\n    let dom = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"form\", {\r\n        class: \"cm-gotoLine\",\r\n        onkeydown: (event) => {\r\n            if (event.keyCode == 27) { // Escape\r\n                event.preventDefault();\r\n                view.dispatch({ effects: dialogEffect.of(false) });\r\n                view.focus();\r\n            }\r\n            else if (event.keyCode == 13) { // Enter\r\n                event.preventDefault();\r\n                go();\r\n            }\r\n        },\r\n        onsubmit: (event) => {\r\n            event.preventDefault();\r\n            go();\r\n        }\r\n    }, (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\r\n    function go() {\r\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\r\n        if (!match)\r\n            return;\r\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\r\n        let [, sign, ln, cl, percent] = match;\r\n        let col = cl ? +cl.slice(1) : 0;\r\n        let line = ln ? +ln : startLine.number;\r\n        if (ln && percent) {\r\n            let pc = line / 100;\r\n            if (sign)\r\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\r\n            line = Math.round(state.doc.lines * pc);\r\n        }\r\n        else if (ln && sign) {\r\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\r\n        }\r\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\r\n        view.dispatch({\r\n            effects: dialogEffect.of(false),\r\n            selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\r\n            scrollIntoView: true\r\n        });\r\n        view.focus();\r\n    }\r\n    return { dom };\r\n}\r\nconst dialogEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst dialogField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return true; },\r\n    update(value, tr) {\r\n        for (let e of tr.effects)\r\n            if (e.is(dialogEffect))\r\n                value = e.value;\r\n        return value;\r\n    },\r\n    provide: f => _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.showPanel.from(f, val => val ? createLineDialog : null)\r\n});\r\n/**\r\nCommand that shows a dialog asking the user for a line number, and\r\nwhen a valid position is provided, moves the cursor to that line.\r\n\r\nSupports line numbers, relative line offsets prefixed with `+` or\r\n`-`, document percentages suffixed with `%`, and an optional\r\ncolumn position by adding `:` and a second number after the line\r\nnumber.\r\n\r\nThe dialog can be styled with the `panel.gotoLine` theme\r\nselector.\r\n*/\r\nconst gotoLine = view => {\r\n    let panel = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getPanel)(view, createLineDialog);\r\n    if (!panel) {\r\n        let effects = [dialogEffect.of(true)];\r\n        if (view.state.field(dialogField, false) == null)\r\n            effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of([dialogField, baseTheme$1]));\r\n        view.dispatch({ effects });\r\n        panel = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getPanel)(view, createLineDialog);\r\n    }\r\n    if (panel)\r\n        panel.dom.querySelector(\"input\").focus();\r\n    return true;\r\n};\r\nconst baseTheme$1 = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\r\n    \".cm-panel.cm-gotoLine\": {\r\n        padding: \"2px 6px 4px\",\r\n        \"& label\": { fontSize: \"80%\" }\r\n    }\r\n});\r\n\r\nconst defaultHighlightOptions = {\r\n    highlightWordAroundCursor: false,\r\n    minSelectionLength: 1,\r\n    maxMatches: 100,\r\n    wholeWords: false\r\n};\r\nconst highlightConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(options) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(options, defaultHighlightOptions, {\r\n            highlightWordAroundCursor: (a, b) => a || b,\r\n            minSelectionLength: Math.min,\r\n            maxMatches: Math.min\r\n        });\r\n    }\r\n});\r\n/**\r\nThis extension highlights text that matches the selection. It uses\r\nthe `\"cm-selectionMatch\"` class for the highlighting. When\r\n`highlightWordAroundCursor` is enabled, the word at the cursor\r\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\r\n*/\r\nfunction highlightSelectionMatches(options) {\r\n    let ext = [defaultTheme, matchHighlighter];\r\n    if (options)\r\n        ext.push(highlightConfig.of(options));\r\n    return ext;\r\n}\r\nconst matchDeco = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-selectionMatch\" });\r\nconst mainMatchDeco = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\r\n// Whether the characters directly outside the given positions are non-word characters\r\nfunction insideWordBoundaries(check, state, from, to) {\r\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) &&\r\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word);\r\n}\r\n// Whether the characters directly at the given positions are word characters\r\nfunction insideWord(check, state, from, to) {\r\n    return check(state.sliceDoc(from, from + 1)) == _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word\r\n        && check(state.sliceDoc(to - 1, to)) == _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word;\r\n}\r\nconst matchHighlighter = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.decorations = this.getDeco(view);\r\n    }\r\n    update(update) {\r\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\r\n            this.decorations = this.getDeco(update.view);\r\n    }\r\n    getDeco(view) {\r\n        let conf = view.state.facet(highlightConfig);\r\n        let { state } = view, sel = state.selection;\r\n        if (sel.ranges.length > 1)\r\n            return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n        let range = sel.main, query, check = null;\r\n        if (range.empty) {\r\n            if (!conf.highlightWordAroundCursor)\r\n                return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n            let word = state.wordAt(range.head);\r\n            if (!word)\r\n                return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n            check = state.charCategorizer(range.head);\r\n            query = state.sliceDoc(word.from, word.to);\r\n        }\r\n        else {\r\n            let len = range.to - range.from;\r\n            if (len < conf.minSelectionLength || len > 200)\r\n                return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n            if (conf.wholeWords) {\r\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\r\n                check = state.charCategorizer(range.head);\r\n                if (!(insideWordBoundaries(check, state, range.from, range.to)\r\n                    && insideWord(check, state, range.from, range.to)))\r\n                    return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n            }\r\n            else {\r\n                query = state.sliceDoc(range.from, range.to).trim();\r\n                if (!query)\r\n                    return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n            }\r\n        }\r\n        let deco = [];\r\n        for (let part of view.visibleRanges) {\r\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\r\n            while (!cursor.next().done) {\r\n                let { from, to } = cursor.value;\r\n                if (!check || insideWordBoundaries(check, state, from, to)) {\r\n                    if (range.empty && from <= range.from && to >= range.to)\r\n                        deco.push(mainMatchDeco.range(from, to));\r\n                    else if (from >= range.to || to <= range.from)\r\n                        deco.push(matchDeco.range(from, to));\r\n                    if (deco.length > conf.maxMatches)\r\n                        return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n                }\r\n            }\r\n        }\r\n        return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.set(deco);\r\n    }\r\n}, {\r\n    decorations: v => v.decorations\r\n});\r\nconst defaultTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\r\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\r\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\r\n});\r\n// Select the words around the cursors.\r\nconst selectWord = ({ state, dispatch }) => {\r\n    let { selection } = state;\r\n    let newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head)), selection.mainIndex);\r\n    if (newSel.eq(selection))\r\n        return false;\r\n    dispatch(state.update({ selection: newSel }));\r\n    return true;\r\n};\r\n// Find next occurrence of query relative to last cursor. Wrap around\r\n// the document if there are no more matches.\r\nfunction findNextOccurrence(state, query) {\r\n    let { main, ranges } = state.selection;\r\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\r\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\r\n        cursor.next();\r\n        if (cursor.done) {\r\n            if (cycled)\r\n                return null;\r\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\r\n            cycled = true;\r\n        }\r\n        else {\r\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\r\n                continue;\r\n            if (fullWord) {\r\n                let word = state.wordAt(cursor.value.from);\r\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\r\n                    continue;\r\n            }\r\n            return cursor.value;\r\n        }\r\n    }\r\n}\r\n/**\r\nSelect next occurrence of the current selection. Expand selection\r\nto the surrounding word when the selection is empty.\r\n*/\r\nconst selectNextOccurrence = ({ state, dispatch }) => {\r\n    let { ranges } = state.selection;\r\n    if (ranges.some(sel => sel.from === sel.to))\r\n        return selectWord({ state, dispatch });\r\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\r\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\r\n        return false;\r\n    let range = findNextOccurrence(state, searchedText);\r\n    if (!range)\r\n        return false;\r\n    dispatch(state.update({\r\n        selection: state.selection.addRange(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.from, range.to), false),\r\n        effects: _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.scrollIntoView(range.to)\r\n    }));\r\n    return true;\r\n};\r\n\r\nconst searchConfigFacet = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(configs, {\r\n            top: false,\r\n            caseSensitive: false,\r\n            literal: false,\r\n            wholeWord: false,\r\n            createPanel: view => new SearchPanel(view)\r\n        });\r\n    }\r\n});\r\n/**\r\nAdd search state to the editor configuration, and optionally\r\nconfigure the search extension.\r\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\r\nenable this if it isn't already on).\r\n*/\r\nfunction search(config) {\r\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\r\n}\r\n/**\r\nA search query. Part of the editor's search state.\r\n*/\r\nclass SearchQuery {\r\n    /**\r\n    Create a query object.\r\n    */\r\n    constructor(config) {\r\n        this.search = config.search;\r\n        this.caseSensitive = !!config.caseSensitive;\r\n        this.literal = !!config.literal;\r\n        this.regexp = !!config.regexp;\r\n        this.replace = config.replace || \"\";\r\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\r\n        this.unquoted = this.unquote(this.search);\r\n        this.wholeWord = !!config.wholeWord;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    unquote(text) {\r\n        return this.literal ? text :\r\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\r\n    }\r\n    /**\r\n    Compare this query to another query.\r\n    */\r\n    eq(other) {\r\n        return this.search == other.search && this.replace == other.replace &&\r\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\r\n            this.wholeWord == other.wholeWord;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    create() {\r\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\r\n    }\r\n    /**\r\n    Get a search cursor for this query, searching through the given\r\n    range in the given state.\r\n    */\r\n    getCursor(state, from = 0, to) {\r\n        let st = state.doc ? state : _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.create({ doc: state });\r\n        if (to == null)\r\n            to = st.doc.length;\r\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\r\n    }\r\n}\r\nclass QueryType {\r\n    constructor(spec) {\r\n        this.spec = spec;\r\n    }\r\n}\r\nfunction stringCursor(spec, state, from, to) {\r\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\r\n}\r\nfunction stringWordTest(doc, categorizer) {\r\n    return (from, to, buf, bufPos) => {\r\n        if (bufPos > from || bufPos + buf.length < to) {\r\n            bufPos = Math.max(0, from - 2);\r\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\r\n        }\r\n        return (categorizer(charBefore(buf, from - bufPos)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word ||\r\n            categorizer(charAfter(buf, from - bufPos)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) &&\r\n            (categorizer(charAfter(buf, to - bufPos)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word ||\r\n                categorizer(charBefore(buf, to - bufPos)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word);\r\n    };\r\n}\r\nclass StringQuery extends QueryType {\r\n    constructor(spec) {\r\n        super(spec);\r\n    }\r\n    nextMatch(state, curFrom, curTo) {\r\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\r\n        if (cursor.done)\r\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\r\n        return cursor.done ? null : cursor.value;\r\n    }\r\n    // Searching in reverse is, rather than implementing inverted search\r\n    // cursor, done by scanning chunk after chunk forward.\r\n    prevMatchInRange(state, from, to) {\r\n        for (let pos = to;;) {\r\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\r\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\r\n            while (!cursor.nextOverlapping().done)\r\n                range = cursor.value;\r\n            if (range)\r\n                return range;\r\n            if (start == from)\r\n                return null;\r\n            pos -= 10000 /* FindPrev.ChunkSize */;\r\n        }\r\n    }\r\n    prevMatch(state, curFrom, curTo) {\r\n        return this.prevMatchInRange(state, 0, curFrom) ||\r\n            this.prevMatchInRange(state, curTo, state.doc.length);\r\n    }\r\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\r\n    matchAll(state, limit) {\r\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\r\n        while (!cursor.next().done) {\r\n            if (ranges.length >= limit)\r\n                return null;\r\n            ranges.push(cursor.value);\r\n        }\r\n        return ranges;\r\n    }\r\n    highlight(state, from, to, add) {\r\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\r\n        while (!cursor.next().done)\r\n            add(cursor.value.from, cursor.value.to);\r\n    }\r\n}\r\nfunction regexpCursor(spec, state, from, to) {\r\n    return new RegExpCursor(state.doc, spec.search, {\r\n        ignoreCase: !spec.caseSensitive,\r\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\r\n    }, from, to);\r\n}\r\nfunction charBefore(str, index) {\r\n    return str.slice((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(str, index, false), index);\r\n}\r\nfunction charAfter(str, index) {\r\n    return str.slice(index, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(str, index));\r\n}\r\nfunction regexpWordTest(categorizer) {\r\n    return (_from, _to, match) => !match[0].length ||\r\n        (categorizer(charBefore(match.input, match.index)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word ||\r\n            categorizer(charAfter(match.input, match.index)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) &&\r\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word ||\r\n                categorizer(charBefore(match.input, match.index + match[0].length)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word);\r\n}\r\nclass RegExpQuery extends QueryType {\r\n    nextMatch(state, curFrom, curTo) {\r\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\r\n        if (cursor.done)\r\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\r\n        return cursor.done ? null : cursor.value;\r\n    }\r\n    prevMatchInRange(state, from, to) {\r\n        for (let size = 1;; size++) {\r\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\r\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\r\n            while (!cursor.next().done)\r\n                range = cursor.value;\r\n            if (range && (start == from || range.from > start + 10))\r\n                return range;\r\n            if (start == from)\r\n                return null;\r\n        }\r\n    }\r\n    prevMatch(state, curFrom, curTo) {\r\n        return this.prevMatchInRange(state, 0, curFrom) ||\r\n            this.prevMatchInRange(state, curTo, state.doc.length);\r\n    }\r\n    getReplacement(result) {\r\n        return this.spec.unquote(this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\r\n            : i == \"&\" ? result.match[0]\r\n                : i != \"0\" && +i < result.match.length ? result.match[i]\r\n                    : m));\r\n    }\r\n    matchAll(state, limit) {\r\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\r\n        while (!cursor.next().done) {\r\n            if (ranges.length >= limit)\r\n                return null;\r\n            ranges.push(cursor.value);\r\n        }\r\n        return ranges;\r\n    }\r\n    highlight(state, from, to, add) {\r\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\r\n        while (!cursor.next().done)\r\n            add(cursor.value.from, cursor.value.to);\r\n    }\r\n}\r\n/**\r\nA state effect that updates the current search query. Note that\r\nthis only has an effect if the search state has been initialized\r\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\r\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\r\nonce).\r\n*/\r\nconst setSearchQuery = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst searchState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create(state) {\r\n        return new SearchState(defaultQuery(state).create(), null);\r\n    },\r\n    update(value, tr) {\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setSearchQuery))\r\n                value = new SearchState(effect.value.create(), value.panel);\r\n            else if (effect.is(togglePanel))\r\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\r\n        }\r\n        return value;\r\n    },\r\n    provide: f => _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.showPanel.from(f, val => val.panel)\r\n});\r\n/**\r\nGet the current search query from an editor state.\r\n*/\r\nfunction getSearchQuery(state) {\r\n    let curState = state.field(searchState, false);\r\n    return curState ? curState.query.spec : defaultQuery(state);\r\n}\r\n/**\r\nQuery whether the search panel is open in the given editor state.\r\n*/\r\nfunction searchPanelOpen(state) {\r\n    var _a;\r\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\r\n}\r\nclass SearchState {\r\n    constructor(query, panel) {\r\n        this.query = query;\r\n        this.panel = panel;\r\n    }\r\n}\r\nconst matchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\r\nconst searchHighlighter = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.decorations = this.highlight(view.state.field(searchState));\r\n    }\r\n    update(update) {\r\n        let state = update.state.field(searchState);\r\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\r\n            this.decorations = this.highlight(state);\r\n    }\r\n    highlight({ query, panel }) {\r\n        if (!panel || !query.spec.valid)\r\n            return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n        let { view } = this;\r\n        let builder = new _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSetBuilder();\r\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\r\n            let { from, to } = ranges[i];\r\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\r\n                to = ranges[++i].to;\r\n            query.highlight(view.state, from, to, (from, to) => {\r\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\r\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\r\n            });\r\n        }\r\n        return builder.finish();\r\n    }\r\n}, {\r\n    decorations: v => v.decorations\r\n});\r\nfunction searchCommand(f) {\r\n    return view => {\r\n        let state = view.state.field(searchState, false);\r\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\r\n    };\r\n}\r\n/**\r\nOpen the search panel if it isn't already open, and move the\r\nselection to the first match after the current main selection.\r\nWill wrap around to the start of the document when it reaches the\r\nend.\r\n*/\r\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\r\n    let { to } = view.state.selection.main;\r\n    let next = query.nextMatch(view.state, to, to);\r\n    if (!next)\r\n        return false;\r\n    view.dispatch({\r\n        selection: { anchor: next.from, head: next.to },\r\n        scrollIntoView: true,\r\n        effects: announceMatch(view, next),\r\n        userEvent: \"select.search\"\r\n    });\r\n    return true;\r\n});\r\n/**\r\nMove the selection to the previous instance of the search query,\r\nbefore the current main selection. Will wrap past the start\r\nof the document to start searching at the end again.\r\n*/\r\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\r\n    let { state } = view, { from } = state.selection.main;\r\n    let range = query.prevMatch(state, from, from);\r\n    if (!range)\r\n        return false;\r\n    view.dispatch({\r\n        selection: { anchor: range.from, head: range.to },\r\n        scrollIntoView: true,\r\n        effects: announceMatch(view, range),\r\n        userEvent: \"select.search\"\r\n    });\r\n    return true;\r\n});\r\n/**\r\nSelect all instances of the search query.\r\n*/\r\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\r\n    let ranges = query.matchAll(view.state, 1000);\r\n    if (!ranges || !ranges.length)\r\n        return false;\r\n    view.dispatch({\r\n        selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges.map(r => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(r.from, r.to))),\r\n        userEvent: \"select.search.matches\"\r\n    });\r\n    return true;\r\n});\r\n/**\r\nSelect all instances of the currently selected text.\r\n*/\r\nconst selectSelectionMatches = ({ state, dispatch }) => {\r\n    let sel = state.selection;\r\n    if (sel.ranges.length > 1 || sel.main.empty)\r\n        return false;\r\n    let { from, to } = sel.main;\r\n    let ranges = [], main = 0;\r\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\r\n        if (ranges.length > 1000)\r\n            return false;\r\n        if (cur.value.from == from)\r\n            main = ranges.length;\r\n        ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(cur.value.from, cur.value.to));\r\n    }\r\n    dispatch(state.update({\r\n        selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges, main),\r\n        userEvent: \"select.search.matches\"\r\n    }));\r\n    return true;\r\n};\r\n/**\r\nReplace the current match of the search query.\r\n*/\r\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\r\n    let { state } = view, { from, to } = state.selection.main;\r\n    if (state.readOnly)\r\n        return false;\r\n    let next = query.nextMatch(state, from, from);\r\n    if (!next)\r\n        return false;\r\n    let changes = [], selection, replacement;\r\n    let announce = [];\r\n    if (next.from == from && next.to == to) {\r\n        replacement = state.toText(query.getReplacement(next));\r\n        changes.push({ from: next.from, to: next.to, insert: replacement });\r\n        next = query.nextMatch(state, next.from, next.to);\r\n        announce.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\r\n    }\r\n    if (next) {\r\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\r\n        selection = { anchor: next.from - off, head: next.to - off };\r\n        announce.push(announceMatch(view, next));\r\n    }\r\n    view.dispatch({\r\n        changes, selection,\r\n        scrollIntoView: !!selection,\r\n        effects: announce,\r\n        userEvent: \"input.replace\"\r\n    });\r\n    return true;\r\n});\r\n/**\r\nReplace all instances of the search query with the given\r\nreplacement.\r\n*/\r\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\r\n    if (view.state.readOnly)\r\n        return false;\r\n    let changes = query.matchAll(view.state, 1e9).map(match => {\r\n        let { from, to } = match;\r\n        return { from, to, insert: query.getReplacement(match) };\r\n    });\r\n    if (!changes.length)\r\n        return false;\r\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\r\n    view.dispatch({\r\n        changes,\r\n        effects: _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.announce.of(announceText),\r\n        userEvent: \"input.replace.all\"\r\n    });\r\n    return true;\r\n});\r\nfunction createSearchPanel(view) {\r\n    return view.state.facet(searchConfigFacet).createPanel(view);\r\n}\r\nfunction defaultQuery(state, fallback) {\r\n    var _a, _b, _c, _d;\r\n    let sel = state.selection.main;\r\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\r\n    if (fallback && !selText)\r\n        return fallback;\r\n    let config = state.facet(searchConfigFacet);\r\n    return new SearchQuery({\r\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\r\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\r\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\r\n        wholeWord: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _d !== void 0 ? _d : config.wholeWord\r\n    });\r\n}\r\n/**\r\nMake sure the search panel is open and focused.\r\n*/\r\nconst openSearchPanel = view => {\r\n    let state = view.state.field(searchState, false);\r\n    if (state && state.panel) {\r\n        let panel = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getPanel)(view, createSearchPanel);\r\n        if (!panel)\r\n            return false;\r\n        let searchInput = panel.dom.querySelector(\"[main-field]\");\r\n        if (searchInput && searchInput != view.root.activeElement) {\r\n            let query = defaultQuery(view.state, state.query.spec);\r\n            if (query.valid)\r\n                view.dispatch({ effects: setSearchQuery.of(query) });\r\n            searchInput.focus();\r\n            searchInput.select();\r\n        }\r\n    }\r\n    else {\r\n        view.dispatch({ effects: [\r\n                togglePanel.of(true),\r\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of(searchExtensions)\r\n            ] });\r\n    }\r\n    return true;\r\n};\r\n/**\r\nClose the search panel.\r\n*/\r\nconst closeSearchPanel = view => {\r\n    let state = view.state.field(searchState, false);\r\n    if (!state || !state.panel)\r\n        return false;\r\n    let panel = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getPanel)(view, createSearchPanel);\r\n    if (panel && panel.dom.contains(view.root.activeElement))\r\n        view.focus();\r\n    view.dispatch({ effects: togglePanel.of(false) });\r\n    return true;\r\n};\r\n/**\r\nDefault search-related key bindings.\r\n\r\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\r\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\r\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\r\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\r\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\r\n*/\r\nconst searchKeymap = [\r\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\r\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\r\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\r\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\r\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\r\n    { key: \"Alt-g\", run: gotoLine },\r\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\r\n];\r\nclass SearchPanel {\r\n    constructor(view) {\r\n        this.view = view;\r\n        let query = this.query = view.state.field(searchState).query.spec;\r\n        this.commit = this.commit.bind(this);\r\n        this.searchField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\", {\r\n            value: query.search,\r\n            placeholder: phrase(view, \"Find\"),\r\n            \"aria-label\": phrase(view, \"Find\"),\r\n            class: \"cm-textfield\",\r\n            name: \"search\",\r\n            form: \"\",\r\n            \"main-field\": \"true\",\r\n            onchange: this.commit,\r\n            onkeyup: this.commit\r\n        });\r\n        this.replaceField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\", {\r\n            value: query.replace,\r\n            placeholder: phrase(view, \"Replace\"),\r\n            \"aria-label\": phrase(view, \"Replace\"),\r\n            class: \"cm-textfield\",\r\n            name: \"replace\",\r\n            form: \"\",\r\n            onchange: this.commit,\r\n            onkeyup: this.commit\r\n        });\r\n        this.caseField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\", {\r\n            type: \"checkbox\",\r\n            name: \"case\",\r\n            form: \"\",\r\n            checked: query.caseSensitive,\r\n            onchange: this.commit\r\n        });\r\n        this.reField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\", {\r\n            type: \"checkbox\",\r\n            name: \"re\",\r\n            form: \"\",\r\n            checked: query.regexp,\r\n            onchange: this.commit\r\n        });\r\n        this.wordField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\", {\r\n            type: \"checkbox\",\r\n            name: \"word\",\r\n            form: \"\",\r\n            checked: query.wholeWord,\r\n            onchange: this.commit\r\n        });\r\n        function button(name, onclick, content) {\r\n            return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\r\n        }\r\n        this.dom = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\r\n            this.searchField,\r\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\r\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\r\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\r\n            (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\r\n            (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\r\n            (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\r\n            ...view.state.readOnly ? [] : [\r\n                (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"br\"),\r\n                this.replaceField,\r\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\r\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\r\n            ],\r\n            (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", {\r\n                name: \"close\",\r\n                onclick: () => closeSearchPanel(view),\r\n                \"aria-label\": phrase(view, \"close\"),\r\n                type: \"button\"\r\n            }, [\"×\"])\r\n        ]);\r\n    }\r\n    commit() {\r\n        let query = new SearchQuery({\r\n            search: this.searchField.value,\r\n            caseSensitive: this.caseField.checked,\r\n            regexp: this.reField.checked,\r\n            wholeWord: this.wordField.checked,\r\n            replace: this.replaceField.value,\r\n        });\r\n        if (!query.eq(this.query)) {\r\n            this.query = query;\r\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\r\n        }\r\n    }\r\n    keydown(e) {\r\n        if ((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.runScopeHandlers)(this.view, e, \"search-panel\")) {\r\n            e.preventDefault();\r\n        }\r\n        else if (e.keyCode == 13 && e.target == this.searchField) {\r\n            e.preventDefault();\r\n            (e.shiftKey ? findPrevious : findNext)(this.view);\r\n        }\r\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\r\n            e.preventDefault();\r\n            replaceNext(this.view);\r\n        }\r\n    }\r\n    update(update) {\r\n        for (let tr of update.transactions)\r\n            for (let effect of tr.effects) {\r\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\r\n                    this.setQuery(effect.value);\r\n            }\r\n    }\r\n    setQuery(query) {\r\n        this.query = query;\r\n        this.searchField.value = query.search;\r\n        this.replaceField.value = query.replace;\r\n        this.caseField.checked = query.caseSensitive;\r\n        this.reField.checked = query.regexp;\r\n        this.wordField.checked = query.wholeWord;\r\n    }\r\n    mount() {\r\n        this.searchField.select();\r\n    }\r\n    get pos() { return 80; }\r\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\r\n}\r\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\r\nconst AnnounceMargin = 30;\r\nconst Break = /[\\s\\.,:;?!]/;\r\nfunction announceMatch(view, { from, to }) {\r\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\r\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\r\n    let text = view.state.sliceDoc(start, end);\r\n    if (start != line.from) {\r\n        for (let i = 0; i < AnnounceMargin; i++)\r\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\r\n                text = text.slice(i);\r\n                break;\r\n            }\r\n    }\r\n    if (end != lineEnd) {\r\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\r\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\r\n                text = text.slice(0, i);\r\n                break;\r\n            }\r\n    }\r\n    return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\r\n}\r\nconst baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\r\n    \".cm-panel.cm-search\": {\r\n        padding: \"2px 6px 4px\",\r\n        position: \"relative\",\r\n        \"& [name=close]\": {\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            right: \"4px\",\r\n            backgroundColor: \"inherit\",\r\n            border: \"none\",\r\n            font: \"inherit\",\r\n            padding: 0,\r\n            margin: 0\r\n        },\r\n        \"& input, & button, & label\": {\r\n            margin: \".2em .6em .2em 0\"\r\n        },\r\n        \"& input[type=checkbox]\": {\r\n            marginRight: \".2em\"\r\n        },\r\n        \"& label\": {\r\n            fontSize: \"80%\",\r\n            whiteSpace: \"pre\"\r\n        }\r\n    },\r\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\r\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\r\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\r\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\r\n});\r\nconst searchExtensions = [\r\n    searchState,\r\n    /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Prec.lowest(searchHighlighter),\r\n    baseTheme\r\n];\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/search/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/state/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@codemirror/state/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Annotation\": function() { return /* binding */ Annotation; },\n/* harmony export */   \"AnnotationType\": function() { return /* binding */ AnnotationType; },\n/* harmony export */   \"ChangeDesc\": function() { return /* binding */ ChangeDesc; },\n/* harmony export */   \"ChangeSet\": function() { return /* binding */ ChangeSet; },\n/* harmony export */   \"CharCategory\": function() { return /* binding */ CharCategory; },\n/* harmony export */   \"Compartment\": function() { return /* binding */ Compartment; },\n/* harmony export */   \"EditorSelection\": function() { return /* binding */ EditorSelection; },\n/* harmony export */   \"EditorState\": function() { return /* binding */ EditorState; },\n/* harmony export */   \"Facet\": function() { return /* binding */ Facet; },\n/* harmony export */   \"Line\": function() { return /* binding */ Line; },\n/* harmony export */   \"MapMode\": function() { return /* binding */ MapMode; },\n/* harmony export */   \"Prec\": function() { return /* binding */ Prec; },\n/* harmony export */   \"Range\": function() { return /* binding */ Range; },\n/* harmony export */   \"RangeSet\": function() { return /* binding */ RangeSet; },\n/* harmony export */   \"RangeSetBuilder\": function() { return /* binding */ RangeSetBuilder; },\n/* harmony export */   \"RangeValue\": function() { return /* binding */ RangeValue; },\n/* harmony export */   \"SelectionRange\": function() { return /* binding */ SelectionRange; },\n/* harmony export */   \"StateEffect\": function() { return /* binding */ StateEffect; },\n/* harmony export */   \"StateEffectType\": function() { return /* binding */ StateEffectType; },\n/* harmony export */   \"StateField\": function() { return /* binding */ StateField; },\n/* harmony export */   \"Text\": function() { return /* binding */ Text; },\n/* harmony export */   \"Transaction\": function() { return /* binding */ Transaction; },\n/* harmony export */   \"codePointAt\": function() { return /* binding */ codePointAt; },\n/* harmony export */   \"codePointSize\": function() { return /* binding */ codePointSize; },\n/* harmony export */   \"combineConfig\": function() { return /* binding */ combineConfig; },\n/* harmony export */   \"countColumn\": function() { return /* binding */ countColumn; },\n/* harmony export */   \"findClusterBreak\": function() { return /* binding */ findClusterBreak; },\n/* harmony export */   \"findColumn\": function() { return /* binding */ findColumn; },\n/* harmony export */   \"fromCodePoint\": function() { return /* binding */ fromCodePoint; }\n/* harmony export */ });\n/**\r\nThe data structure for documents. @nonabstract\r\n*/\r\nclass Text {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor() { }\r\n    /**\r\n    Get the line description around the given position.\r\n    */\r\n    lineAt(pos) {\r\n        if (pos < 0 || pos > this.length)\r\n            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\r\n        return this.lineInner(pos, false, 1, 0);\r\n    }\r\n    /**\r\n    Get the description for the given (1-based) line number.\r\n    */\r\n    line(n) {\r\n        if (n < 1 || n > this.lines)\r\n            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\r\n        return this.lineInner(n, true, 1, 0);\r\n    }\r\n    /**\r\n    Replace a range of the text with the given content.\r\n    */\r\n    replace(from, to, text) {\r\n        let parts = [];\r\n        this.decompose(0, from, parts, 2 /* Open.To */);\r\n        if (text.length)\r\n            text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);\r\n        this.decompose(to, this.length, parts, 1 /* Open.From */);\r\n        return TextNode.from(parts, this.length - (to - from) + text.length);\r\n    }\r\n    /**\r\n    Append another document to this one.\r\n    */\r\n    append(other) {\r\n        return this.replace(this.length, this.length, other);\r\n    }\r\n    /**\r\n    Retrieve the text between the given points.\r\n    */\r\n    slice(from, to = this.length) {\r\n        let parts = [];\r\n        this.decompose(from, to, parts, 0);\r\n        return TextNode.from(parts, to - from);\r\n    }\r\n    /**\r\n    Test whether this text is equal to another instance.\r\n    */\r\n    eq(other) {\r\n        if (other == this)\r\n            return true;\r\n        if (other.length != this.length || other.lines != this.lines)\r\n            return false;\r\n        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\r\n        let a = new RawTextCursor(this), b = new RawTextCursor(other);\r\n        for (let skip = start, pos = start;;) {\r\n            a.next(skip);\r\n            b.next(skip);\r\n            skip = 0;\r\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\r\n                return false;\r\n            pos += a.value.length;\r\n            if (a.done || pos >= end)\r\n                return true;\r\n        }\r\n    }\r\n    /**\r\n    Iterate over the text. When `dir` is `-1`, iteration happens\r\n    from end to start. This will return lines and the breaks between\r\n    them as separate strings.\r\n    */\r\n    iter(dir = 1) { return new RawTextCursor(this, dir); }\r\n    /**\r\n    Iterate over a range of the text. When `from` > `to`, the\r\n    iterator will run in reverse.\r\n    */\r\n    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }\r\n    /**\r\n    Return a cursor that iterates over the given range of lines,\r\n    _without_ returning the line breaks between, and yielding empty\r\n    strings for empty lines.\r\n    \r\n    When `from` and `to` are given, they should be 1-based line numbers.\r\n    */\r\n    iterLines(from, to) {\r\n        let inner;\r\n        if (from == null) {\r\n            inner = this.iter();\r\n        }\r\n        else {\r\n            if (to == null)\r\n                to = this.lines + 1;\r\n            let start = this.line(from).from;\r\n            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\r\n        }\r\n        return new LineCursor(inner);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    toString() { return this.sliceString(0); }\r\n    /**\r\n    Convert the document to an array of lines (which can be\r\n    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).\r\n    */\r\n    toJSON() {\r\n        let lines = [];\r\n        this.flatten(lines);\r\n        return lines;\r\n    }\r\n    /**\r\n    Create a `Text` instance for the given array of lines.\r\n    */\r\n    static of(text) {\r\n        if (text.length == 0)\r\n            throw new RangeError(\"A document must have at least one line\");\r\n        if (text.length == 1 && !text[0])\r\n            return Text.empty;\r\n        return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\r\n    }\r\n}\r\n// Leaves store an array of line strings. There are always line breaks\r\n// between these strings. Leaves are limited in size and have to be\r\n// contained in TextNode instances for bigger documents.\r\nclass TextLeaf extends Text {\r\n    constructor(text, length = textLength(text)) {\r\n        super();\r\n        this.text = text;\r\n        this.length = length;\r\n    }\r\n    get lines() { return this.text.length; }\r\n    get children() { return null; }\r\n    lineInner(target, isLine, line, offset) {\r\n        for (let i = 0;; i++) {\r\n            let string = this.text[i], end = offset + string.length;\r\n            if ((isLine ? line : end) >= target)\r\n                return new Line(offset, end, line, string);\r\n            offset = end + 1;\r\n            line++;\r\n        }\r\n    }\r\n    decompose(from, to, target, open) {\r\n        let text = from <= 0 && to >= this.length ? this\r\n            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\r\n        if (open & 1 /* Open.From */) {\r\n            let prev = target.pop();\r\n            let joined = appendText(text.text, prev.text.slice(), 0, text.length);\r\n            if (joined.length <= 32 /* Tree.Branch */) {\r\n                target.push(new TextLeaf(joined, prev.length + text.length));\r\n            }\r\n            else {\r\n                let mid = joined.length >> 1;\r\n                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\r\n            }\r\n        }\r\n        else {\r\n            target.push(text);\r\n        }\r\n    }\r\n    replace(from, to, text) {\r\n        if (!(text instanceof TextLeaf))\r\n            return super.replace(from, to, text);\r\n        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\r\n        let newLen = this.length + text.length - (to - from);\r\n        if (lines.length <= 32 /* Tree.Branch */)\r\n            return new TextLeaf(lines, newLen);\r\n        return TextNode.from(TextLeaf.split(lines, []), newLen);\r\n    }\r\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\r\n        let result = \"\";\r\n        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\r\n            let line = this.text[i], end = pos + line.length;\r\n            if (pos > from && i)\r\n                result += lineSep;\r\n            if (from < end && to > pos)\r\n                result += line.slice(Math.max(0, from - pos), to - pos);\r\n            pos = end + 1;\r\n        }\r\n        return result;\r\n    }\r\n    flatten(target) {\r\n        for (let line of this.text)\r\n            target.push(line);\r\n    }\r\n    scanIdentical() { return 0; }\r\n    static split(text, target) {\r\n        let part = [], len = -1;\r\n        for (let line of text) {\r\n            part.push(line);\r\n            len += line.length + 1;\r\n            if (part.length == 32 /* Tree.Branch */) {\r\n                target.push(new TextLeaf(part, len));\r\n                part = [];\r\n                len = -1;\r\n            }\r\n        }\r\n        if (len > -1)\r\n            target.push(new TextLeaf(part, len));\r\n        return target;\r\n    }\r\n}\r\n// Nodes provide the tree structure of the `Text` type. They store a\r\n// number of other nodes or leaves, taking care to balance themselves\r\n// on changes. There are implied line breaks _between_ the children of\r\n// a node (but not before the first or after the last child).\r\nclass TextNode extends Text {\r\n    constructor(children, length) {\r\n        super();\r\n        this.children = children;\r\n        this.length = length;\r\n        this.lines = 0;\r\n        for (let child of children)\r\n            this.lines += child.lines;\r\n    }\r\n    lineInner(target, isLine, line, offset) {\r\n        for (let i = 0;; i++) {\r\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\r\n            if ((isLine ? endLine : end) >= target)\r\n                return child.lineInner(target, isLine, line, offset);\r\n            offset = end + 1;\r\n            line = endLine + 1;\r\n        }\r\n    }\r\n    decompose(from, to, target, open) {\r\n        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (from <= end && to >= pos) {\r\n                let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));\r\n                if (pos >= from && end <= to && !childOpen)\r\n                    target.push(child);\r\n                else\r\n                    child.decompose(from - pos, to - pos, target, childOpen);\r\n            }\r\n            pos = end + 1;\r\n        }\r\n    }\r\n    replace(from, to, text) {\r\n        if (text.lines < this.lines)\r\n            for (let i = 0, pos = 0; i < this.children.length; i++) {\r\n                let child = this.children[i], end = pos + child.length;\r\n                // Fast path: if the change only affects one child and the\r\n                // child's size remains in the acceptable range, only update\r\n                // that child\r\n                if (from >= pos && to <= end) {\r\n                    let updated = child.replace(from - pos, to - pos, text);\r\n                    let totalLines = this.lines - child.lines + updated.lines;\r\n                    if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&\r\n                        updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {\r\n                        let copy = this.children.slice();\r\n                        copy[i] = updated;\r\n                        return new TextNode(copy, this.length - (to - from) + text.length);\r\n                    }\r\n                    return super.replace(pos, end, updated);\r\n                }\r\n                pos = end + 1;\r\n            }\r\n        return super.replace(from, to, text);\r\n    }\r\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\r\n        let result = \"\";\r\n        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (pos > from && i)\r\n                result += lineSep;\r\n            if (from < end && to > pos)\r\n                result += child.sliceString(from - pos, to - pos, lineSep);\r\n            pos = end + 1;\r\n        }\r\n        return result;\r\n    }\r\n    flatten(target) {\r\n        for (let child of this.children)\r\n            child.flatten(target);\r\n    }\r\n    scanIdentical(other, dir) {\r\n        if (!(other instanceof TextNode))\r\n            return 0;\r\n        let length = 0;\r\n        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]\r\n            : [this.children.length - 1, other.children.length - 1, -1, -1];\r\n        for (;; iA += dir, iB += dir) {\r\n            if (iA == eA || iB == eB)\r\n                return length;\r\n            let chA = this.children[iA], chB = other.children[iB];\r\n            if (chA != chB)\r\n                return length + chA.scanIdentical(chB, dir);\r\n            length += chA.length + 1;\r\n        }\r\n    }\r\n    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {\r\n        let lines = 0;\r\n        for (let ch of children)\r\n            lines += ch.lines;\r\n        if (lines < 32 /* Tree.Branch */) {\r\n            let flat = [];\r\n            for (let ch of children)\r\n                ch.flatten(flat);\r\n            return new TextLeaf(flat, length);\r\n        }\r\n        let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;\r\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\r\n        function add(child) {\r\n            let last;\r\n            if (child.lines > maxChunk && child instanceof TextNode) {\r\n                for (let node of child.children)\r\n                    add(node);\r\n            }\r\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\r\n                flush();\r\n                chunked.push(child);\r\n            }\r\n            else if (child instanceof TextLeaf && currentLines &&\r\n                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&\r\n                child.lines + last.lines <= 32 /* Tree.Branch */) {\r\n                currentLines += child.lines;\r\n                currentLen += child.length + 1;\r\n                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\r\n            }\r\n            else {\r\n                if (currentLines + child.lines > chunk)\r\n                    flush();\r\n                currentLines += child.lines;\r\n                currentLen += child.length + 1;\r\n                currentChunk.push(child);\r\n            }\r\n        }\r\n        function flush() {\r\n            if (currentLines == 0)\r\n                return;\r\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\r\n            currentLen = -1;\r\n            currentLines = currentChunk.length = 0;\r\n        }\r\n        for (let child of children)\r\n            add(child);\r\n        flush();\r\n        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\r\n    }\r\n}\r\nText.empty = /*@__PURE__*/new TextLeaf([\"\"], 0);\r\nfunction textLength(text) {\r\n    let length = -1;\r\n    for (let line of text)\r\n        length += line.length + 1;\r\n    return length;\r\n}\r\nfunction appendText(text, target, from = 0, to = 1e9) {\r\n    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\r\n        let line = text[i], end = pos + line.length;\r\n        if (end >= from) {\r\n            if (end > to)\r\n                line = line.slice(0, to - pos);\r\n            if (pos < from)\r\n                line = line.slice(from - pos);\r\n            if (first) {\r\n                target[target.length - 1] += line;\r\n                first = false;\r\n            }\r\n            else\r\n                target.push(line);\r\n        }\r\n        pos = end + 1;\r\n    }\r\n    return target;\r\n}\r\nfunction sliceText(text, from, to) {\r\n    return appendText(text, [\"\"], from, to);\r\n}\r\nclass RawTextCursor {\r\n    constructor(text, dir = 1) {\r\n        this.dir = dir;\r\n        this.done = false;\r\n        this.lineBreak = false;\r\n        this.value = \"\";\r\n        this.nodes = [text];\r\n        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];\r\n    }\r\n    nextInner(skip, dir) {\r\n        this.done = this.lineBreak = false;\r\n        for (;;) {\r\n            let last = this.nodes.length - 1;\r\n            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;\r\n            let size = top instanceof TextLeaf ? top.text.length : top.children.length;\r\n            if (offset == (dir > 0 ? size : 0)) {\r\n                if (last == 0) {\r\n                    this.done = true;\r\n                    this.value = \"\";\r\n                    return this;\r\n                }\r\n                if (dir > 0)\r\n                    this.offsets[last - 1]++;\r\n                this.nodes.pop();\r\n                this.offsets.pop();\r\n            }\r\n            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\r\n                this.offsets[last] += dir;\r\n                if (skip == 0) {\r\n                    this.lineBreak = true;\r\n                    this.value = \"\\n\";\r\n                    return this;\r\n                }\r\n                skip--;\r\n            }\r\n            else if (top instanceof TextLeaf) {\r\n                // Move to the next string\r\n                let next = top.text[offset + (dir < 0 ? -1 : 0)];\r\n                this.offsets[last] += dir;\r\n                if (next.length > Math.max(0, skip)) {\r\n                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\r\n                    return this;\r\n                }\r\n                skip -= next.length;\r\n            }\r\n            else {\r\n                let next = top.children[offset + (dir < 0 ? -1 : 0)];\r\n                if (skip > next.length) {\r\n                    skip -= next.length;\r\n                    this.offsets[last] += dir;\r\n                }\r\n                else {\r\n                    if (dir < 0)\r\n                        this.offsets[last]--;\r\n                    this.nodes.push(next);\r\n                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    next(skip = 0) {\r\n        if (skip < 0) {\r\n            this.nextInner(-skip, (-this.dir));\r\n            skip = this.value.length;\r\n        }\r\n        return this.nextInner(skip, this.dir);\r\n    }\r\n}\r\nclass PartialTextCursor {\r\n    constructor(text, start, end) {\r\n        this.value = \"\";\r\n        this.done = false;\r\n        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\r\n        this.pos = start > end ? text.length : 0;\r\n        this.from = Math.min(start, end);\r\n        this.to = Math.max(start, end);\r\n    }\r\n    nextInner(skip, dir) {\r\n        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\r\n            this.value = \"\";\r\n            this.done = true;\r\n            return this;\r\n        }\r\n        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\r\n        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\r\n        if (skip > limit)\r\n            skip = limit;\r\n        limit -= skip;\r\n        let { value } = this.cursor.next(skip);\r\n        this.pos += (value.length + skip) * dir;\r\n        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\r\n        this.done = !this.value;\r\n        return this;\r\n    }\r\n    next(skip = 0) {\r\n        if (skip < 0)\r\n            skip = Math.max(skip, this.from - this.pos);\r\n        else if (skip > 0)\r\n            skip = Math.min(skip, this.to - this.pos);\r\n        return this.nextInner(skip, this.cursor.dir);\r\n    }\r\n    get lineBreak() { return this.cursor.lineBreak && this.value != \"\"; }\r\n}\r\nclass LineCursor {\r\n    constructor(inner) {\r\n        this.inner = inner;\r\n        this.afterBreak = true;\r\n        this.value = \"\";\r\n        this.done = false;\r\n    }\r\n    next(skip = 0) {\r\n        let { done, lineBreak, value } = this.inner.next(skip);\r\n        if (done) {\r\n            this.done = true;\r\n            this.value = \"\";\r\n        }\r\n        else if (lineBreak) {\r\n            if (this.afterBreak) {\r\n                this.value = \"\";\r\n            }\r\n            else {\r\n                this.afterBreak = true;\r\n                this.next();\r\n            }\r\n        }\r\n        else {\r\n            this.value = value;\r\n            this.afterBreak = false;\r\n        }\r\n        return this;\r\n    }\r\n    get lineBreak() { return false; }\r\n}\r\nif (typeof Symbol != \"undefined\") {\r\n    Text.prototype[Symbol.iterator] = function () { return this.iter(); };\r\n    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =\r\n        LineCursor.prototype[Symbol.iterator] = function () { return this; };\r\n}\r\n/**\r\nThis type describes a line in the document. It is created\r\non-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).\r\n*/\r\nclass Line {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    /**\r\n    The position of the start of the line.\r\n    */\r\n    from, \r\n    /**\r\n    The position at the end of the line (_before_ the line break,\r\n    or at the end of document for the last line).\r\n    */\r\n    to, \r\n    /**\r\n    This line's line number (1-based).\r\n    */\r\n    number, \r\n    /**\r\n    The line's content.\r\n    */\r\n    text) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.number = number;\r\n        this.text = text;\r\n    }\r\n    /**\r\n    The length of the line (not including any line break after it).\r\n    */\r\n    get length() { return this.to - this.from; }\r\n}\r\n\r\n// Compressed representation of the Grapheme_Cluster_Break=Extend\r\n// information from\r\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\r\n// Each pair of elements represents a range, as an offet from the\r\n// previous range and a length. Numbers are in base-36, with the empty\r\n// string being a shorthand for 1.\r\nlet extend = /*@__PURE__*/\"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\r\n// Convert offsets into absolute values\r\nfor (let i = 1; i < extend.length; i++)\r\n    extend[i] += extend[i - 1];\r\nfunction isExtendingChar(code) {\r\n    for (let i = 1; i < extend.length; i += 2)\r\n        if (extend[i] > code)\r\n            return extend[i - 1] <= code;\r\n    return false;\r\n}\r\nfunction isRegionalIndicator(code) {\r\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\r\n}\r\nconst ZWJ = 0x200d;\r\n/**\r\nReturns a next grapheme cluster break _after_ (not equal to)\r\n`pos`, if `forward` is true, or before otherwise. Returns `pos`\r\nitself if no further cluster break is available in the string.\r\nMoves across surrogate pairs, extending characters (when\r\n`includeExtending` is true), characters joined with zero-width\r\njoiners, and flag emoji.\r\n*/\r\nfunction findClusterBreak(str, pos, forward = true, includeExtending = true) {\r\n    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\r\n}\r\nfunction nextClusterBreak(str, pos, includeExtending) {\r\n    if (pos == str.length)\r\n        return pos;\r\n    // If pos is in the middle of a surrogate pair, move to its start\r\n    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))\r\n        pos--;\r\n    let prev = codePointAt(str, pos);\r\n    pos += codePointSize(prev);\r\n    while (pos < str.length) {\r\n        let next = codePointAt(str, pos);\r\n        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\r\n            pos += codePointSize(next);\r\n            prev = next;\r\n        }\r\n        else if (isRegionalIndicator(next)) {\r\n            let countBefore = 0, i = pos - 2;\r\n            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\r\n                countBefore++;\r\n                i -= 2;\r\n            }\r\n            if (countBefore % 2 == 0)\r\n                break;\r\n            else\r\n                pos += 2;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return pos;\r\n}\r\nfunction prevClusterBreak(str, pos, includeExtending) {\r\n    while (pos > 0) {\r\n        let found = nextClusterBreak(str, pos - 2, includeExtending);\r\n        if (found < pos)\r\n            return found;\r\n        pos--;\r\n    }\r\n    return 0;\r\n}\r\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }\r\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }\r\n/**\r\nFind the code point at the given position in a string (like the\r\n[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\r\nstring method).\r\n*/\r\nfunction codePointAt(str, pos) {\r\n    let code0 = str.charCodeAt(pos);\r\n    if (!surrogateHigh(code0) || pos + 1 == str.length)\r\n        return code0;\r\n    let code1 = str.charCodeAt(pos + 1);\r\n    if (!surrogateLow(code1))\r\n        return code0;\r\n    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;\r\n}\r\n/**\r\nGiven a Unicode codepoint, return the JavaScript string that\r\nrespresents it (like\r\n[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\r\n*/\r\nfunction fromCodePoint(code) {\r\n    if (code <= 0xffff)\r\n        return String.fromCharCode(code);\r\n    code -= 0x10000;\r\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\r\n}\r\n/**\r\nThe amount of positions a character takes up a JavaScript string.\r\n*/\r\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2; }\r\n\r\nconst DefaultSplit = /\\r\\n?|\\n/;\r\n/**\r\nDistinguishes different ways in which positions can be mapped.\r\n*/\r\nvar MapMode = /*@__PURE__*/(function (MapMode) {\r\n    /**\r\n    Map a position to a valid new position, even when its context\r\n    was deleted.\r\n    */\r\n    MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\r\n    /**\r\n    Return null if deletion happens across the position.\r\n    */\r\n    MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\r\n    /**\r\n    Return null if the character _before_ the position is deleted.\r\n    */\r\n    MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\r\n    /**\r\n    Return null if the character _after_ the position is deleted.\r\n    */\r\n    MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\r\nreturn MapMode})(MapMode || (MapMode = {}));\r\n/**\r\nA change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)\r\nthat doesn't store the inserted text. As such, it can't be\r\napplied, but is cheaper to store and manipulate.\r\n*/\r\nclass ChangeDesc {\r\n    // Sections are encoded as pairs of integers. The first is the\r\n    // length in the current document, and the second is -1 for\r\n    // unaffected sections, and the length of the replacement content\r\n    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\r\n    // 0), and a replacement two positive numbers.\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    sections) {\r\n        this.sections = sections;\r\n    }\r\n    /**\r\n    The length of the document before the change.\r\n    */\r\n    get length() {\r\n        let result = 0;\r\n        for (let i = 0; i < this.sections.length; i += 2)\r\n            result += this.sections[i];\r\n        return result;\r\n    }\r\n    /**\r\n    The length of the document after the change.\r\n    */\r\n    get newLength() {\r\n        let result = 0;\r\n        for (let i = 0; i < this.sections.length; i += 2) {\r\n            let ins = this.sections[i + 1];\r\n            result += ins < 0 ? this.sections[i] : ins;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n    False when there are actual changes in this set.\r\n    */\r\n    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }\r\n    /**\r\n    Iterate over the unchanged parts left by these changes. `posA`\r\n    provides the position of the range in the old document, `posB`\r\n    the new position in the changed document.\r\n    */\r\n    iterGaps(f) {\r\n        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++];\r\n            if (ins < 0) {\r\n                f(posA, posB, len);\r\n                posB += len;\r\n            }\r\n            else {\r\n                posB += ins;\r\n            }\r\n            posA += len;\r\n        }\r\n    }\r\n    /**\r\n    Iterate over the ranges changed by these changes. (See\r\n    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\r\n    variant that also provides you with the inserted text.)\r\n    `fromA`/`toA` provides the extent of the change in the starting\r\n    document, `fromB`/`toB` the extent of the replacement in the\r\n    changed document.\r\n    \r\n    When `individual` is true, adjacent changes (which are kept\r\n    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\r\n    reported separately.\r\n    */\r\n    iterChangedRanges(f, individual = false) {\r\n        iterChanges(this, f, individual);\r\n    }\r\n    /**\r\n    Get a description of the inverted form of these changes.\r\n    */\r\n    get invertedDesc() {\r\n        let sections = [];\r\n        for (let i = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++];\r\n            if (ins < 0)\r\n                sections.push(len, ins);\r\n            else\r\n                sections.push(ins, len);\r\n        }\r\n        return new ChangeDesc(sections);\r\n    }\r\n    /**\r\n    Compute the combined effect of applying another set of changes\r\n    after this one. The length of the document after this set should\r\n    match the length before `other`.\r\n    */\r\n    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }\r\n    /**\r\n    Map this description, which should start with the same document\r\n    as `other`, over another set of changes, so that it can be\r\n    applied after it. When `before` is true, map as if the changes\r\n    in `other` happened before the ones in `this`.\r\n    */\r\n    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }\r\n    mapPos(pos, assoc = -1, mode = MapMode.Simple) {\r\n        let posA = 0, posB = 0;\r\n        for (let i = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\r\n            if (ins < 0) {\r\n                if (endA > pos)\r\n                    return posB + (pos - posA);\r\n                posB += len;\r\n            }\r\n            else {\r\n                if (mode != MapMode.Simple && endA >= pos &&\r\n                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||\r\n                        mode == MapMode.TrackBefore && posA < pos ||\r\n                        mode == MapMode.TrackAfter && endA > pos))\r\n                    return null;\r\n                if (endA > pos || endA == pos && assoc < 0 && !len)\r\n                    return pos == posA || assoc < 0 ? posB : posB + ins;\r\n                posB += ins;\r\n            }\r\n            posA = endA;\r\n        }\r\n        if (pos > posA)\r\n            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\r\n        return posB;\r\n    }\r\n    /**\r\n    Check whether these changes touch a given range. When one of the\r\n    changes entirely covers the range, the string `\"cover\"` is\r\n    returned.\r\n    */\r\n    touchesRange(from, to = from) {\r\n        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {\r\n            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\r\n            if (ins >= 0 && pos <= to && end >= from)\r\n                return pos < from && end > to ? \"cover\" : true;\r\n            pos = end;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    toString() {\r\n        let result = \"\";\r\n        for (let i = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++];\r\n            result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n    Serialize this change desc to a JSON-representable value.\r\n    */\r\n    toJSON() { return this.sections; }\r\n    /**\r\n    Create a change desc from its JSON representation (as produced\r\n    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\r\n    */\r\n    static fromJSON(json) {\r\n        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != \"number\"))\r\n            throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\r\n        return new ChangeDesc(json);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(sections) { return new ChangeDesc(sections); }\r\n}\r\n/**\r\nA change set represents a group of modifications to a document. It\r\nstores the document length, and can only be applied to documents\r\nwith exactly that length.\r\n*/\r\nclass ChangeSet extends ChangeDesc {\r\n    constructor(sections, \r\n    /**\r\n    @internal\r\n    */\r\n    inserted) {\r\n        super(sections);\r\n        this.inserted = inserted;\r\n    }\r\n    /**\r\n    Apply the changes to a document, returning the modified\r\n    document.\r\n    */\r\n    apply(doc) {\r\n        if (this.length != doc.length)\r\n            throw new RangeError(\"Applying change set to a document with the wrong length\");\r\n        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\r\n        return doc;\r\n    }\r\n    mapDesc(other, before = false) { return mapSet(this, other, before, true); }\r\n    /**\r\n    Given the document as it existed _before_ the changes, return a\r\n    change set that represents the inverse of this set, which could\r\n    be used to go from the document created by the changes back to\r\n    the document as it existed before the changes.\r\n    */\r\n    invert(doc) {\r\n        let sections = this.sections.slice(), inserted = [];\r\n        for (let i = 0, pos = 0; i < sections.length; i += 2) {\r\n            let len = sections[i], ins = sections[i + 1];\r\n            if (ins >= 0) {\r\n                sections[i] = ins;\r\n                sections[i + 1] = len;\r\n                let index = i >> 1;\r\n                while (inserted.length < index)\r\n                    inserted.push(Text.empty);\r\n                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);\r\n            }\r\n            pos += len;\r\n        }\r\n        return new ChangeSet(sections, inserted);\r\n    }\r\n    /**\r\n    Combine two subsequent change sets into a single set. `other`\r\n    must start in the document produced by `this`. If `this` goes\r\n    `docA` → `docB` and `other` represents `docB` → `docC`, the\r\n    returned value will represent the change `docA` → `docC`.\r\n    */\r\n    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }\r\n    /**\r\n    Given another change set starting in the same document, maps this\r\n    change set over the other, producing a new change set that can be\r\n    applied to the document produced by applying `other`. When\r\n    `before` is `true`, order changes as if `this` comes before\r\n    `other`, otherwise (the default) treat `other` as coming first.\r\n    \r\n    Given two changes `A` and `B`, `A.compose(B.map(A))` and\r\n    `B.compose(A.map(B, true))` will produce the same document. This\r\n    provides a basic form of [operational\r\n    transformation](https://en.wikipedia.org/wiki/Operational_transformation),\r\n    and can be used for collaborative editing.\r\n    */\r\n    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }\r\n    /**\r\n    Iterate over the changed ranges in the document, calling `f` for\r\n    each, with the range in the original document (`fromA`-`toA`)\r\n    and the range that replaces it in the new document\r\n    (`fromB`-`toB`).\r\n    \r\n    When `individual` is true, adjacent changes are reported\r\n    separately.\r\n    */\r\n    iterChanges(f, individual = false) {\r\n        iterChanges(this, f, individual);\r\n    }\r\n    /**\r\n    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\r\n    set.\r\n    */\r\n    get desc() { return ChangeDesc.create(this.sections); }\r\n    /**\r\n    @internal\r\n    */\r\n    filter(ranges) {\r\n        let resultSections = [], resultInserted = [], filteredSections = [];\r\n        let iter = new SectionIter(this);\r\n        done: for (let i = 0, pos = 0;;) {\r\n            let next = i == ranges.length ? 1e9 : ranges[i++];\r\n            while (pos < next || pos == next && iter.len == 0) {\r\n                if (iter.done)\r\n                    break done;\r\n                let len = Math.min(iter.len, next - pos);\r\n                addSection(filteredSections, len, -1);\r\n                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\r\n                addSection(resultSections, len, ins);\r\n                if (ins > 0)\r\n                    addInsert(resultInserted, resultSections, iter.text);\r\n                iter.forward(len);\r\n                pos += len;\r\n            }\r\n            let end = ranges[i++];\r\n            while (pos < end) {\r\n                if (iter.done)\r\n                    break done;\r\n                let len = Math.min(iter.len, end - pos);\r\n                addSection(resultSections, len, -1);\r\n                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\r\n                iter.forward(len);\r\n                pos += len;\r\n            }\r\n        }\r\n        return { changes: new ChangeSet(resultSections, resultInserted),\r\n            filtered: ChangeDesc.create(filteredSections) };\r\n    }\r\n    /**\r\n    Serialize this change set to a JSON-representable value.\r\n    */\r\n    toJSON() {\r\n        let parts = [];\r\n        for (let i = 0; i < this.sections.length; i += 2) {\r\n            let len = this.sections[i], ins = this.sections[i + 1];\r\n            if (ins < 0)\r\n                parts.push(len);\r\n            else if (ins == 0)\r\n                parts.push([len]);\r\n            else\r\n                parts.push([len].concat(this.inserted[i >> 1].toJSON()));\r\n        }\r\n        return parts;\r\n    }\r\n    /**\r\n    Create a change set for the given changes, for a document of the\r\n    given length, using `lineSep` as line separator.\r\n    */\r\n    static of(changes, length, lineSep) {\r\n        let sections = [], inserted = [], pos = 0;\r\n        let total = null;\r\n        function flush(force = false) {\r\n            if (!force && !sections.length)\r\n                return;\r\n            if (pos < length)\r\n                addSection(sections, length - pos, -1);\r\n            let set = new ChangeSet(sections, inserted);\r\n            total = total ? total.compose(set.map(total)) : set;\r\n            sections = [];\r\n            inserted = [];\r\n            pos = 0;\r\n        }\r\n        function process(spec) {\r\n            if (Array.isArray(spec)) {\r\n                for (let sub of spec)\r\n                    process(sub);\r\n            }\r\n            else if (spec instanceof ChangeSet) {\r\n                if (spec.length != length)\r\n                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\r\n                flush();\r\n                total = total ? total.compose(spec.map(total)) : spec;\r\n            }\r\n            else {\r\n                let { from, to = from, insert } = spec;\r\n                if (from > to || from < 0 || to > length)\r\n                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\r\n                let insText = !insert ? Text.empty : typeof insert == \"string\" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;\r\n                let insLen = insText.length;\r\n                if (from == to && insLen == 0)\r\n                    return;\r\n                if (from < pos)\r\n                    flush();\r\n                if (from > pos)\r\n                    addSection(sections, from - pos, -1);\r\n                addSection(sections, to - from, insLen);\r\n                addInsert(inserted, sections, insText);\r\n                pos = to;\r\n            }\r\n        }\r\n        process(changes);\r\n        flush(!total);\r\n        return total;\r\n    }\r\n    /**\r\n    Create an empty changeset of the given length.\r\n    */\r\n    static empty(length) {\r\n        return new ChangeSet(length ? [length, -1] : [], []);\r\n    }\r\n    /**\r\n    Create a changeset from its JSON representation (as produced by\r\n    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\r\n    */\r\n    static fromJSON(json) {\r\n        if (!Array.isArray(json))\r\n            throw new RangeError(\"Invalid JSON representation of ChangeSet\");\r\n        let sections = [], inserted = [];\r\n        for (let i = 0; i < json.length; i++) {\r\n            let part = json[i];\r\n            if (typeof part == \"number\") {\r\n                sections.push(part, -1);\r\n            }\r\n            else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i) => i && typeof e != \"string\")) {\r\n                throw new RangeError(\"Invalid JSON representation of ChangeSet\");\r\n            }\r\n            else if (part.length == 1) {\r\n                sections.push(part[0], 0);\r\n            }\r\n            else {\r\n                while (inserted.length < i)\r\n                    inserted.push(Text.empty);\r\n                inserted[i] = Text.of(part.slice(1));\r\n                sections.push(part[0], inserted[i].length);\r\n            }\r\n        }\r\n        return new ChangeSet(sections, inserted);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static createSet(sections, inserted) {\r\n        return new ChangeSet(sections, inserted);\r\n    }\r\n}\r\nfunction addSection(sections, len, ins, forceJoin = false) {\r\n    if (len == 0 && ins <= 0)\r\n        return;\r\n    let last = sections.length - 2;\r\n    if (last >= 0 && ins <= 0 && ins == sections[last + 1])\r\n        sections[last] += len;\r\n    else if (len == 0 && sections[last] == 0)\r\n        sections[last + 1] += ins;\r\n    else if (forceJoin) {\r\n        sections[last] += len;\r\n        sections[last + 1] += ins;\r\n    }\r\n    else\r\n        sections.push(len, ins);\r\n}\r\nfunction addInsert(values, sections, value) {\r\n    if (value.length == 0)\r\n        return;\r\n    let index = (sections.length - 2) >> 1;\r\n    if (index < values.length) {\r\n        values[values.length - 1] = values[values.length - 1].append(value);\r\n    }\r\n    else {\r\n        while (values.length < index)\r\n            values.push(Text.empty);\r\n        values.push(value);\r\n    }\r\n}\r\nfunction iterChanges(desc, f, individual) {\r\n    let inserted = desc.inserted;\r\n    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {\r\n        let len = desc.sections[i++], ins = desc.sections[i++];\r\n        if (ins < 0) {\r\n            posA += len;\r\n            posB += len;\r\n        }\r\n        else {\r\n            let endA = posA, endB = posB, text = Text.empty;\r\n            for (;;) {\r\n                endA += len;\r\n                endB += ins;\r\n                if (ins && inserted)\r\n                    text = text.append(inserted[(i - 2) >> 1]);\r\n                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)\r\n                    break;\r\n                len = desc.sections[i++];\r\n                ins = desc.sections[i++];\r\n            }\r\n            f(posA, endA, posB, endB, text);\r\n            posA = endA;\r\n            posB = endB;\r\n        }\r\n    }\r\n}\r\nfunction mapSet(setA, setB, before, mkSet = false) {\r\n    // Produce a copy of setA that applies to the document after setB\r\n    // has been applied (assuming both start at the same document).\r\n    let sections = [], insert = mkSet ? [] : null;\r\n    let a = new SectionIter(setA), b = new SectionIter(setB);\r\n    // Iterate over both sets in parallel. inserted tracks, for changes\r\n    // in A that have to be processed piece-by-piece, whether their\r\n    // content has been inserted already, and refers to the section\r\n    // index.\r\n    for (let inserted = -1;;) {\r\n        if (a.ins == -1 && b.ins == -1) {\r\n            // Move across ranges skipped by both sets.\r\n            let len = Math.min(a.len, b.len);\r\n            addSection(sections, len, -1);\r\n            a.forward(len);\r\n            b.forward(len);\r\n        }\r\n        else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {\r\n            // If there's a change in B that comes before the next change in\r\n            // A (ordered by start pos, then len, then before flag), skip\r\n            // that (and process any changes in A it covers).\r\n            let len = b.len;\r\n            addSection(sections, b.ins, -1);\r\n            while (len) {\r\n                let piece = Math.min(a.len, len);\r\n                if (a.ins >= 0 && inserted < a.i && a.len <= piece) {\r\n                    addSection(sections, 0, a.ins);\r\n                    if (insert)\r\n                        addInsert(insert, sections, a.text);\r\n                    inserted = a.i;\r\n                }\r\n                a.forward(piece);\r\n                len -= piece;\r\n            }\r\n            b.next();\r\n        }\r\n        else if (a.ins >= 0) {\r\n            // Process the part of a change in A up to the start of the next\r\n            // non-deletion change in B (if overlapping).\r\n            let len = 0, left = a.len;\r\n            while (left) {\r\n                if (b.ins == -1) {\r\n                    let piece = Math.min(left, b.len);\r\n                    len += piece;\r\n                    left -= piece;\r\n                    b.forward(piece);\r\n                }\r\n                else if (b.ins == 0 && b.len < left) {\r\n                    left -= b.len;\r\n                    b.next();\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            addSection(sections, len, inserted < a.i ? a.ins : 0);\r\n            if (insert && inserted < a.i)\r\n                addInsert(insert, sections, a.text);\r\n            inserted = a.i;\r\n            a.forward(a.len - left);\r\n        }\r\n        else if (a.done && b.done) {\r\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\r\n        }\r\n        else {\r\n            throw new Error(\"Mismatched change set lengths\");\r\n        }\r\n    }\r\n}\r\nfunction composeSets(setA, setB, mkSet = false) {\r\n    let sections = [];\r\n    let insert = mkSet ? [] : null;\r\n    let a = new SectionIter(setA), b = new SectionIter(setB);\r\n    for (let open = false;;) {\r\n        if (a.done && b.done) {\r\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\r\n        }\r\n        else if (a.ins == 0) { // Deletion in A\r\n            addSection(sections, a.len, 0, open);\r\n            a.next();\r\n        }\r\n        else if (b.len == 0 && !b.done) { // Insertion in B\r\n            addSection(sections, 0, b.ins, open);\r\n            if (insert)\r\n                addInsert(insert, sections, b.text);\r\n            b.next();\r\n        }\r\n        else if (a.done || b.done) {\r\n            throw new Error(\"Mismatched change set lengths\");\r\n        }\r\n        else {\r\n            let len = Math.min(a.len2, b.len), sectionLen = sections.length;\r\n            if (a.ins == -1) {\r\n                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\r\n                addSection(sections, len, insB, open);\r\n                if (insert && insB)\r\n                    addInsert(insert, sections, b.text);\r\n            }\r\n            else if (b.ins == -1) {\r\n                addSection(sections, a.off ? 0 : a.len, len, open);\r\n                if (insert)\r\n                    addInsert(insert, sections, a.textBit(len));\r\n            }\r\n            else {\r\n                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\r\n                if (insert && !b.off)\r\n                    addInsert(insert, sections, b.text);\r\n            }\r\n            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\r\n            a.forward2(len);\r\n            b.forward(len);\r\n        }\r\n    }\r\n}\r\nclass SectionIter {\r\n    constructor(set) {\r\n        this.set = set;\r\n        this.i = 0;\r\n        this.next();\r\n    }\r\n    next() {\r\n        let { sections } = this.set;\r\n        if (this.i < sections.length) {\r\n            this.len = sections[this.i++];\r\n            this.ins = sections[this.i++];\r\n        }\r\n        else {\r\n            this.len = 0;\r\n            this.ins = -2;\r\n        }\r\n        this.off = 0;\r\n    }\r\n    get done() { return this.ins == -2; }\r\n    get len2() { return this.ins < 0 ? this.len : this.ins; }\r\n    get text() {\r\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\r\n        return index >= inserted.length ? Text.empty : inserted[index];\r\n    }\r\n    textBit(len) {\r\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\r\n        return index >= inserted.length && !len ? Text.empty\r\n            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\r\n    }\r\n    forward(len) {\r\n        if (len == this.len)\r\n            this.next();\r\n        else {\r\n            this.len -= len;\r\n            this.off += len;\r\n        }\r\n    }\r\n    forward2(len) {\r\n        if (this.ins == -1)\r\n            this.forward(len);\r\n        else if (len == this.ins)\r\n            this.next();\r\n        else {\r\n            this.ins -= len;\r\n            this.off += len;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\nA single selection range. When\r\n[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\r\nis enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold\r\nmultiple ranges. By default, selections hold exactly one range.\r\n*/\r\nclass SelectionRange {\r\n    constructor(\r\n    /**\r\n    The lower boundary of the range.\r\n    */\r\n    from, \r\n    /**\r\n    The upper boundary of the range.\r\n    */\r\n    to, flags) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.flags = flags;\r\n    }\r\n    /**\r\n    The anchor of the range—the side that doesn't move when you\r\n    extend it.\r\n    */\r\n    get anchor() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from; }\r\n    /**\r\n    The head of the range, which is moved when the range is\r\n    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\r\n    */\r\n    get head() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to; }\r\n    /**\r\n    True when `anchor` and `head` are at the same position.\r\n    */\r\n    get empty() { return this.from == this.to; }\r\n    /**\r\n    If this is a cursor that is explicitly associated with the\r\n    character on one of its sides, this returns the side. -1 means\r\n    the character before its position, 1 the character after, and 0\r\n    means no association.\r\n    */\r\n    get assoc() { return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0; }\r\n    /**\r\n    The bidirectional text level associated with this cursor, if\r\n    any.\r\n    */\r\n    get bidiLevel() {\r\n        let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;\r\n        return level == 3 ? null : level;\r\n    }\r\n    /**\r\n    The goal column (stored vertical offset) associated with a\r\n    cursor. This is used to preserve the vertical position when\r\n    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\r\n    lines of different length.\r\n    */\r\n    get goalColumn() {\r\n        let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;\r\n        return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;\r\n    }\r\n    /**\r\n    Map this range through a change, producing a valid range in the\r\n    updated document.\r\n    */\r\n    map(change, assoc = -1) {\r\n        let from, to;\r\n        if (this.empty) {\r\n            from = to = change.mapPos(this.from, assoc);\r\n        }\r\n        else {\r\n            from = change.mapPos(this.from, 1);\r\n            to = change.mapPos(this.to, -1);\r\n        }\r\n        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);\r\n    }\r\n    /**\r\n    Extend this range to cover at least `from` to `to`.\r\n    */\r\n    extend(from, to = from) {\r\n        if (from <= this.anchor && to >= this.anchor)\r\n            return EditorSelection.range(from, to);\r\n        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\r\n        return EditorSelection.range(this.anchor, head);\r\n    }\r\n    /**\r\n    Compare this range to another range.\r\n    */\r\n    eq(other) {\r\n        return this.anchor == other.anchor && this.head == other.head;\r\n    }\r\n    /**\r\n    Return a JSON-serializable object representing the range.\r\n    */\r\n    toJSON() { return { anchor: this.anchor, head: this.head }; }\r\n    /**\r\n    Convert a JSON representation of a range to a `SelectionRange`\r\n    instance.\r\n    */\r\n    static fromJSON(json) {\r\n        if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\")\r\n            throw new RangeError(\"Invalid JSON representation for SelectionRange\");\r\n        return EditorSelection.range(json.anchor, json.head);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(from, to, flags) {\r\n        return new SelectionRange(from, to, flags);\r\n    }\r\n}\r\n/**\r\nAn editor selection holds one or more selection ranges.\r\n*/\r\nclass EditorSelection {\r\n    constructor(\r\n    /**\r\n    The ranges in the selection, sorted by position. Ranges cannot\r\n    overlap (but they may touch, if they aren't empty).\r\n    */\r\n    ranges, \r\n    /**\r\n    The index of the _main_ range in the selection (which is\r\n    usually the range that was added last).\r\n    */\r\n    mainIndex) {\r\n        this.ranges = ranges;\r\n        this.mainIndex = mainIndex;\r\n    }\r\n    /**\r\n    Map a selection through a change. Used to adjust the selection\r\n    position for changes.\r\n    */\r\n    map(change, assoc = -1) {\r\n        if (change.empty)\r\n            return this;\r\n        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);\r\n    }\r\n    /**\r\n    Compare this selection to another selection.\r\n    */\r\n    eq(other) {\r\n        if (this.ranges.length != other.ranges.length ||\r\n            this.mainIndex != other.mainIndex)\r\n            return false;\r\n        for (let i = 0; i < this.ranges.length; i++)\r\n            if (!this.ranges[i].eq(other.ranges[i]))\r\n                return false;\r\n        return true;\r\n    }\r\n    /**\r\n    Get the primary selection range. Usually, you should make sure\r\n    your code applies to _all_ ranges, by using methods like\r\n    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\r\n    */\r\n    get main() { return this.ranges[this.mainIndex]; }\r\n    /**\r\n    Make sure the selection only has one range. Returns a selection\r\n    holding only the main range from this selection.\r\n    */\r\n    asSingle() {\r\n        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);\r\n    }\r\n    /**\r\n    Extend this selection with an extra range.\r\n    */\r\n    addRange(range, main = true) {\r\n        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\r\n    }\r\n    /**\r\n    Replace a given range with another range, and then normalize the\r\n    selection to merge and sort ranges if necessary.\r\n    */\r\n    replaceRange(range, which = this.mainIndex) {\r\n        let ranges = this.ranges.slice();\r\n        ranges[which] = range;\r\n        return EditorSelection.create(ranges, this.mainIndex);\r\n    }\r\n    /**\r\n    Convert this selection to an object that can be serialized to\r\n    JSON.\r\n    */\r\n    toJSON() {\r\n        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };\r\n    }\r\n    /**\r\n    Create a selection from a JSON representation.\r\n    */\r\n    static fromJSON(json) {\r\n        if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length)\r\n            throw new RangeError(\"Invalid JSON representation for EditorSelection\");\r\n        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);\r\n    }\r\n    /**\r\n    Create a selection holding a single range.\r\n    */\r\n    static single(anchor, head = anchor) {\r\n        return new EditorSelection([EditorSelection.range(anchor, head)], 0);\r\n    }\r\n    /**\r\n    Sort and merge the given set of ranges, creating a valid\r\n    selection.\r\n    */\r\n    static create(ranges, mainIndex = 0) {\r\n        if (ranges.length == 0)\r\n            throw new RangeError(\"A selection needs at least one range\");\r\n        for (let pos = 0, i = 0; i < ranges.length; i++) {\r\n            let range = ranges[i];\r\n            if (range.empty ? range.from <= pos : range.from < pos)\r\n                return EditorSelection.normalized(ranges.slice(), mainIndex);\r\n            pos = range.to;\r\n        }\r\n        return new EditorSelection(ranges, mainIndex);\r\n    }\r\n    /**\r\n    Create a cursor selection range at the given position. You can\r\n    safely ignore the optional arguments in most situations.\r\n    */\r\n    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\r\n        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) |\r\n            (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |\r\n            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */));\r\n    }\r\n    /**\r\n    Create a selection range.\r\n    */\r\n    static range(anchor, head, goalColumn, bidiLevel) {\r\n        let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */) |\r\n            (bidiLevel == null ? 3 : Math.min(2, bidiLevel));\r\n        return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags)\r\n            : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static normalized(ranges, mainIndex = 0) {\r\n        let main = ranges[mainIndex];\r\n        ranges.sort((a, b) => a.from - b.from);\r\n        mainIndex = ranges.indexOf(main);\r\n        for (let i = 1; i < ranges.length; i++) {\r\n            let range = ranges[i], prev = ranges[i - 1];\r\n            if (range.empty ? range.from <= prev.to : range.from < prev.to) {\r\n                let from = prev.from, to = Math.max(range.to, prev.to);\r\n                if (i <= mainIndex)\r\n                    mainIndex--;\r\n                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));\r\n            }\r\n        }\r\n        return new EditorSelection(ranges, mainIndex);\r\n    }\r\n}\r\nfunction checkSelection(selection, docLength) {\r\n    for (let range of selection.ranges)\r\n        if (range.to > docLength)\r\n            throw new RangeError(\"Selection points outside of document\");\r\n}\r\n\r\nlet nextID = 0;\r\n/**\r\nA facet is a labeled value that is associated with an editor\r\nstate. It takes inputs from any number of extensions, and combines\r\nthose into a single output value.\r\n\r\nExamples of uses of facets are the [tab\r\nsize](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor\r\nattributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update\r\nlisteners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).\r\n*/\r\nclass Facet {\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    combine, \r\n    /**\r\n    @internal\r\n    */\r\n    compareInput, \r\n    /**\r\n    @internal\r\n    */\r\n    compare, isStatic, enables) {\r\n        this.combine = combine;\r\n        this.compareInput = compareInput;\r\n        this.compare = compare;\r\n        this.isStatic = isStatic;\r\n        /**\r\n        @internal\r\n        */\r\n        this.id = nextID++;\r\n        this.default = combine([]);\r\n        this.extensions = typeof enables == \"function\" ? enables(this) : enables;\r\n    }\r\n    /**\r\n    Define a new facet.\r\n    */\r\n    static define(config = {}) {\r\n        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\r\n    }\r\n    /**\r\n    Returns an extension that adds the given value to this facet.\r\n    */\r\n    of(value) {\r\n        return new FacetProvider([], this, 0 /* Provider.Static */, value);\r\n    }\r\n    /**\r\n    Create an extension that computes a value for the facet from a\r\n    state. You must take care to declare the parts of the state that\r\n    this value depends on, since your function is only called again\r\n    for a new state when one of those parts changed.\r\n    \r\n    In cases where your value depends only on a single field, you'll\r\n    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.\r\n    */\r\n    compute(deps, get) {\r\n        if (this.isStatic)\r\n            throw new Error(\"Can't compute a static facet\");\r\n        return new FacetProvider(deps, this, 1 /* Provider.Single */, get);\r\n    }\r\n    /**\r\n    Create an extension that computes zero or more values for this\r\n    facet from a state.\r\n    */\r\n    computeN(deps, get) {\r\n        if (this.isStatic)\r\n            throw new Error(\"Can't compute a static facet\");\r\n        return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);\r\n    }\r\n    from(field, get) {\r\n        if (!get)\r\n            get = x => x;\r\n        return this.compute([field], state => get(state.field(field)));\r\n    }\r\n}\r\nfunction sameArray(a, b) {\r\n    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);\r\n}\r\nclass FacetProvider {\r\n    constructor(dependencies, facet, type, value) {\r\n        this.dependencies = dependencies;\r\n        this.facet = facet;\r\n        this.type = type;\r\n        this.value = value;\r\n        this.id = nextID++;\r\n    }\r\n    dynamicSlot(addresses) {\r\n        var _a;\r\n        let getter = this.value;\r\n        let compare = this.facet.compareInput;\r\n        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;\r\n        let depDoc = false, depSel = false, depAddrs = [];\r\n        for (let dep of this.dependencies) {\r\n            if (dep == \"doc\")\r\n                depDoc = true;\r\n            else if (dep == \"selection\")\r\n                depSel = true;\r\n            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)\r\n                depAddrs.push(addresses[dep.id]);\r\n        }\r\n        return {\r\n            create(state) {\r\n                state.values[idx] = getter(state);\r\n                return 1 /* SlotStatus.Changed */;\r\n            },\r\n            update(state, tr) {\r\n                if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {\r\n                    let newVal = getter(state);\r\n                    if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {\r\n                        state.values[idx] = newVal;\r\n                        return 1 /* SlotStatus.Changed */;\r\n                    }\r\n                }\r\n                return 0;\r\n            },\r\n            reconfigure: (state, oldState) => {\r\n                let newVal, oldAddr = oldState.config.address[id];\r\n                if (oldAddr != null) {\r\n                    let oldVal = getAddr(oldState, oldAddr);\r\n                    if (this.dependencies.every(dep => {\r\n                        return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :\r\n                            dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;\r\n                    }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {\r\n                        state.values[idx] = oldVal;\r\n                        return 0;\r\n                    }\r\n                }\r\n                else {\r\n                    newVal = getter(state);\r\n                }\r\n                state.values[idx] = newVal;\r\n                return 1 /* SlotStatus.Changed */;\r\n            }\r\n        };\r\n    }\r\n}\r\nfunction compareArray(a, b, compare) {\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++)\r\n        if (!compare(a[i], b[i]))\r\n            return false;\r\n    return true;\r\n}\r\nfunction ensureAll(state, addrs) {\r\n    let changed = false;\r\n    for (let addr of addrs)\r\n        if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)\r\n            changed = true;\r\n    return changed;\r\n}\r\nfunction dynamicFacetSlot(addresses, facet, providers) {\r\n    let providerAddrs = providers.map(p => addresses[p.id]);\r\n    let providerTypes = providers.map(p => p.type);\r\n    let dynamic = providerAddrs.filter(p => !(p & 1));\r\n    let idx = addresses[facet.id] >> 1;\r\n    function get(state) {\r\n        let values = [];\r\n        for (let i = 0; i < providerAddrs.length; i++) {\r\n            let value = getAddr(state, providerAddrs[i]);\r\n            if (providerTypes[i] == 2 /* Provider.Multi */)\r\n                for (let val of value)\r\n                    values.push(val);\r\n            else\r\n                values.push(value);\r\n        }\r\n        return facet.combine(values);\r\n    }\r\n    return {\r\n        create(state) {\r\n            for (let addr of providerAddrs)\r\n                ensureAddr(state, addr);\r\n            state.values[idx] = get(state);\r\n            return 1 /* SlotStatus.Changed */;\r\n        },\r\n        update(state, tr) {\r\n            if (!ensureAll(state, dynamic))\r\n                return 0;\r\n            let value = get(state);\r\n            if (facet.compare(value, state.values[idx]))\r\n                return 0;\r\n            state.values[idx] = value;\r\n            return 1 /* SlotStatus.Changed */;\r\n        },\r\n        reconfigure(state, oldState) {\r\n            let depChanged = ensureAll(state, providerAddrs);\r\n            let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);\r\n            if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {\r\n                state.values[idx] = oldValue;\r\n                return 0;\r\n            }\r\n            let value = get(state);\r\n            if (facet.compare(value, oldValue)) {\r\n                state.values[idx] = oldValue;\r\n                return 0;\r\n            }\r\n            state.values[idx] = value;\r\n            return 1 /* SlotStatus.Changed */;\r\n        }\r\n    };\r\n}\r\nconst initField = /*@__PURE__*/Facet.define({ static: true });\r\n/**\r\nFields can store additional information in an editor state, and\r\nkeep it in sync with the rest of the state.\r\n*/\r\nclass StateField {\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    id, createF, updateF, compareF, \r\n    /**\r\n    @internal\r\n    */\r\n    spec) {\r\n        this.id = id;\r\n        this.createF = createF;\r\n        this.updateF = updateF;\r\n        this.compareF = compareF;\r\n        this.spec = spec;\r\n        /**\r\n        @internal\r\n        */\r\n        this.provides = undefined;\r\n    }\r\n    /**\r\n    Define a state field.\r\n    */\r\n    static define(config) {\r\n        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\r\n        if (config.provide)\r\n            field.provides = config.provide(field);\r\n        return field;\r\n    }\r\n    create(state) {\r\n        let init = state.facet(initField).find(i => i.field == this);\r\n        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    slot(addresses) {\r\n        let idx = addresses[this.id] >> 1;\r\n        return {\r\n            create: (state) => {\r\n                state.values[idx] = this.create(state);\r\n                return 1 /* SlotStatus.Changed */;\r\n            },\r\n            update: (state, tr) => {\r\n                let oldVal = state.values[idx];\r\n                let value = this.updateF(oldVal, tr);\r\n                if (this.compareF(oldVal, value))\r\n                    return 0;\r\n                state.values[idx] = value;\r\n                return 1 /* SlotStatus.Changed */;\r\n            },\r\n            reconfigure: (state, oldState) => {\r\n                if (oldState.config.address[this.id] != null) {\r\n                    state.values[idx] = oldState.field(this);\r\n                    return 0;\r\n                }\r\n                state.values[idx] = this.create(state);\r\n                return 1 /* SlotStatus.Changed */;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n    Returns an extension that enables this field and overrides the\r\n    way it is initialized. Can be useful when you need to provide a\r\n    non-default starting value for the field.\r\n    */\r\n    init(create) {\r\n        return [this, initField.of({ field: this, create })];\r\n    }\r\n    /**\r\n    State field instances can be used as\r\n    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\r\n    given state.\r\n    */\r\n    get extension() { return this; }\r\n}\r\nconst Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };\r\nfunction prec(value) {\r\n    return (ext) => new PrecExtension(ext, value);\r\n}\r\n/**\r\nBy default extensions are registered in the order they are found\r\nin the flattened form of nested array that was provided.\r\nIndividual extension values can be assigned a precedence to\r\noverride this. Extensions that do not have a precedence set get\r\nthe precedence of the nearest parent with a precedence, or\r\n[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The\r\nfinal ordering of extensions is determined by first sorting by\r\nprecedence and then by order within each precedence.\r\n*/\r\nconst Prec = {\r\n    /**\r\n    The highest precedence level, for extensions that should end up\r\n    near the start of the precedence ordering.\r\n    */\r\n    highest: /*@__PURE__*/prec(Prec_.highest),\r\n    /**\r\n    A higher-than-default precedence, for extensions that should\r\n    come before those with default precedence.\r\n    */\r\n    high: /*@__PURE__*/prec(Prec_.high),\r\n    /**\r\n    The default precedence, which is also used for extensions\r\n    without an explicit precedence.\r\n    */\r\n    default: /*@__PURE__*/prec(Prec_.default),\r\n    /**\r\n    A lower-than-default precedence.\r\n    */\r\n    low: /*@__PURE__*/prec(Prec_.low),\r\n    /**\r\n    The lowest precedence level. Meant for things that should end up\r\n    near the end of the extension order.\r\n    */\r\n    lowest: /*@__PURE__*/prec(Prec_.lowest)\r\n};\r\nclass PrecExtension {\r\n    constructor(inner, prec) {\r\n        this.inner = inner;\r\n        this.prec = prec;\r\n    }\r\n}\r\n/**\r\nExtension compartments can be used to make a configuration\r\ndynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your\r\nconfiguration in a compartment, you can later\r\n[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a\r\ntransaction.\r\n*/\r\nclass Compartment {\r\n    /**\r\n    Create an instance of this compartment to add to your [state\r\n    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\r\n    */\r\n    of(ext) { return new CompartmentInstance(this, ext); }\r\n    /**\r\n    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\r\n    reconfigures this compartment.\r\n    */\r\n    reconfigure(content) {\r\n        return Compartment.reconfigure.of({ compartment: this, extension: content });\r\n    }\r\n    /**\r\n    Get the current content of the compartment in the state, or\r\n    `undefined` if it isn't present.\r\n    */\r\n    get(state) {\r\n        return state.config.compartments.get(this);\r\n    }\r\n}\r\nclass CompartmentInstance {\r\n    constructor(compartment, inner) {\r\n        this.compartment = compartment;\r\n        this.inner = inner;\r\n    }\r\n}\r\nclass Configuration {\r\n    constructor(base, compartments, dynamicSlots, address, staticValues, facets) {\r\n        this.base = base;\r\n        this.compartments = compartments;\r\n        this.dynamicSlots = dynamicSlots;\r\n        this.address = address;\r\n        this.staticValues = staticValues;\r\n        this.facets = facets;\r\n        this.statusTemplate = [];\r\n        while (this.statusTemplate.length < dynamicSlots.length)\r\n            this.statusTemplate.push(0 /* SlotStatus.Unresolved */);\r\n    }\r\n    staticFacet(facet) {\r\n        let addr = this.address[facet.id];\r\n        return addr == null ? facet.default : this.staticValues[addr >> 1];\r\n    }\r\n    static resolve(base, compartments, oldState) {\r\n        let fields = [];\r\n        let facets = Object.create(null);\r\n        let newCompartments = new Map();\r\n        for (let ext of flatten(base, compartments, newCompartments)) {\r\n            if (ext instanceof StateField)\r\n                fields.push(ext);\r\n            else\r\n                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\r\n        }\r\n        let address = Object.create(null);\r\n        let staticValues = [];\r\n        let dynamicSlots = [];\r\n        for (let field of fields) {\r\n            address[field.id] = dynamicSlots.length << 1;\r\n            dynamicSlots.push(a => field.slot(a));\r\n        }\r\n        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;\r\n        for (let id in facets) {\r\n            let providers = facets[id], facet = providers[0].facet;\r\n            let oldProviders = oldFacets && oldFacets[id] || [];\r\n            if (providers.every(p => p.type == 0 /* Provider.Static */)) {\r\n                address[facet.id] = (staticValues.length << 1) | 1;\r\n                if (sameArray(oldProviders, providers)) {\r\n                    staticValues.push(oldState.facet(facet));\r\n                }\r\n                else {\r\n                    let value = facet.combine(providers.map(p => p.value));\r\n                    staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);\r\n                }\r\n            }\r\n            else {\r\n                for (let p of providers) {\r\n                    if (p.type == 0 /* Provider.Static */) {\r\n                        address[p.id] = (staticValues.length << 1) | 1;\r\n                        staticValues.push(p.value);\r\n                    }\r\n                    else {\r\n                        address[p.id] = dynamicSlots.length << 1;\r\n                        dynamicSlots.push(a => p.dynamicSlot(a));\r\n                    }\r\n                }\r\n                address[facet.id] = dynamicSlots.length << 1;\r\n                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));\r\n            }\r\n        }\r\n        let dynamic = dynamicSlots.map(f => f(address));\r\n        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);\r\n    }\r\n}\r\nfunction flatten(extension, compartments, newCompartments) {\r\n    let result = [[], [], [], [], []];\r\n    let seen = new Map();\r\n    function inner(ext, prec) {\r\n        let known = seen.get(ext);\r\n        if (known != null) {\r\n            if (known <= prec)\r\n                return;\r\n            let found = result[known].indexOf(ext);\r\n            if (found > -1)\r\n                result[known].splice(found, 1);\r\n            if (ext instanceof CompartmentInstance)\r\n                newCompartments.delete(ext.compartment);\r\n        }\r\n        seen.set(ext, prec);\r\n        if (Array.isArray(ext)) {\r\n            for (let e of ext)\r\n                inner(e, prec);\r\n        }\r\n        else if (ext instanceof CompartmentInstance) {\r\n            if (newCompartments.has(ext.compartment))\r\n                throw new RangeError(`Duplicate use of compartment in extensions`);\r\n            let content = compartments.get(ext.compartment) || ext.inner;\r\n            newCompartments.set(ext.compartment, content);\r\n            inner(content, prec);\r\n        }\r\n        else if (ext instanceof PrecExtension) {\r\n            inner(ext.inner, ext.prec);\r\n        }\r\n        else if (ext instanceof StateField) {\r\n            result[prec].push(ext);\r\n            if (ext.provides)\r\n                inner(ext.provides, prec);\r\n        }\r\n        else if (ext instanceof FacetProvider) {\r\n            result[prec].push(ext);\r\n            if (ext.facet.extensions)\r\n                inner(ext.facet.extensions, Prec_.default);\r\n        }\r\n        else {\r\n            let content = ext.extension;\r\n            if (!content)\r\n                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\r\n            inner(content, prec);\r\n        }\r\n    }\r\n    inner(extension, Prec_.default);\r\n    return result.reduce((a, b) => a.concat(b));\r\n}\r\nfunction ensureAddr(state, addr) {\r\n    if (addr & 1)\r\n        return 2 /* SlotStatus.Computed */;\r\n    let idx = addr >> 1;\r\n    let status = state.status[idx];\r\n    if (status == 4 /* SlotStatus.Computing */)\r\n        throw new Error(\"Cyclic dependency between fields and/or facets\");\r\n    if (status & 2 /* SlotStatus.Computed */)\r\n        return status;\r\n    state.status[idx] = 4 /* SlotStatus.Computing */;\r\n    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);\r\n    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;\r\n}\r\nfunction getAddr(state, addr) {\r\n    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\r\n}\r\n\r\nconst languageData = /*@__PURE__*/Facet.define();\r\nconst allowMultipleSelections = /*@__PURE__*/Facet.define({\r\n    combine: values => values.some(v => v),\r\n    static: true\r\n});\r\nconst lineSeparator = /*@__PURE__*/Facet.define({\r\n    combine: values => values.length ? values[0] : undefined,\r\n    static: true\r\n});\r\nconst changeFilter = /*@__PURE__*/Facet.define();\r\nconst transactionFilter = /*@__PURE__*/Facet.define();\r\nconst transactionExtender = /*@__PURE__*/Facet.define();\r\nconst readOnly = /*@__PURE__*/Facet.define({\r\n    combine: values => values.length ? values[0] : false\r\n});\r\n\r\n/**\r\nAnnotations are tagged values that are used to add metadata to\r\ntransactions in an extensible way. They should be used to model\r\nthings that effect the entire transaction (such as its [time\r\nstamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its\r\n[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen\r\n_alongside_ the other changes made by the transaction, [state\r\neffects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.\r\n*/\r\nclass Annotation {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    /**\r\n    The annotation type.\r\n    */\r\n    type, \r\n    /**\r\n    The value of this annotation.\r\n    */\r\n    value) {\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    /**\r\n    Define a new type of annotation.\r\n    */\r\n    static define() { return new AnnotationType(); }\r\n}\r\n/**\r\nMarker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).\r\n*/\r\nclass AnnotationType {\r\n    /**\r\n    Create an instance of this annotation.\r\n    */\r\n    of(value) { return new Annotation(this, value); }\r\n}\r\n/**\r\nRepresentation of a type of state effect. Defined with\r\n[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).\r\n*/\r\nclass StateEffectType {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    // The `any` types in these function types are there to work\r\n    // around TypeScript issue #37631, where the type guard on\r\n    // `StateEffect.is` mysteriously stops working when these properly\r\n    // have type `Value`.\r\n    /**\r\n    @internal\r\n    */\r\n    map) {\r\n        this.map = map;\r\n    }\r\n    /**\r\n    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\r\n    type.\r\n    */\r\n    of(value) { return new StateEffect(this, value); }\r\n}\r\n/**\r\nState effects can be used to represent additional effects\r\nassociated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They\r\nare often useful to model changes to custom [state\r\nfields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in\r\ndocument or selection changes.\r\n*/\r\nclass StateEffect {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    type, \r\n    /**\r\n    The value of this effect.\r\n    */\r\n    value) {\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    /**\r\n    Map this effect through a position mapping. Will return\r\n    `undefined` when that ends up deleting the effect.\r\n    */\r\n    map(mapping) {\r\n        let mapped = this.type.map(this.value, mapping);\r\n        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);\r\n    }\r\n    /**\r\n    Tells you whether this effect object is of a given\r\n    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\r\n    */\r\n    is(type) { return this.type == type; }\r\n    /**\r\n    Define a new effect type. The type parameter indicates the type\r\n    of values that his effect holds.\r\n    */\r\n    static define(spec = {}) {\r\n        return new StateEffectType(spec.map || (v => v));\r\n    }\r\n    /**\r\n    Map an array of effects through a change set.\r\n    */\r\n    static mapEffects(effects, mapping) {\r\n        if (!effects.length)\r\n            return effects;\r\n        let result = [];\r\n        for (let effect of effects) {\r\n            let mapped = effect.map(mapping);\r\n            if (mapped)\r\n                result.push(mapped);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\nThis effect can be used to reconfigure the root extensions of\r\nthe editor. Doing this will discard any extensions\r\n[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset\r\nthe content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)\r\ncompartments.\r\n*/\r\nStateEffect.reconfigure = /*@__PURE__*/StateEffect.define();\r\n/**\r\nAppend extensions to the top-level configuration of the editor.\r\n*/\r\nStateEffect.appendConfig = /*@__PURE__*/StateEffect.define();\r\n/**\r\nChanges to the editor state are grouped into transactions.\r\nTypically, a user action creates a single transaction, which may\r\ncontain any number of document changes, may change the selection,\r\nor have other effects. Create a transaction by calling\r\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately\r\ndispatch one by calling\r\n[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).\r\n*/\r\nclass Transaction {\r\n    constructor(\r\n    /**\r\n    The state from which the transaction starts.\r\n    */\r\n    startState, \r\n    /**\r\n    The document changes made by this transaction.\r\n    */\r\n    changes, \r\n    /**\r\n    The selection set by this transaction, or undefined if it\r\n    doesn't explicitly set a selection.\r\n    */\r\n    selection, \r\n    /**\r\n    The effects added to the transaction.\r\n    */\r\n    effects, \r\n    /**\r\n    @internal\r\n    */\r\n    annotations, \r\n    /**\r\n    Whether the selection should be scrolled into view after this\r\n    transaction is dispatched.\r\n    */\r\n    scrollIntoView) {\r\n        this.startState = startState;\r\n        this.changes = changes;\r\n        this.selection = selection;\r\n        this.effects = effects;\r\n        this.annotations = annotations;\r\n        this.scrollIntoView = scrollIntoView;\r\n        /**\r\n        @internal\r\n        */\r\n        this._doc = null;\r\n        /**\r\n        @internal\r\n        */\r\n        this._state = null;\r\n        if (selection)\r\n            checkSelection(selection, changes.newLength);\r\n        if (!annotations.some((a) => a.type == Transaction.time))\r\n            this.annotations = annotations.concat(Transaction.time.of(Date.now()));\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(startState, changes, selection, effects, annotations, scrollIntoView) {\r\n        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);\r\n    }\r\n    /**\r\n    The new document produced by the transaction. Contrary to\r\n    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\r\n    force the entire new state to be computed right away, so it is\r\n    recommended that [transaction\r\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\r\n    when they need to look at the new document.\r\n    */\r\n    get newDoc() {\r\n        return this._doc || (this._doc = this.changes.apply(this.startState.doc));\r\n    }\r\n    /**\r\n    The new selection produced by the transaction. If\r\n    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\r\n    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\r\n    current selection through the changes made by the transaction.\r\n    */\r\n    get newSelection() {\r\n        return this.selection || this.startState.selection.map(this.changes);\r\n    }\r\n    /**\r\n    The new state created by the transaction. Computed on demand\r\n    (but retained for subsequent access), so it is recommended not to\r\n    access it in [transaction\r\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\r\n    */\r\n    get state() {\r\n        if (!this._state)\r\n            this.startState.applyTransaction(this);\r\n        return this._state;\r\n    }\r\n    /**\r\n    Get the value of the given annotation type, if any.\r\n    */\r\n    annotation(type) {\r\n        for (let ann of this.annotations)\r\n            if (ann.type == type)\r\n                return ann.value;\r\n        return undefined;\r\n    }\r\n    /**\r\n    Indicates whether the transaction changed the document.\r\n    */\r\n    get docChanged() { return !this.changes.empty; }\r\n    /**\r\n    Indicates whether this transaction reconfigures the state\r\n    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\r\n    with a top-level configuration\r\n    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\r\n    */\r\n    get reconfigured() { return this.startState.config != this.state.config; }\r\n    /**\r\n    Returns true if the transaction has a [user\r\n    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to\r\n    or more specific than `event`. For example, if the transaction\r\n    has `\"select.pointer\"` as user event, `\"select\"` and\r\n    `\"select.pointer\"` will match it.\r\n    */\r\n    isUserEvent(event) {\r\n        let e = this.annotation(Transaction.userEvent);\r\n        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == \".\"));\r\n    }\r\n}\r\n/**\r\nAnnotation used to store transaction timestamps. Automatically\r\nadded to every transaction, holding `Date.now()`.\r\n*/\r\nTransaction.time = /*@__PURE__*/Annotation.define();\r\n/**\r\nAnnotation used to associate a transaction with a user interface\r\nevent. Holds a string identifying the event, using a\r\ndot-separated format to support attaching more specific\r\ninformation. The events used by the core libraries are:\r\n\r\n - `\"input\"` when content is entered\r\n   - `\"input.type\"` for typed input\r\n     - `\"input.type.compose\"` for composition\r\n   - `\"input.paste\"` for pasted input\r\n   - `\"input.drop\"` when adding content with drag-and-drop\r\n   - `\"input.complete\"` when autocompleting\r\n - `\"delete\"` when the user deletes content\r\n   - `\"delete.selection\"` when deleting the selection\r\n   - `\"delete.forward\"` when deleting forward from the selection\r\n   - `\"delete.backward\"` when deleting backward from the selection\r\n   - `\"delete.cut\"` when cutting to the clipboard\r\n - `\"move\"` when content is moved\r\n   - `\"move.drop\"` when content is moved within the editor through drag-and-drop\r\n - `\"select\"` when explicitly changing the selection\r\n   - `\"select.pointer\"` when selecting with a mouse or other pointing device\r\n - `\"undo\"` and `\"redo\"` for history actions\r\n\r\nUse [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check\r\nwhether the annotation matches a given event.\r\n*/\r\nTransaction.userEvent = /*@__PURE__*/Annotation.define();\r\n/**\r\nAnnotation indicating whether a transaction should be added to\r\nthe undo history or not.\r\n*/\r\nTransaction.addToHistory = /*@__PURE__*/Annotation.define();\r\n/**\r\nAnnotation indicating (when present and true) that a transaction\r\nrepresents a change made by some other actor, not the user. This\r\nis used, for example, to tag other people's changes in\r\ncollaborative editing.\r\n*/\r\nTransaction.remote = /*@__PURE__*/Annotation.define();\r\nfunction joinRanges(a, b) {\r\n    let result = [];\r\n    for (let iA = 0, iB = 0;;) {\r\n        let from, to;\r\n        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\r\n            from = a[iA++];\r\n            to = a[iA++];\r\n        }\r\n        else if (iB < b.length) {\r\n            from = b[iB++];\r\n            to = b[iB++];\r\n        }\r\n        else\r\n            return result;\r\n        if (!result.length || result[result.length - 1] < from)\r\n            result.push(from, to);\r\n        else if (result[result.length - 1] < to)\r\n            result[result.length - 1] = to;\r\n    }\r\n}\r\nfunction mergeTransaction(a, b, sequential) {\r\n    var _a;\r\n    let mapForA, mapForB, changes;\r\n    if (sequential) {\r\n        mapForA = b.changes;\r\n        mapForB = ChangeSet.empty(b.changes.length);\r\n        changes = a.changes.compose(b.changes);\r\n    }\r\n    else {\r\n        mapForA = b.changes.map(a.changes);\r\n        mapForB = a.changes.mapDesc(b.changes, true);\r\n        changes = a.changes.compose(mapForA);\r\n    }\r\n    return {\r\n        changes,\r\n        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\r\n        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),\r\n        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\r\n        scrollIntoView: a.scrollIntoView || b.scrollIntoView\r\n    };\r\n}\r\nfunction resolveTransactionInner(state, spec, docSize) {\r\n    let sel = spec.selection, annotations = asArray(spec.annotations);\r\n    if (spec.userEvent)\r\n        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));\r\n    return {\r\n        changes: spec.changes instanceof ChangeSet ? spec.changes\r\n            : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),\r\n        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),\r\n        effects: asArray(spec.effects),\r\n        annotations,\r\n        scrollIntoView: !!spec.scrollIntoView\r\n    };\r\n}\r\nfunction resolveTransaction(state, specs, filter) {\r\n    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\r\n    if (specs.length && specs[0].filter === false)\r\n        filter = false;\r\n    for (let i = 1; i < specs.length; i++) {\r\n        if (specs[i].filter === false)\r\n            filter = false;\r\n        let seq = !!specs[i].sequential;\r\n        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\r\n    }\r\n    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\r\n    return extendTransaction(filter ? filterTransaction(tr) : tr);\r\n}\r\n// Finish a transaction by applying filters if necessary.\r\nfunction filterTransaction(tr) {\r\n    let state = tr.startState;\r\n    // Change filters\r\n    let result = true;\r\n    for (let filter of state.facet(changeFilter)) {\r\n        let value = filter(tr);\r\n        if (value === false) {\r\n            result = false;\r\n            break;\r\n        }\r\n        if (Array.isArray(value))\r\n            result = result === true ? value : joinRanges(result, value);\r\n    }\r\n    if (result !== true) {\r\n        let changes, back;\r\n        if (result === false) {\r\n            back = tr.changes.invertedDesc;\r\n            changes = ChangeSet.empty(state.doc.length);\r\n        }\r\n        else {\r\n            let filtered = tr.changes.filter(result);\r\n            changes = filtered.changes;\r\n            back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;\r\n        }\r\n        tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\r\n    }\r\n    // Transaction filters\r\n    let filters = state.facet(transactionFilter);\r\n    for (let i = filters.length - 1; i >= 0; i--) {\r\n        let filtered = filters[i](tr);\r\n        if (filtered instanceof Transaction)\r\n            tr = filtered;\r\n        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)\r\n            tr = filtered[0];\r\n        else\r\n            tr = resolveTransaction(state, asArray(filtered), false);\r\n    }\r\n    return tr;\r\n}\r\nfunction extendTransaction(tr) {\r\n    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;\r\n    for (let i = extenders.length - 1; i >= 0; i--) {\r\n        let extension = extenders[i](tr);\r\n        if (extension && Object.keys(extension).length)\r\n            spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);\r\n    }\r\n    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\r\n}\r\nconst none = [];\r\nfunction asArray(value) {\r\n    return value == null ? none : Array.isArray(value) ? value : [value];\r\n}\r\n\r\n/**\r\nThe categories produced by a [character\r\ncategorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used\r\ndo things like selecting by word.\r\n*/\r\nvar CharCategory = /*@__PURE__*/(function (CharCategory) {\r\n    /**\r\n    Word characters.\r\n    */\r\n    CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\r\n    /**\r\n    Whitespace.\r\n    */\r\n    CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\r\n    /**\r\n    Anything else.\r\n    */\r\n    CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\r\nreturn CharCategory})(CharCategory || (CharCategory = {}));\r\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\r\nlet wordChar;\r\ntry {\r\n    wordChar = /*@__PURE__*/new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\r\n}\r\ncatch (_) { }\r\nfunction hasWordChar(str) {\r\n    if (wordChar)\r\n        return wordChar.test(str);\r\n    for (let i = 0; i < str.length; i++) {\r\n        let ch = str[i];\r\n        if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction makeCategorizer(wordChars) {\r\n    return (char) => {\r\n        if (!/\\S/.test(char))\r\n            return CharCategory.Space;\r\n        if (hasWordChar(char))\r\n            return CharCategory.Word;\r\n        for (let i = 0; i < wordChars.length; i++)\r\n            if (char.indexOf(wordChars[i]) > -1)\r\n                return CharCategory.Word;\r\n        return CharCategory.Other;\r\n    };\r\n}\r\n\r\n/**\r\nThe editor state class is a persistent (immutable) data structure.\r\nTo update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a\r\n[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state\r\ninstance, without modifying the original object.\r\n\r\nAs such, _never_ mutate properties of a state directly. That'll\r\njust break things.\r\n*/\r\nclass EditorState {\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    config, \r\n    /**\r\n    The current document.\r\n    */\r\n    doc, \r\n    /**\r\n    The current selection.\r\n    */\r\n    selection, \r\n    /**\r\n    @internal\r\n    */\r\n    values, computeSlot, tr) {\r\n        this.config = config;\r\n        this.doc = doc;\r\n        this.selection = selection;\r\n        this.values = values;\r\n        this.status = config.statusTemplate.slice();\r\n        this.computeSlot = computeSlot;\r\n        // Fill in the computed state immediately, so that further queries\r\n        // for it made during the update return this state\r\n        if (tr)\r\n            tr._state = this;\r\n        for (let i = 0; i < this.config.dynamicSlots.length; i++)\r\n            ensureAddr(this, i << 1);\r\n        this.computeSlot = null;\r\n    }\r\n    field(field, require = true) {\r\n        let addr = this.config.address[field.id];\r\n        if (addr == null) {\r\n            if (require)\r\n                throw new RangeError(\"Field is not present in this state\");\r\n            return undefined;\r\n        }\r\n        ensureAddr(this, addr);\r\n        return getAddr(this, addr);\r\n    }\r\n    /**\r\n    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\r\n    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\r\n    can be passed. Unless\r\n    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\r\n    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\r\n    are assumed to start in the _current_ document (not the document\r\n    produced by previous specs), and its\r\n    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\r\n    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\r\n    to the document created by its _own_ changes. The resulting\r\n    transaction contains the combined effect of all the different\r\n    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\r\n    specs take precedence over earlier ones.\r\n    */\r\n    update(...specs) {\r\n        return resolveTransaction(this, specs, true);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    applyTransaction(tr) {\r\n        let conf = this.config, { base, compartments } = conf;\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(Compartment.reconfigure)) {\r\n                if (conf) {\r\n                    compartments = new Map;\r\n                    conf.compartments.forEach((val, key) => compartments.set(key, val));\r\n                    conf = null;\r\n                }\r\n                compartments.set(effect.value.compartment, effect.value.extension);\r\n            }\r\n            else if (effect.is(StateEffect.reconfigure)) {\r\n                conf = null;\r\n                base = effect.value;\r\n            }\r\n            else if (effect.is(StateEffect.appendConfig)) {\r\n                conf = null;\r\n                base = asArray(base).concat(effect.value);\r\n            }\r\n        }\r\n        let startValues;\r\n        if (!conf) {\r\n            conf = Configuration.resolve(base, compartments, this);\r\n            let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);\r\n            startValues = intermediateState.values;\r\n        }\r\n        else {\r\n            startValues = tr.startState.values.slice();\r\n        }\r\n        new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);\r\n    }\r\n    /**\r\n    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\r\n    replaces every selection range with the given content.\r\n    */\r\n    replaceSelection(text) {\r\n        if (typeof text == \"string\")\r\n            text = this.toText(text);\r\n        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },\r\n            range: EditorSelection.cursor(range.from + text.length) }));\r\n    }\r\n    /**\r\n    Create a set of changes and a new selection by running the given\r\n    function for each range in the active selection. The function\r\n    can return an optional set of changes (in the coordinate space\r\n    of the start document), plus an updated range (in the coordinate\r\n    space of the document produced by the call's own changes). This\r\n    method will merge all the changes and ranges into a single\r\n    changeset and selection, and return it as a [transaction\r\n    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\r\n    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\r\n    */\r\n    changeByRange(f) {\r\n        let sel = this.selection;\r\n        let result1 = f(sel.ranges[0]);\r\n        let changes = this.changes(result1.changes), ranges = [result1.range];\r\n        let effects = asArray(result1.effects);\r\n        for (let i = 1; i < sel.ranges.length; i++) {\r\n            let result = f(sel.ranges[i]);\r\n            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\r\n            for (let j = 0; j < i; j++)\r\n                ranges[j] = ranges[j].map(newMapped);\r\n            let mapBy = changes.mapDesc(newChanges, true);\r\n            ranges.push(result.range.map(mapBy));\r\n            changes = changes.compose(newMapped);\r\n            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));\r\n        }\r\n        return {\r\n            changes,\r\n            selection: EditorSelection.create(ranges, sel.mainIndex),\r\n            effects\r\n        };\r\n    }\r\n    /**\r\n    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\r\n    description, taking the state's document length and line\r\n    separator into account.\r\n    */\r\n    changes(spec = []) {\r\n        if (spec instanceof ChangeSet)\r\n            return spec;\r\n        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));\r\n    }\r\n    /**\r\n    Using the state's [line\r\n    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\r\n    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.\r\n    */\r\n    toText(string) {\r\n        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));\r\n    }\r\n    /**\r\n    Return the given range of the document as a string.\r\n    */\r\n    sliceDoc(from = 0, to = this.doc.length) {\r\n        return this.doc.sliceString(from, to, this.lineBreak);\r\n    }\r\n    /**\r\n    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\r\n    */\r\n    facet(facet) {\r\n        let addr = this.config.address[facet.id];\r\n        if (addr == null)\r\n            return facet.default;\r\n        ensureAddr(this, addr);\r\n        return getAddr(this, addr);\r\n    }\r\n    /**\r\n    Convert this state to a JSON-serializable object. When custom\r\n    fields should be serialized, you can pass them in as an object\r\n    mapping property names (in the resulting object, which should\r\n    not use `doc` or `selection`) to fields.\r\n    */\r\n    toJSON(fields) {\r\n        let result = {\r\n            doc: this.sliceDoc(),\r\n            selection: this.selection.toJSON()\r\n        };\r\n        if (fields)\r\n            for (let prop in fields) {\r\n                let value = fields[prop];\r\n                if (value instanceof StateField && this.config.address[value.id] != null)\r\n                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\r\n            }\r\n        return result;\r\n    }\r\n    /**\r\n    Deserialize a state from its JSON representation. When custom\r\n    fields should be deserialized, pass the same object you passed\r\n    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\r\n    third argument.\r\n    */\r\n    static fromJSON(json, config = {}, fields) {\r\n        if (!json || typeof json.doc != \"string\")\r\n            throw new RangeError(\"Invalid JSON representation for EditorState\");\r\n        let fieldInit = [];\r\n        if (fields)\r\n            for (let prop in fields) {\r\n                if (Object.prototype.hasOwnProperty.call(json, prop)) {\r\n                    let field = fields[prop], value = json[prop];\r\n                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));\r\n                }\r\n            }\r\n        return EditorState.create({\r\n            doc: json.doc,\r\n            selection: EditorSelection.fromJSON(json.selection),\r\n            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\r\n        });\r\n    }\r\n    /**\r\n    Create a new state. You'll usually only need this when\r\n    initializing an editor—updated states are created by applying\r\n    transactions.\r\n    */\r\n    static create(config = {}) {\r\n        let configuration = Configuration.resolve(config.extensions || [], new Map);\r\n        let doc = config.doc instanceof Text ? config.doc\r\n            : Text.of((config.doc || \"\").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));\r\n        let selection = !config.selection ? EditorSelection.single(0)\r\n            : config.selection instanceof EditorSelection ? config.selection\r\n                : EditorSelection.single(config.selection.anchor, config.selection.head);\r\n        checkSelection(selection, doc.length);\r\n        if (!configuration.staticFacet(allowMultipleSelections))\r\n            selection = selection.asSingle();\r\n        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);\r\n    }\r\n    /**\r\n    The size (in columns) of a tab in the document, determined by\r\n    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\r\n    */\r\n    get tabSize() { return this.facet(EditorState.tabSize); }\r\n    /**\r\n    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\r\n    string for this state.\r\n    */\r\n    get lineBreak() { return this.facet(EditorState.lineSeparator) || \"\\n\"; }\r\n    /**\r\n    Returns true when the editor is\r\n    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.\r\n    */\r\n    get readOnly() { return this.facet(readOnly); }\r\n    /**\r\n    Look up a translation for the given phrase (via the\r\n    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\r\n    original string if no translation is found.\r\n    \r\n    If additional arguments are passed, they will be inserted in\r\n    place of markers like `$1` (for the first value) and `$2`, etc.\r\n    A single `$` is equivalent to `$1`, and `$$` will produce a\r\n    literal dollar sign.\r\n    */\r\n    phrase(phrase, ...insert) {\r\n        for (let map of this.facet(EditorState.phrases))\r\n            if (Object.prototype.hasOwnProperty.call(map, phrase)) {\r\n                phrase = map[phrase];\r\n                break;\r\n            }\r\n        if (insert.length)\r\n            phrase = phrase.replace(/\\$(\\$|\\d*)/g, (m, i) => {\r\n                if (i == \"$\")\r\n                    return \"$\";\r\n                let n = +(i || 1);\r\n                return !n || n > insert.length ? m : insert[n - 1];\r\n            });\r\n        return phrase;\r\n    }\r\n    /**\r\n    Find the values for a given language data field, provided by the\r\n    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\r\n    \r\n    Examples of language data fields are...\r\n    \r\n    - [`\"commentTokens\"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying\r\n      comment syntax.\r\n    - [`\"autocomplete\"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)\r\n      for providing language-specific completion sources.\r\n    - [`\"wordChars\"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding\r\n      characters that should be considered part of words in this\r\n      language.\r\n    - [`\"closeBrackets\"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls\r\n      bracket closing behavior.\r\n    */\r\n    languageDataAt(name, pos, side = -1) {\r\n        let values = [];\r\n        for (let provider of this.facet(languageData)) {\r\n            for (let result of provider(this, pos, side)) {\r\n                if (Object.prototype.hasOwnProperty.call(result, name))\r\n                    values.push(result[name]);\r\n            }\r\n        }\r\n        return values;\r\n    }\r\n    /**\r\n    Return a function that can categorize strings (expected to\r\n    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))\r\n    into one of:\r\n    \r\n     - Word (contains an alphanumeric character or a character\r\n       explicitly listed in the local language's `\"wordChars\"`\r\n       language data, which should be a string)\r\n     - Space (contains only whitespace)\r\n     - Other (anything else)\r\n    */\r\n    charCategorizer(at) {\r\n        return makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\r\n    }\r\n    /**\r\n    Find the word at the given position, meaning the range\r\n    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\r\n    around it. If no word characters are adjacent to the position,\r\n    this returns null.\r\n    */\r\n    wordAt(pos) {\r\n        let { text, from, length } = this.doc.lineAt(pos);\r\n        let cat = this.charCategorizer(pos);\r\n        let start = pos - from, end = pos - from;\r\n        while (start > 0) {\r\n            let prev = findClusterBreak(text, start, false);\r\n            if (cat(text.slice(prev, start)) != CharCategory.Word)\r\n                break;\r\n            start = prev;\r\n        }\r\n        while (end < length) {\r\n            let next = findClusterBreak(text, end);\r\n            if (cat(text.slice(end, next)) != CharCategory.Word)\r\n                break;\r\n            end = next;\r\n        }\r\n        return start == end ? null : EditorSelection.range(start + from, end + from);\r\n    }\r\n}\r\n/**\r\nA facet that, when enabled, causes the editor to allow multiple\r\nranges to be selected. Be careful though, because by default the\r\neditor relies on the native DOM selection, which cannot handle\r\nmultiple selections. An extension like\r\n[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make\r\nsecondary selections visible to the user.\r\n*/\r\nEditorState.allowMultipleSelections = allowMultipleSelections;\r\n/**\r\nConfigures the tab size to use in this state. The first\r\n(highest-precedence) value of the facet is used. If no value is\r\ngiven, this defaults to 4.\r\n*/\r\nEditorState.tabSize = /*@__PURE__*/Facet.define({\r\n    combine: values => values.length ? values[0] : 4\r\n});\r\n/**\r\nThe line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"`\r\nand `\"\\r\"` is treated as a separator when splitting lines, and\r\nlines are joined with `\"\\n\"`.\r\n\r\nWhen you configure a value here, only that precise separator\r\nwill be used, allowing you to round-trip documents through the\r\neditor without normalizing line separators.\r\n*/\r\nEditorState.lineSeparator = lineSeparator;\r\n/**\r\nThis facet controls the value of the\r\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is\r\nconsulted by commands and extensions that implement editing\r\nfunctionality to determine whether they should apply. It\r\ndefaults to false, but when its highest-precedence value is\r\n`true`, such functionality disables itself.\r\n\r\nNot to be confused with\r\n[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which\r\ncontrols whether the editor's DOM is set to be editable (and\r\nthus focusable).\r\n*/\r\nEditorState.readOnly = readOnly;\r\n/**\r\nRegisters translation phrases. The\r\n[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through\r\nall objects registered with this facet to find translations for\r\nits argument.\r\n*/\r\nEditorState.phrases = /*@__PURE__*/Facet.define({\r\n    compare(a, b) {\r\n        let kA = Object.keys(a), kB = Object.keys(b);\r\n        return kA.length == kB.length && kA.every(k => a[k] == b[k]);\r\n    }\r\n});\r\n/**\r\nA facet used to register [language\r\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.\r\n*/\r\nEditorState.languageData = languageData;\r\n/**\r\nFacet used to register change filters, which are called for each\r\ntransaction (unless explicitly\r\n[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress\r\npart of the transaction's changes.\r\n\r\nSuch a function can return `true` to indicate that it doesn't\r\nwant to do anything, `false` to completely stop the changes in\r\nthe transaction, or a set of ranges in which changes should be\r\nsuppressed. Such ranges are represented as an array of numbers,\r\nwith each pair of two numbers indicating the start and end of a\r\nrange. So for example `[10, 20, 100, 110]` suppresses changes\r\nbetween 10 and 20, and between 100 and 110.\r\n*/\r\nEditorState.changeFilter = changeFilter;\r\n/**\r\nFacet used to register a hook that gets a chance to update or\r\nreplace transaction specs before they are applied. This will\r\nonly be applied for transactions that don't have\r\n[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You\r\ncan either return a single transaction spec (possibly the input\r\ntransaction), or an array of specs (which will be combined in\r\nthe same way as the arguments to\r\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).\r\n\r\nWhen possible, it is recommended to avoid accessing\r\n[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,\r\nsince it will force creation of a state that will then be\r\ndiscarded again, if the transaction is actually filtered.\r\n\r\n(This functionality should be used with care. Indiscriminately\r\nmodifying transaction is likely to break something or degrade\r\nthe user experience.)\r\n*/\r\nEditorState.transactionFilter = transactionFilter;\r\n/**\r\nThis is a more limited form of\r\n[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),\r\nwhich can only add\r\n[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and\r\n[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type\r\nof filter runs even if the transaction has disabled regular\r\n[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable\r\nfor effects that don't need to touch the changes or selection,\r\nbut do want to process every transaction.\r\n\r\nExtenders run _after_ filters, when both are present.\r\n*/\r\nEditorState.transactionExtender = transactionExtender;\r\nCompartment.reconfigure = /*@__PURE__*/StateEffect.define();\r\n\r\n/**\r\nUtility function for combining behaviors to fill in a config\r\nobject from an array of provided configs. `defaults` should hold\r\ndefault values for all optional fields in `Config`.\r\n\r\nThe function will, by default, error\r\nwhen a field gets two values that aren't `===`-equal, but you can\r\nprovide combine functions per field to do something else.\r\n*/\r\nfunction combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that\r\ncombine = {}) {\r\n    let result = {};\r\n    for (let config of configs)\r\n        for (let key of Object.keys(config)) {\r\n            let value = config[key], current = result[key];\r\n            if (current === undefined)\r\n                result[key] = value;\r\n            else if (current === value || value === undefined) ; // No conflict\r\n            else if (Object.hasOwnProperty.call(combine, key))\r\n                result[key] = combine[key](current, value);\r\n            else\r\n                throw new Error(\"Config merge conflict for field \" + key);\r\n        }\r\n    for (let key in defaults)\r\n        if (result[key] === undefined)\r\n            result[key] = defaults[key];\r\n    return result;\r\n}\r\n\r\n/**\r\nEach range is associated with a value, which must inherit from\r\nthis class.\r\n*/\r\nclass RangeValue {\r\n    /**\r\n    Compare this value with another value. Used when comparing\r\n    rangesets. The default implementation compares by identity.\r\n    Unless you are only creating a fixed number of unique instances\r\n    of your value type, it is a good idea to implement this\r\n    properly.\r\n    */\r\n    eq(other) { return this == other; }\r\n    /**\r\n    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.\r\n    */\r\n    range(from, to = from) { return Range.create(from, to, this); }\r\n}\r\nRangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;\r\nRangeValue.prototype.point = false;\r\nRangeValue.prototype.mapMode = MapMode.TrackDel;\r\n/**\r\nA range associates a value with a range of positions.\r\n*/\r\nclass Range {\r\n    constructor(\r\n    /**\r\n    The range's start position.\r\n    */\r\n    from, \r\n    /**\r\n    Its end position.\r\n    */\r\n    to, \r\n    /**\r\n    The value associated with this range.\r\n    */\r\n    value) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(from, to, value) {\r\n        return new Range(from, to, value);\r\n    }\r\n}\r\nfunction cmpRange(a, b) {\r\n    return a.from - b.from || a.value.startSide - b.value.startSide;\r\n}\r\nclass Chunk {\r\n    constructor(from, to, value, \r\n    // Chunks are marked with the largest point that occurs\r\n    // in them (or -1 for no points), so that scans that are\r\n    // only interested in points (such as the\r\n    // heightmap-related logic) can skip range-only chunks.\r\n    maxPoint) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n        this.maxPoint = maxPoint;\r\n    }\r\n    get length() { return this.to[this.to.length - 1]; }\r\n    // Find the index of the given position and side. Use the ranges'\r\n    // `from` pos when `end == false`, `to` when `end == true`.\r\n    findIndex(pos, side, end, startAt = 0) {\r\n        let arr = end ? this.to : this.from;\r\n        for (let lo = startAt, hi = arr.length;;) {\r\n            if (lo == hi)\r\n                return lo;\r\n            let mid = (lo + hi) >> 1;\r\n            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;\r\n            if (mid == lo)\r\n                return diff >= 0 ? lo : hi;\r\n            if (diff >= 0)\r\n                hi = mid;\r\n            else\r\n                lo = mid + 1;\r\n        }\r\n    }\r\n    between(offset, from, to, f) {\r\n        for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)\r\n            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)\r\n                return false;\r\n    }\r\n    map(offset, changes) {\r\n        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;\r\n            if (curFrom == curTo) {\r\n                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);\r\n                if (mapped == null)\r\n                    continue;\r\n                newFrom = newTo = mapped;\r\n                if (val.startSide != val.endSide) {\r\n                    newTo = changes.mapPos(curFrom, val.endSide);\r\n                    if (newTo < newFrom)\r\n                        continue;\r\n                }\r\n            }\r\n            else {\r\n                newFrom = changes.mapPos(curFrom, val.startSide);\r\n                newTo = changes.mapPos(curTo, val.endSide);\r\n                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)\r\n                    continue;\r\n            }\r\n            if ((newTo - newFrom || val.endSide - val.startSide) < 0)\r\n                continue;\r\n            if (newPos < 0)\r\n                newPos = newFrom;\r\n            if (val.point)\r\n                maxPoint = Math.max(maxPoint, newTo - newFrom);\r\n            value.push(val);\r\n            from.push(newFrom - newPos);\r\n            to.push(newTo - newPos);\r\n        }\r\n        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };\r\n    }\r\n}\r\n/**\r\nA range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a\r\nway that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and\r\n[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data\r\nstructure.\r\n*/\r\nclass RangeSet {\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    chunkPos, \r\n    /**\r\n    @internal\r\n    */\r\n    chunk, \r\n    /**\r\n    @internal\r\n    */\r\n    nextLayer, \r\n    /**\r\n    @internal\r\n    */\r\n    maxPoint) {\r\n        this.chunkPos = chunkPos;\r\n        this.chunk = chunk;\r\n        this.nextLayer = nextLayer;\r\n        this.maxPoint = maxPoint;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(chunkPos, chunk, nextLayer, maxPoint) {\r\n        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    get length() {\r\n        let last = this.chunk.length - 1;\r\n        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\r\n    }\r\n    /**\r\n    The number of ranges in the set.\r\n    */\r\n    get size() {\r\n        if (this.isEmpty)\r\n            return 0;\r\n        let size = this.nextLayer.size;\r\n        for (let chunk of this.chunk)\r\n            size += chunk.value.length;\r\n        return size;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    chunkEnd(index) {\r\n        return this.chunkPos[index] + this.chunk[index].length;\r\n    }\r\n    /**\r\n    Update the range set, optionally adding new ranges or filtering\r\n    out existing ones.\r\n    \r\n    (Note: The type parameter is just there as a kludge to work\r\n    around TypeScript variance issues that prevented `RangeSet<X>`\r\n    from being a subtype of `RangeSet<Y>` when `X` is a subtype of\r\n    `Y`.)\r\n    */\r\n    update(updateSpec) {\r\n        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;\r\n        let filter = updateSpec.filter;\r\n        if (add.length == 0 && !filter)\r\n            return this;\r\n        if (sort)\r\n            add = add.slice().sort(cmpRange);\r\n        if (this.isEmpty)\r\n            return add.length ? RangeSet.of(add) : this;\r\n        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\r\n        let builder = new RangeSetBuilder();\r\n        while (cur.value || i < add.length) {\r\n            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\r\n                let range = add[i++];\r\n                if (!builder.addInner(range.from, range.to, range.value))\r\n                    spill.push(range);\r\n            }\r\n            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&\r\n                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&\r\n                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&\r\n                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {\r\n                cur.nextChunk();\r\n            }\r\n            else {\r\n                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\r\n                    if (!builder.addInner(cur.from, cur.to, cur.value))\r\n                        spill.push(Range.create(cur.from, cur.to, cur.value));\r\n                }\r\n                cur.next();\r\n            }\r\n        }\r\n        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty\r\n            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));\r\n    }\r\n    /**\r\n    Map this range set through a set of changes, return the new set.\r\n    */\r\n    map(changes) {\r\n        if (changes.empty || this.isEmpty)\r\n            return this;\r\n        let chunks = [], chunkPos = [], maxPoint = -1;\r\n        for (let i = 0; i < this.chunk.length; i++) {\r\n            let start = this.chunkPos[i], chunk = this.chunk[i];\r\n            let touch = changes.touchesRange(start, start + chunk.length);\r\n            if (touch === false) {\r\n                maxPoint = Math.max(maxPoint, chunk.maxPoint);\r\n                chunks.push(chunk);\r\n                chunkPos.push(changes.mapPos(start));\r\n            }\r\n            else if (touch === true) {\r\n                let { mapped, pos } = chunk.map(start, changes);\r\n                if (mapped) {\r\n                    maxPoint = Math.max(maxPoint, mapped.maxPoint);\r\n                    chunks.push(mapped);\r\n                    chunkPos.push(pos);\r\n                }\r\n            }\r\n        }\r\n        let next = this.nextLayer.map(changes);\r\n        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);\r\n    }\r\n    /**\r\n    Iterate over the ranges that touch the region `from` to `to`,\r\n    calling `f` for each. There is no guarantee that the ranges will\r\n    be reported in any specific order. When the callback returns\r\n    `false`, iteration stops.\r\n    */\r\n    between(from, to, f) {\r\n        if (this.isEmpty)\r\n            return;\r\n        for (let i = 0; i < this.chunk.length; i++) {\r\n            let start = this.chunkPos[i], chunk = this.chunk[i];\r\n            if (to >= start && from <= start + chunk.length &&\r\n                chunk.between(start, from - start, to - start, f) === false)\r\n                return;\r\n        }\r\n        this.nextLayer.between(from, to, f);\r\n    }\r\n    /**\r\n    Iterate over the ranges in this set, in order, including all\r\n    ranges that end at or after `from`.\r\n    */\r\n    iter(from = 0) {\r\n        return HeapCursor.from([this]).goto(from);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    get isEmpty() { return this.nextLayer == this; }\r\n    /**\r\n    Iterate over the ranges in a collection of sets, in order,\r\n    starting from `from`.\r\n    */\r\n    static iter(sets, from = 0) {\r\n        return HeapCursor.from(sets).goto(from);\r\n    }\r\n    /**\r\n    Iterate over two groups of sets, calling methods on `comparator`\r\n    to notify it of possible differences.\r\n    */\r\n    static compare(oldSets, newSets, \r\n    /**\r\n    This indicates how the underlying data changed between these\r\n    ranges, and is needed to synchronize the iteration. `from` and\r\n    `to` are coordinates in the _new_ space, after these changes.\r\n    */\r\n    textDiff, comparator, \r\n    /**\r\n    Can be used to ignore all non-point ranges, and points below\r\n    the given size. When -1, all ranges are compared.\r\n    */\r\n    minPointSize = -1) {\r\n        let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\r\n        let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\r\n        let sharedChunks = findSharedChunks(a, b, textDiff);\r\n        let sideA = new SpanCursor(a, sharedChunks, minPointSize);\r\n        let sideB = new SpanCursor(b, sharedChunks, minPointSize);\r\n        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));\r\n        if (textDiff.empty && textDiff.length == 0)\r\n            compare(sideA, 0, sideB, 0, 0, comparator);\r\n    }\r\n    /**\r\n    Compare the contents of two groups of range sets, returning true\r\n    if they are equivalent in the given range.\r\n    */\r\n    static eq(oldSets, newSets, from = 0, to) {\r\n        if (to == null)\r\n            to = 1000000000 /* C.Far */ - 1;\r\n        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);\r\n        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);\r\n        if (a.length != b.length)\r\n            return false;\r\n        if (!a.length)\r\n            return true;\r\n        let sharedChunks = findSharedChunks(a, b);\r\n        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);\r\n        for (;;) {\r\n            if (sideA.to != sideB.to ||\r\n                !sameValues(sideA.active, sideB.active) ||\r\n                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))\r\n                return false;\r\n            if (sideA.to > to)\r\n                return true;\r\n            sideA.next();\r\n            sideB.next();\r\n        }\r\n    }\r\n    /**\r\n    Iterate over a group of range sets at the same time, notifying\r\n    the iterator about the ranges covering every given piece of\r\n    content. Returns the open count (see\r\n    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end\r\n    of the iteration.\r\n    */\r\n    static spans(sets, from, to, iterator, \r\n    /**\r\n    When given and greater than -1, only points of at least this\r\n    size are taken into account.\r\n    */\r\n    minPointSize = -1) {\r\n        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;\r\n        let openRanges = cursor.openStart;\r\n        for (;;) {\r\n            let curTo = Math.min(cursor.to, to);\r\n            if (cursor.point) {\r\n                let active = cursor.activeForPoint(cursor.to);\r\n                let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);\r\n                iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);\r\n                openRanges = Math.min(cursor.openEnd(curTo), active.length);\r\n            }\r\n            else if (curTo > pos) {\r\n                iterator.span(pos, curTo, cursor.active, openRanges);\r\n                openRanges = cursor.openEnd(curTo);\r\n            }\r\n            if (cursor.to > to)\r\n                return openRanges + (cursor.point && cursor.to > to ? 1 : 0);\r\n            pos = cursor.to;\r\n            cursor.next();\r\n        }\r\n    }\r\n    /**\r\n    Create a range set for the given range or array of ranges. By\r\n    default, this expects the ranges to be _sorted_ (by start\r\n    position and, if two start at the same position,\r\n    `value.startSide`). You can pass `true` as second argument to\r\n    cause the method to sort them.\r\n    */\r\n    static of(ranges, sort = false) {\r\n        let build = new RangeSetBuilder();\r\n        for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)\r\n            build.add(range.from, range.to, range.value);\r\n        return build.finish();\r\n    }\r\n}\r\n/**\r\nThe empty set of ranges.\r\n*/\r\nRangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);\r\nfunction lazySort(ranges) {\r\n    if (ranges.length > 1)\r\n        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {\r\n            let cur = ranges[i];\r\n            if (cmpRange(prev, cur) > 0)\r\n                return ranges.slice().sort(cmpRange);\r\n            prev = cur;\r\n        }\r\n    return ranges;\r\n}\r\nRangeSet.empty.nextLayer = RangeSet.empty;\r\n/**\r\nA range set builder is a data structure that helps build up a\r\n[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating\r\nan array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.\r\n*/\r\nclass RangeSetBuilder {\r\n    /**\r\n    Create an empty builder.\r\n    */\r\n    constructor() {\r\n        this.chunks = [];\r\n        this.chunkPos = [];\r\n        this.chunkStart = -1;\r\n        this.last = null;\r\n        this.lastFrom = -1000000000 /* C.Far */;\r\n        this.lastTo = -1000000000 /* C.Far */;\r\n        this.from = [];\r\n        this.to = [];\r\n        this.value = [];\r\n        this.maxPoint = -1;\r\n        this.setMaxPoint = -1;\r\n        this.nextLayer = null;\r\n    }\r\n    finishChunk(newArrays) {\r\n        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));\r\n        this.chunkPos.push(this.chunkStart);\r\n        this.chunkStart = -1;\r\n        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\r\n        this.maxPoint = -1;\r\n        if (newArrays) {\r\n            this.from = [];\r\n            this.to = [];\r\n            this.value = [];\r\n        }\r\n    }\r\n    /**\r\n    Add a range. Ranges should be added in sorted (by `from` and\r\n    `value.startSide`) order.\r\n    */\r\n    add(from, to, value) {\r\n        if (!this.addInner(from, to, value))\r\n            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    addInner(from, to, value) {\r\n        let diff = from - this.lastTo || value.startSide - this.last.endSide;\r\n        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)\r\n            throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\r\n        if (diff < 0)\r\n            return false;\r\n        if (this.from.length == 250 /* C.ChunkSize */)\r\n            this.finishChunk(true);\r\n        if (this.chunkStart < 0)\r\n            this.chunkStart = from;\r\n        this.from.push(from - this.chunkStart);\r\n        this.to.push(to - this.chunkStart);\r\n        this.last = value;\r\n        this.lastFrom = from;\r\n        this.lastTo = to;\r\n        this.value.push(value);\r\n        if (value.point)\r\n            this.maxPoint = Math.max(this.maxPoint, to - from);\r\n        return true;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    addChunk(from, chunk) {\r\n        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)\r\n            return false;\r\n        if (this.from.length)\r\n            this.finishChunk(true);\r\n        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\r\n        this.chunks.push(chunk);\r\n        this.chunkPos.push(from);\r\n        let last = chunk.value.length - 1;\r\n        this.last = chunk.value[last];\r\n        this.lastFrom = chunk.from[last] + from;\r\n        this.lastTo = chunk.to[last] + from;\r\n        return true;\r\n    }\r\n    /**\r\n    Finish the range set. Returns the new set. The builder can't be\r\n    used anymore after this has been called.\r\n    */\r\n    finish() { return this.finishInner(RangeSet.empty); }\r\n    /**\r\n    @internal\r\n    */\r\n    finishInner(next) {\r\n        if (this.from.length)\r\n            this.finishChunk(false);\r\n        if (this.chunks.length == 0)\r\n            return next;\r\n        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\r\n        this.from = null; // Make sure further `add` calls produce errors\r\n        return result;\r\n    }\r\n}\r\nfunction findSharedChunks(a, b, textDiff) {\r\n    let inA = new Map();\r\n    for (let set of a)\r\n        for (let i = 0; i < set.chunk.length; i++)\r\n            if (set.chunk[i].maxPoint <= 0)\r\n                inA.set(set.chunk[i], set.chunkPos[i]);\r\n    let shared = new Set();\r\n    for (let set of b)\r\n        for (let i = 0; i < set.chunk.length; i++) {\r\n            let known = inA.get(set.chunk[i]);\r\n            if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&\r\n                !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))\r\n                shared.add(set.chunk[i]);\r\n        }\r\n    return shared;\r\n}\r\nclass LayerCursor {\r\n    constructor(layer, skip, minPoint, rank = 0) {\r\n        this.layer = layer;\r\n        this.skip = skip;\r\n        this.minPoint = minPoint;\r\n        this.rank = rank;\r\n    }\r\n    get startSide() { return this.value ? this.value.startSide : 0; }\r\n    get endSide() { return this.value ? this.value.endSide : 0; }\r\n    goto(pos, side = -1000000000 /* C.Far */) {\r\n        this.chunkIndex = this.rangeIndex = 0;\r\n        this.gotoInner(pos, side, false);\r\n        return this;\r\n    }\r\n    gotoInner(pos, side, forward) {\r\n        while (this.chunkIndex < this.layer.chunk.length) {\r\n            let next = this.layer.chunk[this.chunkIndex];\r\n            if (!(this.skip && this.skip.has(next) ||\r\n                this.layer.chunkEnd(this.chunkIndex) < pos ||\r\n                next.maxPoint < this.minPoint))\r\n                break;\r\n            this.chunkIndex++;\r\n            forward = false;\r\n        }\r\n        if (this.chunkIndex < this.layer.chunk.length) {\r\n            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);\r\n            if (!forward || this.rangeIndex < rangeIndex)\r\n                this.setRangeIndex(rangeIndex);\r\n        }\r\n        this.next();\r\n    }\r\n    forward(pos, side) {\r\n        if ((this.to - pos || this.endSide - side) < 0)\r\n            this.gotoInner(pos, side, true);\r\n    }\r\n    next() {\r\n        for (;;) {\r\n            if (this.chunkIndex == this.layer.chunk.length) {\r\n                this.from = this.to = 1000000000 /* C.Far */;\r\n                this.value = null;\r\n                break;\r\n            }\r\n            else {\r\n                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];\r\n                let from = chunkPos + chunk.from[this.rangeIndex];\r\n                this.from = from;\r\n                this.to = chunkPos + chunk.to[this.rangeIndex];\r\n                this.value = chunk.value[this.rangeIndex];\r\n                this.setRangeIndex(this.rangeIndex + 1);\r\n                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    setRangeIndex(index) {\r\n        if (index == this.layer.chunk[this.chunkIndex].value.length) {\r\n            this.chunkIndex++;\r\n            if (this.skip) {\r\n                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))\r\n                    this.chunkIndex++;\r\n            }\r\n            this.rangeIndex = 0;\r\n        }\r\n        else {\r\n            this.rangeIndex = index;\r\n        }\r\n    }\r\n    nextChunk() {\r\n        this.chunkIndex++;\r\n        this.rangeIndex = 0;\r\n        this.next();\r\n    }\r\n    compare(other) {\r\n        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||\r\n            this.to - other.to || this.endSide - other.endSide;\r\n    }\r\n}\r\nclass HeapCursor {\r\n    constructor(heap) {\r\n        this.heap = heap;\r\n    }\r\n    static from(sets, skip = null, minPoint = -1) {\r\n        let heap = [];\r\n        for (let i = 0; i < sets.length; i++) {\r\n            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {\r\n                if (cur.maxPoint >= minPoint)\r\n                    heap.push(new LayerCursor(cur, skip, minPoint, i));\r\n            }\r\n        }\r\n        return heap.length == 1 ? heap[0] : new HeapCursor(heap);\r\n    }\r\n    get startSide() { return this.value ? this.value.startSide : 0; }\r\n    goto(pos, side = -1000000000 /* C.Far */) {\r\n        for (let cur of this.heap)\r\n            cur.goto(pos, side);\r\n        for (let i = this.heap.length >> 1; i >= 0; i--)\r\n            heapBubble(this.heap, i);\r\n        this.next();\r\n        return this;\r\n    }\r\n    forward(pos, side) {\r\n        for (let cur of this.heap)\r\n            cur.forward(pos, side);\r\n        for (let i = this.heap.length >> 1; i >= 0; i--)\r\n            heapBubble(this.heap, i);\r\n        if ((this.to - pos || this.value.endSide - side) < 0)\r\n            this.next();\r\n    }\r\n    next() {\r\n        if (this.heap.length == 0) {\r\n            this.from = this.to = 1000000000 /* C.Far */;\r\n            this.value = null;\r\n            this.rank = -1;\r\n        }\r\n        else {\r\n            let top = this.heap[0];\r\n            this.from = top.from;\r\n            this.to = top.to;\r\n            this.value = top.value;\r\n            this.rank = top.rank;\r\n            if (top.value)\r\n                top.next();\r\n            heapBubble(this.heap, 0);\r\n        }\r\n    }\r\n}\r\nfunction heapBubble(heap, index) {\r\n    for (let cur = heap[index];;) {\r\n        let childIndex = (index << 1) + 1;\r\n        if (childIndex >= heap.length)\r\n            break;\r\n        let child = heap[childIndex];\r\n        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {\r\n            child = heap[childIndex + 1];\r\n            childIndex++;\r\n        }\r\n        if (cur.compare(child) < 0)\r\n            break;\r\n        heap[childIndex] = cur;\r\n        heap[index] = child;\r\n        index = childIndex;\r\n    }\r\n}\r\nclass SpanCursor {\r\n    constructor(sets, skip, minPoint) {\r\n        this.minPoint = minPoint;\r\n        this.active = [];\r\n        this.activeTo = [];\r\n        this.activeRank = [];\r\n        this.minActive = -1;\r\n        // A currently active point range, if any\r\n        this.point = null;\r\n        this.pointFrom = 0;\r\n        this.pointRank = 0;\r\n        this.to = -1000000000 /* C.Far */;\r\n        this.endSide = 0;\r\n        // The amount of open active ranges at the start of the iterator.\r\n        // Not including points.\r\n        this.openStart = -1;\r\n        this.cursor = HeapCursor.from(sets, skip, minPoint);\r\n    }\r\n    goto(pos, side = -1000000000 /* C.Far */) {\r\n        this.cursor.goto(pos, side);\r\n        this.active.length = this.activeTo.length = this.activeRank.length = 0;\r\n        this.minActive = -1;\r\n        this.to = pos;\r\n        this.endSide = side;\r\n        this.openStart = -1;\r\n        this.next();\r\n        return this;\r\n    }\r\n    forward(pos, side) {\r\n        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)\r\n            this.removeActive(this.minActive);\r\n        this.cursor.forward(pos, side);\r\n    }\r\n    removeActive(index) {\r\n        remove(this.active, index);\r\n        remove(this.activeTo, index);\r\n        remove(this.activeRank, index);\r\n        this.minActive = findMinIndex(this.active, this.activeTo);\r\n    }\r\n    addActive(trackOpen) {\r\n        let i = 0, { value, to, rank } = this.cursor;\r\n        while (i < this.activeRank.length && this.activeRank[i] <= rank)\r\n            i++;\r\n        insert(this.active, i, value);\r\n        insert(this.activeTo, i, to);\r\n        insert(this.activeRank, i, rank);\r\n        if (trackOpen)\r\n            insert(trackOpen, i, this.cursor.from);\r\n        this.minActive = findMinIndex(this.active, this.activeTo);\r\n    }\r\n    // After calling this, if `this.point` != null, the next range is a\r\n    // point. Otherwise, it's a regular range, covered by `this.active`.\r\n    next() {\r\n        let from = this.to, wasPoint = this.point;\r\n        this.point = null;\r\n        let trackOpen = this.openStart < 0 ? [] : null;\r\n        for (;;) {\r\n            let a = this.minActive;\r\n            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {\r\n                if (this.activeTo[a] > from) {\r\n                    this.to = this.activeTo[a];\r\n                    this.endSide = this.active[a].endSide;\r\n                    break;\r\n                }\r\n                this.removeActive(a);\r\n                if (trackOpen)\r\n                    remove(trackOpen, a);\r\n            }\r\n            else if (!this.cursor.value) {\r\n                this.to = this.endSide = 1000000000 /* C.Far */;\r\n                break;\r\n            }\r\n            else if (this.cursor.from > from) {\r\n                this.to = this.cursor.from;\r\n                this.endSide = this.cursor.startSide;\r\n                break;\r\n            }\r\n            else {\r\n                let nextVal = this.cursor.value;\r\n                if (!nextVal.point) { // Opening a range\r\n                    this.addActive(trackOpen);\r\n                    this.cursor.next();\r\n                }\r\n                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {\r\n                    // Ignore any non-empty points that end precisely at the end of the prev point\r\n                    this.cursor.next();\r\n                }\r\n                else { // New point\r\n                    this.point = nextVal;\r\n                    this.pointFrom = this.cursor.from;\r\n                    this.pointRank = this.cursor.rank;\r\n                    this.to = this.cursor.to;\r\n                    this.endSide = nextVal.endSide;\r\n                    this.cursor.next();\r\n                    this.forward(this.to, this.endSide);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (trackOpen) {\r\n            this.openStart = 0;\r\n            for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)\r\n                this.openStart++;\r\n        }\r\n    }\r\n    activeForPoint(to) {\r\n        if (!this.active.length)\r\n            return this.active;\r\n        let active = [];\r\n        for (let i = this.active.length - 1; i >= 0; i--) {\r\n            if (this.activeRank[i] < this.pointRank)\r\n                break;\r\n            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)\r\n                active.push(this.active[i]);\r\n        }\r\n        return active.reverse();\r\n    }\r\n    openEnd(to) {\r\n        let open = 0;\r\n        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)\r\n            open++;\r\n        return open;\r\n    }\r\n}\r\nfunction compare(a, startA, b, startB, length, comparator) {\r\n    a.goto(startA);\r\n    b.goto(startB);\r\n    let endB = startB + length;\r\n    let pos = startB, dPos = startB - startA;\r\n    for (;;) {\r\n        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;\r\n        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);\r\n        if (a.point || b.point) {\r\n            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&\r\n                sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))\r\n                comparator.comparePoint(pos, clipEnd, a.point, b.point);\r\n        }\r\n        else {\r\n            if (clipEnd > pos && !sameValues(a.active, b.active))\r\n                comparator.compareRange(pos, clipEnd, a.active, b.active);\r\n        }\r\n        if (end > endB)\r\n            break;\r\n        pos = end;\r\n        if (diff <= 0)\r\n            a.next();\r\n        if (diff >= 0)\r\n            b.next();\r\n    }\r\n}\r\nfunction sameValues(a, b) {\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++)\r\n        if (a[i] != b[i] && !a[i].eq(b[i]))\r\n            return false;\r\n    return true;\r\n}\r\nfunction remove(array, index) {\r\n    for (let i = index, e = array.length - 1; i < e; i++)\r\n        array[i] = array[i + 1];\r\n    array.pop();\r\n}\r\nfunction insert(array, index, value) {\r\n    for (let i = array.length - 1; i >= index; i--)\r\n        array[i + 1] = array[i];\r\n    array[index] = value;\r\n}\r\nfunction findMinIndex(value, array) {\r\n    let found = -1, foundPos = 1000000000 /* C.Far */;\r\n    for (let i = 0; i < array.length; i++)\r\n        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {\r\n            found = i;\r\n            foundPos = array[i];\r\n        }\r\n    return found;\r\n}\r\n\r\n/**\r\nCount the column position at the given offset into the string,\r\ntaking extending characters and tab size into account.\r\n*/\r\nfunction countColumn(string, tabSize, to = string.length) {\r\n    let n = 0;\r\n    for (let i = 0; i < to;) {\r\n        if (string.charCodeAt(i) == 9) {\r\n            n += tabSize - (n % tabSize);\r\n            i++;\r\n        }\r\n        else {\r\n            n++;\r\n            i = findClusterBreak(string, i);\r\n        }\r\n    }\r\n    return n;\r\n}\r\n/**\r\nFind the offset that corresponds to the given column position in a\r\nstring, taking extending characters and tab size into account. By\r\ndefault, the string length is returned when it is too short to\r\nreach the column. Pass `strict` true to make it return -1 in that\r\nsituation.\r\n*/\r\nfunction findColumn(string, col, tabSize, strict) {\r\n    for (let i = 0, n = 0;;) {\r\n        if (n >= col)\r\n            return i;\r\n        if (i == string.length)\r\n            break;\r\n        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;\r\n        i = findClusterBreak(string, i);\r\n    }\r\n    return strict === true ? -1 : string.length;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/state/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/theme-one-dark/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@codemirror/theme-one-dark/dist/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"color\": function() { return /* binding */ color; },\n/* harmony export */   \"oneDark\": function() { return /* binding */ oneDark; },\n/* harmony export */   \"oneDarkHighlightStyle\": function() { return /* binding */ oneDarkHighlightStyle; },\n/* harmony export */   \"oneDarkTheme\": function() { return /* binding */ oneDarkTheme; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ \"./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/language */ \"./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/highlight */ \"./node_modules/@lezer/highlight/dist/index.js\");\n\r\n\r\n\r\n\r\n// Using https://github.com/one-dark/vscode-one-dark-theme/ as reference for the colors\r\nconst chalky = \"#e5c07b\", coral = \"#e06c75\", cyan = \"#56b6c2\", invalid = \"#ffffff\", ivory = \"#abb2bf\", stone = \"#7d8799\", // Brightened compared to original to increase contrast\r\nmalibu = \"#61afef\", sage = \"#98c379\", whiskey = \"#d19a66\", violet = \"#c678dd\", darkBackground = \"#21252b\", highlightBackground = \"#2c313a\", background = \"#282c34\", tooltipBackground = \"#353a42\", selection = \"#3E4451\", cursor = \"#528bff\";\r\n/**\r\nThe colors used in the theme, as CSS color strings.\r\n*/\r\nconst color = {\r\n    chalky,\r\n    coral,\r\n    cyan,\r\n    invalid,\r\n    ivory,\r\n    stone,\r\n    malibu,\r\n    sage,\r\n    whiskey,\r\n    violet,\r\n    darkBackground,\r\n    highlightBackground,\r\n    background,\r\n    tooltipBackground,\r\n    selection,\r\n    cursor\r\n};\r\n/**\r\nThe editor theme styles for One Dark.\r\n*/\r\nconst oneDarkTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.theme({\r\n    \"&\": {\r\n        color: ivory,\r\n        backgroundColor: background\r\n    },\r\n    \".cm-content\": {\r\n        caretColor: cursor\r\n    },\r\n    \".cm-cursor, .cm-dropCursor\": { borderLeftColor: cursor },\r\n    \"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection\": { backgroundColor: selection },\r\n    \".cm-panels\": { backgroundColor: darkBackground, color: ivory },\r\n    \".cm-panels.cm-panels-top\": { borderBottom: \"2px solid black\" },\r\n    \".cm-panels.cm-panels-bottom\": { borderTop: \"2px solid black\" },\r\n    \".cm-searchMatch\": {\r\n        backgroundColor: \"#72a1ff59\",\r\n        outline: \"1px solid #457dff\"\r\n    },\r\n    \".cm-searchMatch.cm-searchMatch-selected\": {\r\n        backgroundColor: \"#6199ff2f\"\r\n    },\r\n    \".cm-activeLine\": { backgroundColor: \"#6699ff0b\" },\r\n    \".cm-selectionMatch\": { backgroundColor: \"#aafe661a\" },\r\n    \"&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket\": {\r\n        backgroundColor: \"#bad0f847\",\r\n        outline: \"1px solid #515a6b\"\r\n    },\r\n    \".cm-gutters\": {\r\n        backgroundColor: background,\r\n        color: stone,\r\n        border: \"none\"\r\n    },\r\n    \".cm-activeLineGutter\": {\r\n        backgroundColor: highlightBackground\r\n    },\r\n    \".cm-foldPlaceholder\": {\r\n        backgroundColor: \"transparent\",\r\n        border: \"none\",\r\n        color: \"#ddd\"\r\n    },\r\n    \".cm-tooltip\": {\r\n        border: \"none\",\r\n        backgroundColor: tooltipBackground\r\n    },\r\n    \".cm-tooltip .cm-tooltip-arrow:before\": {\r\n        borderTopColor: \"transparent\",\r\n        borderBottomColor: \"transparent\"\r\n    },\r\n    \".cm-tooltip .cm-tooltip-arrow:after\": {\r\n        borderTopColor: tooltipBackground,\r\n        borderBottomColor: tooltipBackground\r\n    },\r\n    \".cm-tooltip-autocomplete\": {\r\n        \"& > ul > li[aria-selected]\": {\r\n            backgroundColor: highlightBackground,\r\n            color: ivory\r\n        }\r\n    }\r\n}, { dark: true });\r\n/**\r\nThe highlighting style for code in the One Dark theme.\r\n*/\r\nconst oneDarkHighlightStyle = /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_2__.HighlightStyle.define([\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.keyword,\r\n        color: violet },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.name, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.deleted, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.character, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.propertyName, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.macroName],\r\n        color: coral },\r\n    { tag: [/*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags[\"function\"](_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.variableName), _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.labelName],\r\n        color: malibu },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.color, /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.constant(_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.name), /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.standard(_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.name)],\r\n        color: whiskey },\r\n    { tag: [/*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.definition(_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.name), _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.separator],\r\n        color: ivory },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.typeName, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.className, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.number, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.changed, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.annotation, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.modifier, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.self, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.namespace],\r\n        color: chalky },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.operator, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.operatorKeyword, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.url, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.escape, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.regexp, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.link, /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.special(_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.string)],\r\n        color: cyan },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.meta, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.comment],\r\n        color: stone },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.strong,\r\n        fontWeight: \"bold\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.emphasis,\r\n        fontStyle: \"italic\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.strikethrough,\r\n        textDecoration: \"line-through\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.link,\r\n        color: stone,\r\n        textDecoration: \"underline\" },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.heading,\r\n        fontWeight: \"bold\",\r\n        color: coral },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.atom, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.bool, /*@__PURE__*/_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.special(_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.variableName)],\r\n        color: whiskey },\r\n    { tag: [_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.processingInstruction, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.string, _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.inserted],\r\n        color: sage },\r\n    { tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.invalid,\r\n        color: invalid },\r\n]);\r\n/**\r\nExtension to enable the One Dark theme (both the editor theme and\r\nthe highlight style).\r\n*/\r\nconst oneDark = [oneDarkTheme, /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_2__.syntaxHighlighting)(oneDarkHighlightStyle)];\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/theme-one-dark/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@codemirror/view/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@codemirror/view/dist/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BidiSpan\": function() { return /* binding */ BidiSpan; },\n/* harmony export */   \"BlockInfo\": function() { return /* binding */ BlockInfo; },\n/* harmony export */   \"BlockType\": function() { return /* binding */ BlockType; },\n/* harmony export */   \"Decoration\": function() { return /* binding */ Decoration; },\n/* harmony export */   \"Direction\": function() { return /* binding */ Direction; },\n/* harmony export */   \"EditorView\": function() { return /* binding */ EditorView; },\n/* harmony export */   \"GutterMarker\": function() { return /* binding */ GutterMarker; },\n/* harmony export */   \"MatchDecorator\": function() { return /* binding */ MatchDecorator; },\n/* harmony export */   \"RectangleMarker\": function() { return /* binding */ RectangleMarker; },\n/* harmony export */   \"ViewPlugin\": function() { return /* binding */ ViewPlugin; },\n/* harmony export */   \"ViewUpdate\": function() { return /* binding */ ViewUpdate; },\n/* harmony export */   \"WidgetType\": function() { return /* binding */ WidgetType; },\n/* harmony export */   \"__test\": function() { return /* binding */ __test; },\n/* harmony export */   \"closeHoverTooltips\": function() { return /* binding */ closeHoverTooltips; },\n/* harmony export */   \"crosshairCursor\": function() { return /* binding */ crosshairCursor; },\n/* harmony export */   \"drawSelection\": function() { return /* binding */ drawSelection; },\n/* harmony export */   \"dropCursor\": function() { return /* binding */ dropCursor; },\n/* harmony export */   \"getPanel\": function() { return /* binding */ getPanel; },\n/* harmony export */   \"getTooltip\": function() { return /* binding */ getTooltip; },\n/* harmony export */   \"gutter\": function() { return /* binding */ gutter; },\n/* harmony export */   \"gutterLineClass\": function() { return /* binding */ gutterLineClass; },\n/* harmony export */   \"gutters\": function() { return /* binding */ gutters; },\n/* harmony export */   \"hasHoverTooltips\": function() { return /* binding */ hasHoverTooltips; },\n/* harmony export */   \"highlightActiveLine\": function() { return /* binding */ highlightActiveLine; },\n/* harmony export */   \"highlightActiveLineGutter\": function() { return /* binding */ highlightActiveLineGutter; },\n/* harmony export */   \"highlightSpecialChars\": function() { return /* binding */ highlightSpecialChars; },\n/* harmony export */   \"highlightTrailingWhitespace\": function() { return /* binding */ highlightTrailingWhitespace; },\n/* harmony export */   \"highlightWhitespace\": function() { return /* binding */ highlightWhitespace; },\n/* harmony export */   \"hoverTooltip\": function() { return /* binding */ hoverTooltip; },\n/* harmony export */   \"keymap\": function() { return /* binding */ keymap; },\n/* harmony export */   \"layer\": function() { return /* binding */ layer; },\n/* harmony export */   \"lineNumberMarkers\": function() { return /* binding */ lineNumberMarkers; },\n/* harmony export */   \"lineNumbers\": function() { return /* binding */ lineNumbers; },\n/* harmony export */   \"logException\": function() { return /* binding */ logException; },\n/* harmony export */   \"panels\": function() { return /* binding */ panels; },\n/* harmony export */   \"placeholder\": function() { return /* binding */ placeholder; },\n/* harmony export */   \"rectangularSelection\": function() { return /* binding */ rectangularSelection; },\n/* harmony export */   \"repositionTooltips\": function() { return /* binding */ repositionTooltips; },\n/* harmony export */   \"runScopeHandlers\": function() { return /* binding */ runScopeHandlers; },\n/* harmony export */   \"scrollPastEnd\": function() { return /* binding */ scrollPastEnd; },\n/* harmony export */   \"showPanel\": function() { return /* binding */ showPanel; },\n/* harmony export */   \"showTooltip\": function() { return /* binding */ showTooltip; },\n/* harmony export */   \"tooltips\": function() { return /* binding */ tooltips; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ \"./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var style_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-mod */ \"./node_modules/style-mod/src/style-mod.js\");\n/* harmony import */ var w3c_keyname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! w3c-keyname */ \"./node_modules/w3c-keyname/index.es.js\");\n\r\n\r\n\r\n\r\nfunction getSelection(root) {\r\n    let target;\r\n    // Browsers differ on whether shadow roots have a getSelection\r\n    // method. If it exists, use that, otherwise, call it on the\r\n    // document.\r\n    if (root.nodeType == 11) { // Shadow root\r\n        target = root.getSelection ? root : root.ownerDocument;\r\n    }\r\n    else {\r\n        target = root;\r\n    }\r\n    return target.getSelection();\r\n}\r\nfunction contains(dom, node) {\r\n    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;\r\n}\r\nfunction deepActiveElement(doc) {\r\n    let elt = doc.activeElement;\r\n    while (elt && elt.shadowRoot)\r\n        elt = elt.shadowRoot.activeElement;\r\n    return elt;\r\n}\r\nfunction hasSelection(dom, selection) {\r\n    if (!selection.anchorNode)\r\n        return false;\r\n    try {\r\n        // Firefox will raise 'permission denied' errors when accessing\r\n        // properties of `sel.anchorNode` when it's in a generated CSS\r\n        // element.\r\n        return contains(dom, selection.anchorNode);\r\n    }\r\n    catch (_) {\r\n        return false;\r\n    }\r\n}\r\nfunction clientRectsFor(dom) {\r\n    if (dom.nodeType == 3)\r\n        return textRange(dom, 0, dom.nodeValue.length).getClientRects();\r\n    else if (dom.nodeType == 1)\r\n        return dom.getClientRects();\r\n    else\r\n        return [];\r\n}\r\n// Scans forward and backward through DOM positions equivalent to the\r\n// given one to see if the two are in the same place (i.e. after a\r\n// text node vs at the end of that text node)\r\nfunction isEquivalentPosition(node, off, targetNode, targetOff) {\r\n    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||\r\n        scanFor(node, off, targetNode, targetOff, 1)) : false;\r\n}\r\nfunction domIndex(node) {\r\n    for (var index = 0;; index++) {\r\n        node = node.previousSibling;\r\n        if (!node)\r\n            return index;\r\n    }\r\n}\r\nfunction scanFor(node, off, targetNode, targetOff, dir) {\r\n    for (;;) {\r\n        if (node == targetNode && off == targetOff)\r\n            return true;\r\n        if (off == (dir < 0 ? 0 : maxOffset(node))) {\r\n            if (node.nodeName == \"DIV\")\r\n                return false;\r\n            let parent = node.parentNode;\r\n            if (!parent || parent.nodeType != 1)\r\n                return false;\r\n            off = domIndex(node) + (dir < 0 ? 0 : 1);\r\n            node = parent;\r\n        }\r\n        else if (node.nodeType == 1) {\r\n            node = node.childNodes[off + (dir < 0 ? -1 : 0)];\r\n            if (node.nodeType == 1 && node.contentEditable == \"false\")\r\n                return false;\r\n            off = dir < 0 ? maxOffset(node) : 0;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nfunction maxOffset(node) {\r\n    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\r\n}\r\nconst Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };\r\nfunction flattenRect(rect, left) {\r\n    let x = left ? rect.left : rect.right;\r\n    return { left: x, right: x, top: rect.top, bottom: rect.bottom };\r\n}\r\nfunction windowRect(win) {\r\n    return { left: 0, right: win.innerWidth,\r\n        top: 0, bottom: win.innerHeight };\r\n}\r\nfunction scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {\r\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\r\n    for (let cur = dom; cur;) {\r\n        if (cur.nodeType == 1) { // Element\r\n            let bounding, top = cur == doc.body;\r\n            if (top) {\r\n                bounding = windowRect(win);\r\n            }\r\n            else {\r\n                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {\r\n                    cur = cur.assignedSlot || cur.parentNode;\r\n                    continue;\r\n                }\r\n                let rect = cur.getBoundingClientRect();\r\n                // Make sure scrollbar width isn't included in the rectangle\r\n                bounding = { left: rect.left, right: rect.left + cur.clientWidth,\r\n                    top: rect.top, bottom: rect.top + cur.clientHeight };\r\n            }\r\n            let moveX = 0, moveY = 0;\r\n            if (y == \"nearest\") {\r\n                if (rect.top < bounding.top) {\r\n                    moveY = -(bounding.top - rect.top + yMargin);\r\n                    if (side > 0 && rect.bottom > bounding.bottom + moveY)\r\n                        moveY = rect.bottom - bounding.bottom + moveY + yMargin;\r\n                }\r\n                else if (rect.bottom > bounding.bottom) {\r\n                    moveY = rect.bottom - bounding.bottom + yMargin;\r\n                    if (side < 0 && (rect.top - moveY) < bounding.top)\r\n                        moveY = -(bounding.top + moveY - rect.top + yMargin);\r\n                }\r\n            }\r\n            else {\r\n                let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;\r\n                let targetTop = y == \"center\" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :\r\n                    y == \"start\" || y == \"center\" && side < 0 ? rect.top - yMargin :\r\n                        rect.bottom - boundingHeight + yMargin;\r\n                moveY = targetTop - bounding.top;\r\n            }\r\n            if (x == \"nearest\") {\r\n                if (rect.left < bounding.left) {\r\n                    moveX = -(bounding.left - rect.left + xMargin);\r\n                    if (side > 0 && rect.right > bounding.right + moveX)\r\n                        moveX = rect.right - bounding.right + moveX + xMargin;\r\n                }\r\n                else if (rect.right > bounding.right) {\r\n                    moveX = rect.right - bounding.right + xMargin;\r\n                    if (side < 0 && rect.left < bounding.left + moveX)\r\n                        moveX = -(bounding.left + moveX - rect.left + xMargin);\r\n                }\r\n            }\r\n            else {\r\n                let targetLeft = x == \"center\" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :\r\n                    (x == \"start\") == ltr ? rect.left - xMargin :\r\n                        rect.right - (bounding.right - bounding.left) + xMargin;\r\n                moveX = targetLeft - bounding.left;\r\n            }\r\n            if (moveX || moveY) {\r\n                if (top) {\r\n                    win.scrollBy(moveX, moveY);\r\n                }\r\n                else {\r\n                    let movedX = 0, movedY = 0;\r\n                    if (moveY) {\r\n                        let start = cur.scrollTop;\r\n                        cur.scrollTop += moveY;\r\n                        movedY = cur.scrollTop - start;\r\n                    }\r\n                    if (moveX) {\r\n                        let start = cur.scrollLeft;\r\n                        cur.scrollLeft += moveX;\r\n                        movedX = cur.scrollLeft - start;\r\n                    }\r\n                    rect = { left: rect.left - movedX, top: rect.top - movedY,\r\n                        right: rect.right - movedX, bottom: rect.bottom - movedY };\r\n                    if (movedX && Math.abs(movedX - moveX) < 1)\r\n                        x = \"nearest\";\r\n                    if (movedY && Math.abs(movedY - moveY) < 1)\r\n                        y = \"nearest\";\r\n                }\r\n            }\r\n            if (top)\r\n                break;\r\n            cur = cur.assignedSlot || cur.parentNode;\r\n        }\r\n        else if (cur.nodeType == 11) { // A shadow root\r\n            cur = cur.host;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction scrollableParent(dom) {\r\n    let doc = dom.ownerDocument;\r\n    for (let cur = dom.parentNode; cur;) {\r\n        if (cur == doc.body) {\r\n            break;\r\n        }\r\n        else if (cur.nodeType == 1) {\r\n            if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)\r\n                return cur;\r\n            cur = cur.assignedSlot || cur.parentNode;\r\n        }\r\n        else if (cur.nodeType == 11) {\r\n            cur = cur.host;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nclass DOMSelectionState {\r\n    constructor() {\r\n        this.anchorNode = null;\r\n        this.anchorOffset = 0;\r\n        this.focusNode = null;\r\n        this.focusOffset = 0;\r\n    }\r\n    eq(domSel) {\r\n        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&\r\n            this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;\r\n    }\r\n    setRange(range) {\r\n        this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);\r\n    }\r\n    set(anchorNode, anchorOffset, focusNode, focusOffset) {\r\n        this.anchorNode = anchorNode;\r\n        this.anchorOffset = anchorOffset;\r\n        this.focusNode = focusNode;\r\n        this.focusOffset = focusOffset;\r\n    }\r\n}\r\nlet preventScrollSupported = null;\r\n// Feature-detects support for .focus({preventScroll: true}), and uses\r\n// a fallback kludge when not supported.\r\nfunction focusPreventScroll(dom) {\r\n    if (dom.setActive)\r\n        return dom.setActive(); // in IE\r\n    if (preventScrollSupported)\r\n        return dom.focus(preventScrollSupported);\r\n    let stack = [];\r\n    for (let cur = dom; cur; cur = cur.parentNode) {\r\n        stack.push(cur, cur.scrollTop, cur.scrollLeft);\r\n        if (cur == cur.ownerDocument)\r\n            break;\r\n    }\r\n    dom.focus(preventScrollSupported == null ? {\r\n        get preventScroll() {\r\n            preventScrollSupported = { preventScroll: true };\r\n            return true;\r\n        }\r\n    } : undefined);\r\n    if (!preventScrollSupported) {\r\n        preventScrollSupported = false;\r\n        for (let i = 0; i < stack.length;) {\r\n            let elt = stack[i++], top = stack[i++], left = stack[i++];\r\n            if (elt.scrollTop != top)\r\n                elt.scrollTop = top;\r\n            if (elt.scrollLeft != left)\r\n                elt.scrollLeft = left;\r\n        }\r\n    }\r\n}\r\nlet scratchRange;\r\nfunction textRange(node, from, to = from) {\r\n    let range = scratchRange || (scratchRange = document.createRange());\r\n    range.setEnd(node, to);\r\n    range.setStart(node, from);\r\n    return range;\r\n}\r\nfunction dispatchKey(elt, name, code) {\r\n    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };\r\n    let down = new KeyboardEvent(\"keydown\", options);\r\n    down.synthetic = true;\r\n    elt.dispatchEvent(down);\r\n    let up = new KeyboardEvent(\"keyup\", options);\r\n    up.synthetic = true;\r\n    elt.dispatchEvent(up);\r\n    return down.defaultPrevented || up.defaultPrevented;\r\n}\r\nfunction getRoot(node) {\r\n    while (node) {\r\n        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))\r\n            return node;\r\n        node = node.assignedSlot || node.parentNode;\r\n    }\r\n    return null;\r\n}\r\nfunction clearAttributes(node) {\r\n    while (node.attributes.length)\r\n        node.removeAttributeNode(node.attributes[0]);\r\n}\r\nfunction atElementStart(doc, selection) {\r\n    let node = selection.focusNode, offset = selection.focusOffset;\r\n    if (!node || selection.anchorNode != node || selection.anchorOffset != offset)\r\n        return false;\r\n    for (;;) {\r\n        if (offset) {\r\n            if (node.nodeType != 1)\r\n                return false;\r\n            let prev = node.childNodes[offset - 1];\r\n            if (prev.contentEditable == \"false\")\r\n                offset--;\r\n            else {\r\n                node = prev;\r\n                offset = maxOffset(node);\r\n            }\r\n        }\r\n        else if (node == doc) {\r\n            return true;\r\n        }\r\n        else {\r\n            offset = domIndex(node);\r\n            node = node.parentNode;\r\n        }\r\n    }\r\n}\r\n\r\nclass DOMPos {\r\n    constructor(node, offset, precise = true) {\r\n        this.node = node;\r\n        this.offset = offset;\r\n        this.precise = precise;\r\n    }\r\n    static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }\r\n    static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }\r\n}\r\nconst noChildren = [];\r\nclass ContentView {\r\n    constructor() {\r\n        this.parent = null;\r\n        this.dom = null;\r\n        this.dirty = 2 /* Dirty.Node */;\r\n    }\r\n    get editorView() {\r\n        if (!this.parent)\r\n            throw new Error(\"Accessing view in orphan content view\");\r\n        return this.parent.editorView;\r\n    }\r\n    get overrideDOMText() { return null; }\r\n    get posAtStart() {\r\n        return this.parent ? this.parent.posBefore(this) : 0;\r\n    }\r\n    get posAtEnd() {\r\n        return this.posAtStart + this.length;\r\n    }\r\n    posBefore(view) {\r\n        let pos = this.posAtStart;\r\n        for (let child of this.children) {\r\n            if (child == view)\r\n                return pos;\r\n            pos += child.length + child.breakAfter;\r\n        }\r\n        throw new RangeError(\"Invalid child in posBefore\");\r\n    }\r\n    posAfter(view) {\r\n        return this.posBefore(view) + view.length;\r\n    }\r\n    // Will return a rectangle directly before (when side < 0), after\r\n    // (side > 0) or directly on (when the browser supports it) the\r\n    // given position.\r\n    coordsAt(_pos, _side) { return null; }\r\n    sync(track) {\r\n        if (this.dirty & 2 /* Dirty.Node */) {\r\n            let parent = this.dom;\r\n            let prev = null, next;\r\n            for (let child of this.children) {\r\n                if (child.dirty) {\r\n                    if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {\r\n                        let contentView = ContentView.get(next);\r\n                        if (!contentView || !contentView.parent && contentView.canReuseDOM(child))\r\n                            child.reuseDOM(next);\r\n                    }\r\n                    child.sync(track);\r\n                    child.dirty = 0 /* Dirty.Not */;\r\n                }\r\n                next = prev ? prev.nextSibling : parent.firstChild;\r\n                if (track && !track.written && track.node == parent && next != child.dom)\r\n                    track.written = true;\r\n                if (child.dom.parentNode == parent) {\r\n                    while (next && next != child.dom)\r\n                        next = rm$1(next);\r\n                }\r\n                else {\r\n                    parent.insertBefore(child.dom, next);\r\n                }\r\n                prev = child.dom;\r\n            }\r\n            next = prev ? prev.nextSibling : parent.firstChild;\r\n            if (next && track && track.node == parent)\r\n                track.written = true;\r\n            while (next)\r\n                next = rm$1(next);\r\n        }\r\n        else if (this.dirty & 1 /* Dirty.Child */) {\r\n            for (let child of this.children)\r\n                if (child.dirty) {\r\n                    child.sync(track);\r\n                    child.dirty = 0 /* Dirty.Not */;\r\n                }\r\n        }\r\n    }\r\n    reuseDOM(_dom) { }\r\n    localPosFromDOM(node, offset) {\r\n        let after;\r\n        if (node == this.dom) {\r\n            after = this.dom.childNodes[offset];\r\n        }\r\n        else {\r\n            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;\r\n            for (;;) {\r\n                let parent = node.parentNode;\r\n                if (parent == this.dom)\r\n                    break;\r\n                if (bias == 0 && parent.firstChild != parent.lastChild) {\r\n                    if (node == parent.firstChild)\r\n                        bias = -1;\r\n                    else\r\n                        bias = 1;\r\n                }\r\n                node = parent;\r\n            }\r\n            if (bias < 0)\r\n                after = node;\r\n            else\r\n                after = node.nextSibling;\r\n        }\r\n        if (after == this.dom.firstChild)\r\n            return 0;\r\n        while (after && !ContentView.get(after))\r\n            after = after.nextSibling;\r\n        if (!after)\r\n            return this.length;\r\n        for (let i = 0, pos = 0;; i++) {\r\n            let child = this.children[i];\r\n            if (child.dom == after)\r\n                return pos;\r\n            pos += child.length + child.breakAfter;\r\n        }\r\n    }\r\n    domBoundsAround(from, to, offset = 0) {\r\n        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;\r\n        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (pos < from && end > to)\r\n                return child.domBoundsAround(from, to, pos);\r\n            if (end >= from && fromI == -1) {\r\n                fromI = i;\r\n                fromStart = pos;\r\n            }\r\n            if (pos > to && child.dom.parentNode == this.dom) {\r\n                toI = i;\r\n                toEnd = prevEnd;\r\n                break;\r\n            }\r\n            prevEnd = end;\r\n            pos = end + child.breakAfter;\r\n        }\r\n        return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,\r\n            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,\r\n            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };\r\n    }\r\n    markDirty(andParent = false) {\r\n        this.dirty |= 2 /* Dirty.Node */;\r\n        this.markParentsDirty(andParent);\r\n    }\r\n    markParentsDirty(childList) {\r\n        for (let parent = this.parent; parent; parent = parent.parent) {\r\n            if (childList)\r\n                parent.dirty |= 2 /* Dirty.Node */;\r\n            if (parent.dirty & 1 /* Dirty.Child */)\r\n                return;\r\n            parent.dirty |= 1 /* Dirty.Child */;\r\n            childList = false;\r\n        }\r\n    }\r\n    setParent(parent) {\r\n        if (this.parent != parent) {\r\n            this.parent = parent;\r\n            if (this.dirty)\r\n                this.markParentsDirty(true);\r\n        }\r\n    }\r\n    setDOM(dom) {\r\n        if (this.dom)\r\n            this.dom.cmView = null;\r\n        this.dom = dom;\r\n        dom.cmView = this;\r\n    }\r\n    get rootView() {\r\n        for (let v = this;;) {\r\n            let parent = v.parent;\r\n            if (!parent)\r\n                return v;\r\n            v = parent;\r\n        }\r\n    }\r\n    replaceChildren(from, to, children = noChildren) {\r\n        this.markDirty();\r\n        for (let i = from; i < to; i++) {\r\n            let child = this.children[i];\r\n            if (child.parent == this)\r\n                child.destroy();\r\n        }\r\n        this.children.splice(from, to - from, ...children);\r\n        for (let i = 0; i < children.length; i++)\r\n            children[i].setParent(this);\r\n    }\r\n    ignoreMutation(_rec) { return false; }\r\n    ignoreEvent(_event) { return false; }\r\n    childCursor(pos = this.length) {\r\n        return new ChildCursor(this.children, pos, this.children.length);\r\n    }\r\n    childPos(pos, bias = 1) {\r\n        return this.childCursor().findPos(pos, bias);\r\n    }\r\n    toString() {\r\n        let name = this.constructor.name.replace(\"View\", \"\");\r\n        return name + (this.children.length ? \"(\" + this.children.join() + \")\" :\r\n            this.length ? \"[\" + (name == \"Text\" ? this.text : this.length) + \"]\" : \"\") +\r\n            (this.breakAfter ? \"#\" : \"\");\r\n    }\r\n    static get(node) { return node.cmView; }\r\n    get isEditable() { return true; }\r\n    merge(from, to, source, hasStart, openStart, openEnd) {\r\n        return false;\r\n    }\r\n    become(other) { return false; }\r\n    canReuseDOM(other) { return other.constructor == this.constructor; }\r\n    // When this is a zero-length view with a side, this should return a\r\n    // number <= 0 to indicate it is before its position, or a\r\n    // number > 0 when after its position.\r\n    getSide() { return 0; }\r\n    destroy() {\r\n        this.parent = null;\r\n    }\r\n}\r\nContentView.prototype.breakAfter = 0;\r\n// Remove a DOM node and return its next sibling.\r\nfunction rm$1(dom) {\r\n    let next = dom.nextSibling;\r\n    dom.parentNode.removeChild(dom);\r\n    return next;\r\n}\r\nclass ChildCursor {\r\n    constructor(children, pos, i) {\r\n        this.children = children;\r\n        this.pos = pos;\r\n        this.i = i;\r\n        this.off = 0;\r\n    }\r\n    findPos(pos, bias = 1) {\r\n        for (;;) {\r\n            if (pos > this.pos || pos == this.pos &&\r\n                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {\r\n                this.off = pos - this.pos;\r\n                return this;\r\n            }\r\n            let next = this.children[--this.i];\r\n            this.pos -= next.length + next.breakAfter;\r\n        }\r\n    }\r\n}\r\nfunction replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {\r\n    let { children } = parent;\r\n    let before = children.length ? children[fromI] : null;\r\n    let last = insert.length ? insert[insert.length - 1] : null;\r\n    let breakAtEnd = last ? last.breakAfter : breakAtStart;\r\n    // Change within a single child\r\n    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&\r\n        before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))\r\n        return;\r\n    if (toI < children.length) {\r\n        let after = children[toI];\r\n        // Make sure the end of the child after the update is preserved in `after`\r\n        if (after && toOff < after.length) {\r\n            // If we're splitting a child, separate part of it to avoid that\r\n            // being mangled when updating the child before the update.\r\n            if (fromI == toI) {\r\n                after = after.split(toOff);\r\n                toOff = 0;\r\n            }\r\n            // If the element after the replacement should be merged with\r\n            // the last replacing element, update `content`\r\n            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {\r\n                insert[insert.length - 1] = after;\r\n            }\r\n            else {\r\n                // Remove the start of the after element, if necessary, and\r\n                // add it to `content`.\r\n                if (toOff)\r\n                    after.merge(0, toOff, null, false, 0, openEnd);\r\n                insert.push(after);\r\n            }\r\n        }\r\n        else if (after === null || after === void 0 ? void 0 : after.breakAfter) {\r\n            // The element at `toI` is entirely covered by this range.\r\n            // Preserve its line break, if any.\r\n            if (last)\r\n                last.breakAfter = 1;\r\n            else\r\n                breakAtStart = 1;\r\n        }\r\n        // Since we've handled the next element from the current elements\r\n        // now, make sure `toI` points after that.\r\n        toI++;\r\n    }\r\n    if (before) {\r\n        before.breakAfter = breakAtStart;\r\n        if (fromOff > 0) {\r\n            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {\r\n                before.breakAfter = insert.shift().breakAfter;\r\n            }\r\n            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {\r\n                before.merge(fromOff, before.length, null, false, openStart, 0);\r\n            }\r\n            fromI++;\r\n        }\r\n    }\r\n    // Try to merge widgets on the boundaries of the replacement\r\n    while (fromI < toI && insert.length) {\r\n        if (children[toI - 1].become(insert[insert.length - 1])) {\r\n            toI--;\r\n            insert.pop();\r\n            openEnd = insert.length ? 0 : openStart;\r\n        }\r\n        else if (children[fromI].become(insert[0])) {\r\n            fromI++;\r\n            insert.shift();\r\n            openStart = insert.length ? 0 : openEnd;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&\r\n        children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))\r\n        fromI--;\r\n    if (fromI < toI || insert.length)\r\n        parent.replaceChildren(fromI, toI, insert);\r\n}\r\nfunction mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {\r\n    let cur = parent.childCursor();\r\n    let { i: toI, off: toOff } = cur.findPos(to, 1);\r\n    let { i: fromI, off: fromOff } = cur.findPos(from, -1);\r\n    let dLen = from - to;\r\n    for (let view of insert)\r\n        dLen += view.length;\r\n    parent.length += dLen;\r\n    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);\r\n}\r\n\r\nlet nav = typeof navigator != \"undefined\" ? navigator : { userAgent: \"\", vendor: \"\", platform: \"\" };\r\nlet doc = typeof document != \"undefined\" ? document : { documentElement: { style: {} } };\r\nconst ie_edge = /*@__PURE__*//Edge\\/(\\d+)/.exec(nav.userAgent);\r\nconst ie_upto10 = /*@__PURE__*//MSIE \\d/.test(nav.userAgent);\r\nconst ie_11up = /*@__PURE__*//Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(nav.userAgent);\r\nconst ie = !!(ie_upto10 || ie_11up || ie_edge);\r\nconst gecko = !ie && /*@__PURE__*//gecko\\/(\\d+)/i.test(nav.userAgent);\r\nconst chrome = !ie && /*@__PURE__*//Chrome\\/(\\d+)/.exec(nav.userAgent);\r\nconst webkit = \"webkitFontSmoothing\" in doc.documentElement.style;\r\nconst safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);\r\nconst ios = safari && (/*@__PURE__*//Mobile\\/\\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);\r\nvar browser = {\r\n    mac: ios || /*@__PURE__*//Mac/.test(nav.platform),\r\n    windows: /*@__PURE__*//Win/.test(nav.platform),\r\n    linux: /*@__PURE__*//Linux|X11/.test(nav.platform),\r\n    ie,\r\n    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,\r\n    gecko,\r\n    gecko_version: gecko ? +(/*@__PURE__*//Firefox\\/(\\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,\r\n    chrome: !!chrome,\r\n    chrome_version: chrome ? +chrome[1] : 0,\r\n    ios,\r\n    android: /*@__PURE__*//Android\\b/.test(nav.userAgent),\r\n    webkit,\r\n    safari,\r\n    webkit_version: webkit ? +(/*@__PURE__*//\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,\r\n    tabSize: doc.documentElement.style.tabSize != null ? \"tab-size\" : \"-moz-tab-size\"\r\n};\r\n\r\nconst MaxJoinLen = 256;\r\nclass TextView extends ContentView {\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n    get length() { return this.text.length; }\r\n    createDOM(textDOM) {\r\n        this.setDOM(textDOM || document.createTextNode(this.text));\r\n    }\r\n    sync(track) {\r\n        if (!this.dom)\r\n            this.createDOM();\r\n        if (this.dom.nodeValue != this.text) {\r\n            if (track && track.node == this.dom)\r\n                track.written = true;\r\n            this.dom.nodeValue = this.text;\r\n        }\r\n    }\r\n    reuseDOM(dom) {\r\n        if (dom.nodeType == 3)\r\n            this.createDOM(dom);\r\n    }\r\n    merge(from, to, source) {\r\n        if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))\r\n            return false;\r\n        this.text = this.text.slice(0, from) + (source ? source.text : \"\") + this.text.slice(to);\r\n        this.markDirty();\r\n        return true;\r\n    }\r\n    split(from) {\r\n        let result = new TextView(this.text.slice(from));\r\n        this.text = this.text.slice(0, from);\r\n        this.markDirty();\r\n        return result;\r\n    }\r\n    localPosFromDOM(node, offset) {\r\n        return node == this.dom ? offset : offset ? this.text.length : 0;\r\n    }\r\n    domAtPos(pos) { return new DOMPos(this.dom, pos); }\r\n    domBoundsAround(_from, _to, offset) {\r\n        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };\r\n    }\r\n    coordsAt(pos, side) {\r\n        return textCoords(this.dom, pos, side);\r\n    }\r\n}\r\nclass MarkView extends ContentView {\r\n    constructor(mark, children = [], length = 0) {\r\n        super();\r\n        this.mark = mark;\r\n        this.children = children;\r\n        this.length = length;\r\n        for (let ch of children)\r\n            ch.setParent(this);\r\n    }\r\n    setAttrs(dom) {\r\n        clearAttributes(dom);\r\n        if (this.mark.class)\r\n            dom.className = this.mark.class;\r\n        if (this.mark.attrs)\r\n            for (let name in this.mark.attrs)\r\n                dom.setAttribute(name, this.mark.attrs[name]);\r\n        return dom;\r\n    }\r\n    reuseDOM(node) {\r\n        if (node.nodeName == this.mark.tagName.toUpperCase()) {\r\n            this.setDOM(node);\r\n            this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;\r\n        }\r\n    }\r\n    sync(track) {\r\n        if (!this.dom)\r\n            this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));\r\n        else if (this.dirty & 4 /* Dirty.Attrs */)\r\n            this.setAttrs(this.dom);\r\n        super.sync(track);\r\n    }\r\n    merge(from, to, source, _hasStart, openStart, openEnd) {\r\n        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||\r\n            (from && openStart <= 0) || (to < this.length && openEnd <= 0)))\r\n            return false;\r\n        mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);\r\n        this.markDirty();\r\n        return true;\r\n    }\r\n    split(from) {\r\n        let result = [], off = 0, detachFrom = -1, i = 0;\r\n        for (let elt of this.children) {\r\n            let end = off + elt.length;\r\n            if (end > from)\r\n                result.push(off < from ? elt.split(from - off) : elt);\r\n            if (detachFrom < 0 && off >= from)\r\n                detachFrom = i;\r\n            off = end;\r\n            i++;\r\n        }\r\n        let length = this.length - from;\r\n        this.length = from;\r\n        if (detachFrom > -1) {\r\n            this.children.length = detachFrom;\r\n            this.markDirty();\r\n        }\r\n        return new MarkView(this.mark, result, length);\r\n    }\r\n    domAtPos(pos) {\r\n        return inlineDOMAtPos(this, pos);\r\n    }\r\n    coordsAt(pos, side) {\r\n        return coordsInChildren(this, pos, side);\r\n    }\r\n}\r\nfunction textCoords(text, pos, side) {\r\n    let length = text.nodeValue.length;\r\n    if (pos > length)\r\n        pos = length;\r\n    let from = pos, to = pos, flatten = 0;\r\n    if (pos == 0 && side < 0 || pos == length && side >= 0) {\r\n        if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges\r\n            if (pos) {\r\n                from--;\r\n                flatten = 1;\r\n            } // FIXME this is wrong in RTL text\r\n            else if (to < length) {\r\n                to++;\r\n                flatten = -1;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (side < 0)\r\n            from--;\r\n        else if (to < length)\r\n            to++;\r\n    }\r\n    let rects = textRange(text, from, to).getClientRects();\r\n    if (!rects.length)\r\n        return Rect0;\r\n    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];\r\n    if (browser.safari && !flatten && rect.width == 0)\r\n        rect = Array.prototype.find.call(rects, r => r.width) || rect;\r\n    return flatten ? flattenRect(rect, flatten < 0) : rect || null;\r\n}\r\n// Also used for collapsed ranges that don't have a placeholder widget!\r\nclass WidgetView extends ContentView {\r\n    constructor(widget, length, side) {\r\n        super();\r\n        this.widget = widget;\r\n        this.length = length;\r\n        this.side = side;\r\n        this.prevWidget = null;\r\n    }\r\n    static create(widget, length, side) {\r\n        return new (widget.customView || WidgetView)(widget, length, side);\r\n    }\r\n    split(from) {\r\n        let result = WidgetView.create(this.widget, this.length - from, this.side);\r\n        this.length -= from;\r\n        return result;\r\n    }\r\n    sync() {\r\n        if (!this.dom || !this.widget.updateDOM(this.dom)) {\r\n            if (this.dom && this.prevWidget)\r\n                this.prevWidget.destroy(this.dom);\r\n            this.prevWidget = null;\r\n            this.setDOM(this.widget.toDOM(this.editorView));\r\n            this.dom.contentEditable = \"false\";\r\n        }\r\n    }\r\n    getSide() { return this.side; }\r\n    merge(from, to, source, hasStart, openStart, openEnd) {\r\n        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||\r\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\r\n            return false;\r\n        this.length = from + (source ? source.length : 0) + (this.length - to);\r\n        return true;\r\n    }\r\n    become(other) {\r\n        if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {\r\n            if (this.widget.constructor == other.widget.constructor) {\r\n                if (!this.widget.eq(other.widget))\r\n                    this.markDirty(true);\r\n                if (this.dom && !this.prevWidget)\r\n                    this.prevWidget = this.widget;\r\n                this.widget = other.widget;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    ignoreMutation() { return true; }\r\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\r\n    get overrideDOMText() {\r\n        if (this.length == 0)\r\n            return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty;\r\n        let top = this;\r\n        while (top.parent)\r\n            top = top.parent;\r\n        let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;\r\n        return text ? text.slice(start, start + this.length) : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty;\r\n    }\r\n    domAtPos(pos) {\r\n        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);\r\n    }\r\n    domBoundsAround() { return null; }\r\n    coordsAt(pos, side) {\r\n        let rects = this.dom.getClientRects(), rect = null;\r\n        if (!rects.length)\r\n            return Rect0;\r\n        for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {\r\n            rect = rects[i];\r\n            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)\r\n                break;\r\n        }\r\n        return this.length ? rect : flattenRect(rect, this.side > 0);\r\n    }\r\n    get isEditable() { return false; }\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.dom)\r\n            this.widget.destroy(this.dom);\r\n    }\r\n}\r\nclass CompositionView extends WidgetView {\r\n    domAtPos(pos) {\r\n        let { topView, text } = this.widget;\r\n        if (!topView)\r\n            return new DOMPos(text, Math.min(pos, text.nodeValue.length));\r\n        return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));\r\n    }\r\n    sync() { this.setDOM(this.widget.toDOM()); }\r\n    localPosFromDOM(node, offset) {\r\n        let { topView, text } = this.widget;\r\n        if (!topView)\r\n            return Math.min(offset, this.length);\r\n        return posFromDOMInCompositionTree(node, offset, topView, text);\r\n    }\r\n    ignoreMutation() { return false; }\r\n    get overrideDOMText() { return null; }\r\n    coordsAt(pos, side) {\r\n        let { topView, text } = this.widget;\r\n        if (!topView)\r\n            return textCoords(text, pos, side);\r\n        return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));\r\n    }\r\n    destroy() {\r\n        var _a;\r\n        super.destroy();\r\n        (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();\r\n    }\r\n    get isEditable() { return true; }\r\n    canReuseDOM() { return true; }\r\n}\r\n// Uses the old structure of a chunk of content view frozen for\r\n// composition to try and find a reasonable DOM location for the given\r\n// offset.\r\nfunction scanCompositionTree(pos, side, view, text, enterView, fromText) {\r\n    if (view instanceof MarkView) {\r\n        for (let child = view.dom.firstChild; child; child = child.nextSibling) {\r\n            let desc = ContentView.get(child);\r\n            if (!desc)\r\n                return fromText(pos, side);\r\n            let hasComp = contains(child, text);\r\n            let len = desc.length + (hasComp ? text.nodeValue.length : 0);\r\n            if (pos < len || pos == len && desc.getSide() <= 0)\r\n                return hasComp ? scanCompositionTree(pos, side, desc, text, enterView, fromText) : enterView(desc, pos, side);\r\n            pos -= len;\r\n        }\r\n        return enterView(view, view.length, -1);\r\n    }\r\n    else if (view.dom == text) {\r\n        return fromText(pos, side);\r\n    }\r\n    else {\r\n        return enterView(view, pos, side);\r\n    }\r\n}\r\nfunction posFromDOMInCompositionTree(node, offset, view, text) {\r\n    if (view instanceof MarkView) {\r\n        for (let child of view.children) {\r\n            let pos = 0, hasComp = contains(child.dom, text);\r\n            if (contains(child.dom, node))\r\n                return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));\r\n            pos += hasComp ? text.nodeValue.length : child.length;\r\n        }\r\n    }\r\n    else if (view.dom == text) {\r\n        return Math.min(offset, text.nodeValue.length);\r\n    }\r\n    return view.localPosFromDOM(node, offset);\r\n}\r\n// These are drawn around uneditable widgets to avoid a number of\r\n// browser bugs that show up when the cursor is directly next to\r\n// uneditable inline content.\r\nclass WidgetBufferView extends ContentView {\r\n    constructor(side) {\r\n        super();\r\n        this.side = side;\r\n    }\r\n    get length() { return 0; }\r\n    merge() { return false; }\r\n    become(other) {\r\n        return other instanceof WidgetBufferView && other.side == this.side;\r\n    }\r\n    split() { return new WidgetBufferView(this.side); }\r\n    sync() {\r\n        if (!this.dom) {\r\n            let dom = document.createElement(\"img\");\r\n            dom.className = \"cm-widgetBuffer\";\r\n            dom.setAttribute(\"aria-hidden\", \"true\");\r\n            this.setDOM(dom);\r\n        }\r\n    }\r\n    getSide() { return this.side; }\r\n    domAtPos(pos) { return DOMPos.before(this.dom); }\r\n    localPosFromDOM() { return 0; }\r\n    domBoundsAround() { return null; }\r\n    coordsAt(pos) {\r\n        let imgRect = this.dom.getBoundingClientRect();\r\n        // Since the <img> height doesn't correspond to text height, try\r\n        // to borrow the height from some sibling node.\r\n        let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);\r\n        return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top\r\n            ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;\r\n    }\r\n    get overrideDOMText() {\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty;\r\n    }\r\n}\r\nTextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;\r\nfunction inlineSiblingRect(view, side) {\r\n    let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;\r\n    while (parent && index >= 0) {\r\n        if (side < 0 ? index > 0 : index < parent.children.length) {\r\n            let next = parent.children[index + side];\r\n            if (next instanceof TextView) {\r\n                let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);\r\n                if (nextRect)\r\n                    return nextRect;\r\n            }\r\n            index += side;\r\n        }\r\n        else if (parent instanceof MarkView && parent.parent) {\r\n            index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);\r\n            parent = parent.parent;\r\n        }\r\n        else {\r\n            let last = parent.dom.lastChild;\r\n            if (last && last.nodeName == \"BR\")\r\n                return last.getClientRects()[0];\r\n            break;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction inlineDOMAtPos(parent, pos) {\r\n    let dom = parent.dom, { children } = parent, i = 0;\r\n    for (let off = 0; i < children.length; i++) {\r\n        let child = children[i], end = off + child.length;\r\n        if (end == off && child.getSide() <= 0)\r\n            continue;\r\n        if (pos > off && pos < end && child.dom.parentNode == dom)\r\n            return child.domAtPos(pos - off);\r\n        if (pos <= off)\r\n            break;\r\n        off = end;\r\n    }\r\n    for (let j = i; j > 0; j--) {\r\n        let prev = children[j - 1];\r\n        if (prev.dom.parentNode == dom)\r\n            return prev.domAtPos(prev.length);\r\n    }\r\n    for (let j = i; j < children.length; j++) {\r\n        let next = children[j];\r\n        if (next.dom.parentNode == dom)\r\n            return next.domAtPos(0);\r\n    }\r\n    return new DOMPos(dom, 0);\r\n}\r\n// Assumes `view`, if a mark view, has precisely 1 child.\r\nfunction joinInlineInto(parent, view, open) {\r\n    let last, { children } = parent;\r\n    if (open > 0 && view instanceof MarkView && children.length &&\r\n        (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {\r\n        joinInlineInto(last, view.children[0], open - 1);\r\n    }\r\n    else {\r\n        children.push(view);\r\n        view.setParent(parent);\r\n    }\r\n    parent.length += view.length;\r\n}\r\nfunction coordsInChildren(view, pos, side) {\r\n    let before = null, beforePos = -1, after = null, afterPos = -1;\r\n    function scan(view, pos) {\r\n        for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {\r\n            let child = view.children[i], end = off + child.length;\r\n            if (end >= pos) {\r\n                if (child.children.length) {\r\n                    scan(child, pos - off);\r\n                }\r\n                else if (!after && (end > pos || off == end && child.getSide() > 0)) {\r\n                    after = child;\r\n                    afterPos = pos - off;\r\n                }\r\n                else if (off < pos || (off == end && child.getSide() < 0)) {\r\n                    before = child;\r\n                    beforePos = pos - off;\r\n                }\r\n            }\r\n            off = end;\r\n        }\r\n    }\r\n    scan(view, pos);\r\n    let target = (side < 0 ? before : after) || before || after;\r\n    if (target)\r\n        return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);\r\n    return fallbackRect(view);\r\n}\r\nfunction fallbackRect(view) {\r\n    let last = view.dom.lastChild;\r\n    if (!last)\r\n        return view.dom.getBoundingClientRect();\r\n    let rects = clientRectsFor(last);\r\n    return rects[rects.length - 1] || null;\r\n}\r\n\r\nfunction combineAttrs(source, target) {\r\n    for (let name in source) {\r\n        if (name == \"class\" && target.class)\r\n            target.class += \" \" + source.class;\r\n        else if (name == \"style\" && target.style)\r\n            target.style += \";\" + source.style;\r\n        else\r\n            target[name] = source[name];\r\n    }\r\n    return target;\r\n}\r\nfunction attrsEq(a, b) {\r\n    if (a == b)\r\n        return true;\r\n    if (!a || !b)\r\n        return false;\r\n    let keysA = Object.keys(a), keysB = Object.keys(b);\r\n    if (keysA.length != keysB.length)\r\n        return false;\r\n    for (let key of keysA) {\r\n        if (keysB.indexOf(key) == -1 || a[key] !== b[key])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction updateAttrs(dom, prev, attrs) {\r\n    let changed = null;\r\n    if (prev)\r\n        for (let name in prev)\r\n            if (!(attrs && name in attrs))\r\n                dom.removeAttribute(changed = name);\r\n    if (attrs)\r\n        for (let name in attrs)\r\n            if (!(prev && prev[name] == attrs[name]))\r\n                dom.setAttribute(changed = name, attrs[name]);\r\n    return !!changed;\r\n}\r\n\r\n/**\r\nWidgets added to the content are described by subclasses of this\r\nclass. Using a description object like that makes it possible to\r\ndelay creating of the DOM structure for a widget until it is\r\nneeded, and to avoid redrawing widgets even if the decorations\r\nthat define them are recreated.\r\n*/\r\nclass WidgetType {\r\n    /**\r\n    Compare this instance to another instance of the same type.\r\n    (TypeScript can't express this, but only instances of the same\r\n    specific class will be passed to this method.) This is used to\r\n    avoid redrawing widgets when they are replaced by a new\r\n    decoration of the same type. The default implementation just\r\n    returns `false`, which will cause new instances of the widget to\r\n    always be redrawn.\r\n    */\r\n    eq(widget) { return false; }\r\n    /**\r\n    Update a DOM element created by a widget of the same type (but\r\n    different, non-`eq` content) to reflect this widget. May return\r\n    true to indicate that it could update, false to indicate it\r\n    couldn't (in which case the widget will be redrawn). The default\r\n    implementation just returns false.\r\n    */\r\n    updateDOM(dom) { return false; }\r\n    /**\r\n    @internal\r\n    */\r\n    compare(other) {\r\n        return this == other || this.constructor == other.constructor && this.eq(other);\r\n    }\r\n    /**\r\n    The estimated height this widget will have, to be used when\r\n    estimating the height of content that hasn't been drawn. May\r\n    return -1 to indicate you don't know. The default implementation\r\n    returns -1.\r\n    */\r\n    get estimatedHeight() { return -1; }\r\n    /**\r\n    Can be used to configure which kinds of events inside the widget\r\n    should be ignored by the editor. The default is to ignore all\r\n    events.\r\n    */\r\n    ignoreEvent(event) { return true; }\r\n    /**\r\n    @internal\r\n    */\r\n    get customView() { return null; }\r\n    /**\r\n    This is called when the an instance of the widget is removed\r\n    from the editor view.\r\n    */\r\n    destroy(dom) { }\r\n}\r\n/**\r\nThe different types of blocks that can occur in an editor view.\r\n*/\r\nvar BlockType = /*@__PURE__*/(function (BlockType) {\r\n    /**\r\n    A line of text.\r\n    */\r\n    BlockType[BlockType[\"Text\"] = 0] = \"Text\";\r\n    /**\r\n    A block widget associated with the position after it.\r\n    */\r\n    BlockType[BlockType[\"WidgetBefore\"] = 1] = \"WidgetBefore\";\r\n    /**\r\n    A block widget associated with the position before it.\r\n    */\r\n    BlockType[BlockType[\"WidgetAfter\"] = 2] = \"WidgetAfter\";\r\n    /**\r\n    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.\r\n    */\r\n    BlockType[BlockType[\"WidgetRange\"] = 3] = \"WidgetRange\";\r\nreturn BlockType})(BlockType || (BlockType = {}));\r\n/**\r\nA decoration provides information on how to draw or style a piece\r\nof content. You'll usually use it wrapped in a\r\n[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.\r\n@nonabstract\r\n*/\r\nclass Decoration extends _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeValue {\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    startSide, \r\n    /**\r\n    @internal\r\n    */\r\n    endSide, \r\n    /**\r\n    @internal\r\n    */\r\n    widget, \r\n    /**\r\n    The config object used to create this decoration. You can\r\n    include additional properties in there to store metadata about\r\n    your decoration.\r\n    */\r\n    spec) {\r\n        super();\r\n        this.startSide = startSide;\r\n        this.endSide = endSide;\r\n        this.widget = widget;\r\n        this.spec = spec;\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    get heightRelevant() { return false; }\r\n    /**\r\n    Create a mark decoration, which influences the styling of the\r\n    content in its range. Nested mark decorations will cause nested\r\n    DOM elements to be created. Nesting order is determined by\r\n    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with\r\n    the higher-precedence decorations creating the inner DOM nodes.\r\n    Such elements are split on line boundaries and on the boundaries\r\n    of lower-precedence decorations.\r\n    */\r\n    static mark(spec) {\r\n        return new MarkDecoration(spec);\r\n    }\r\n    /**\r\n    Create a widget decoration, which displays a DOM element at the\r\n    given position.\r\n    */\r\n    static widget(spec) {\r\n        let side = spec.side || 0, block = !!spec.block;\r\n        side += block ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */) : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);\r\n        return new PointDecoration(spec, side, side, block, spec.widget || null, false);\r\n    }\r\n    /**\r\n    Create a replace decoration which replaces the given range with\r\n    a widget, or simply hides it.\r\n    */\r\n    static replace(spec) {\r\n        let block = !!spec.block, startSide, endSide;\r\n        if (spec.isBlockGap) {\r\n            startSide = -500000000 /* Side.GapStart */;\r\n            endSide = 400000000 /* Side.GapEnd */;\r\n        }\r\n        else {\r\n            let { start, end } = getInclusive(spec, block);\r\n            startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;\r\n            endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;\r\n        }\r\n        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);\r\n    }\r\n    /**\r\n    Create a line decoration, which can add DOM attributes to the\r\n    line starting at the given position.\r\n    */\r\n    static line(spec) {\r\n        return new LineDecoration(spec);\r\n    }\r\n    /**\r\n    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given\r\n    decorated range or ranges. If the ranges aren't already sorted,\r\n    pass `true` for `sort` to make the library sort them for you.\r\n    */\r\n    static set(of, sort = false) {\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.of(of, sort);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }\r\n}\r\n/**\r\nThe empty set of decorations.\r\n*/\r\nDecoration.none = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.empty;\r\nclass MarkDecoration extends Decoration {\r\n    constructor(spec) {\r\n        let { start, end } = getInclusive(spec);\r\n        super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);\r\n        this.tagName = spec.tagName || \"span\";\r\n        this.class = spec.class || \"\";\r\n        this.attrs = spec.attributes || null;\r\n    }\r\n    eq(other) {\r\n        return this == other ||\r\n            other instanceof MarkDecoration &&\r\n                this.tagName == other.tagName &&\r\n                this.class == other.class &&\r\n                attrsEq(this.attrs, other.attrs);\r\n    }\r\n    range(from, to = from) {\r\n        if (from >= to)\r\n            throw new RangeError(\"Mark decorations may not be empty\");\r\n        return super.range(from, to);\r\n    }\r\n}\r\nMarkDecoration.prototype.point = false;\r\nclass LineDecoration extends Decoration {\r\n    constructor(spec) {\r\n        super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);\r\n    }\r\n    eq(other) {\r\n        return other instanceof LineDecoration &&\r\n            this.spec.class == other.spec.class &&\r\n            attrsEq(this.spec.attributes, other.spec.attributes);\r\n    }\r\n    range(from, to = from) {\r\n        if (to != from)\r\n            throw new RangeError(\"Line decoration ranges must be zero-length\");\r\n        return super.range(from, to);\r\n    }\r\n}\r\nLineDecoration.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackBefore;\r\nLineDecoration.prototype.point = true;\r\nclass PointDecoration extends Decoration {\r\n    constructor(spec, startSide, endSide, block, widget, isReplace) {\r\n        super(startSide, endSide, widget, spec);\r\n        this.block = block;\r\n        this.isReplace = isReplace;\r\n        this.mapMode = !block ? _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackDel : startSide <= 0 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackBefore : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackAfter;\r\n    }\r\n    // Only relevant when this.block == true\r\n    get type() {\r\n        return this.startSide < this.endSide ? BlockType.WidgetRange\r\n            : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;\r\n    }\r\n    get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }\r\n    eq(other) {\r\n        return other instanceof PointDecoration &&\r\n            widgetsEq(this.widget, other.widget) &&\r\n            this.block == other.block &&\r\n            this.startSide == other.startSide && this.endSide == other.endSide;\r\n    }\r\n    range(from, to = from) {\r\n        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))\r\n            throw new RangeError(\"Invalid range for replacement decoration\");\r\n        if (!this.isReplace && to != from)\r\n            throw new RangeError(\"Widget decorations can only have zero-length ranges\");\r\n        return super.range(from, to);\r\n    }\r\n}\r\nPointDecoration.prototype.point = true;\r\nfunction getInclusive(spec, block = false) {\r\n    let { inclusiveStart: start, inclusiveEnd: end } = spec;\r\n    if (start == null)\r\n        start = spec.inclusive;\r\n    if (end == null)\r\n        end = spec.inclusive;\r\n    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };\r\n}\r\nfunction widgetsEq(a, b) {\r\n    return a == b || !!(a && b && a.compare(b));\r\n}\r\nfunction addRange(from, to, ranges, margin = 0) {\r\n    let last = ranges.length - 1;\r\n    if (last >= 0 && ranges[last] + margin >= from)\r\n        ranges[last] = Math.max(ranges[last], to);\r\n    else\r\n        ranges.push(from, to);\r\n}\r\n\r\nclass LineView extends ContentView {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.children = [];\r\n        this.length = 0;\r\n        this.prevAttrs = undefined;\r\n        this.attrs = null;\r\n        this.breakAfter = 0;\r\n    }\r\n    // Consumes source\r\n    merge(from, to, source, hasStart, openStart, openEnd) {\r\n        if (source) {\r\n            if (!(source instanceof LineView))\r\n                return false;\r\n            if (!this.dom)\r\n                source.transferDOM(this); // Reuse source.dom when appropriate\r\n        }\r\n        if (hasStart)\r\n            this.setDeco(source ? source.attrs : null);\r\n        mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);\r\n        return true;\r\n    }\r\n    split(at) {\r\n        let end = new LineView;\r\n        end.breakAfter = this.breakAfter;\r\n        if (this.length == 0)\r\n            return end;\r\n        let { i, off } = this.childPos(at);\r\n        if (off) {\r\n            end.append(this.children[i].split(off), 0);\r\n            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);\r\n            i++;\r\n        }\r\n        for (let j = i; j < this.children.length; j++)\r\n            end.append(this.children[j], 0);\r\n        while (i > 0 && this.children[i - 1].length == 0)\r\n            this.children[--i].destroy();\r\n        this.children.length = i;\r\n        this.markDirty();\r\n        this.length = at;\r\n        return end;\r\n    }\r\n    transferDOM(other) {\r\n        if (!this.dom)\r\n            return;\r\n        this.markDirty();\r\n        other.setDOM(this.dom);\r\n        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;\r\n        this.prevAttrs = undefined;\r\n        this.dom = null;\r\n    }\r\n    setDeco(attrs) {\r\n        if (!attrsEq(this.attrs, attrs)) {\r\n            if (this.dom) {\r\n                this.prevAttrs = this.attrs;\r\n                this.markDirty();\r\n            }\r\n            this.attrs = attrs;\r\n        }\r\n    }\r\n    append(child, openStart) {\r\n        joinInlineInto(this, child, openStart);\r\n    }\r\n    // Only called when building a line view in ContentBuilder\r\n    addLineDeco(deco) {\r\n        let attrs = deco.spec.attributes, cls = deco.spec.class;\r\n        if (attrs)\r\n            this.attrs = combineAttrs(attrs, this.attrs || {});\r\n        if (cls)\r\n            this.attrs = combineAttrs({ class: cls }, this.attrs || {});\r\n    }\r\n    domAtPos(pos) {\r\n        return inlineDOMAtPos(this, pos);\r\n    }\r\n    reuseDOM(node) {\r\n        if (node.nodeName == \"DIV\") {\r\n            this.setDOM(node);\r\n            this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;\r\n        }\r\n    }\r\n    sync(track) {\r\n        var _a;\r\n        if (!this.dom) {\r\n            this.setDOM(document.createElement(\"div\"));\r\n            this.dom.className = \"cm-line\";\r\n            this.prevAttrs = this.attrs ? null : undefined;\r\n        }\r\n        else if (this.dirty & 4 /* Dirty.Attrs */) {\r\n            clearAttributes(this.dom);\r\n            this.dom.className = \"cm-line\";\r\n            this.prevAttrs = this.attrs ? null : undefined;\r\n        }\r\n        if (this.prevAttrs !== undefined) {\r\n            updateAttrs(this.dom, this.prevAttrs, this.attrs);\r\n            this.dom.classList.add(\"cm-line\");\r\n            this.prevAttrs = undefined;\r\n        }\r\n        super.sync(track);\r\n        let last = this.dom.lastChild;\r\n        while (last && ContentView.get(last) instanceof MarkView)\r\n            last = last.lastChild;\r\n        if (!last || !this.length ||\r\n            last.nodeName != \"BR\" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&\r\n                (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {\r\n            let hack = document.createElement(\"BR\");\r\n            hack.cmIgnore = true;\r\n            this.dom.appendChild(hack);\r\n        }\r\n    }\r\n    measureTextSize() {\r\n        if (this.children.length == 0 || this.length > 20)\r\n            return null;\r\n        let totalWidth = 0;\r\n        for (let child of this.children) {\r\n            if (!(child instanceof TextView) || /[^ -~]/.test(child.text))\r\n                return null;\r\n            let rects = clientRectsFor(child.dom);\r\n            if (rects.length != 1)\r\n                return null;\r\n            totalWidth += rects[0].width;\r\n        }\r\n        return !totalWidth ? null : {\r\n            lineHeight: this.dom.getBoundingClientRect().height,\r\n            charWidth: totalWidth / this.length\r\n        };\r\n    }\r\n    coordsAt(pos, side) {\r\n        return coordsInChildren(this, pos, side);\r\n    }\r\n    become(_other) { return false; }\r\n    get type() { return BlockType.Text; }\r\n    static find(docView, pos) {\r\n        for (let i = 0, off = 0; i < docView.children.length; i++) {\r\n            let block = docView.children[i], end = off + block.length;\r\n            if (end >= pos) {\r\n                if (block instanceof LineView)\r\n                    return block;\r\n                if (end > pos)\r\n                    break;\r\n            }\r\n            off = end + block.breakAfter;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass BlockWidgetView extends ContentView {\r\n    constructor(widget, length, type) {\r\n        super();\r\n        this.widget = widget;\r\n        this.length = length;\r\n        this.type = type;\r\n        this.breakAfter = 0;\r\n        this.prevWidget = null;\r\n    }\r\n    merge(from, to, source, _takeDeco, openStart, openEnd) {\r\n        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||\r\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\r\n            return false;\r\n        this.length = from + (source ? source.length : 0) + (this.length - to);\r\n        return true;\r\n    }\r\n    domAtPos(pos) {\r\n        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);\r\n    }\r\n    split(at) {\r\n        let len = this.length - at;\r\n        this.length = at;\r\n        let end = new BlockWidgetView(this.widget, len, this.type);\r\n        end.breakAfter = this.breakAfter;\r\n        return end;\r\n    }\r\n    get children() { return noChildren; }\r\n    sync() {\r\n        if (!this.dom || !this.widget.updateDOM(this.dom)) {\r\n            if (this.dom && this.prevWidget)\r\n                this.prevWidget.destroy(this.dom);\r\n            this.prevWidget = null;\r\n            this.setDOM(this.widget.toDOM(this.editorView));\r\n            this.dom.contentEditable = \"false\";\r\n        }\r\n    }\r\n    get overrideDOMText() {\r\n        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty;\r\n    }\r\n    domBoundsAround() { return null; }\r\n    become(other) {\r\n        if (other instanceof BlockWidgetView && other.type == this.type &&\r\n            other.widget.constructor == this.widget.constructor) {\r\n            if (!other.widget.eq(this.widget))\r\n                this.markDirty(true);\r\n            if (this.dom && !this.prevWidget)\r\n                this.prevWidget = this.widget;\r\n            this.widget = other.widget;\r\n            this.length = other.length;\r\n            this.breakAfter = other.breakAfter;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ignoreMutation() { return true; }\r\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.dom)\r\n            this.widget.destroy(this.dom);\r\n    }\r\n}\r\n\r\nclass ContentBuilder {\r\n    constructor(doc, pos, end, disallowBlockEffectsFor) {\r\n        this.doc = doc;\r\n        this.pos = pos;\r\n        this.end = end;\r\n        this.disallowBlockEffectsFor = disallowBlockEffectsFor;\r\n        this.content = [];\r\n        this.curLine = null;\r\n        this.breakAtStart = 0;\r\n        this.pendingBuffer = 0 /* Buf.No */;\r\n        this.bufferMarks = [];\r\n        // Set to false directly after a widget that covers the position after it\r\n        this.atCursorPos = true;\r\n        this.openStart = -1;\r\n        this.openEnd = -1;\r\n        this.text = \"\";\r\n        this.textOff = 0;\r\n        this.cursor = doc.iter();\r\n        this.skip = pos;\r\n    }\r\n    posCovered() {\r\n        if (this.content.length == 0)\r\n            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;\r\n        let last = this.content[this.content.length - 1];\r\n        return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);\r\n    }\r\n    getLine() {\r\n        if (!this.curLine) {\r\n            this.content.push(this.curLine = new LineView);\r\n            this.atCursorPos = true;\r\n        }\r\n        return this.curLine;\r\n    }\r\n    flushBuffer(active = this.bufferMarks) {\r\n        if (this.pendingBuffer) {\r\n            this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);\r\n            this.pendingBuffer = 0 /* Buf.No */;\r\n        }\r\n    }\r\n    addBlockWidget(view) {\r\n        this.flushBuffer();\r\n        this.curLine = null;\r\n        this.content.push(view);\r\n    }\r\n    finish(openEnd) {\r\n        if (this.pendingBuffer && openEnd <= this.bufferMarks.length)\r\n            this.flushBuffer();\r\n        else\r\n            this.pendingBuffer = 0 /* Buf.No */;\r\n        if (!this.posCovered())\r\n            this.getLine();\r\n    }\r\n    buildText(length, active, openStart) {\r\n        while (length > 0) {\r\n            if (this.textOff == this.text.length) {\r\n                let { value, lineBreak, done } = this.cursor.next(this.skip);\r\n                this.skip = 0;\r\n                if (done)\r\n                    throw new Error(\"Ran out of text content when drawing inline views\");\r\n                if (lineBreak) {\r\n                    if (!this.posCovered())\r\n                        this.getLine();\r\n                    if (this.content.length)\r\n                        this.content[this.content.length - 1].breakAfter = 1;\r\n                    else\r\n                        this.breakAtStart = 1;\r\n                    this.flushBuffer();\r\n                    this.curLine = null;\r\n                    this.atCursorPos = true;\r\n                    length--;\r\n                    continue;\r\n                }\r\n                else {\r\n                    this.text = value;\r\n                    this.textOff = 0;\r\n                }\r\n            }\r\n            let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);\r\n            this.flushBuffer(active.slice(active.length - openStart));\r\n            this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);\r\n            this.atCursorPos = true;\r\n            this.textOff += take;\r\n            length -= take;\r\n            openStart = 0;\r\n        }\r\n    }\r\n    span(from, to, active, openStart) {\r\n        this.buildText(to - from, active, openStart);\r\n        this.pos = to;\r\n        if (this.openStart < 0)\r\n            this.openStart = openStart;\r\n    }\r\n    point(from, to, deco, active, openStart, index) {\r\n        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {\r\n            if (deco.block)\r\n                throw new RangeError(\"Block decorations may not be specified via plugins\");\r\n            if (to > this.doc.lineAt(this.pos).to)\r\n                throw new RangeError(\"Decorations that replace line breaks may not be specified via plugins\");\r\n        }\r\n        let len = to - from;\r\n        if (deco instanceof PointDecoration) {\r\n            if (deco.block) {\r\n                let { type } = deco;\r\n                if (type == BlockType.WidgetAfter && !this.posCovered())\r\n                    this.getLine();\r\n                this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget(\"div\"), len, type));\r\n            }\r\n            else {\r\n                let view = WidgetView.create(deco.widget || new NullWidget(\"span\"), len, len ? 0 : deco.startSide);\r\n                let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);\r\n                let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);\r\n                let line = this.getLine();\r\n                if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore)\r\n                    this.pendingBuffer = 0 /* Buf.No */;\r\n                this.flushBuffer(active);\r\n                if (cursorBefore) {\r\n                    line.append(wrapMarks(new WidgetBufferView(1), active), openStart);\r\n                    openStart = active.length + Math.max(0, openStart - active.length);\r\n                }\r\n                line.append(wrapMarks(view, active), openStart);\r\n                this.atCursorPos = cursorAfter;\r\n                this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;\r\n                if (this.pendingBuffer)\r\n                    this.bufferMarks = active.slice();\r\n            }\r\n        }\r\n        else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration\r\n            this.getLine().addLineDeco(deco);\r\n        }\r\n        if (len) {\r\n            // Advance the iterator past the replaced content\r\n            if (this.textOff + len <= this.text.length) {\r\n                this.textOff += len;\r\n            }\r\n            else {\r\n                this.skip += len - (this.text.length - this.textOff);\r\n                this.text = \"\";\r\n                this.textOff = 0;\r\n            }\r\n            this.pos = to;\r\n        }\r\n        if (this.openStart < 0)\r\n            this.openStart = openStart;\r\n    }\r\n    static build(text, from, to, decorations, dynamicDecorationMap) {\r\n        let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);\r\n        builder.openEnd = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.spans(decorations, from, to, builder);\r\n        if (builder.openStart < 0)\r\n            builder.openStart = builder.openEnd;\r\n        builder.finish(builder.openEnd);\r\n        return builder;\r\n    }\r\n}\r\nfunction wrapMarks(view, active) {\r\n    for (let mark of active)\r\n        view = new MarkView(mark, [view], view.length);\r\n    return view;\r\n}\r\nclass NullWidget extends WidgetType {\r\n    constructor(tag) {\r\n        super();\r\n        this.tag = tag;\r\n    }\r\n    eq(other) { return other.tag == this.tag; }\r\n    toDOM() { return document.createElement(this.tag); }\r\n    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }\r\n}\r\n\r\nconst clickAddsSelectionRange = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst dragMovesSelection$1 = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst mouseSelectionStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst exceptionSink = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst updateListener = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst inputHandler = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst perLineTextDirection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine: values => values.some(x => x)\r\n});\r\nconst nativeSelectionHidden = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine: values => values.some(x => x)\r\n});\r\nclass ScrollTarget {\r\n    constructor(range, y = \"nearest\", x = \"nearest\", yMargin = 5, xMargin = 5) {\r\n        this.range = range;\r\n        this.y = y;\r\n        this.x = x;\r\n        this.yMargin = yMargin;\r\n        this.xMargin = xMargin;\r\n    }\r\n    map(changes) {\r\n        return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);\r\n    }\r\n}\r\nconst scrollIntoView = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define({ map: (t, ch) => t.map(ch) });\r\n/**\r\nLog or report an unhandled exception in client code. Should\r\nprobably only be used by extension code that allows client code to\r\nprovide functions, and calls those functions in a context where an\r\nexception can't be propagated to calling code in a reasonable way\r\n(for example when in an event handler).\r\n\r\nEither calls a handler registered with\r\n[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),\r\n`window.onerror`, if defined, or `console.error` (in which case\r\nit'll pass `context`, when given, as first argument).\r\n*/\r\nfunction logException(state, exception, context) {\r\n    let handler = state.facet(exceptionSink);\r\n    if (handler.length)\r\n        handler[0](exception);\r\n    else if (window.onerror)\r\n        window.onerror(String(exception), context, undefined, undefined, exception);\r\n    else if (context)\r\n        console.error(context + \":\", exception);\r\n    else\r\n        console.error(exception);\r\n}\r\nconst editable = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({ combine: values => values.length ? values[0] : true });\r\nlet nextPluginID = 0;\r\nconst viewPlugin = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\n/**\r\nView plugins associate stateful values with a view. They can\r\ninfluence the way the content is drawn, and are notified of things\r\nthat happen in the view.\r\n*/\r\nclass ViewPlugin {\r\n    constructor(\r\n    /**\r\n    @internal\r\n    */\r\n    id, \r\n    /**\r\n    @internal\r\n    */\r\n    create, \r\n    /**\r\n    @internal\r\n    */\r\n    domEventHandlers, buildExtensions) {\r\n        this.id = id;\r\n        this.create = create;\r\n        this.domEventHandlers = domEventHandlers;\r\n        this.extension = buildExtensions(this);\r\n    }\r\n    /**\r\n    Define a plugin from a constructor function that creates the\r\n    plugin's value, given an editor view.\r\n    */\r\n    static define(create, spec) {\r\n        const { eventHandlers, provide, decorations: deco } = spec || {};\r\n        return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {\r\n            let ext = [viewPlugin.of(plugin)];\r\n            if (deco)\r\n                ext.push(decorations.of(view => {\r\n                    let pluginInst = view.plugin(plugin);\r\n                    return pluginInst ? deco(pluginInst) : Decoration.none;\r\n                }));\r\n            if (provide)\r\n                ext.push(provide(plugin));\r\n            return ext;\r\n        });\r\n    }\r\n    /**\r\n    Create a plugin for a class whose constructor takes a single\r\n    editor view as argument.\r\n    */\r\n    static fromClass(cls, spec) {\r\n        return ViewPlugin.define(view => new cls(view), spec);\r\n    }\r\n}\r\nclass PluginInstance {\r\n    constructor(spec) {\r\n        this.spec = spec;\r\n        // When starting an update, all plugins have this field set to the\r\n        // update object, indicating they need to be updated. When finished\r\n        // updating, it is set to `false`. Retrieving a plugin that needs to\r\n        // be updated with `view.plugin` forces an eager update.\r\n        this.mustUpdate = null;\r\n        // This is null when the plugin is initially created, but\r\n        // initialized on the first update.\r\n        this.value = null;\r\n    }\r\n    update(view) {\r\n        if (!this.value) {\r\n            if (this.spec) {\r\n                try {\r\n                    this.value = this.spec.create(view);\r\n                }\r\n                catch (e) {\r\n                    logException(view.state, e, \"CodeMirror plugin crashed\");\r\n                    this.deactivate();\r\n                }\r\n            }\r\n        }\r\n        else if (this.mustUpdate) {\r\n            let update = this.mustUpdate;\r\n            this.mustUpdate = null;\r\n            if (this.value.update) {\r\n                try {\r\n                    this.value.update(update);\r\n                }\r\n                catch (e) {\r\n                    logException(update.state, e, \"CodeMirror plugin crashed\");\r\n                    if (this.value.destroy)\r\n                        try {\r\n                            this.value.destroy();\r\n                        }\r\n                        catch (_) { }\r\n                    this.deactivate();\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    destroy(view) {\r\n        var _a;\r\n        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {\r\n            try {\r\n                this.value.destroy();\r\n            }\r\n            catch (e) {\r\n                logException(view.state, e, \"CodeMirror plugin crashed\");\r\n            }\r\n        }\r\n    }\r\n    deactivate() {\r\n        this.spec = this.value = null;\r\n    }\r\n}\r\nconst editorAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst contentAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\n// Provide decorations\r\nconst decorations = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst atomicRanges = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst scrollMargins = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst styleModule = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nclass ChangedRange {\r\n    constructor(fromA, toA, fromB, toB) {\r\n        this.fromA = fromA;\r\n        this.toA = toA;\r\n        this.fromB = fromB;\r\n        this.toB = toB;\r\n    }\r\n    join(other) {\r\n        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));\r\n    }\r\n    addToSet(set) {\r\n        let i = set.length, me = this;\r\n        for (; i > 0; i--) {\r\n            let range = set[i - 1];\r\n            if (range.fromA > me.toA)\r\n                continue;\r\n            if (range.toA < me.fromA)\r\n                break;\r\n            me = me.join(range);\r\n            set.splice(i - 1, 1);\r\n        }\r\n        set.splice(i, 0, me);\r\n        return set;\r\n    }\r\n    static extendWithRanges(diff, ranges) {\r\n        if (ranges.length == 0)\r\n            return diff;\r\n        let result = [];\r\n        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {\r\n            let next = dI == diff.length ? null : diff[dI], off = posA - posB;\r\n            let end = next ? next.fromB : 1e9;\r\n            while (rI < ranges.length && ranges[rI] < end) {\r\n                let from = ranges[rI], to = ranges[rI + 1];\r\n                let fromB = Math.max(posB, from), toB = Math.min(end, to);\r\n                if (fromB <= toB)\r\n                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);\r\n                if (to > end)\r\n                    break;\r\n                else\r\n                    rI += 2;\r\n            }\r\n            if (!next)\r\n                return result;\r\n            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);\r\n            posA = next.toA;\r\n            posB = next.toB;\r\n        }\r\n    }\r\n}\r\n/**\r\nView [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this\r\nclass, which describe what happened, whenever the view is updated.\r\n*/\r\nclass ViewUpdate {\r\n    constructor(\r\n    /**\r\n    The editor view that the update is associated with.\r\n    */\r\n    view, \r\n    /**\r\n    The new editor state.\r\n    */\r\n    state, \r\n    /**\r\n    The transactions involved in the update. May be empty.\r\n    */\r\n    transactions) {\r\n        this.view = view;\r\n        this.state = state;\r\n        this.transactions = transactions;\r\n        /**\r\n        @internal\r\n        */\r\n        this.flags = 0;\r\n        this.startState = view.state;\r\n        this.changes = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.ChangeSet.empty(this.startState.doc.length);\r\n        for (let tr of transactions)\r\n            this.changes = this.changes.compose(tr.changes);\r\n        let changedRanges = [];\r\n        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));\r\n        this.changedRanges = changedRanges;\r\n        let focus = view.hasFocus;\r\n        if (focus != view.inputState.notifiedFocused) {\r\n            view.inputState.notifiedFocused = focus;\r\n            this.flags |= 1 /* UpdateFlag.Focus */;\r\n        }\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    static create(view, state, transactions) {\r\n        return new ViewUpdate(view, state, transactions);\r\n    }\r\n    /**\r\n    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or\r\n    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this\r\n    update.\r\n    */\r\n    get viewportChanged() {\r\n        return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;\r\n    }\r\n    /**\r\n    Indicates whether the height of a block element in the editor\r\n    changed in this update.\r\n    */\r\n    get heightChanged() {\r\n        return (this.flags & 2 /* UpdateFlag.Height */) > 0;\r\n    }\r\n    /**\r\n    Returns true when the document was modified or the size of the\r\n    editor, or elements within the editor, changed.\r\n    */\r\n    get geometryChanged() {\r\n        return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;\r\n    }\r\n    /**\r\n    True when this update indicates a focus change.\r\n    */\r\n    get focusChanged() {\r\n        return (this.flags & 1 /* UpdateFlag.Focus */) > 0;\r\n    }\r\n    /**\r\n    Whether the document changed in this update.\r\n    */\r\n    get docChanged() {\r\n        return !this.changes.empty;\r\n    }\r\n    /**\r\n    Whether the selection was explicitly set in this update.\r\n    */\r\n    get selectionSet() {\r\n        return this.transactions.some(tr => tr.selection);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    get empty() { return this.flags == 0 && this.transactions.length == 0; }\r\n}\r\n\r\n/**\r\nUsed to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\r\n*/\r\nvar Direction = /*@__PURE__*/(function (Direction) {\r\n    // (These are chosen to match the base levels, in bidi algorithm\r\n    // terms, of spans in that direction.)\r\n    /**\r\n    Left-to-right.\r\n    */\r\n    Direction[Direction[\"LTR\"] = 0] = \"LTR\";\r\n    /**\r\n    Right-to-left.\r\n    */\r\n    Direction[Direction[\"RTL\"] = 1] = \"RTL\";\r\nreturn Direction})(Direction || (Direction = {}));\r\nconst LTR = Direction.LTR, RTL = Direction.RTL;\r\n// Decode a string with each type encoded as log2(type)\r\nfunction dec(str) {\r\n    let result = [];\r\n    for (let i = 0; i < str.length; i++)\r\n        result.push(1 << +str[i]);\r\n    return result;\r\n}\r\n// Character types for codepoints 0 to 0xf8\r\nconst LowTypes = /*@__PURE__*/dec(\"88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008\");\r\n// Character types for codepoints 0x600 to 0x6f9\r\nconst ArabicTypes = /*@__PURE__*/dec(\"4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333\");\r\nconst Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];\r\n// There's a lot more in\r\n// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,\r\n// which are left out to keep code size down.\r\nfor (let p of [\"()\", \"[]\", \"{}\"]) {\r\n    let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);\r\n    Brackets[l] = r;\r\n    Brackets[r] = -l;\r\n}\r\nfunction charType(ch) {\r\n    return ch <= 0xf7 ? LowTypes[ch] :\r\n        0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :\r\n            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :\r\n                0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :\r\n                    0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ :\r\n                        0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ :\r\n                            ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;\r\n}\r\nconst BidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/;\r\n/**\r\nRepresents a contiguous range of text that has a single direction\r\n(as in left-to-right or right-to-left).\r\n*/\r\nclass BidiSpan {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    /**\r\n    The start of the span (relative to the start of the line).\r\n    */\r\n    from, \r\n    /**\r\n    The end of the span.\r\n    */\r\n    to, \r\n    /**\r\n    The [\"bidi\r\n    level\"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)\r\n    of the span (in this context, 0 means\r\n    left-to-right, 1 means right-to-left, 2 means left-to-right\r\n    number inside right-to-left text).\r\n    */\r\n    level) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.level = level;\r\n    }\r\n    /**\r\n    The direction of this span.\r\n    */\r\n    get dir() { return this.level % 2 ? RTL : LTR; }\r\n    /**\r\n    @internal\r\n    */\r\n    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }\r\n    /**\r\n    @internal\r\n    */\r\n    static find(order, index, level, assoc) {\r\n        let maybe = -1;\r\n        for (let i = 0; i < order.length; i++) {\r\n            let span = order[i];\r\n            if (span.from <= index && span.to >= index) {\r\n                if (span.level == level)\r\n                    return i;\r\n                // When multiple spans match, if assoc != 0, take the one that\r\n                // covers that side, otherwise take the one with the minimum\r\n                // level.\r\n                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))\r\n                    maybe = i;\r\n            }\r\n        }\r\n        if (maybe < 0)\r\n            throw new RangeError(\"Index out of range\");\r\n        return maybe;\r\n    }\r\n}\r\n// Reused array of character types\r\nconst types = [];\r\nfunction computeOrder(line, direction) {\r\n    let len = line.length, outerType = direction == LTR ? 1 /* T.L */ : 2 /* T.R */, oppositeType = direction == LTR ? 2 /* T.R */ : 1 /* T.L */;\r\n    if (!line || outerType == 1 /* T.L */ && !BidiRE.test(line))\r\n        return trivialOrder(len);\r\n    // W1. Examine each non-spacing mark (NSM) in the level run, and\r\n    // change the type of the NSM to the type of the previous\r\n    // character. If the NSM is at the start of the level run, it will\r\n    // get the type of sor.\r\n    // W2. Search backwards from each instance of a European number\r\n    // until the first strong type (R, L, AL, or sor) is found. If an\r\n    // AL is found, change the type of the European number to Arabic\r\n    // number.\r\n    // W3. Change all ALs to R.\r\n    // (Left after this: L, R, EN, AN, ET, CS, NI)\r\n    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {\r\n        let type = charType(line.charCodeAt(i));\r\n        if (type == 512 /* T.NSM */)\r\n            type = prev;\r\n        else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)\r\n            type = 16 /* T.AN */;\r\n        types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;\r\n        if (type & 7 /* T.Strong */)\r\n            prevStrong = type;\r\n        prev = type;\r\n    }\r\n    // W5. A sequence of European terminators adjacent to European\r\n    // numbers changes to all European numbers.\r\n    // W6. Otherwise, separators and terminators change to Other\r\n    // Neutral.\r\n    // W7. Search backwards from each instance of a European number\r\n    // until the first strong type (R, L, or sor) is found. If an L is\r\n    // found, then change the type of the European number to L.\r\n    // (Left after this: L, R, EN+AN, NI)\r\n    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {\r\n        let type = types[i];\r\n        if (type == 128 /* T.CS */) {\r\n            if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))\r\n                type = types[i] = prev;\r\n            else\r\n                types[i] = 256 /* T.NI */;\r\n        }\r\n        else if (type == 64 /* T.ET */) {\r\n            let end = i + 1;\r\n            while (end < len && types[end] == 64 /* T.ET */)\r\n                end++;\r\n            let replace = (i && prev == 8 /* T.EN */) || (end < len && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;\r\n            for (let j = i; j < end; j++)\r\n                types[j] = replace;\r\n            i = end - 1;\r\n        }\r\n        else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {\r\n            types[i] = 1 /* T.L */;\r\n        }\r\n        prev = type;\r\n        if (type & 7 /* T.Strong */)\r\n            prevStrong = type;\r\n    }\r\n    // N0. Process bracket pairs in an isolating run sequence\r\n    // sequentially in the logical order of the text positions of the\r\n    // opening paired brackets using the logic given below. Within this\r\n    // scope, bidirectional types EN and AN are treated as R.\r\n    for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {\r\n        // Keeps [startIndex, type, strongSeen] triples for each open\r\n        // bracket on BracketStack.\r\n        if (br = Brackets[ch = line.charCodeAt(i)]) {\r\n            if (br < 0) { // Closing bracket\r\n                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\r\n                    if (BracketStack[sJ + 1] == -br) {\r\n                        let flags = BracketStack[sJ + 2];\r\n                        let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :\r\n                            !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :\r\n                                (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;\r\n                        if (type)\r\n                            types[i] = types[BracketStack[sJ]] = type;\r\n                        sI = sJ;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {\r\n                break;\r\n            }\r\n            else {\r\n                BracketStack[sI++] = i;\r\n                BracketStack[sI++] = ch;\r\n                BracketStack[sI++] = context;\r\n            }\r\n        }\r\n        else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {\r\n            let embed = type == outerType;\r\n            context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;\r\n            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\r\n                let cur = BracketStack[sJ + 2];\r\n                if (cur & 2 /* Bracketed.EmbedInside */)\r\n                    break;\r\n                if (embed) {\r\n                    BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;\r\n                }\r\n                else {\r\n                    if (cur & 4 /* Bracketed.OppositeInside */)\r\n                        break;\r\n                    BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // N1. A sequence of neutrals takes the direction of the\r\n    // surrounding strong text if the text on both sides has the same\r\n    // direction. European and Arabic numbers act as if they were R in\r\n    // terms of their influence on neutrals. Start-of-level-run (sor)\r\n    // and end-of-level-run (eor) are used at level run boundaries.\r\n    // N2. Any remaining neutrals take the embedding direction.\r\n    // (Left after this: L, R, EN+AN)\r\n    for (let i = 0; i < len; i++) {\r\n        if (types[i] == 256 /* T.NI */) {\r\n            let end = i + 1;\r\n            while (end < len && types[end] == 256 /* T.NI */)\r\n                end++;\r\n            let beforeL = (i ? types[i - 1] : outerType) == 1 /* T.L */;\r\n            let afterL = (end < len ? types[end] : outerType) == 1 /* T.L */;\r\n            let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;\r\n            for (let j = i; j < end; j++)\r\n                types[j] = replace;\r\n            i = end - 1;\r\n        }\r\n    }\r\n    // Here we depart from the documented algorithm, in order to avoid\r\n    // building up an actual levels array. Since there are only three\r\n    // levels (0, 1, 2) in an implementation that doesn't take\r\n    // explicit embedding into account, we can build up the order on\r\n    // the fly, without following the level-based algorithm.\r\n    let order = [];\r\n    if (outerType == 1 /* T.L */) {\r\n        for (let i = 0; i < len;) {\r\n            let start = i, rtl = types[i++] != 1 /* T.L */;\r\n            while (i < len && rtl == (types[i] != 1 /* T.L */))\r\n                i++;\r\n            if (rtl) {\r\n                for (let j = i; j > start;) {\r\n                    let end = j, l = types[--j] != 2 /* T.R */;\r\n                    while (j > start && l == (types[j - 1] != 2 /* T.R */))\r\n                        j--;\r\n                    order.push(new BidiSpan(j, end, l ? 2 : 1));\r\n                }\r\n            }\r\n            else {\r\n                order.push(new BidiSpan(start, i, 0));\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < len;) {\r\n            let start = i, rtl = types[i++] == 2 /* T.R */;\r\n            while (i < len && rtl == (types[i] == 2 /* T.R */))\r\n                i++;\r\n            order.push(new BidiSpan(start, i, rtl ? 1 : 2));\r\n        }\r\n    }\r\n    return order;\r\n}\r\nfunction trivialOrder(length) {\r\n    return [new BidiSpan(0, length, 0)];\r\n}\r\nlet movedOver = \"\";\r\nfunction moveVisually(line, order, dir, start, forward) {\r\n    var _a;\r\n    let startIndex = start.head - line.from, spanI = -1;\r\n    if (startIndex == 0) {\r\n        if (!forward || !line.length)\r\n            return null;\r\n        if (order[0].level != dir) {\r\n            startIndex = order[0].side(false, dir);\r\n            spanI = 0;\r\n        }\r\n    }\r\n    else if (startIndex == line.length) {\r\n        if (forward)\r\n            return null;\r\n        let last = order[order.length - 1];\r\n        if (last.level != dir) {\r\n            startIndex = last.side(true, dir);\r\n            spanI = order.length - 1;\r\n        }\r\n    }\r\n    if (spanI < 0)\r\n        spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);\r\n    let span = order[spanI];\r\n    // End of span. (But not end of line--that was checked for above.)\r\n    if (startIndex == span.side(forward, dir)) {\r\n        span = order[spanI += forward ? 1 : -1];\r\n        startIndex = span.side(!forward, dir);\r\n    }\r\n    let indexForward = forward == (span.dir == dir);\r\n    let nextIndex = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findClusterBreak)(line.text, startIndex, indexForward);\r\n    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));\r\n    if (nextIndex != span.side(forward, dir))\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);\r\n    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];\r\n    if (!nextSpan && span.level != dir)\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);\r\n    if (nextSpan && nextSpan.level < span.level)\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);\r\n}\r\n\r\nconst LineBreakPlaceholder = \"\\uffff\";\r\nclass DOMReader {\r\n    constructor(points, state) {\r\n        this.points = points;\r\n        this.text = \"\";\r\n        this.lineSeparator = state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorState.lineSeparator);\r\n    }\r\n    append(text) {\r\n        this.text += text;\r\n    }\r\n    lineBreak() {\r\n        this.text += LineBreakPlaceholder;\r\n    }\r\n    readRange(start, end) {\r\n        if (!start)\r\n            return this;\r\n        let parent = start.parentNode;\r\n        for (let cur = start;;) {\r\n            this.findPointBefore(parent, cur);\r\n            this.readNode(cur);\r\n            let next = cur.nextSibling;\r\n            if (next == end)\r\n                break;\r\n            let view = ContentView.get(cur), nextView = ContentView.get(next);\r\n            if (view && nextView ? view.breakAfter :\r\n                (view ? view.breakAfter : isBlockElement(cur)) ||\r\n                    (isBlockElement(next) && (cur.nodeName != \"BR\" || cur.cmIgnore)))\r\n                this.lineBreak();\r\n            cur = next;\r\n        }\r\n        this.findPointBefore(parent, end);\r\n        return this;\r\n    }\r\n    readTextNode(node) {\r\n        let text = node.nodeValue;\r\n        for (let point of this.points)\r\n            if (point.node == node)\r\n                point.pos = this.text.length + Math.min(point.offset, text.length);\r\n        for (let off = 0, re = this.lineSeparator ? null : /\\r\\n?|\\n/g;;) {\r\n            let nextBreak = -1, breakSize = 1, m;\r\n            if (this.lineSeparator) {\r\n                nextBreak = text.indexOf(this.lineSeparator, off);\r\n                breakSize = this.lineSeparator.length;\r\n            }\r\n            else if (m = re.exec(text)) {\r\n                nextBreak = m.index;\r\n                breakSize = m[0].length;\r\n            }\r\n            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));\r\n            if (nextBreak < 0)\r\n                break;\r\n            this.lineBreak();\r\n            if (breakSize > 1)\r\n                for (let point of this.points)\r\n                    if (point.node == node && point.pos > this.text.length)\r\n                        point.pos -= breakSize - 1;\r\n            off = nextBreak + breakSize;\r\n        }\r\n    }\r\n    readNode(node) {\r\n        if (node.cmIgnore)\r\n            return;\r\n        let view = ContentView.get(node);\r\n        let fromView = view && view.overrideDOMText;\r\n        if (fromView != null) {\r\n            this.findPointInside(node, fromView.length);\r\n            for (let i = fromView.iter(); !i.next().done;) {\r\n                if (i.lineBreak)\r\n                    this.lineBreak();\r\n                else\r\n                    this.append(i.value);\r\n            }\r\n        }\r\n        else if (node.nodeType == 3) {\r\n            this.readTextNode(node);\r\n        }\r\n        else if (node.nodeName == \"BR\") {\r\n            if (node.nextSibling)\r\n                this.lineBreak();\r\n        }\r\n        else if (node.nodeType == 1) {\r\n            this.readRange(node.firstChild, null);\r\n        }\r\n    }\r\n    findPointBefore(node, next) {\r\n        for (let point of this.points)\r\n            if (point.node == node && node.childNodes[point.offset] == next)\r\n                point.pos = this.text.length;\r\n    }\r\n    findPointInside(node, maxLen) {\r\n        for (let point of this.points)\r\n            if (node.nodeType == 3 ? point.node == node : node.contains(point.node))\r\n                point.pos = this.text.length + Math.min(maxLen, point.offset);\r\n    }\r\n}\r\nfunction isBlockElement(node) {\r\n    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\\d|SECTION|PRE)$/.test(node.nodeName);\r\n}\r\nclass DOMPoint {\r\n    constructor(node, offset) {\r\n        this.node = node;\r\n        this.offset = offset;\r\n        this.pos = -1;\r\n    }\r\n}\r\n\r\nclass DocView extends ContentView {\r\n    constructor(view) {\r\n        super();\r\n        this.view = view;\r\n        this.compositionDeco = Decoration.none;\r\n        this.decorations = [];\r\n        this.dynamicDecorationMap = [];\r\n        // Track a minimum width for the editor. When measuring sizes in\r\n        // measureVisibleLineHeights, this is updated to point at the width\r\n        // of a given element and its extent in the document. When a change\r\n        // happens in that range, these are reset. That way, once we've seen\r\n        // a line/element of a given length, we keep the editor wide enough\r\n        // to fit at least that element, until it is changed, at which point\r\n        // we forget it again.\r\n        this.minWidth = 0;\r\n        this.minWidthFrom = 0;\r\n        this.minWidthTo = 0;\r\n        // Track whether the DOM selection was set in a lossy way, so that\r\n        // we don't mess it up when reading it back it\r\n        this.impreciseAnchor = null;\r\n        this.impreciseHead = null;\r\n        this.forceSelection = false;\r\n        // Used by the resize observer to ignore resizes that we caused\r\n        // ourselves\r\n        this.lastUpdate = Date.now();\r\n        this.setDOM(view.contentDOM);\r\n        this.children = [new LineView];\r\n        this.children[0].setParent(this);\r\n        this.updateDeco();\r\n        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);\r\n    }\r\n    get editorView() { return this.view; }\r\n    get length() { return this.view.state.doc.length; }\r\n    // Update the document view to a given state. scrollIntoView can be\r\n    // used as a hint to compute a new viewport that includes that\r\n    // position, if we know the editor is going to scroll that position\r\n    // into view.\r\n    update(update) {\r\n        let changedRanges = update.changedRanges;\r\n        if (this.minWidth > 0 && changedRanges.length) {\r\n            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {\r\n                this.minWidth = this.minWidthFrom = this.minWidthTo = 0;\r\n            }\r\n            else {\r\n                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);\r\n                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);\r\n            }\r\n        }\r\n        if (this.view.inputState.composing < 0)\r\n            this.compositionDeco = Decoration.none;\r\n        else if (update.transactions.length || this.dirty)\r\n            this.compositionDeco = computeCompositionDeco(this.view, update.changes);\r\n        // When the DOM nodes around the selection are moved to another\r\n        // parent, Chrome sometimes reports a different selection through\r\n        // getSelection than the one that it actually shows to the user.\r\n        // This forces a selection update when lines are joined to work\r\n        // around that. Issue #54\r\n        if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update &&\r\n            update.state.doc.lines != update.startState.doc.lines)\r\n            this.forceSelection = true;\r\n        let prevDeco = this.decorations, deco = this.updateDeco();\r\n        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);\r\n        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);\r\n        if (this.dirty == 0 /* Dirty.Not */ && changedRanges.length == 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            this.updateInner(changedRanges, update.startState.doc.length);\r\n            if (update.transactions.length)\r\n                this.lastUpdate = Date.now();\r\n            return true;\r\n        }\r\n    }\r\n    // Used by update and the constructor do perform the actual DOM\r\n    // update\r\n    updateInner(changes, oldLength) {\r\n        this.view.viewState.mustMeasureContent = true;\r\n        this.updateChildren(changes, oldLength);\r\n        let { observer } = this.view;\r\n        observer.ignore(() => {\r\n            // Lock the height during redrawing, since Chrome sometimes\r\n            // messes with the scroll position during DOM mutation (though\r\n            // no relayout is triggered and I cannot imagine how it can\r\n            // recompute the scroll position without a layout)\r\n            this.dom.style.height = this.view.viewState.contentHeight + \"px\";\r\n            this.dom.style.flexBasis = this.minWidth ? this.minWidth + \"px\" : \"\";\r\n            // Chrome will sometimes, when DOM mutations occur directly\r\n            // around the selection, get confused and report a different\r\n            // selection from the one it displays (issue #218). This tries\r\n            // to detect that situation.\r\n            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;\r\n            this.sync(track);\r\n            this.dirty = 0 /* Dirty.Not */;\r\n            if (track && (track.written || observer.selectionRange.focusNode != track.node))\r\n                this.forceSelection = true;\r\n            this.dom.style.height = \"\";\r\n        });\r\n        let gaps = [];\r\n        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)\r\n            for (let child of this.children)\r\n                if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)\r\n                    gaps.push(child.dom);\r\n        observer.updateGaps(gaps);\r\n    }\r\n    updateChildren(changes, oldLength) {\r\n        let cursor = this.childCursor(oldLength);\r\n        for (let i = changes.length - 1;; i--) {\r\n            let next = i >= 0 ? changes[i] : null;\r\n            if (!next)\r\n                break;\r\n            let { fromA, toA, fromB, toB } = next;\r\n            let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);\r\n            let { i: toI, off: toOff } = cursor.findPos(toA, 1);\r\n            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);\r\n            replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);\r\n        }\r\n    }\r\n    // Sync the DOM selection to this.state.selection\r\n    updateSelection(mustRead = false, fromPointer = false) {\r\n        if (mustRead || !this.view.observer.selectionRange.focusNode)\r\n            this.view.observer.readSelectionRange();\r\n        if (!(fromPointer || this.mayControlSelection()))\r\n            return;\r\n        let force = this.forceSelection;\r\n        this.forceSelection = false;\r\n        let main = this.view.state.selection.main;\r\n        // FIXME need to handle the case where the selection falls inside a block range\r\n        let anchor = this.domAtPos(main.anchor);\r\n        let head = main.empty ? anchor : this.domAtPos(main.head);\r\n        // Always reset on Firefox when next to an uneditable node to\r\n        // avoid invisible cursor bugs (#111)\r\n        if (browser.gecko && main.empty && betweenUneditable(anchor)) {\r\n            let dummy = document.createTextNode(\"\");\r\n            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));\r\n            anchor = head = new DOMPos(dummy, 0);\r\n            force = true;\r\n        }\r\n        let domSel = this.view.observer.selectionRange;\r\n        // If the selection is already here, or in an equivalent position, don't touch it\r\n        if (force || !domSel.focusNode ||\r\n            !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||\r\n            !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {\r\n            this.view.observer.ignore(() => {\r\n                // Chrome Android will hide the virtual keyboard when tapping\r\n                // inside an uneditable node, and not bring it back when we\r\n                // move the cursor to its proper position. This tries to\r\n                // restore the keyboard by cycling focus.\r\n                if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&\r\n                    inUneditable(domSel.focusNode, this.dom)) {\r\n                    this.dom.blur();\r\n                    this.dom.focus({ preventScroll: true });\r\n                }\r\n                let rawSel = getSelection(this.view.root);\r\n                if (!rawSel) ;\r\n                else if (main.empty) {\r\n                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076\r\n                    if (browser.gecko) {\r\n                        let nextTo = nextToUneditable(anchor.node, anchor.offset);\r\n                        if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {\r\n                            let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);\r\n                            if (text)\r\n                                anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);\r\n                        }\r\n                    }\r\n                    rawSel.collapse(anchor.node, anchor.offset);\r\n                    if (main.bidiLevel != null && domSel.cursorBidiLevel != null)\r\n                        domSel.cursorBidiLevel = main.bidiLevel;\r\n                }\r\n                else if (rawSel.extend) {\r\n                    // Selection.extend can be used to create an 'inverted' selection\r\n                    // (one where the focus is before the anchor), but not all\r\n                    // browsers support it yet.\r\n                    rawSel.collapse(anchor.node, anchor.offset);\r\n                    // Safari will ignore the call above when the editor is\r\n                    // hidden, and then raise an error on the call to extend\r\n                    // (#940).\r\n                    try {\r\n                        rawSel.extend(head.node, head.offset);\r\n                    }\r\n                    catch (_) { }\r\n                }\r\n                else {\r\n                    // Primitive (IE) way\r\n                    let range = document.createRange();\r\n                    if (main.anchor > main.head)\r\n                        [anchor, head] = [head, anchor];\r\n                    range.setEnd(head.node, head.offset);\r\n                    range.setStart(anchor.node, anchor.offset);\r\n                    rawSel.removeAllRanges();\r\n                    rawSel.addRange(range);\r\n                }\r\n            });\r\n            this.view.observer.setSelectionRange(anchor, head);\r\n        }\r\n        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);\r\n        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);\r\n    }\r\n    enforceCursorAssoc() {\r\n        if (this.compositionDeco.size)\r\n            return;\r\n        let { view } = this, cursor = view.state.selection.main;\r\n        let sel = getSelection(view.root);\r\n        let { anchorNode, anchorOffset } = view.observer.selectionRange;\r\n        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)\r\n            return;\r\n        let line = LineView.find(this, cursor.head);\r\n        if (!line)\r\n            return;\r\n        let lineStart = line.posAtStart;\r\n        if (cursor.head == lineStart || cursor.head == lineStart + line.length)\r\n            return;\r\n        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);\r\n        if (!before || !after || before.bottom > after.top)\r\n            return;\r\n        let dom = this.domAtPos(cursor.head + cursor.assoc);\r\n        sel.collapse(dom.node, dom.offset);\r\n        sel.modify(\"move\", cursor.assoc < 0 ? \"forward\" : \"backward\", \"lineboundary\");\r\n        // This can go wrong in corner cases like single-character lines,\r\n        // so check and reset if necessary.\r\n        view.observer.readSelectionRange();\r\n        let newRange = view.observer.selectionRange;\r\n        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)\r\n            sel.collapse(anchorNode, anchorOffset);\r\n    }\r\n    mayControlSelection() {\r\n        let active = this.view.root.activeElement;\r\n        return active == this.dom ||\r\n            hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));\r\n    }\r\n    nearest(dom) {\r\n        for (let cur = dom; cur;) {\r\n            let domView = ContentView.get(cur);\r\n            if (domView && domView.rootView == this)\r\n                return domView;\r\n            cur = cur.parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    posFromDOM(node, offset) {\r\n        let view = this.nearest(node);\r\n        if (!view)\r\n            throw new RangeError(\"Trying to find position for a DOM position outside of the document\");\r\n        return view.localPosFromDOM(node, offset) + view.posAtStart;\r\n    }\r\n    domAtPos(pos) {\r\n        let { i, off } = this.childCursor().findPos(pos, -1);\r\n        for (; i < this.children.length - 1;) {\r\n            let child = this.children[i];\r\n            if (off < child.length || child instanceof LineView)\r\n                break;\r\n            i++;\r\n            off = 0;\r\n        }\r\n        return this.children[i].domAtPos(off);\r\n    }\r\n    coordsAt(pos, side) {\r\n        for (let off = this.length, i = this.children.length - 1;; i--) {\r\n            let child = this.children[i], start = off - child.breakAfter - child.length;\r\n            if (pos > start ||\r\n                (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&\r\n                    (!i || side == 2 || this.children[i - 1].breakAfter ||\r\n                        (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))\r\n                return child.coordsAt(pos - start, side);\r\n            off = start;\r\n        }\r\n    }\r\n    measureVisibleLineHeights(viewport) {\r\n        let result = [], { from, to } = viewport;\r\n        let contentWidth = this.view.contentDOM.clientWidth;\r\n        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;\r\n        let widest = -1, ltr = this.view.textDirection == Direction.LTR;\r\n        for (let pos = 0, i = 0; i < this.children.length; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (end > to)\r\n                break;\r\n            if (pos >= from) {\r\n                let childRect = child.dom.getBoundingClientRect();\r\n                result.push(childRect.height);\r\n                if (isWider) {\r\n                    let last = child.dom.lastChild;\r\n                    let rects = last ? clientRectsFor(last) : [];\r\n                    if (rects.length) {\r\n                        let rect = rects[rects.length - 1];\r\n                        let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;\r\n                        if (width > widest) {\r\n                            widest = width;\r\n                            this.minWidth = contentWidth;\r\n                            this.minWidthFrom = pos;\r\n                            this.minWidthTo = end;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            pos = end + child.breakAfter;\r\n        }\r\n        return result;\r\n    }\r\n    textDirectionAt(pos) {\r\n        let { i } = this.childPos(pos, 1);\r\n        return getComputedStyle(this.children[i].dom).direction == \"rtl\" ? Direction.RTL : Direction.LTR;\r\n    }\r\n    measureTextSize() {\r\n        for (let child of this.children) {\r\n            if (child instanceof LineView) {\r\n                let measure = child.measureTextSize();\r\n                if (measure)\r\n                    return measure;\r\n            }\r\n        }\r\n        // If no workable line exists, force a layout of a measurable element\r\n        let dummy = document.createElement(\"div\"), lineHeight, charWidth;\r\n        dummy.className = \"cm-line\";\r\n        dummy.style.width = \"99999px\";\r\n        dummy.textContent = \"abc def ghi jkl mno pqr stu\";\r\n        this.view.observer.ignore(() => {\r\n            this.dom.appendChild(dummy);\r\n            let rect = clientRectsFor(dummy.firstChild)[0];\r\n            lineHeight = dummy.getBoundingClientRect().height;\r\n            charWidth = rect ? rect.width / 27 : 7;\r\n            dummy.remove();\r\n        });\r\n        return { lineHeight, charWidth };\r\n    }\r\n    childCursor(pos = this.length) {\r\n        // Move back to start of last element when possible, so that\r\n        // `ChildCursor.findPos` doesn't have to deal with the edge case\r\n        // of being after the last element.\r\n        let i = this.children.length;\r\n        if (i)\r\n            pos -= this.children[--i].length;\r\n        return new ChildCursor(this.children, pos, i);\r\n    }\r\n    computeBlockGapDeco() {\r\n        let deco = [], vs = this.view.viewState;\r\n        for (let pos = 0, i = 0;; i++) {\r\n            let next = i == vs.viewports.length ? null : vs.viewports[i];\r\n            let end = next ? next.from - 1 : this.length;\r\n            if (end > pos) {\r\n                let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;\r\n                deco.push(Decoration.replace({\r\n                    widget: new BlockGapWidget(height),\r\n                    block: true,\r\n                    inclusive: true,\r\n                    isBlockGap: true,\r\n                }).range(pos, end));\r\n            }\r\n            if (!next)\r\n                break;\r\n            pos = next.to + 1;\r\n        }\r\n        return Decoration.set(deco);\r\n    }\r\n    updateDeco() {\r\n        let allDeco = this.view.state.facet(decorations).map((d, i) => {\r\n            let dynamic = this.dynamicDecorationMap[i] = typeof d == \"function\";\r\n            return dynamic ? d(this.view) : d;\r\n        });\r\n        for (let i = allDeco.length; i < allDeco.length + 3; i++)\r\n            this.dynamicDecorationMap[i] = false;\r\n        return this.decorations = [\r\n            ...allDeco,\r\n            this.compositionDeco,\r\n            this.computeBlockGapDeco(),\r\n            this.view.viewState.lineGapDeco\r\n        ];\r\n    }\r\n    scrollIntoView(target) {\r\n        let { range } = target;\r\n        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;\r\n        if (!rect)\r\n            return;\r\n        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))\r\n            rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),\r\n                right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };\r\n        let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;\r\n        for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view)))\r\n            if (margins) {\r\n                let { left, right, top, bottom } = margins;\r\n                if (left != null)\r\n                    mLeft = Math.max(mLeft, left);\r\n                if (right != null)\r\n                    mRight = Math.max(mRight, right);\r\n                if (top != null)\r\n                    mTop = Math.max(mTop, top);\r\n                if (bottom != null)\r\n                    mBottom = Math.max(mBottom, bottom);\r\n            }\r\n        let targetRect = {\r\n            left: rect.left - mLeft, top: rect.top - mTop,\r\n            right: rect.right + mRight, bottom: rect.bottom + mBottom\r\n        };\r\n        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);\r\n    }\r\n}\r\nfunction betweenUneditable(pos) {\r\n    return pos.node.nodeType == 1 && pos.node.firstChild &&\r\n        (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == \"false\") &&\r\n        (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == \"false\");\r\n}\r\nclass BlockGapWidget extends WidgetType {\r\n    constructor(height) {\r\n        super();\r\n        this.height = height;\r\n    }\r\n    toDOM() {\r\n        let elt = document.createElement(\"div\");\r\n        this.updateDOM(elt);\r\n        return elt;\r\n    }\r\n    eq(other) { return other.height == this.height; }\r\n    updateDOM(elt) {\r\n        elt.style.height = this.height + \"px\";\r\n        return true;\r\n    }\r\n    get estimatedHeight() { return this.height; }\r\n}\r\nfunction compositionSurroundingNode(view) {\r\n    let sel = view.observer.selectionRange;\r\n    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);\r\n    if (!textNode)\r\n        return null;\r\n    let cView = view.docView.nearest(textNode);\r\n    if (!cView)\r\n        return null;\r\n    if (cView instanceof LineView) {\r\n        let topNode = textNode;\r\n        while (topNode.parentNode != cView.dom)\r\n            topNode = topNode.parentNode;\r\n        let prev = topNode.previousSibling;\r\n        while (prev && !ContentView.get(prev))\r\n            prev = prev.previousSibling;\r\n        let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;\r\n        return { from: pos, to: pos, node: topNode, text: textNode };\r\n    }\r\n    else {\r\n        for (;;) {\r\n            let { parent } = cView;\r\n            if (!parent)\r\n                return null;\r\n            if (parent instanceof LineView)\r\n                break;\r\n            cView = parent;\r\n        }\r\n        let from = cView.posAtStart;\r\n        return { from, to: from + cView.length, node: cView.dom, text: textNode };\r\n    }\r\n}\r\nfunction computeCompositionDeco(view, changes) {\r\n    let surrounding = compositionSurroundingNode(view);\r\n    if (!surrounding)\r\n        return Decoration.none;\r\n    let { from, to, node, text: textNode } = surrounding;\r\n    let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));\r\n    let { state } = view, text = node.nodeType == 3 ? node.nodeValue :\r\n        new DOMReader([], state).readRange(node.firstChild, null).text;\r\n    if (newTo - newFrom < text.length) {\r\n        if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)\r\n            newTo = newFrom + text.length;\r\n        else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)\r\n            newFrom = newTo - text.length;\r\n        else\r\n            return Decoration.none;\r\n    }\r\n    else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {\r\n        return Decoration.none;\r\n    }\r\n    let topView = ContentView.get(node);\r\n    if (topView instanceof CompositionView)\r\n        topView = topView.widget.topView;\r\n    else if (topView)\r\n        topView.parent = null;\r\n    return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })\r\n        .range(newFrom, newTo));\r\n}\r\nclass CompositionWidget extends WidgetType {\r\n    constructor(top, text, topView) {\r\n        super();\r\n        this.top = top;\r\n        this.text = text;\r\n        this.topView = topView;\r\n    }\r\n    eq(other) { return this.top == other.top && this.text == other.text; }\r\n    toDOM() { return this.top; }\r\n    ignoreEvent() { return false; }\r\n    get customView() { return CompositionView; }\r\n}\r\nfunction nearbyTextNode(node, offset, side) {\r\n    for (;;) {\r\n        if (node.nodeType == 3)\r\n            return node;\r\n        if (node.nodeType == 1 && offset > 0 && side <= 0) {\r\n            node = node.childNodes[offset - 1];\r\n            offset = maxOffset(node);\r\n        }\r\n        else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {\r\n            node = node.childNodes[offset];\r\n            offset = 0;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nfunction nextToUneditable(node, offset) {\r\n    if (node.nodeType != 1)\r\n        return 0;\r\n    return (offset && node.childNodes[offset - 1].contentEditable == \"false\" ? 1 /* NextTo.Before */ : 0) |\r\n        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == \"false\" ? 2 /* NextTo.After */ : 0);\r\n}\r\nclass DecorationComparator$1 {\r\n    constructor() {\r\n        this.changes = [];\r\n    }\r\n    compareRange(from, to) { addRange(from, to, this.changes); }\r\n    comparePoint(from, to) { addRange(from, to, this.changes); }\r\n}\r\nfunction findChangedDeco(a, b, diff) {\r\n    let comp = new DecorationComparator$1;\r\n    _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.compare(a, b, diff, comp);\r\n    return comp.changes;\r\n}\r\nfunction inUneditable(node, inside) {\r\n    for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {\r\n        if (cur.nodeType == 1 && cur.contentEditable == 'false') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction groupAt(state, pos, bias = 1) {\r\n    let categorize = state.charCategorizer(pos);\r\n    let line = state.doc.lineAt(pos), linePos = pos - line.from;\r\n    if (line.length == 0)\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(pos);\r\n    if (linePos == 0)\r\n        bias = 1;\r\n    else if (linePos == line.length)\r\n        bias = -1;\r\n    let from = linePos, to = linePos;\r\n    if (bias < 0)\r\n        from = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findClusterBreak)(line.text, linePos, false);\r\n    else\r\n        to = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findClusterBreak)(line.text, linePos);\r\n    let cat = categorize(line.text.slice(from, to));\r\n    while (from > 0) {\r\n        let prev = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findClusterBreak)(line.text, from, false);\r\n        if (categorize(line.text.slice(prev, from)) != cat)\r\n            break;\r\n        from = prev;\r\n    }\r\n    while (to < line.length) {\r\n        let next = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findClusterBreak)(line.text, to);\r\n        if (categorize(line.text.slice(to, next)) != cat)\r\n            break;\r\n        to = next;\r\n    }\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(from + line.from, to + line.from);\r\n}\r\n// Search the DOM for the {node, offset} position closest to the given\r\n// coordinates. Very inefficient and crude, but can usually be avoided\r\n// by calling caret(Position|Range)FromPoint instead.\r\nfunction getdx(x, rect) {\r\n    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);\r\n}\r\nfunction getdy(y, rect) {\r\n    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);\r\n}\r\nfunction yOverlap(a, b) {\r\n    return a.top < b.bottom - 1 && a.bottom > b.top + 1;\r\n}\r\nfunction upTop(rect, top) {\r\n    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;\r\n}\r\nfunction upBot(rect, bottom) {\r\n    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;\r\n}\r\nfunction domPosAtCoords(parent, x, y) {\r\n    let closest, closestRect, closestX, closestY, closestOverlap = false;\r\n    let above, below, aboveRect, belowRect;\r\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\r\n        let rects = clientRectsFor(child);\r\n        for (let i = 0; i < rects.length; i++) {\r\n            let rect = rects[i];\r\n            if (closestRect && yOverlap(closestRect, rect))\r\n                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);\r\n            let dx = getdx(x, rect), dy = getdy(y, rect);\r\n            if (dx == 0 && dy == 0)\r\n                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);\r\n            if (!closest || closestY > dy || closestY == dy && closestX > dx) {\r\n                closest = child;\r\n                closestRect = rect;\r\n                closestX = dx;\r\n                closestY = dy;\r\n                closestOverlap = !dx || (dx > 0 ? i < rects.length - 1 : i > 0);\r\n            }\r\n            if (dx == 0) {\r\n                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {\r\n                    above = child;\r\n                    aboveRect = rect;\r\n                }\r\n                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {\r\n                    below = child;\r\n                    belowRect = rect;\r\n                }\r\n            }\r\n            else if (aboveRect && yOverlap(aboveRect, rect)) {\r\n                aboveRect = upBot(aboveRect, rect.bottom);\r\n            }\r\n            else if (belowRect && yOverlap(belowRect, rect)) {\r\n                belowRect = upTop(belowRect, rect.top);\r\n            }\r\n        }\r\n    }\r\n    if (aboveRect && aboveRect.bottom >= y) {\r\n        closest = above;\r\n        closestRect = aboveRect;\r\n    }\r\n    else if (belowRect && belowRect.top <= y) {\r\n        closest = below;\r\n        closestRect = belowRect;\r\n    }\r\n    if (!closest)\r\n        return { node: parent, offset: 0 };\r\n    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));\r\n    if (closest.nodeType == 3)\r\n        return domPosInText(closest, clipX, y);\r\n    if (closestOverlap && closest.contentEditable != \"false\")\r\n        return domPosAtCoords(closest, clipX, y);\r\n    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +\r\n        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);\r\n    return { node: parent, offset };\r\n}\r\nfunction domPosInText(node, x, y) {\r\n    let len = node.nodeValue.length;\r\n    let closestOffset = -1, closestDY = 1e9, generalSide = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        let rects = textRange(node, i, i + 1).getClientRects();\r\n        for (let j = 0; j < rects.length; j++) {\r\n            let rect = rects[j];\r\n            if (rect.top == rect.bottom)\r\n                continue;\r\n            if (!generalSide)\r\n                generalSide = x - rect.left;\r\n            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;\r\n            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {\r\n                let right = x >= (rect.left + rect.right) / 2, after = right;\r\n                if (browser.chrome || browser.gecko) {\r\n                    // Check for RTL on browsers that support getting client\r\n                    // rects for empty ranges.\r\n                    let rectBefore = textRange(node, i).getBoundingClientRect();\r\n                    if (rectBefore.left == rect.right)\r\n                        after = !right;\r\n                }\r\n                if (dy <= 0)\r\n                    return { node, offset: i + (after ? 1 : 0) };\r\n                closestOffset = i + (after ? 1 : 0);\r\n                closestDY = dy;\r\n            }\r\n        }\r\n    }\r\n    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };\r\n}\r\nfunction posAtCoords(view, { x, y }, precise, bias = -1) {\r\n    var _a;\r\n    let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;\r\n    let block, { docHeight } = view.viewState;\r\n    let yOffset = y - docTop;\r\n    if (yOffset < 0)\r\n        return 0;\r\n    if (yOffset > docHeight)\r\n        return view.state.doc.length;\r\n    // Scan for a text block near the queried y position\r\n    for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {\r\n        block = view.elementAtHeight(yOffset);\r\n        if (block.type == BlockType.Text)\r\n            break;\r\n        for (;;) {\r\n            // Move the y position out of this block\r\n            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;\r\n            if (yOffset >= 0 && yOffset <= docHeight)\r\n                break;\r\n            // If the document consists entirely of replaced widgets, we\r\n            // won't find a text block, so return 0\r\n            if (bounced)\r\n                return precise ? null : 0;\r\n            bounced = true;\r\n            bias = -bias;\r\n        }\r\n    }\r\n    y = docTop + yOffset;\r\n    let lineStart = block.from;\r\n    // If this is outside of the rendered viewport, we can't determine a position\r\n    if (lineStart < view.viewport.from)\r\n        return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);\r\n    if (lineStart > view.viewport.to)\r\n        return view.viewport.to == view.state.doc.length ? view.state.doc.length :\r\n            precise ? null : posAtCoordsImprecise(view, content, block, x, y);\r\n    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not\r\n    let doc = view.dom.ownerDocument;\r\n    let root = view.root.elementFromPoint ? view.root : doc;\r\n    let element = root.elementFromPoint(x, y);\r\n    if (element && !view.contentDOM.contains(element))\r\n        element = null;\r\n    // If the element is unexpected, clip x at the sides of the content area and try again\r\n    if (!element) {\r\n        x = Math.max(content.left + 1, Math.min(content.right - 1, x));\r\n        element = root.elementFromPoint(x, y);\r\n        if (element && !view.contentDOM.contains(element))\r\n            element = null;\r\n    }\r\n    // There's visible editor content under the point, so we can try\r\n    // using caret(Position|Range)FromPoint as a shortcut\r\n    let node, offset = -1;\r\n    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {\r\n        if (doc.caretPositionFromPoint) {\r\n            let pos = doc.caretPositionFromPoint(x, y);\r\n            if (pos)\r\n                ({ offsetNode: node, offset } = pos);\r\n        }\r\n        else if (doc.caretRangeFromPoint) {\r\n            let range = doc.caretRangeFromPoint(x, y);\r\n            if (range) {\r\n                ({ startContainer: node, startOffset: offset } = range);\r\n                if (!view.contentDOM.contains(node) ||\r\n                    browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||\r\n                    browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))\r\n                    node = undefined;\r\n            }\r\n        }\r\n    }\r\n    // No luck, do our own (potentially expensive) search\r\n    if (!node || !view.docView.dom.contains(node)) {\r\n        let line = LineView.find(view.docView, lineStart);\r\n        if (!line)\r\n            return yOffset > block.top + block.height / 2 ? block.to : block.from;\r\n        ({ node, offset } = domPosAtCoords(line.dom, x, y));\r\n    }\r\n    return view.docView.posFromDOM(node, offset);\r\n}\r\nfunction posAtCoordsImprecise(view, contentRect, block, x, y) {\r\n    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);\r\n    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {\r\n        let line = Math.floor((y - block.top) / view.defaultLineHeight);\r\n        into += line * view.viewState.heightOracle.lineLength;\r\n    }\r\n    let content = view.state.sliceDoc(block.from, block.to);\r\n    return block.from + (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findColumn)(content, into, view.state.tabSize);\r\n}\r\n// In case of a high line height, Safari's caretRangeFromPoint treats\r\n// the space between lines as belonging to the last character of the\r\n// line before. This is used to detect such a result so that it can be\r\n// ignored (issue #401).\r\nfunction isSuspiciousSafariCaretResult(node, offset, x) {\r\n    let len;\r\n    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))\r\n        return false;\r\n    for (let next = node.nextSibling; next; next = next.nextSibling)\r\n        if (next.nodeType != 1 || next.nodeName != \"BR\")\r\n            return false;\r\n    return textRange(node, len - 1, len).getBoundingClientRect().left > x;\r\n}\r\n// Chrome will move positions between lines to the start of the next line\r\nfunction isSuspiciousChromeCaretResult(node, offset, x) {\r\n    if (offset != 0)\r\n        return false;\r\n    for (let cur = node;;) {\r\n        let parent = cur.parentNode;\r\n        if (!parent || parent.nodeType != 1 || parent.firstChild != cur)\r\n            return false;\r\n        if (parent.classList.contains(\"cm-line\"))\r\n            break;\r\n        cur = parent;\r\n    }\r\n    let rect = node.nodeType == 1 ? node.getBoundingClientRect()\r\n        : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();\r\n    return x - rect.left > 5;\r\n}\r\nfunction moveToLineBoundary(view, start, forward, includeWrap) {\r\n    let line = view.state.doc.lineAt(start.head);\r\n    let coords = !includeWrap || !view.lineWrapping ? null\r\n        : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);\r\n    if (coords) {\r\n        let editorRect = view.dom.getBoundingClientRect();\r\n        let direction = view.textDirectionAt(line.from);\r\n        let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,\r\n            y: (coords.top + coords.bottom) / 2 });\r\n        if (pos != null)\r\n            return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(pos, forward ? -1 : 1);\r\n    }\r\n    let lineView = LineView.find(view.docView, start.head);\r\n    let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(end, forward ? -1 : 1);\r\n}\r\nfunction moveByChar(view, start, forward, by) {\r\n    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);\r\n    let direction = view.textDirectionAt(line.from);\r\n    for (let cur = start, check = null;;) {\r\n        let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;\r\n        if (!next) {\r\n            if (line.number == (forward ? view.state.doc.lines : 1))\r\n                return cur;\r\n            char = \"\\n\";\r\n            line = view.state.doc.line(line.number + (forward ? 1 : -1));\r\n            spans = view.bidiSpans(line);\r\n            next = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(forward ? line.from : line.to);\r\n        }\r\n        if (!check) {\r\n            if (!by)\r\n                return next;\r\n            check = by(char);\r\n        }\r\n        else if (!check(char)) {\r\n            return cur;\r\n        }\r\n        cur = next;\r\n    }\r\n}\r\nfunction byGroup(view, pos, start) {\r\n    let categorize = view.state.charCategorizer(pos);\r\n    let cat = categorize(start);\r\n    return (next) => {\r\n        let nextCat = categorize(next);\r\n        if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.CharCategory.Space)\r\n            cat = nextCat;\r\n        return cat == nextCat;\r\n    };\r\n}\r\nfunction moveVertically(view, start, forward, distance) {\r\n    let startPos = start.head, dir = forward ? 1 : -1;\r\n    if (startPos == (forward ? view.state.doc.length : 0))\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(startPos, start.assoc);\r\n    let goal = start.goalColumn, startY;\r\n    let rect = view.contentDOM.getBoundingClientRect();\r\n    let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;\r\n    if (startCoords) {\r\n        if (goal == null)\r\n            goal = startCoords.left - rect.left;\r\n        startY = dir < 0 ? startCoords.top : startCoords.bottom;\r\n    }\r\n    else {\r\n        let line = view.viewState.lineBlockAt(startPos);\r\n        if (goal == null)\r\n            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));\r\n        startY = (dir < 0 ? line.top : line.bottom) + docTop;\r\n    }\r\n    let resolvedGoal = rect.left + goal;\r\n    let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);\r\n    for (let extra = 0;; extra += 10) {\r\n        let curY = startY + (dist + extra) * dir;\r\n        let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);\r\n        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))\r\n            return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(pos, start.assoc, undefined, goal);\r\n    }\r\n}\r\nfunction skipAtoms(view, oldPos, pos) {\r\n    let atoms = view.state.facet(atomicRanges).map(f => f(view));\r\n    for (;;) {\r\n        let moved = false;\r\n        for (let set of atoms) {\r\n            set.between(pos.from - 1, pos.from + 1, (from, to, value) => {\r\n                if (pos.from > from && pos.from < to) {\r\n                    pos = oldPos.head > pos.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(from, 1) : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(to, -1);\r\n                    moved = true;\r\n                }\r\n            });\r\n        }\r\n        if (!moved)\r\n            return pos;\r\n    }\r\n}\r\n\r\n// This will also be where dragging info and such goes\r\nclass InputState {\r\n    constructor(view) {\r\n        this.lastKeyCode = 0;\r\n        this.lastKeyTime = 0;\r\n        this.lastTouchTime = 0;\r\n        this.lastFocusTime = 0;\r\n        this.lastScrollTop = 0;\r\n        this.lastScrollLeft = 0;\r\n        this.chromeScrollHack = -1;\r\n        // On iOS, some keys need to have their default behavior happen\r\n        // (after which we retroactively handle them and reset the DOM) to\r\n        // avoid messing up the virtual keyboard state.\r\n        this.pendingIOSKey = undefined;\r\n        this.lastSelectionOrigin = null;\r\n        this.lastSelectionTime = 0;\r\n        this.lastEscPress = 0;\r\n        this.lastContextMenu = 0;\r\n        this.scrollHandlers = [];\r\n        this.registeredEvents = [];\r\n        this.customHandlers = [];\r\n        // -1 means not in a composition. Otherwise, this counts the number\r\n        // of changes made during the composition. The count is used to\r\n        // avoid treating the start state of the composition, before any\r\n        // changes have been made, as part of the composition.\r\n        this.composing = -1;\r\n        // Tracks whether the next change should be marked as starting the\r\n        // composition (null means no composition, true means next is the\r\n        // first, false means first has already been marked for this\r\n        // composition)\r\n        this.compositionFirstChange = null;\r\n        this.compositionEndedAt = 0;\r\n        this.mouseSelection = null;\r\n        let handleEvent = (handler, event) => {\r\n            if (this.ignoreDuringComposition(event))\r\n                return;\r\n            if (event.type == \"keydown\" && this.keydown(view, event))\r\n                return;\r\n            if (this.mustFlushObserver(event))\r\n                view.observer.forceFlush();\r\n            if (this.runCustomHandlers(event.type, view, event))\r\n                event.preventDefault();\r\n            else\r\n                handler(view, event);\r\n        };\r\n        for (let type in handlers) {\r\n            let handler = handlers[type];\r\n            view.contentDOM.addEventListener(type, event => {\r\n                if (eventBelongsToEditor(view, event))\r\n                    handleEvent(handler, event);\r\n            }, handlerOptions[type]);\r\n            this.registeredEvents.push(type);\r\n        }\r\n        view.scrollDOM.addEventListener(\"mousedown\", (event) => {\r\n            if (event.target == view.scrollDOM)\r\n                handleEvent(handlers.mousedown, event);\r\n        });\r\n        if (browser.chrome && browser.chrome_version == 102) { // FIXME remove at some point\r\n            // On Chrome 102, viewport updates somehow stop wheel-based\r\n            // scrolling. Turning off pointer events during the scroll seems\r\n            // to avoid the issue.\r\n            view.scrollDOM.addEventListener(\"wheel\", () => {\r\n                if (this.chromeScrollHack < 0)\r\n                    view.contentDOM.style.pointerEvents = \"none\";\r\n                else\r\n                    window.clearTimeout(this.chromeScrollHack);\r\n                this.chromeScrollHack = setTimeout(() => {\r\n                    this.chromeScrollHack = -1;\r\n                    view.contentDOM.style.pointerEvents = \"\";\r\n                }, 100);\r\n            }, { passive: true });\r\n        }\r\n        this.notifiedFocused = view.hasFocus;\r\n        // On Safari adding an input event handler somehow prevents an\r\n        // issue where the composition vanishes when you press enter.\r\n        if (browser.safari)\r\n            view.contentDOM.addEventListener(\"input\", () => null);\r\n    }\r\n    setSelectionOrigin(origin) {\r\n        this.lastSelectionOrigin = origin;\r\n        this.lastSelectionTime = Date.now();\r\n    }\r\n    ensureHandlers(view, plugins) {\r\n        var _a;\r\n        let handlers;\r\n        this.customHandlers = [];\r\n        for (let plugin of plugins)\r\n            if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {\r\n                this.customHandlers.push({ plugin: plugin.value, handlers });\r\n                for (let type in handlers)\r\n                    if (this.registeredEvents.indexOf(type) < 0 && type != \"scroll\") {\r\n                        this.registeredEvents.push(type);\r\n                        view.contentDOM.addEventListener(type, (event) => {\r\n                            if (!eventBelongsToEditor(view, event))\r\n                                return;\r\n                            if (this.runCustomHandlers(type, view, event))\r\n                                event.preventDefault();\r\n                        });\r\n                    }\r\n            }\r\n    }\r\n    runCustomHandlers(type, view, event) {\r\n        for (let set of this.customHandlers) {\r\n            let handler = set.handlers[type];\r\n            if (handler) {\r\n                try {\r\n                    if (handler.call(set.plugin, event, view) || event.defaultPrevented)\r\n                        return true;\r\n                }\r\n                catch (e) {\r\n                    logException(view.state, e);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    runScrollHandlers(view, event) {\r\n        this.lastScrollTop = view.scrollDOM.scrollTop;\r\n        this.lastScrollLeft = view.scrollDOM.scrollLeft;\r\n        for (let set of this.customHandlers) {\r\n            let handler = set.handlers.scroll;\r\n            if (handler) {\r\n                try {\r\n                    handler.call(set.plugin, event, view);\r\n                }\r\n                catch (e) {\r\n                    logException(view.state, e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    keydown(view, event) {\r\n        // Must always run, even if a custom handler handled the event\r\n        this.lastKeyCode = event.keyCode;\r\n        this.lastKeyTime = Date.now();\r\n        if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)\r\n            return true;\r\n        // Chrome for Android usually doesn't fire proper key events, but\r\n        // occasionally does, usually surrounded by a bunch of complicated\r\n        // composition changes. When an enter or backspace key event is\r\n        // seen, hold off on handling DOM events for a bit, and then\r\n        // dispatch it.\r\n        if (browser.android && browser.chrome && !event.synthetic &&\r\n            (event.keyCode == 13 || event.keyCode == 8)) {\r\n            view.observer.delayAndroidKey(event.key, event.keyCode);\r\n            return true;\r\n        }\r\n        // Prevent the default behavior of Enter on iOS makes the\r\n        // virtual keyboard get stuck in the wrong (lowercase)\r\n        // state. So we let it go through, and then, in\r\n        // applyDOMChange, notify key handlers of it and reset to\r\n        // the state they produce.\r\n        let pending;\r\n        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&\r\n            ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||\r\n                EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {\r\n            this.pendingIOSKey = pending || event;\r\n            setTimeout(() => this.flushIOSKey(view), 250);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    flushIOSKey(view) {\r\n        let key = this.pendingIOSKey;\r\n        if (!key)\r\n            return false;\r\n        this.pendingIOSKey = undefined;\r\n        return dispatchKey(view.contentDOM, key.key, key.keyCode);\r\n    }\r\n    ignoreDuringComposition(event) {\r\n        if (!/^key/.test(event.type))\r\n            return false;\r\n        if (this.composing > 0)\r\n            return true;\r\n        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\r\n        // On some input method editors (IMEs), the Enter key is used to\r\n        // confirm character selection. On Safari, when Enter is pressed,\r\n        // compositionend and keydown events are sometimes emitted in the\r\n        // wrong order. The key event should still be ignored, even when\r\n        // it happens after the compositionend event.\r\n        if (browser.safari && !browser.ios && Date.now() - this.compositionEndedAt < 100) {\r\n            this.compositionEndedAt = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    mustFlushObserver(event) {\r\n        return event.type == \"keydown\" && event.keyCode != 229;\r\n    }\r\n    startMouseSelection(mouseSelection) {\r\n        if (this.mouseSelection)\r\n            this.mouseSelection.destroy();\r\n        this.mouseSelection = mouseSelection;\r\n    }\r\n    update(update) {\r\n        if (this.mouseSelection)\r\n            this.mouseSelection.update(update);\r\n        if (update.transactions.length)\r\n            this.lastKeyCode = this.lastSelectionTime = 0;\r\n    }\r\n    destroy() {\r\n        if (this.mouseSelection)\r\n            this.mouseSelection.destroy();\r\n    }\r\n}\r\nconst PendingKeys = [\r\n    { key: \"Backspace\", keyCode: 8, inputType: \"deleteContentBackward\" },\r\n    { key: \"Enter\", keyCode: 13, inputType: \"insertParagraph\" },\r\n    { key: \"Delete\", keyCode: 46, inputType: \"deleteContentForward\" }\r\n];\r\nconst EmacsyPendingKeys = \"dthko\";\r\n// Key codes for modifier keys\r\nconst modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];\r\nfunction dragScrollSpeed(dist) {\r\n    return dist * 0.7 + 8;\r\n}\r\nclass MouseSelection {\r\n    constructor(view, startEvent, style, mustSelect) {\r\n        this.view = view;\r\n        this.style = style;\r\n        this.mustSelect = mustSelect;\r\n        this.scrollSpeed = { x: 0, y: 0 };\r\n        this.scrolling = -1;\r\n        this.lastEvent = startEvent;\r\n        this.scrollParent = scrollableParent(view.contentDOM);\r\n        let doc = view.contentDOM.ownerDocument;\r\n        doc.addEventListener(\"mousemove\", this.move = this.move.bind(this));\r\n        doc.addEventListener(\"mouseup\", this.up = this.up.bind(this));\r\n        this.extend = startEvent.shiftKey;\r\n        this.multiple = view.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);\r\n        this.dragMove = dragMovesSelection(view, startEvent);\r\n        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;\r\n        // When clicking outside of the selection, immediately apply the\r\n        // effect of starting the selection\r\n        if (this.dragging === false) {\r\n            startEvent.preventDefault();\r\n            this.select(startEvent);\r\n        }\r\n    }\r\n    move(event) {\r\n        var _a;\r\n        if (event.buttons == 0)\r\n            return this.destroy();\r\n        if (this.dragging !== false)\r\n            return;\r\n        this.select(this.lastEvent = event);\r\n        let sx = 0, sy = 0;\r\n        let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())\r\n            || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };\r\n        if (event.clientX <= rect.left)\r\n            sx = -dragScrollSpeed(rect.left - event.clientX);\r\n        else if (event.clientX >= rect.right)\r\n            sx = dragScrollSpeed(event.clientX - rect.right);\r\n        if (event.clientY <= rect.top)\r\n            sy = -dragScrollSpeed(rect.top - event.clientY);\r\n        else if (event.clientY >= rect.bottom)\r\n            sy = dragScrollSpeed(event.clientY - rect.bottom);\r\n        this.setScrollSpeed(sx, sy);\r\n    }\r\n    up(event) {\r\n        if (this.dragging == null)\r\n            this.select(this.lastEvent);\r\n        if (!this.dragging)\r\n            event.preventDefault();\r\n        this.destroy();\r\n    }\r\n    destroy() {\r\n        this.setScrollSpeed(0, 0);\r\n        let doc = this.view.contentDOM.ownerDocument;\r\n        doc.removeEventListener(\"mousemove\", this.move);\r\n        doc.removeEventListener(\"mouseup\", this.up);\r\n        this.view.inputState.mouseSelection = null;\r\n    }\r\n    setScrollSpeed(sx, sy) {\r\n        this.scrollSpeed = { x: sx, y: sy };\r\n        if (sx || sy) {\r\n            if (this.scrolling < 0)\r\n                this.scrolling = setInterval(() => this.scroll(), 50);\r\n        }\r\n        else if (this.scrolling > -1) {\r\n            clearInterval(this.scrolling);\r\n            this.scrolling = -1;\r\n        }\r\n    }\r\n    scroll() {\r\n        if (this.scrollParent) {\r\n            this.scrollParent.scrollLeft += this.scrollSpeed.x;\r\n            this.scrollParent.scrollTop += this.scrollSpeed.y;\r\n        }\r\n        else {\r\n            this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);\r\n        }\r\n        if (this.dragging === false)\r\n            this.select(this.lastEvent);\r\n    }\r\n    select(event) {\r\n        let selection = this.style.get(event, this.extend, this.multiple);\r\n        if (this.mustSelect || !selection.eq(this.view.state.selection) ||\r\n            selection.main.assoc != this.view.state.selection.main.assoc)\r\n            this.view.dispatch({\r\n                selection,\r\n                userEvent: \"select.pointer\"\r\n            });\r\n        this.mustSelect = false;\r\n    }\r\n    update(update) {\r\n        if (update.docChanged && this.dragging)\r\n            this.dragging = this.dragging.map(update.changes);\r\n        if (this.style.update(update))\r\n            setTimeout(() => this.select(this.lastEvent), 20);\r\n    }\r\n}\r\nfunction addsSelectionRange(view, event) {\r\n    let facet = view.state.facet(clickAddsSelectionRange);\r\n    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;\r\n}\r\nfunction dragMovesSelection(view, event) {\r\n    let facet = view.state.facet(dragMovesSelection$1);\r\n    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;\r\n}\r\nfunction isInPrimarySelection(view, event) {\r\n    let { main } = view.state.selection;\r\n    if (main.empty)\r\n        return false;\r\n    // On boundary clicks, check whether the coordinates are inside the\r\n    // selection's client rectangles\r\n    let sel = getSelection(view.root);\r\n    if (!sel || sel.rangeCount == 0)\r\n        return true;\r\n    let rects = sel.getRangeAt(0).getClientRects();\r\n    for (let i = 0; i < rects.length; i++) {\r\n        let rect = rects[i];\r\n        if (rect.left <= event.clientX && rect.right >= event.clientX &&\r\n            rect.top <= event.clientY && rect.bottom >= event.clientY)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction eventBelongsToEditor(view, event) {\r\n    if (!event.bubbles)\r\n        return true;\r\n    if (event.defaultPrevented)\r\n        return false;\r\n    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)\r\n        if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))\r\n            return false;\r\n    return true;\r\n}\r\nconst handlers = /*@__PURE__*/Object.create(null);\r\nconst handlerOptions = /*@__PURE__*/Object.create(null);\r\n// This is very crude, but unfortunately both these browsers _pretend_\r\n// that they have a clipboard API—all the objects and methods are\r\n// there, they just don't work, and they are hard to test.\r\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\r\n    (browser.ios && browser.webkit_version < 604);\r\nfunction capturePaste(view) {\r\n    let parent = view.dom.parentNode;\r\n    if (!parent)\r\n        return;\r\n    let target = parent.appendChild(document.createElement(\"textarea\"));\r\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\r\n    target.focus();\r\n    setTimeout(() => {\r\n        view.focus();\r\n        target.remove();\r\n        doPaste(view, target.value);\r\n    }, 50);\r\n}\r\nfunction doPaste(view, input) {\r\n    let { state } = view, changes, i = 1, text = state.toText(input);\r\n    let byLine = text.lines == state.selection.ranges.length;\r\n    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();\r\n    if (linewise) {\r\n        let lastLine = -1;\r\n        changes = state.changeByRange(range => {\r\n            let line = state.doc.lineAt(range.from);\r\n            if (line.from == lastLine)\r\n                return { range };\r\n            lastLine = line.from;\r\n            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);\r\n            return { changes: { from: line.from, insert },\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(range.from + insert.length) };\r\n        });\r\n    }\r\n    else if (byLine) {\r\n        changes = state.changeByRange(range => {\r\n            let line = text.line(i++);\r\n            return { changes: { from: range.from, to: range.to, insert: line.text },\r\n                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(range.from + line.length) };\r\n        });\r\n    }\r\n    else {\r\n        changes = state.replaceSelection(text);\r\n    }\r\n    view.dispatch(changes, {\r\n        userEvent: \"input.paste\",\r\n        scrollIntoView: true\r\n    });\r\n}\r\nhandlers.keydown = (view, event) => {\r\n    view.inputState.setSelectionOrigin(\"select\");\r\n    if (event.keyCode == 27)\r\n        view.inputState.lastEscPress = Date.now();\r\n    else if (modifierCodes.indexOf(event.keyCode) < 0)\r\n        view.inputState.lastEscPress = 0;\r\n};\r\nhandlers.touchstart = (view, e) => {\r\n    view.inputState.lastTouchTime = Date.now();\r\n    view.inputState.setSelectionOrigin(\"select.pointer\");\r\n};\r\nhandlers.touchmove = view => {\r\n    view.inputState.setSelectionOrigin(\"select.pointer\");\r\n};\r\nhandlerOptions.touchstart = handlerOptions.touchmove = { passive: true };\r\nhandlers.mousedown = (view, event) => {\r\n    view.observer.flush();\r\n    if (view.inputState.lastTouchTime > Date.now() - 2000)\r\n        return; // Ignore touch interaction\r\n    let style = null;\r\n    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {\r\n        style = makeStyle(view, event);\r\n        if (style)\r\n            break;\r\n    }\r\n    if (!style && event.button == 0)\r\n        style = basicMouseSelection(view, event);\r\n    if (style) {\r\n        let mustFocus = view.root.activeElement != view.contentDOM;\r\n        if (mustFocus)\r\n            view.observer.ignore(() => focusPreventScroll(view.contentDOM));\r\n        view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));\r\n    }\r\n};\r\nfunction rangeForClick(view, pos, bias, type) {\r\n    if (type == 1) { // Single click\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(pos, bias);\r\n    }\r\n    else if (type == 2) { // Double click\r\n        return groupAt(view.state, pos, bias);\r\n    }\r\n    else { // Triple click\r\n        let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);\r\n        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;\r\n        if (to < view.state.doc.length && to == line.to)\r\n            to++;\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(from, to);\r\n    }\r\n}\r\nlet insideY = (y, rect) => y >= rect.top && y <= rect.bottom;\r\nlet inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;\r\n// Try to determine, for the given coordinates, associated with the\r\n// given position, whether they are related to the element before or\r\n// the element after the position.\r\nfunction findPositionSide(view, pos, x, y) {\r\n    let line = LineView.find(view.docView, pos);\r\n    if (!line)\r\n        return 1;\r\n    let off = pos - line.posAtStart;\r\n    // Line boundaries point into the line\r\n    if (off == 0)\r\n        return 1;\r\n    if (off == line.length)\r\n        return -1;\r\n    // Positions on top of an element point at that element\r\n    let before = line.coordsAt(off, -1);\r\n    if (before && inside(x, y, before))\r\n        return -1;\r\n    let after = line.coordsAt(off, 1);\r\n    if (after && inside(x, y, after))\r\n        return 1;\r\n    // This is probably a line wrap point. Pick before if the point is\r\n    // beside it.\r\n    return before && insideY(y, before) ? -1 : 1;\r\n}\r\nfunction queryPos(view, event) {\r\n    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\r\n    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };\r\n}\r\nconst BadMouseDetail = browser.ie && browser.ie_version <= 11;\r\nlet lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;\r\nfunction getClickType(event) {\r\n    if (!BadMouseDetail)\r\n        return event.detail;\r\n    let last = lastMouseDown, lastTime = lastMouseDownTime;\r\n    lastMouseDown = event;\r\n    lastMouseDownTime = Date.now();\r\n    return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&\r\n        Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;\r\n}\r\nfunction basicMouseSelection(view, event) {\r\n    let start = queryPos(view, event), type = getClickType(event);\r\n    let startSel = view.state.selection;\r\n    return {\r\n        update(update) {\r\n            if (update.docChanged) {\r\n                start.pos = update.changes.mapPos(start.pos);\r\n                startSel = startSel.map(update.changes);\r\n            }\r\n        },\r\n        get(event, extend, multiple) {\r\n            let cur = queryPos(view, event);\r\n            let range = rangeForClick(view, cur.pos, cur.bias, type);\r\n            if (start.pos != cur.pos && !extend) {\r\n                let startRange = rangeForClick(view, start.pos, start.bias, type);\r\n                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);\r\n                range = from < range.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(from, to) : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(to, from);\r\n            }\r\n            if (extend)\r\n                return startSel.replaceRange(startSel.main.extend(range.from, range.to));\r\n            else if (multiple && startSel.ranges.length > 1 && startSel.ranges.some(r => r.eq(range)))\r\n                return removeRange(startSel, range);\r\n            else if (multiple)\r\n                return startSel.addRange(range);\r\n            else\r\n                return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create([range]);\r\n        }\r\n    };\r\n}\r\nfunction removeRange(sel, range) {\r\n    for (let i = 0;; i++) {\r\n        if (sel.ranges[i].eq(range))\r\n            return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));\r\n    }\r\n}\r\nhandlers.dragstart = (view, event) => {\r\n    let { selection: { main } } = view.state;\r\n    let { mouseSelection } = view.inputState;\r\n    if (mouseSelection)\r\n        mouseSelection.dragging = main;\r\n    if (event.dataTransfer) {\r\n        event.dataTransfer.setData(\"Text\", view.state.sliceDoc(main.from, main.to));\r\n        event.dataTransfer.effectAllowed = \"copyMove\";\r\n    }\r\n};\r\nfunction dropText(view, event, text, direct) {\r\n    if (!text)\r\n        return;\r\n    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\r\n    event.preventDefault();\r\n    let { mouseSelection } = view.inputState;\r\n    let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?\r\n        { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;\r\n    let ins = { from: dropPos, insert: text };\r\n    let changes = view.state.changes(del ? [del, ins] : ins);\r\n    view.focus();\r\n    view.dispatch({\r\n        changes,\r\n        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },\r\n        userEvent: del ? \"move.drop\" : \"input.drop\"\r\n    });\r\n}\r\nhandlers.drop = (view, event) => {\r\n    if (!event.dataTransfer)\r\n        return;\r\n    if (view.state.readOnly)\r\n        return event.preventDefault();\r\n    let files = event.dataTransfer.files;\r\n    if (files && files.length) { // For a file drop, read the file's text.\r\n        event.preventDefault();\r\n        let text = Array(files.length), read = 0;\r\n        let finishFile = () => {\r\n            if (++read == files.length)\r\n                dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);\r\n        };\r\n        for (let i = 0; i < files.length; i++) {\r\n            let reader = new FileReader;\r\n            reader.onerror = finishFile;\r\n            reader.onload = () => {\r\n                if (!/[\\x00-\\x08\\x0e-\\x1f]{2}/.test(reader.result))\r\n                    text[i] = reader.result;\r\n                finishFile();\r\n            };\r\n            reader.readAsText(files[i]);\r\n        }\r\n    }\r\n    else {\r\n        dropText(view, event, event.dataTransfer.getData(\"Text\"), true);\r\n    }\r\n};\r\nhandlers.paste = (view, event) => {\r\n    if (view.state.readOnly)\r\n        return event.preventDefault();\r\n    view.observer.flush();\r\n    let data = brokenClipboardAPI ? null : event.clipboardData;\r\n    if (data) {\r\n        doPaste(view, data.getData(\"text/plain\"));\r\n        event.preventDefault();\r\n    }\r\n    else {\r\n        capturePaste(view);\r\n    }\r\n};\r\nfunction captureCopy(view, text) {\r\n    // The extra wrapper is somehow necessary on IE/Edge to prevent the\r\n    // content from being mangled when it is put onto the clipboard\r\n    let parent = view.dom.parentNode;\r\n    if (!parent)\r\n        return;\r\n    let target = parent.appendChild(document.createElement(\"textarea\"));\r\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\r\n    target.value = text;\r\n    target.focus();\r\n    target.selectionEnd = text.length;\r\n    target.selectionStart = 0;\r\n    setTimeout(() => {\r\n        target.remove();\r\n        view.focus();\r\n    }, 50);\r\n}\r\nfunction copiedRange(state) {\r\n    let content = [], ranges = [], linewise = false;\r\n    for (let range of state.selection.ranges)\r\n        if (!range.empty) {\r\n            content.push(state.sliceDoc(range.from, range.to));\r\n            ranges.push(range);\r\n        }\r\n    if (!content.length) {\r\n        // Nothing selected, do a line-wise copy\r\n        let upto = -1;\r\n        for (let { from } of state.selection.ranges) {\r\n            let line = state.doc.lineAt(from);\r\n            if (line.number > upto) {\r\n                content.push(line.text);\r\n                ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });\r\n            }\r\n            upto = line.number;\r\n        }\r\n        linewise = true;\r\n    }\r\n    return { text: content.join(state.lineBreak), ranges, linewise };\r\n}\r\nlet lastLinewiseCopy = null;\r\nhandlers.copy = handlers.cut = (view, event) => {\r\n    let { text, ranges, linewise } = copiedRange(view.state);\r\n    if (!text && !linewise)\r\n        return;\r\n    lastLinewiseCopy = linewise ? text : null;\r\n    let data = brokenClipboardAPI ? null : event.clipboardData;\r\n    if (data) {\r\n        event.preventDefault();\r\n        data.clearData();\r\n        data.setData(\"text/plain\", text);\r\n    }\r\n    else {\r\n        captureCopy(view, text);\r\n    }\r\n    if (event.type == \"cut\" && !view.state.readOnly)\r\n        view.dispatch({\r\n            changes: ranges,\r\n            scrollIntoView: true,\r\n            userEvent: \"delete.cut\"\r\n        });\r\n};\r\nfunction updateForFocusChange(view) {\r\n    setTimeout(() => {\r\n        if (view.hasFocus != view.inputState.notifiedFocused)\r\n            view.update([]);\r\n    }, 10);\r\n}\r\nhandlers.focus = view => {\r\n    view.inputState.lastFocusTime = Date.now();\r\n    // When focusing reset the scroll position, move it back to where it was\r\n    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {\r\n        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;\r\n        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;\r\n    }\r\n    updateForFocusChange(view);\r\n};\r\nhandlers.blur = view => {\r\n    view.observer.clearSelectionRange();\r\n    updateForFocusChange(view);\r\n};\r\nhandlers.compositionstart = handlers.compositionupdate = view => {\r\n    if (view.inputState.compositionFirstChange == null)\r\n        view.inputState.compositionFirstChange = true;\r\n    if (view.inputState.composing < 0) {\r\n        // FIXME possibly set a timeout to clear it again on Android\r\n        view.inputState.composing = 0;\r\n    }\r\n};\r\nhandlers.compositionend = view => {\r\n    view.inputState.composing = -1;\r\n    view.inputState.compositionEndedAt = Date.now();\r\n    view.inputState.compositionFirstChange = null;\r\n    if (browser.chrome && browser.android)\r\n        view.observer.flushSoon();\r\n    setTimeout(() => {\r\n        // Force the composition state to be cleared if it hasn't already been\r\n        if (view.inputState.composing < 0 && view.docView.compositionDeco.size)\r\n            view.update([]);\r\n    }, 50);\r\n};\r\nhandlers.contextmenu = view => {\r\n    view.inputState.lastContextMenu = Date.now();\r\n};\r\nhandlers.beforeinput = (view, event) => {\r\n    var _a;\r\n    // Because Chrome Android doesn't fire useful key events, use\r\n    // beforeinput to detect backspace (and possibly enter and delete,\r\n    // but those usually don't even seem to fire beforeinput events at\r\n    // the moment) and fake a key event for it.\r\n    //\r\n    // (preventDefault on beforeinput, though supported in the spec,\r\n    // seems to do nothing at all on Chrome).\r\n    let pending;\r\n    if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {\r\n        view.observer.delayAndroidKey(pending.key, pending.keyCode);\r\n        if (pending.key == \"Backspace\" || pending.key == \"Delete\") {\r\n            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;\r\n            setTimeout(() => {\r\n                var _a;\r\n                // Backspacing near uneditable nodes on Chrome Android sometimes\r\n                // closes the virtual keyboard. This tries to crudely detect\r\n                // that and refocus to get it back.\r\n                if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {\r\n                    view.contentDOM.blur();\r\n                    view.focus();\r\n                }\r\n            }, 100);\r\n        }\r\n    }\r\n};\r\n\r\nconst wrappingWhiteSpace = [\"pre-wrap\", \"normal\", \"pre-line\", \"break-spaces\"];\r\nclass HeightOracle {\r\n    constructor(lineWrapping) {\r\n        this.lineWrapping = lineWrapping;\r\n        this.doc = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty;\r\n        this.heightSamples = {};\r\n        this.lineHeight = 14;\r\n        this.charWidth = 7;\r\n        this.lineLength = 30;\r\n        // Used to track, during updateHeight, if any actual heights changed\r\n        this.heightChanged = false;\r\n    }\r\n    heightForGap(from, to) {\r\n        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;\r\n        if (this.lineWrapping)\r\n            lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);\r\n        return this.lineHeight * lines;\r\n    }\r\n    heightForLine(length) {\r\n        if (!this.lineWrapping)\r\n            return this.lineHeight;\r\n        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));\r\n        return lines * this.lineHeight;\r\n    }\r\n    setDoc(doc) { this.doc = doc; return this; }\r\n    mustRefreshForWrapping(whiteSpace) {\r\n        return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;\r\n    }\r\n    mustRefreshForHeights(lineHeights) {\r\n        let newHeight = false;\r\n        for (let i = 0; i < lineHeights.length; i++) {\r\n            let h = lineHeights[i];\r\n            if (h < 0) {\r\n                i++;\r\n            }\r\n            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels\r\n                newHeight = true;\r\n                this.heightSamples[Math.floor(h * 10)] = true;\r\n            }\r\n        }\r\n        return newHeight;\r\n    }\r\n    refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {\r\n        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;\r\n        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;\r\n        this.lineWrapping = lineWrapping;\r\n        this.lineHeight = lineHeight;\r\n        this.charWidth = charWidth;\r\n        this.lineLength = lineLength;\r\n        if (changed) {\r\n            this.heightSamples = {};\r\n            for (let i = 0; i < knownHeights.length; i++) {\r\n                let h = knownHeights[i];\r\n                if (h < 0)\r\n                    i++;\r\n                else\r\n                    this.heightSamples[Math.floor(h * 10)] = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n}\r\n// This object is used by `updateHeight` to make DOM measurements\r\n// arrive at the right nides. The `heights` array is a sequence of\r\n// block heights, starting from position `from`.\r\nclass MeasuredHeights {\r\n    constructor(from, heights) {\r\n        this.from = from;\r\n        this.heights = heights;\r\n        this.index = 0;\r\n    }\r\n    get more() { return this.index < this.heights.length; }\r\n}\r\n/**\r\nRecord used to represent information about a block-level element\r\nin the editor view.\r\n*/\r\nclass BlockInfo {\r\n    /**\r\n    @internal\r\n    */\r\n    constructor(\r\n    /**\r\n    The start of the element in the document.\r\n    */\r\n    from, \r\n    /**\r\n    The length of the element.\r\n    */\r\n    length, \r\n    /**\r\n    The top position of the element (relative to the top of the\r\n    document).\r\n    */\r\n    top, \r\n    /**\r\n    Its height.\r\n    */\r\n    height, \r\n    /**\r\n    The type of element this is. When querying lines, this may be\r\n    an array of all the blocks that make up the line.\r\n    */\r\n    type) {\r\n        this.from = from;\r\n        this.length = length;\r\n        this.top = top;\r\n        this.height = height;\r\n        this.type = type;\r\n    }\r\n    /**\r\n    The end of the element as a document position.\r\n    */\r\n    get to() { return this.from + this.length; }\r\n    /**\r\n    The bottom position of the element.\r\n    */\r\n    get bottom() { return this.top + this.height; }\r\n    /**\r\n    @internal\r\n    */\r\n    join(other) {\r\n        let detail = (Array.isArray(this.type) ? this.type : [this])\r\n            .concat(Array.isArray(other.type) ? other.type : [other]);\r\n        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);\r\n    }\r\n}\r\nvar QueryType = /*@__PURE__*/(function (QueryType) {\r\n    QueryType[QueryType[\"ByPos\"] = 0] = \"ByPos\";\r\n    QueryType[QueryType[\"ByHeight\"] = 1] = \"ByHeight\";\r\n    QueryType[QueryType[\"ByPosNoHeight\"] = 2] = \"ByPosNoHeight\";\r\nreturn QueryType})(QueryType || (QueryType = {}));\r\nconst Epsilon = 1e-3;\r\nclass HeightMap {\r\n    constructor(length, // The number of characters covered\r\n    height, // Height of this part of the document\r\n    flags = 2 /* Flag.Outdated */) {\r\n        this.length = length;\r\n        this.height = height;\r\n        this.flags = flags;\r\n    }\r\n    get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }\r\n    set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }\r\n    setHeight(oracle, height) {\r\n        if (this.height != height) {\r\n            if (Math.abs(this.height - height) > Epsilon)\r\n                oracle.heightChanged = true;\r\n            this.height = height;\r\n        }\r\n    }\r\n    // Base case is to replace a leaf node, which simply builds a tree\r\n    // from the new nodes and returns that (HeightMapBranch and\r\n    // HeightMapGap override this to actually use from/to)\r\n    replace(_from, _to, nodes) {\r\n        return HeightMap.of(nodes);\r\n    }\r\n    // Again, these are base cases, and are overridden for branch and gap nodes.\r\n    decomposeLeft(_to, result) { result.push(this); }\r\n    decomposeRight(_from, result) { result.push(this); }\r\n    applyChanges(decorations, oldDoc, oracle, changes) {\r\n        let me = this;\r\n        for (let i = changes.length - 1; i >= 0; i--) {\r\n            let { fromA, toA, fromB, toB } = changes[i];\r\n            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);\r\n            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);\r\n            toB += end.to - toA;\r\n            toA = end.to;\r\n            while (i > 0 && start.from <= changes[i - 1].toA) {\r\n                fromA = changes[i - 1].fromA;\r\n                fromB = changes[i - 1].fromB;\r\n                i--;\r\n                if (fromA < start.from)\r\n                    start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);\r\n            }\r\n            fromB += start.from - fromA;\r\n            fromA = start.from;\r\n            let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);\r\n            me = me.replace(fromA, toA, nodes);\r\n        }\r\n        return me.updateHeight(oracle, 0);\r\n    }\r\n    static empty() { return new HeightMapText(0, 0); }\r\n    // nodes uses null values to indicate the position of line breaks.\r\n    // There are never line breaks at the start or end of the array, or\r\n    // two line breaks next to each other, and the array isn't allowed\r\n    // to be empty (same restrictions as return value from the builder).\r\n    static of(nodes) {\r\n        if (nodes.length == 1)\r\n            return nodes[0];\r\n        let i = 0, j = nodes.length, before = 0, after = 0;\r\n        for (;;) {\r\n            if (i == j) {\r\n                if (before > after * 2) {\r\n                    let split = nodes[i - 1];\r\n                    if (split.break)\r\n                        nodes.splice(--i, 1, split.left, null, split.right);\r\n                    else\r\n                        nodes.splice(--i, 1, split.left, split.right);\r\n                    j += 1 + split.break;\r\n                    before -= split.size;\r\n                }\r\n                else if (after > before * 2) {\r\n                    let split = nodes[j];\r\n                    if (split.break)\r\n                        nodes.splice(j, 1, split.left, null, split.right);\r\n                    else\r\n                        nodes.splice(j, 1, split.left, split.right);\r\n                    j += 2 + split.break;\r\n                    after -= split.size;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else if (before < after) {\r\n                let next = nodes[i++];\r\n                if (next)\r\n                    before += next.size;\r\n            }\r\n            else {\r\n                let next = nodes[--j];\r\n                if (next)\r\n                    after += next.size;\r\n            }\r\n        }\r\n        let brk = 0;\r\n        if (nodes[i - 1] == null) {\r\n            brk = 1;\r\n            i--;\r\n        }\r\n        else if (nodes[i] == null) {\r\n            brk = 1;\r\n            j++;\r\n        }\r\n        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));\r\n    }\r\n}\r\nHeightMap.prototype.size = 1;\r\nclass HeightMapBlock extends HeightMap {\r\n    constructor(length, height, type) {\r\n        super(length, height);\r\n        this.type = type;\r\n    }\r\n    blockAt(_height, _doc, top, offset) {\r\n        return new BlockInfo(offset, this.length, top, this.height, this.type);\r\n    }\r\n    lineAt(_value, _type, doc, top, offset) {\r\n        return this.blockAt(0, doc, top, offset);\r\n    }\r\n    forEachLine(from, to, doc, top, offset, f) {\r\n        if (from <= offset + this.length && to >= offset)\r\n            f(this.blockAt(0, doc, top, offset));\r\n    }\r\n    updateHeight(oracle, offset = 0, _force = false, measured) {\r\n        if (measured && measured.from <= offset && measured.more)\r\n            this.setHeight(oracle, measured.heights[measured.index++]);\r\n        this.outdated = false;\r\n        return this;\r\n    }\r\n    toString() { return `block(${this.length})`; }\r\n}\r\nclass HeightMapText extends HeightMapBlock {\r\n    constructor(length, height) {\r\n        super(length, height, BlockType.Text);\r\n        this.collapsed = 0; // Amount of collapsed content in the line\r\n        this.widgetHeight = 0; // Maximum inline widget height\r\n    }\r\n    replace(_from, _to, nodes) {\r\n        let node = nodes[0];\r\n        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&\r\n            Math.abs(this.length - node.length) < 10) {\r\n            if (node instanceof HeightMapGap)\r\n                node = new HeightMapText(node.length, this.height);\r\n            else\r\n                node.height = this.height;\r\n            if (!this.outdated)\r\n                node.outdated = false;\r\n            return node;\r\n        }\r\n        else {\r\n            return HeightMap.of(nodes);\r\n        }\r\n    }\r\n    updateHeight(oracle, offset = 0, force = false, measured) {\r\n        if (measured && measured.from <= offset && measured.more)\r\n            this.setHeight(oracle, measured.heights[measured.index++]);\r\n        else if (force || this.outdated)\r\n            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));\r\n        this.outdated = false;\r\n        return this;\r\n    }\r\n    toString() {\r\n        return `line(${this.length}${this.collapsed ? -this.collapsed : \"\"}${this.widgetHeight ? \":\" + this.widgetHeight : \"\"})`;\r\n    }\r\n}\r\nclass HeightMapGap extends HeightMap {\r\n    constructor(length) { super(length, 0); }\r\n    lines(doc, offset) {\r\n        let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;\r\n        return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };\r\n    }\r\n    blockAt(height, doc, top, offset) {\r\n        let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);\r\n        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));\r\n        let { from, length } = doc.line(firstLine + line);\r\n        return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);\r\n    }\r\n    lineAt(value, type, doc, top, offset) {\r\n        if (type == QueryType.ByHeight)\r\n            return this.blockAt(value, doc, top, offset);\r\n        if (type == QueryType.ByPosNoHeight) {\r\n            let { from, to } = doc.lineAt(value);\r\n            return new BlockInfo(from, to - from, 0, 0, BlockType.Text);\r\n        }\r\n        let { firstLine, lineHeight } = this.lines(doc, offset);\r\n        let { from, length, number } = doc.lineAt(value);\r\n        return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);\r\n    }\r\n    forEachLine(from, to, doc, top, offset, f) {\r\n        let { firstLine, lineHeight } = this.lines(doc, offset);\r\n        for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {\r\n            let line = doc.lineAt(pos);\r\n            if (pos == from)\r\n                top += lineHeight * (line.number - firstLine);\r\n            f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));\r\n            top += lineHeight;\r\n            pos = line.to + 1;\r\n        }\r\n    }\r\n    replace(from, to, nodes) {\r\n        let after = this.length - to;\r\n        if (after > 0) {\r\n            let last = nodes[nodes.length - 1];\r\n            if (last instanceof HeightMapGap)\r\n                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);\r\n            else\r\n                nodes.push(null, new HeightMapGap(after - 1));\r\n        }\r\n        if (from > 0) {\r\n            let first = nodes[0];\r\n            if (first instanceof HeightMapGap)\r\n                nodes[0] = new HeightMapGap(from + first.length);\r\n            else\r\n                nodes.unshift(new HeightMapGap(from - 1), null);\r\n        }\r\n        return HeightMap.of(nodes);\r\n    }\r\n    decomposeLeft(to, result) {\r\n        result.push(new HeightMapGap(to - 1), null);\r\n    }\r\n    decomposeRight(from, result) {\r\n        result.push(null, new HeightMapGap(this.length - from - 1));\r\n    }\r\n    updateHeight(oracle, offset = 0, force = false, measured) {\r\n        let end = offset + this.length;\r\n        if (measured && measured.from <= offset + this.length && measured.more) {\r\n            // Fill in part of this gap with measured lines. We know there\r\n            // can't be widgets or collapsed ranges in those lines, because\r\n            // they would already have been added to the heightmap (gaps\r\n            // only contain plain text).\r\n            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;\r\n            let wasChanged = oracle.heightChanged;\r\n            if (measured.from > offset)\r\n                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));\r\n            while (pos <= end && measured.more) {\r\n                let len = oracle.doc.lineAt(pos).length;\r\n                if (nodes.length)\r\n                    nodes.push(null);\r\n                let height = measured.heights[measured.index++];\r\n                if (singleHeight == -1)\r\n                    singleHeight = height;\r\n                else if (Math.abs(height - singleHeight) >= Epsilon)\r\n                    singleHeight = -2;\r\n                let line = new HeightMapText(len, height);\r\n                line.outdated = false;\r\n                nodes.push(line);\r\n                pos += len + 1;\r\n            }\r\n            if (pos <= end)\r\n                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));\r\n            let result = HeightMap.of(nodes);\r\n            oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||\r\n                Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;\r\n            return result;\r\n        }\r\n        else if (force || this.outdated) {\r\n            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));\r\n            this.outdated = false;\r\n        }\r\n        return this;\r\n    }\r\n    toString() { return `gap(${this.length})`; }\r\n}\r\nclass HeightMapBranch extends HeightMap {\r\n    constructor(left, brk, right) {\r\n        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));\r\n        this.left = left;\r\n        this.right = right;\r\n        this.size = left.size + right.size;\r\n    }\r\n    get break() { return this.flags & 1 /* Flag.Break */; }\r\n    blockAt(height, doc, top, offset) {\r\n        let mid = top + this.left.height;\r\n        return height < mid ? this.left.blockAt(height, doc, top, offset)\r\n            : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);\r\n    }\r\n    lineAt(value, type, doc, top, offset) {\r\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\r\n        let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;\r\n        let base = left ? this.left.lineAt(value, type, doc, top, offset)\r\n            : this.right.lineAt(value, type, doc, rightTop, rightOffset);\r\n        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))\r\n            return base;\r\n        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;\r\n        if (left)\r\n            return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));\r\n        else\r\n            return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);\r\n    }\r\n    forEachLine(from, to, doc, top, offset, f) {\r\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\r\n        if (this.break) {\r\n            if (from < rightOffset)\r\n                this.left.forEachLine(from, to, doc, top, offset, f);\r\n            if (to >= rightOffset)\r\n                this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);\r\n        }\r\n        else {\r\n            let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);\r\n            if (from < mid.from)\r\n                this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);\r\n            if (mid.to >= from && mid.from <= to)\r\n                f(mid);\r\n            if (to > mid.to)\r\n                this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);\r\n        }\r\n    }\r\n    replace(from, to, nodes) {\r\n        let rightStart = this.left.length + this.break;\r\n        if (to < rightStart)\r\n            return this.balanced(this.left.replace(from, to, nodes), this.right);\r\n        if (from > this.left.length)\r\n            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));\r\n        let result = [];\r\n        if (from > 0)\r\n            this.decomposeLeft(from, result);\r\n        let left = result.length;\r\n        for (let node of nodes)\r\n            result.push(node);\r\n        if (from > 0)\r\n            mergeGaps(result, left - 1);\r\n        if (to < this.length) {\r\n            let right = result.length;\r\n            this.decomposeRight(to, result);\r\n            mergeGaps(result, right);\r\n        }\r\n        return HeightMap.of(result);\r\n    }\r\n    decomposeLeft(to, result) {\r\n        let left = this.left.length;\r\n        if (to <= left)\r\n            return this.left.decomposeLeft(to, result);\r\n        result.push(this.left);\r\n        if (this.break) {\r\n            left++;\r\n            if (to >= left)\r\n                result.push(null);\r\n        }\r\n        if (to > left)\r\n            this.right.decomposeLeft(to - left, result);\r\n    }\r\n    decomposeRight(from, result) {\r\n        let left = this.left.length, right = left + this.break;\r\n        if (from >= right)\r\n            return this.right.decomposeRight(from - right, result);\r\n        if (from < left)\r\n            this.left.decomposeRight(from, result);\r\n        if (this.break && from < right)\r\n            result.push(null);\r\n        result.push(this.right);\r\n    }\r\n    balanced(left, right) {\r\n        if (left.size > 2 * right.size || right.size > 2 * left.size)\r\n            return HeightMap.of(this.break ? [left, null, right] : [left, right]);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.height = left.height + right.height;\r\n        this.outdated = left.outdated || right.outdated;\r\n        this.size = left.size + right.size;\r\n        this.length = left.length + this.break + right.length;\r\n        return this;\r\n    }\r\n    updateHeight(oracle, offset = 0, force = false, measured) {\r\n        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;\r\n        if (measured && measured.from <= offset + left.length && measured.more)\r\n            rebalance = left = left.updateHeight(oracle, offset, force, measured);\r\n        else\r\n            left.updateHeight(oracle, offset, force);\r\n        if (measured && measured.from <= rightStart + right.length && measured.more)\r\n            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);\r\n        else\r\n            right.updateHeight(oracle, rightStart, force);\r\n        if (rebalance)\r\n            return this.balanced(left, right);\r\n        this.height = this.left.height + this.right.height;\r\n        this.outdated = false;\r\n        return this;\r\n    }\r\n    toString() { return this.left + (this.break ? \" \" : \"-\") + this.right; }\r\n}\r\nfunction mergeGaps(nodes, around) {\r\n    let before, after;\r\n    if (nodes[around] == null &&\r\n        (before = nodes[around - 1]) instanceof HeightMapGap &&\r\n        (after = nodes[around + 1]) instanceof HeightMapGap)\r\n        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));\r\n}\r\nconst relevantWidgetHeight = 5;\r\nclass NodeBuilder {\r\n    constructor(pos, oracle) {\r\n        this.pos = pos;\r\n        this.oracle = oracle;\r\n        this.nodes = [];\r\n        this.lineStart = -1;\r\n        this.lineEnd = -1;\r\n        this.covering = null;\r\n        this.writtenTo = pos;\r\n    }\r\n    get isCovered() {\r\n        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;\r\n    }\r\n    span(_from, to) {\r\n        if (this.lineStart > -1) {\r\n            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];\r\n            if (last instanceof HeightMapText)\r\n                last.length += end - this.pos;\r\n            else if (end > this.pos || !this.isCovered)\r\n                this.nodes.push(new HeightMapText(end - this.pos, -1));\r\n            this.writtenTo = end;\r\n            if (to > end) {\r\n                this.nodes.push(null);\r\n                this.writtenTo++;\r\n                this.lineStart = -1;\r\n            }\r\n        }\r\n        this.pos = to;\r\n    }\r\n    point(from, to, deco) {\r\n        if (from < to || deco.heightRelevant) {\r\n            let height = deco.widget ? deco.widget.estimatedHeight : 0;\r\n            if (height < 0)\r\n                height = this.oracle.lineHeight;\r\n            let len = to - from;\r\n            if (deco.block) {\r\n                this.addBlock(new HeightMapBlock(len, height, deco.type));\r\n            }\r\n            else if (len || height >= relevantWidgetHeight) {\r\n                this.addLineDeco(height, len);\r\n            }\r\n        }\r\n        else if (to > from) {\r\n            this.span(from, to);\r\n        }\r\n        if (this.lineEnd > -1 && this.lineEnd < this.pos)\r\n            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;\r\n    }\r\n    enterLine() {\r\n        if (this.lineStart > -1)\r\n            return;\r\n        let { from, to } = this.oracle.doc.lineAt(this.pos);\r\n        this.lineStart = from;\r\n        this.lineEnd = to;\r\n        if (this.writtenTo < from) {\r\n            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)\r\n                this.nodes.push(this.blankContent(this.writtenTo, from - 1));\r\n            this.nodes.push(null);\r\n        }\r\n        if (this.pos > from)\r\n            this.nodes.push(new HeightMapText(this.pos - from, -1));\r\n        this.writtenTo = this.pos;\r\n    }\r\n    blankContent(from, to) {\r\n        let gap = new HeightMapGap(to - from);\r\n        if (this.oracle.doc.lineAt(from).to == to)\r\n            gap.flags |= 4 /* Flag.SingleLine */;\r\n        return gap;\r\n    }\r\n    ensureLine() {\r\n        this.enterLine();\r\n        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;\r\n        if (last instanceof HeightMapText)\r\n            return last;\r\n        let line = new HeightMapText(0, -1);\r\n        this.nodes.push(line);\r\n        return line;\r\n    }\r\n    addBlock(block) {\r\n        this.enterLine();\r\n        if (block.type == BlockType.WidgetAfter && !this.isCovered)\r\n            this.ensureLine();\r\n        this.nodes.push(block);\r\n        this.writtenTo = this.pos = this.pos + block.length;\r\n        if (block.type != BlockType.WidgetBefore)\r\n            this.covering = block;\r\n    }\r\n    addLineDeco(height, length) {\r\n        let line = this.ensureLine();\r\n        line.length += length;\r\n        line.collapsed += length;\r\n        line.widgetHeight = Math.max(line.widgetHeight, height);\r\n        this.writtenTo = this.pos = this.pos + length;\r\n    }\r\n    finish(from) {\r\n        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];\r\n        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)\r\n            this.nodes.push(new HeightMapText(0, -1));\r\n        else if (this.writtenTo < this.pos || last == null)\r\n            this.nodes.push(this.blankContent(this.writtenTo, this.pos));\r\n        let pos = from;\r\n        for (let node of this.nodes) {\r\n            if (node instanceof HeightMapText)\r\n                node.updateHeight(this.oracle, pos);\r\n            pos += node ? node.length : 1;\r\n        }\r\n        return this.nodes;\r\n    }\r\n    // Always called with a region that on both sides either stretches\r\n    // to a line break or the end of the document.\r\n    // The returned array uses null to indicate line breaks, but never\r\n    // starts or ends in a line break, or has multiple line breaks next\r\n    // to each other.\r\n    static build(oracle, decorations, from, to) {\r\n        let builder = new NodeBuilder(from, oracle);\r\n        _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.spans(decorations, from, to, builder, 0);\r\n        return builder.finish(from);\r\n    }\r\n}\r\nfunction heightRelevantDecoChanges(a, b, diff) {\r\n    let comp = new DecorationComparator;\r\n    _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.compare(a, b, diff, comp, 0);\r\n    return comp.changes;\r\n}\r\nclass DecorationComparator {\r\n    constructor() {\r\n        this.changes = [];\r\n    }\r\n    compareRange() { }\r\n    comparePoint(from, to, a, b) {\r\n        if (from < to || a && a.heightRelevant || b && b.heightRelevant)\r\n            addRange(from, to, this.changes, 5);\r\n    }\r\n}\r\n\r\nfunction visiblePixelRange(dom, paddingTop) {\r\n    let rect = dom.getBoundingClientRect();\r\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\r\n    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);\r\n    let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);\r\n    for (let parent = dom.parentNode; parent && parent != doc.body;) {\r\n        if (parent.nodeType == 1) {\r\n            let elt = parent;\r\n            let style = window.getComputedStyle(elt);\r\n            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&\r\n                style.overflow != \"visible\") {\r\n                let parentRect = elt.getBoundingClientRect();\r\n                left = Math.max(left, parentRect.left);\r\n                right = Math.min(right, parentRect.right);\r\n                top = Math.max(top, parentRect.top);\r\n                bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);\r\n            }\r\n            parent = style.position == \"absolute\" || style.position == \"fixed\" ? elt.offsetParent : elt.parentNode;\r\n        }\r\n        else if (parent.nodeType == 11) { // Shadow root\r\n            parent = parent.host;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { left: left - rect.left, right: Math.max(left, right) - rect.left,\r\n        top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };\r\n}\r\nfunction fullPixelRange(dom, paddingTop) {\r\n    let rect = dom.getBoundingClientRect();\r\n    return { left: 0, right: rect.right - rect.left,\r\n        top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };\r\n}\r\n// Line gaps are placeholder widgets used to hide pieces of overlong\r\n// lines within the viewport, as a kludge to keep the editor\r\n// responsive when a ridiculously long line is loaded into it.\r\nclass LineGap {\r\n    constructor(from, to, size) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.size = size;\r\n    }\r\n    static same(a, b) {\r\n        if (a.length != b.length)\r\n            return false;\r\n        for (let i = 0; i < a.length; i++) {\r\n            let gA = a[i], gB = b[i];\r\n            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    draw(wrapping) {\r\n        return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);\r\n    }\r\n}\r\nclass LineGapWidget extends WidgetType {\r\n    constructor(size, vertical) {\r\n        super();\r\n        this.size = size;\r\n        this.vertical = vertical;\r\n    }\r\n    eq(other) { return other.size == this.size && other.vertical == this.vertical; }\r\n    toDOM() {\r\n        let elt = document.createElement(\"div\");\r\n        if (this.vertical) {\r\n            elt.style.height = this.size + \"px\";\r\n        }\r\n        else {\r\n            elt.style.width = this.size + \"px\";\r\n            elt.style.height = \"2px\";\r\n            elt.style.display = \"inline-block\";\r\n        }\r\n        return elt;\r\n    }\r\n    get estimatedHeight() { return this.vertical ? this.size : -1; }\r\n}\r\nclass ViewState {\r\n    constructor(state) {\r\n        this.state = state;\r\n        // These are contentDOM-local coordinates\r\n        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };\r\n        this.inView = true;\r\n        this.paddingTop = 0;\r\n        this.paddingBottom = 0;\r\n        this.contentDOMWidth = 0;\r\n        this.contentDOMHeight = 0;\r\n        this.editorHeight = 0;\r\n        this.editorWidth = 0;\r\n        // See VP.MaxDOMHeight\r\n        this.scaler = IdScaler;\r\n        this.scrollTarget = null;\r\n        // Briefly set to true when printing, to disable viewport limiting\r\n        this.printing = false;\r\n        // Flag set when editor content was redrawn, so that the next\r\n        // measure stage knows it must read DOM layout\r\n        this.mustMeasureContent = true;\r\n        this.defaultTextDirection = Direction.LTR;\r\n        this.visibleRanges = [];\r\n        // Cursor 'assoc' is only significant when the cursor is on a line\r\n        // wrap point, where it must stick to the character that it is\r\n        // associated with. Since browsers don't provide a reasonable\r\n        // interface to set or query this, when a selection is set that\r\n        // might cause this to be significant, this flag is set. The next\r\n        // measure phase will check whether the cursor is on a line-wrapping\r\n        // boundary and, if so, reset it to make sure it is positioned in\r\n        // the right place.\r\n        this.mustEnforceCursorAssoc = false;\r\n        let guessWrapping = state.facet(contentAttributes).some(v => typeof v != \"function\" && v.class == \"cm-lineWrapping\");\r\n        this.heightOracle = new HeightOracle(guessWrapping);\r\n        this.stateDeco = state.facet(decorations).filter(d => typeof d != \"function\");\r\n        this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);\r\n        this.viewport = this.getViewport(0, null);\r\n        this.updateViewportLines();\r\n        this.updateForViewport();\r\n        this.lineGaps = this.ensureLineGaps([]);\r\n        this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));\r\n        this.computeVisibleRanges();\r\n    }\r\n    updateForViewport() {\r\n        let viewports = [this.viewport], { main } = this.state.selection;\r\n        for (let i = 0; i <= 1; i++) {\r\n            let pos = i ? main.head : main.anchor;\r\n            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {\r\n                let { from, to } = this.lineBlockAt(pos);\r\n                viewports.push(new Viewport(from, to));\r\n            }\r\n        }\r\n        this.viewports = viewports.sort((a, b) => a.from - b.from);\r\n        this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :\r\n            new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);\r\n    }\r\n    updateViewportLines() {\r\n        this.viewportLines = [];\r\n        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {\r\n            this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));\r\n        });\r\n    }\r\n    update(update, scrollTarget = null) {\r\n        this.state = update.state;\r\n        let prevDeco = this.stateDeco;\r\n        this.stateDeco = this.state.facet(decorations).filter(d => typeof d != \"function\");\r\n        let contentChanges = update.changedRanges;\r\n        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.ChangeSet.empty(this.state.doc.length)));\r\n        let prevHeight = this.heightMap.height;\r\n        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);\r\n        if (this.heightMap.height != prevHeight)\r\n            update.flags |= 2 /* UpdateFlag.Height */;\r\n        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;\r\n        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||\r\n            !this.viewportIsAppropriate(viewport))\r\n            viewport = this.getViewport(0, scrollTarget);\r\n        let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||\r\n            viewport.from != this.viewport.from || viewport.to != this.viewport.to;\r\n        this.viewport = viewport;\r\n        this.updateForViewport();\r\n        if (updateLines)\r\n            this.updateViewportLines();\r\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))\r\n            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));\r\n        update.flags |= this.computeVisibleRanges();\r\n        if (scrollTarget)\r\n            this.scrollTarget = scrollTarget;\r\n        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&\r\n            update.state.selection.main.empty && update.state.selection.main.assoc &&\r\n            !update.state.facet(nativeSelectionHidden))\r\n            this.mustEnforceCursorAssoc = true;\r\n    }\r\n    measure(view) {\r\n        let dom = view.contentDOM, style = window.getComputedStyle(dom);\r\n        let oracle = this.heightOracle;\r\n        let whiteSpace = style.whiteSpace;\r\n        this.defaultTextDirection = style.direction == \"rtl\" ? Direction.RTL : Direction.LTR;\r\n        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);\r\n        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;\r\n        this.contentDOMHeight = dom.clientHeight;\r\n        this.mustMeasureContent = false;\r\n        let result = 0, bias = 0;\r\n        // Vertical padding\r\n        let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;\r\n        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {\r\n            this.paddingTop = paddingTop;\r\n            this.paddingBottom = paddingBottom;\r\n            result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;\r\n        }\r\n        if (this.editorWidth != view.scrollDOM.clientWidth) {\r\n            if (oracle.lineWrapping)\r\n                measureContent = true;\r\n            this.editorWidth = view.scrollDOM.clientWidth;\r\n            result |= 8 /* UpdateFlag.Geometry */;\r\n        }\r\n        // Pixel viewport\r\n        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);\r\n        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;\r\n        this.pixelViewport = pixelViewport;\r\n        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;\r\n        if (inView != this.inView) {\r\n            this.inView = inView;\r\n            if (inView)\r\n                measureContent = true;\r\n        }\r\n        if (!this.inView && !this.scrollTarget)\r\n            return 0;\r\n        let contentWidth = dom.clientWidth;\r\n        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {\r\n            this.contentDOMWidth = contentWidth;\r\n            this.editorHeight = view.scrollDOM.clientHeight;\r\n            result |= 8 /* UpdateFlag.Geometry */;\r\n        }\r\n        if (measureContent) {\r\n            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);\r\n            if (oracle.mustRefreshForHeights(lineHeights))\r\n                refresh = true;\r\n            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {\r\n                let { lineHeight, charWidth } = view.docView.measureTextSize();\r\n                refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);\r\n                if (refresh) {\r\n                    view.docView.minWidth = 0;\r\n                    result |= 8 /* UpdateFlag.Geometry */;\r\n                }\r\n            }\r\n            if (dTop > 0 && dBottom > 0)\r\n                bias = Math.max(dTop, dBottom);\r\n            else if (dTop < 0 && dBottom < 0)\r\n                bias = Math.min(dTop, dBottom);\r\n            oracle.heightChanged = false;\r\n            for (let vp of this.viewports) {\r\n                let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);\r\n                this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));\r\n            }\r\n            if (oracle.heightChanged)\r\n                result |= 2 /* UpdateFlag.Height */;\r\n        }\r\n        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||\r\n            this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);\r\n        if (viewportChange)\r\n            this.viewport = this.getViewport(bias, this.scrollTarget);\r\n        this.updateForViewport();\r\n        if ((result & 2 /* UpdateFlag.Height */) || viewportChange)\r\n            this.updateViewportLines();\r\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))\r\n            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));\r\n        result |= this.computeVisibleRanges();\r\n        if (this.mustEnforceCursorAssoc) {\r\n            this.mustEnforceCursorAssoc = false;\r\n            // This is done in the read stage, because moving the selection\r\n            // to a line end is going to trigger a layout anyway, so it\r\n            // can't be a pure write. It should be rare that it does any\r\n            // writing.\r\n            view.docView.enforceCursorAssoc();\r\n        }\r\n        return result;\r\n    }\r\n    get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }\r\n    get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }\r\n    getViewport(bias, scrollTarget) {\r\n        // This will divide VP.Margin between the top and the\r\n        // bottom, depending on the bias (the change in viewport position\r\n        // since the last update). It'll hold a number between 0 and 1\r\n        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));\r\n        let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;\r\n        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, doc, 0, 0).to);\r\n        // If scrollTarget is given, make sure the viewport includes that position\r\n        if (scrollTarget) {\r\n            let { head } = scrollTarget.range;\r\n            if (head < viewport.from || head > viewport.to) {\r\n                let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);\r\n                let block = map.lineAt(head, QueryType.ByPos, doc, 0, 0), topPos;\r\n                if (scrollTarget.y == \"center\")\r\n                    topPos = (block.top + block.bottom) / 2 - viewHeight / 2;\r\n                else if (scrollTarget.y == \"start\" || scrollTarget.y == \"nearest\" && head < viewport.from)\r\n                    topPos = block.top;\r\n                else\r\n                    topPos = block.bottom - viewHeight;\r\n                viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);\r\n            }\r\n        }\r\n        return viewport;\r\n    }\r\n    mapViewport(viewport, changes) {\r\n        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);\r\n        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);\r\n    }\r\n    // Checks if a given viewport covers the visible part of the\r\n    // document and not too much beyond that.\r\n    viewportIsAppropriate({ from, to }, bias = 0) {\r\n        if (!this.inView)\r\n            return true;\r\n        let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);\r\n        let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);\r\n        let { visibleTop, visibleBottom } = this;\r\n        return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&\r\n            (to == this.state.doc.length ||\r\n                bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&\r\n            (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);\r\n    }\r\n    mapLineGaps(gaps, changes) {\r\n        if (!gaps.length || changes.empty)\r\n            return gaps;\r\n        let mapped = [];\r\n        for (let gap of gaps)\r\n            if (!changes.touchesRange(gap.from, gap.to))\r\n                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));\r\n        return mapped;\r\n    }\r\n    // Computes positions in the viewport where the start or end of a\r\n    // line should be hidden, trying to reuse existing line gaps when\r\n    // appropriate to avoid unneccesary redraws.\r\n    // Uses crude character-counting for the positioning and sizing,\r\n    // since actual DOM coordinates aren't always available and\r\n    // predictable. Relies on generous margins (see LG.Margin) to hide\r\n    // the artifacts this might produce from the user.\r\n    ensureLineGaps(current, mayMeasure) {\r\n        let wrapping = this.heightOracle.lineWrapping;\r\n        let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;\r\n        // The non-wrapping logic won't work at all in predominantly right-to-left text.\r\n        if (this.defaultTextDirection != Direction.LTR && !wrapping)\r\n            return [];\r\n        let gaps = [];\r\n        let addGap = (from, to, line, structure) => {\r\n            if (to - from < halfMargin)\r\n                return;\r\n            let sel = this.state.selection.main, avoid = [sel.from];\r\n            if (!sel.empty)\r\n                avoid.push(sel.to);\r\n            for (let pos of avoid) {\r\n                if (pos > from && pos < to) {\r\n                    addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);\r\n                    addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);\r\n                    return;\r\n                }\r\n            }\r\n            let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&\r\n                Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&\r\n                !avoid.some(pos => gap.from < pos && gap.to > pos));\r\n            if (!gap) {\r\n                // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping\r\n                if (to < line.to && mayMeasure && wrapping &&\r\n                    mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {\r\n                    let lineStart = mayMeasure.moveToLineBoundary(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(to), false, true).head;\r\n                    if (lineStart > from)\r\n                        to = lineStart;\r\n                }\r\n                gap = new LineGap(from, to, this.gapSize(line, from, to, structure));\r\n            }\r\n            gaps.push(gap);\r\n        };\r\n        for (let line of this.viewportLines) {\r\n            if (line.length < doubleMargin)\r\n                continue;\r\n            let structure = lineStructure(line.from, line.to, this.stateDeco);\r\n            if (structure.total < doubleMargin)\r\n                continue;\r\n            let target = this.scrollTarget ? this.scrollTarget.range.head : null;\r\n            let viewFrom, viewTo;\r\n            if (wrapping) {\r\n                let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;\r\n                let top, bot;\r\n                if (target != null) {\r\n                    let targetFrac = findFraction(structure, target);\r\n                    let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;\r\n                    top = targetFrac - spaceFrac;\r\n                    bot = targetFrac + spaceFrac;\r\n                }\r\n                else {\r\n                    top = (this.visibleTop - line.top - marginHeight) / line.height;\r\n                    bot = (this.visibleBottom - line.top + marginHeight) / line.height;\r\n                }\r\n                viewFrom = findPosition(structure, top);\r\n                viewTo = findPosition(structure, bot);\r\n            }\r\n            else {\r\n                let totalWidth = structure.total * this.heightOracle.charWidth;\r\n                let marginWidth = margin * this.heightOracle.charWidth;\r\n                let left, right;\r\n                if (target != null) {\r\n                    let targetFrac = findFraction(structure, target);\r\n                    let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;\r\n                    left = targetFrac - spaceFrac;\r\n                    right = targetFrac + spaceFrac;\r\n                }\r\n                else {\r\n                    left = (this.pixelViewport.left - marginWidth) / totalWidth;\r\n                    right = (this.pixelViewport.right + marginWidth) / totalWidth;\r\n                }\r\n                viewFrom = findPosition(structure, left);\r\n                viewTo = findPosition(structure, right);\r\n            }\r\n            if (viewFrom > line.from)\r\n                addGap(line.from, viewFrom, line, structure);\r\n            if (viewTo < line.to)\r\n                addGap(viewTo, line.to, line, structure);\r\n        }\r\n        return gaps;\r\n    }\r\n    gapSize(line, from, to, structure) {\r\n        let fraction = findFraction(structure, to) - findFraction(structure, from);\r\n        if (this.heightOracle.lineWrapping) {\r\n            return line.height * fraction;\r\n        }\r\n        else {\r\n            return structure.total * this.heightOracle.charWidth * fraction;\r\n        }\r\n    }\r\n    updateLineGaps(gaps) {\r\n        if (!LineGap.same(gaps, this.lineGaps)) {\r\n            this.lineGaps = gaps;\r\n            this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));\r\n        }\r\n    }\r\n    computeVisibleRanges() {\r\n        let deco = this.stateDeco;\r\n        if (this.lineGaps.length)\r\n            deco = deco.concat(this.lineGapDeco);\r\n        let ranges = [];\r\n        _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {\r\n            span(from, to) { ranges.push({ from, to }); },\r\n            point() { }\r\n        }, 20);\r\n        let changed = ranges.length != this.visibleRanges.length ||\r\n            this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);\r\n        this.visibleRanges = ranges;\r\n        return changed ? 4 /* UpdateFlag.Viewport */ : 0;\r\n    }\r\n    lineBlockAt(pos) {\r\n        return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||\r\n            scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, 0, 0), this.scaler);\r\n    }\r\n    lineBlockAtHeight(height) {\r\n        return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.state.doc, 0, 0), this.scaler);\r\n    }\r\n    elementAtHeight(height) {\r\n        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);\r\n    }\r\n    get docHeight() {\r\n        return this.scaler.toDOM(this.heightMap.height);\r\n    }\r\n    get contentHeight() {\r\n        return this.docHeight + this.paddingTop + this.paddingBottom;\r\n    }\r\n}\r\nclass Viewport {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\nfunction lineStructure(from, to, stateDeco) {\r\n    let ranges = [], pos = from, total = 0;\r\n    _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.spans(stateDeco, from, to, {\r\n        span() { },\r\n        point(from, to) {\r\n            if (from > pos) {\r\n                ranges.push({ from: pos, to: from });\r\n                total += from - pos;\r\n            }\r\n            pos = to;\r\n        }\r\n    }, 20); // We're only interested in collapsed ranges of a significant size\r\n    if (pos < to) {\r\n        ranges.push({ from: pos, to });\r\n        total += to - pos;\r\n    }\r\n    return { total, ranges };\r\n}\r\nfunction findPosition({ total, ranges }, ratio) {\r\n    if (ratio <= 0)\r\n        return ranges[0].from;\r\n    if (ratio >= 1)\r\n        return ranges[ranges.length - 1].to;\r\n    let dist = Math.floor(total * ratio);\r\n    for (let i = 0;; i++) {\r\n        let { from, to } = ranges[i], size = to - from;\r\n        if (dist <= size)\r\n            return from + dist;\r\n        dist -= size;\r\n    }\r\n}\r\nfunction findFraction(structure, pos) {\r\n    let counted = 0;\r\n    for (let { from, to } of structure.ranges) {\r\n        if (pos <= to) {\r\n            counted += pos - from;\r\n            break;\r\n        }\r\n        counted += to - from;\r\n    }\r\n    return counted / structure.total;\r\n}\r\nfunction find(array, f) {\r\n    for (let val of array)\r\n        if (f(val))\r\n            return val;\r\n    return undefined;\r\n}\r\n// Don't scale when the document height is within the range of what\r\n// the DOM can handle.\r\nconst IdScaler = {\r\n    toDOM(n) { return n; },\r\n    fromDOM(n) { return n; },\r\n    scale: 1\r\n};\r\n// When the height is too big (> VP.MaxDOMHeight), scale down the\r\n// regions outside the viewports so that the total height is\r\n// VP.MaxDOMHeight.\r\nclass BigScaler {\r\n    constructor(doc, heightMap, viewports) {\r\n        let vpHeight = 0, base = 0, domBase = 0;\r\n        this.viewports = viewports.map(({ from, to }) => {\r\n            let top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;\r\n            let bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;\r\n            vpHeight += bottom - top;\r\n            return { from, to, top, bottom, domTop: 0, domBottom: 0 };\r\n        });\r\n        this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);\r\n        for (let obj of this.viewports) {\r\n            obj.domTop = domBase + (obj.top - base) * this.scale;\r\n            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);\r\n            base = obj.bottom;\r\n        }\r\n    }\r\n    toDOM(n) {\r\n        for (let i = 0, base = 0, domBase = 0;; i++) {\r\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\r\n            if (!vp || n < vp.top)\r\n                return domBase + (n - base) * this.scale;\r\n            if (n <= vp.bottom)\r\n                return vp.domTop + (n - vp.top);\r\n            base = vp.bottom;\r\n            domBase = vp.domBottom;\r\n        }\r\n    }\r\n    fromDOM(n) {\r\n        for (let i = 0, base = 0, domBase = 0;; i++) {\r\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\r\n            if (!vp || n < vp.domTop)\r\n                return base + (n - domBase) / this.scale;\r\n            if (n <= vp.domBottom)\r\n                return vp.top + (n - vp.domTop);\r\n            base = vp.bottom;\r\n            domBase = vp.domBottom;\r\n        }\r\n    }\r\n}\r\nfunction scaleBlock(block, scaler) {\r\n    if (scaler.scale == 1)\r\n        return block;\r\n    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);\r\n    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);\r\n}\r\n\r\nconst theme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({ combine: strs => strs.join(\" \") });\r\nconst darkTheme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({ combine: values => values.indexOf(true) > -1 });\r\nconst baseThemeID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName(), baseLightID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName(), baseDarkID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName();\r\nconst lightDarkIDs = { \"&light\": \".\" + baseLightID, \"&dark\": \".\" + baseDarkID };\r\nfunction buildTheme(main, spec, scopes) {\r\n    return new style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule(spec, {\r\n        finish(sel) {\r\n            return /&/.test(sel) ? sel.replace(/&\\w*/, m => {\r\n                if (m == \"&\")\r\n                    return main;\r\n                if (!scopes || !scopes[m])\r\n                    throw new RangeError(`Unsupported selector: ${m}`);\r\n                return scopes[m];\r\n            }) : main + \" \" + sel;\r\n        }\r\n    });\r\n}\r\nconst baseTheme$1 = /*@__PURE__*/buildTheme(\".\" + baseThemeID, {\r\n    \"&\": {\r\n        position: \"relative !important\",\r\n        boxSizing: \"border-box\",\r\n        \"&.cm-focused\": {\r\n            // Provide a simple default outline to make sure a focused\r\n            // editor is visually distinct. Can't leave the default behavior\r\n            // because that will apply to the content element, which is\r\n            // inside the scrollable container and doesn't include the\r\n            // gutters. We also can't use an 'auto' outline, since those\r\n            // are, for some reason, drawn behind the element content, which\r\n            // will cause things like the active line background to cover\r\n            // the outline (#297).\r\n            outline: \"1px dotted #212121\"\r\n        },\r\n        display: \"flex !important\",\r\n        flexDirection: \"column\"\r\n    },\r\n    \".cm-scroller\": {\r\n        display: \"flex !important\",\r\n        alignItems: \"flex-start !important\",\r\n        fontFamily: \"monospace\",\r\n        lineHeight: 1.4,\r\n        height: \"100%\",\r\n        overflowX: \"auto\",\r\n        position: \"relative\",\r\n        zIndex: 0\r\n    },\r\n    \".cm-content\": {\r\n        margin: 0,\r\n        flexGrow: 2,\r\n        flexShrink: 0,\r\n        display: \"block\",\r\n        whiteSpace: \"pre\",\r\n        wordWrap: \"normal\",\r\n        boxSizing: \"border-box\",\r\n        padding: \"4px 0\",\r\n        outline: \"none\",\r\n        \"&[contenteditable=true]\": {\r\n            WebkitUserModify: \"read-write-plaintext-only\",\r\n        }\r\n    },\r\n    \".cm-lineWrapping\": {\r\n        whiteSpace_fallback: \"pre-wrap\",\r\n        whiteSpace: \"break-spaces\",\r\n        wordBreak: \"break-word\",\r\n        overflowWrap: \"anywhere\",\r\n        flexShrink: 1\r\n    },\r\n    \"&light .cm-content\": { caretColor: \"black\" },\r\n    \"&dark .cm-content\": { caretColor: \"white\" },\r\n    \".cm-line\": {\r\n        display: \"block\",\r\n        padding: \"0 2px 0 6px\"\r\n    },\r\n    \".cm-layer\": {\r\n        contain: \"size style\",\r\n        \"& > *\": {\r\n            position: \"absolute\"\r\n        }\r\n    },\r\n    \"&light .cm-selectionBackground\": {\r\n        background: \"#d9d9d9\"\r\n    },\r\n    \"&dark .cm-selectionBackground\": {\r\n        background: \"#222\"\r\n    },\r\n    \"&light.cm-focused .cm-selectionBackground\": {\r\n        background: \"#d7d4f0\"\r\n    },\r\n    \"&dark.cm-focused .cm-selectionBackground\": {\r\n        background: \"#233\"\r\n    },\r\n    \".cm-cursorLayer\": {\r\n        pointerEvents: \"none\"\r\n    },\r\n    \"&.cm-focused .cm-cursorLayer\": {\r\n        animation: \"steps(1) cm-blink 1.2s infinite\"\r\n    },\r\n    // Two animations defined so that we can switch between them to\r\n    // restart the animation without forcing another style\r\n    // recomputation.\r\n    \"@keyframes cm-blink\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\r\n    \"@keyframes cm-blink2\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\r\n    \".cm-cursor, .cm-dropCursor\": {\r\n        borderLeft: \"1.2px solid black\",\r\n        marginLeft: \"-0.6px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    \".cm-cursor\": {\r\n        display: \"none\"\r\n    },\r\n    \"&dark .cm-cursor\": {\r\n        borderLeftColor: \"#444\"\r\n    },\r\n    \"&.cm-focused .cm-cursor\": {\r\n        display: \"block\"\r\n    },\r\n    \"&light .cm-activeLine\": { backgroundColor: \"#cceeff44\" },\r\n    \"&dark .cm-activeLine\": { backgroundColor: \"#99eeff33\" },\r\n    \"&light .cm-specialChar\": { color: \"red\" },\r\n    \"&dark .cm-specialChar\": { color: \"#f78\" },\r\n    \".cm-gutters\": {\r\n        flexShrink: 0,\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        boxSizing: \"border-box\",\r\n        left: 0,\r\n        zIndex: 200\r\n    },\r\n    \"&light .cm-gutters\": {\r\n        backgroundColor: \"#f5f5f5\",\r\n        color: \"#6c6c6c\",\r\n        borderRight: \"1px solid #ddd\"\r\n    },\r\n    \"&dark .cm-gutters\": {\r\n        backgroundColor: \"#333338\",\r\n        color: \"#ccc\"\r\n    },\r\n    \".cm-gutter\": {\r\n        display: \"flex !important\",\r\n        flexDirection: \"column\",\r\n        flexShrink: 0,\r\n        boxSizing: \"border-box\",\r\n        minHeight: \"100%\",\r\n        overflow: \"hidden\"\r\n    },\r\n    \".cm-gutterElement\": {\r\n        boxSizing: \"border-box\"\r\n    },\r\n    \".cm-lineNumbers .cm-gutterElement\": {\r\n        padding: \"0 3px 0 5px\",\r\n        minWidth: \"20px\",\r\n        textAlign: \"right\",\r\n        whiteSpace: \"nowrap\"\r\n    },\r\n    \"&light .cm-activeLineGutter\": {\r\n        backgroundColor: \"#e2f2ff\"\r\n    },\r\n    \"&dark .cm-activeLineGutter\": {\r\n        backgroundColor: \"#222227\"\r\n    },\r\n    \".cm-panels\": {\r\n        boxSizing: \"border-box\",\r\n        position: \"sticky\",\r\n        left: 0,\r\n        right: 0\r\n    },\r\n    \"&light .cm-panels\": {\r\n        backgroundColor: \"#f5f5f5\",\r\n        color: \"black\"\r\n    },\r\n    \"&light .cm-panels-top\": {\r\n        borderBottom: \"1px solid #ddd\"\r\n    },\r\n    \"&light .cm-panels-bottom\": {\r\n        borderTop: \"1px solid #ddd\"\r\n    },\r\n    \"&dark .cm-panels\": {\r\n        backgroundColor: \"#333338\",\r\n        color: \"white\"\r\n    },\r\n    \".cm-tab\": {\r\n        display: \"inline-block\",\r\n        overflow: \"hidden\",\r\n        verticalAlign: \"bottom\"\r\n    },\r\n    \".cm-widgetBuffer\": {\r\n        verticalAlign: \"text-top\",\r\n        height: \"1em\",\r\n        width: 0,\r\n        display: \"inline\"\r\n    },\r\n    \".cm-placeholder\": {\r\n        color: \"#888\",\r\n        display: \"inline-block\",\r\n        verticalAlign: \"top\",\r\n    },\r\n    \".cm-highlightSpace:before\": {\r\n        content: \"attr(data-display)\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        color: \"#888\"\r\n    },\r\n    \".cm-highlightTab\": {\r\n        backgroundImage: `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')`,\r\n        backgroundSize: \"auto 100%\",\r\n        backgroundPosition: \"right 90%\",\r\n        backgroundRepeat: \"no-repeat\"\r\n    },\r\n    \".cm-trailingSpace\": {\r\n        backgroundColor: \"#ff332255\"\r\n    },\r\n    \".cm-button\": {\r\n        verticalAlign: \"middle\",\r\n        color: \"inherit\",\r\n        fontSize: \"70%\",\r\n        padding: \".2em 1em\",\r\n        borderRadius: \"1px\"\r\n    },\r\n    \"&light .cm-button\": {\r\n        backgroundImage: \"linear-gradient(#eff1f5, #d9d9df)\",\r\n        border: \"1px solid #888\",\r\n        \"&:active\": {\r\n            backgroundImage: \"linear-gradient(#b4b4b4, #d0d3d6)\"\r\n        }\r\n    },\r\n    \"&dark .cm-button\": {\r\n        backgroundImage: \"linear-gradient(#393939, #111)\",\r\n        border: \"1px solid #888\",\r\n        \"&:active\": {\r\n            backgroundImage: \"linear-gradient(#111, #333)\"\r\n        }\r\n    },\r\n    \".cm-textfield\": {\r\n        verticalAlign: \"middle\",\r\n        color: \"inherit\",\r\n        fontSize: \"70%\",\r\n        border: \"1px solid silver\",\r\n        padding: \".2em .5em\"\r\n    },\r\n    \"&light .cm-textfield\": {\r\n        backgroundColor: \"white\"\r\n    },\r\n    \"&dark .cm-textfield\": {\r\n        border: \"1px solid #555\",\r\n        backgroundColor: \"inherit\"\r\n    }\r\n}, lightDarkIDs);\r\n\r\nclass DOMChange {\r\n    constructor(view, start, end, typeOver) {\r\n        this.typeOver = typeOver;\r\n        this.bounds = null;\r\n        this.text = \"\";\r\n        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;\r\n        if (view.state.readOnly && start > -1) {\r\n            // Ignore changes when the editor is read-only\r\n            this.newSel = null;\r\n        }\r\n        else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {\r\n            let selPoints = iHead || iAnchor ? [] : selectionPoints(view);\r\n            let reader = new DOMReader(selPoints, view.state);\r\n            reader.readRange(this.bounds.startDOM, this.bounds.endDOM);\r\n            this.text = reader.text;\r\n            this.newSel = selectionFromPoints(selPoints, this.bounds.from);\r\n        }\r\n        else {\r\n            let domSel = view.observer.selectionRange;\r\n            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||\r\n                !contains(view.contentDOM, domSel.focusNode)\r\n                ? view.state.selection.main.head\r\n                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);\r\n            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||\r\n                !contains(view.contentDOM, domSel.anchorNode)\r\n                ? view.state.selection.main.anchor\r\n                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);\r\n            this.newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.single(anchor, head);\r\n        }\r\n    }\r\n}\r\nfunction applyDOMChange(view, domChange) {\r\n    let change;\r\n    let { newSel } = domChange, sel = view.state.selection.main;\r\n    if (domChange.bounds) {\r\n        let { from, to } = domChange.bounds;\r\n        let preferredPos = sel.from, preferredSide = null;\r\n        // Prefer anchoring to end when Backspace is pressed (or, on\r\n        // Android, when something was deleted)\r\n        if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||\r\n            browser.android && domChange.text.length < to - from) {\r\n            preferredPos = sel.to;\r\n            preferredSide = \"end\";\r\n        }\r\n        let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);\r\n        if (diff) {\r\n            // Chrome inserts two newlines when pressing shift-enter at the\r\n            // end of a line. DomChange drops one of those.\r\n            if (browser.chrome && view.inputState.lastKeyCode == 13 &&\r\n                diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)\r\n                diff.toB--;\r\n            change = { from: from + diff.from, to: from + diff.toA,\r\n                insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };\r\n        }\r\n    }\r\n    else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {\r\n        newSel = null;\r\n    }\r\n    if (!change && !newSel)\r\n        return false;\r\n    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {\r\n        // Heuristic to notice typing over a selected character\r\n        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };\r\n    }\r\n    else if (change && change.from >= sel.from && change.to <= sel.to &&\r\n        (change.from != sel.from || change.to != sel.to) &&\r\n        (sel.to - sel.from) - (change.to - change.from) <= 4) {\r\n        // If the change is inside the selection and covers most of it,\r\n        // assume it is a selection replace (with identical characters at\r\n        // the start/end not included in the diff)\r\n        change = {\r\n            from: sel.from, to: sel.to,\r\n            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))\r\n        };\r\n    }\r\n    else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&\r\n        /^\\. ?$/.test(change.insert.toString())) {\r\n        // Detect insert-period-on-double-space Mac and Android behavior,\r\n        // and transform it into a regular space insert.\r\n        if (newSel && change.insert.length == 2)\r\n            newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);\r\n        change = { from: sel.from, to: sel.to, insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.of([\" \"]) };\r\n    }\r\n    else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&\r\n        change.insert.toString() == \"\\n \" && view.lineWrapping) {\r\n        // In Chrome, if you insert a space at the start of a wrapped\r\n        // line, it will actually insert a newline and a space, causing a\r\n        // bogus new line to be created in CodeMirror (#968)\r\n        if (newSel)\r\n            newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);\r\n        change = { from: sel.from, to: sel.to, insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Text.of([\" \"]) };\r\n    }\r\n    if (change) {\r\n        let startState = view.state;\r\n        if (browser.ios && view.inputState.flushIOSKey(view))\r\n            return true;\r\n        // Android browsers don't fire reasonable key events for enter,\r\n        // backspace, or delete. So this detects changes that look like\r\n        // they're caused by those keys, and reinterprets them as key\r\n        // events. (Some of these keys are also handled by beforeinput\r\n        // events and the pendingAndroidKey mechanism, but that's not\r\n        // reliable in all situations.)\r\n        if (browser.android &&\r\n            ((change.from == sel.from && change.to == sel.to &&\r\n                change.insert.length == 1 && change.insert.lines == 2 &&\r\n                dispatchKey(view.contentDOM, \"Enter\", 13)) ||\r\n                (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&\r\n                    dispatchKey(view.contentDOM, \"Backspace\", 8)) ||\r\n                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&\r\n                    dispatchKey(view.contentDOM, \"Delete\", 46))))\r\n            return true;\r\n        let text = change.insert.toString();\r\n        if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))\r\n            return true;\r\n        if (view.inputState.composing >= 0)\r\n            view.inputState.composing++;\r\n        let tr;\r\n        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&\r\n            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&\r\n            view.inputState.composing < 0) {\r\n            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : \"\";\r\n            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : \"\";\r\n            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));\r\n        }\r\n        else {\r\n            let changes = startState.changes(change);\r\n            let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength\r\n                ? newSel.main : undefined;\r\n            // Try to apply a composition change to all cursors\r\n            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&\r\n                change.to <= sel.to && change.to >= sel.to - 10) {\r\n                let replaced = view.state.sliceDoc(change.from, change.to);\r\n                let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);\r\n                let offset = sel.to - change.to, size = sel.to - sel.from;\r\n                tr = startState.changeByRange(range => {\r\n                    if (range.from == sel.from && range.to == sel.to)\r\n                        return { changes, range: mainSel || range.map(changes) };\r\n                    let to = range.to - offset, from = to - replaced.length;\r\n                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||\r\n                        // Unfortunately, there's no way to make multiple\r\n                        // changes in the same node work without aborting\r\n                        // composition, so cursors in the composition range are\r\n                        // ignored.\r\n                        compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)\r\n                        return { range };\r\n                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;\r\n                    return {\r\n                        changes: rangeChanges,\r\n                        range: !mainSel ? range.map(rangeChanges) :\r\n                            _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))\r\n                    };\r\n                });\r\n            }\r\n            else {\r\n                tr = {\r\n                    changes,\r\n                    selection: mainSel && startState.selection.replaceRange(mainSel)\r\n                };\r\n            }\r\n        }\r\n        let userEvent = \"input.type\";\r\n        if (view.composing) {\r\n            userEvent += \".compose\";\r\n            if (view.inputState.compositionFirstChange) {\r\n                userEvent += \".start\";\r\n                view.inputState.compositionFirstChange = false;\r\n            }\r\n        }\r\n        view.dispatch(tr, { scrollIntoView: true, userEvent });\r\n        return true;\r\n    }\r\n    else if (newSel && !newSel.main.eq(sel)) {\r\n        let scrollIntoView = false, userEvent = \"select\";\r\n        if (view.inputState.lastSelectionTime > Date.now() - 50) {\r\n            if (view.inputState.lastSelectionOrigin == \"select\")\r\n                scrollIntoView = true;\r\n            userEvent = view.inputState.lastSelectionOrigin;\r\n        }\r\n        view.dispatch({ selection: newSel, scrollIntoView, userEvent });\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nfunction findDiff(a, b, preferredPos, preferredSide) {\r\n    let minLen = Math.min(a.length, b.length);\r\n    let from = 0;\r\n    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))\r\n        from++;\r\n    if (from == minLen && a.length == b.length)\r\n        return null;\r\n    let toA = a.length, toB = b.length;\r\n    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {\r\n        toA--;\r\n        toB--;\r\n    }\r\n    if (preferredSide == \"end\") {\r\n        let adjust = Math.max(0, from - Math.min(toA, toB));\r\n        preferredPos -= toA + adjust - from;\r\n    }\r\n    if (toA < from && a.length < b.length) {\r\n        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;\r\n        from -= move;\r\n        toB = from + (toB - toA);\r\n        toA = from;\r\n    }\r\n    else if (toB < from) {\r\n        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;\r\n        from -= move;\r\n        toA = from + (toA - toB);\r\n        toB = from;\r\n    }\r\n    return { from, toA, toB };\r\n}\r\nfunction selectionPoints(view) {\r\n    let result = [];\r\n    if (view.root.activeElement != view.contentDOM)\r\n        return result;\r\n    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;\r\n    if (anchorNode) {\r\n        result.push(new DOMPoint(anchorNode, anchorOffset));\r\n        if (focusNode != anchorNode || focusOffset != anchorOffset)\r\n            result.push(new DOMPoint(focusNode, focusOffset));\r\n    }\r\n    return result;\r\n}\r\nfunction selectionFromPoints(points, base) {\r\n    if (points.length == 0)\r\n        return null;\r\n    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;\r\n    return anchor > -1 && head > -1 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.single(anchor + base, head + base) : null;\r\n}\r\n\r\nconst observeOptions = {\r\n    childList: true,\r\n    characterData: true,\r\n    subtree: true,\r\n    attributes: true,\r\n    characterDataOldValue: true\r\n};\r\n// IE11 has very broken mutation observers, so we also listen to\r\n// DOMCharacterDataModified there\r\nconst useCharData = browser.ie && browser.ie_version <= 11;\r\nclass DOMObserver {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.active = false;\r\n        // The known selection. Kept in our own object, as opposed to just\r\n        // directly accessing the selection because:\r\n        //  - Safari doesn't report the right selection in shadow DOM\r\n        //  - Reading from the selection forces a DOM layout\r\n        //  - This way, we can ignore selectionchange events if we have\r\n        //    already seen the 'new' selection\r\n        this.selectionRange = new DOMSelectionState;\r\n        // Set when a selection change is detected, cleared on flush\r\n        this.selectionChanged = false;\r\n        this.delayedFlush = -1;\r\n        this.resizeTimeout = -1;\r\n        this.queue = [];\r\n        this.delayedAndroidKey = null;\r\n        this.flushingAndroidKey = -1;\r\n        this.lastChange = 0;\r\n        this.scrollTargets = [];\r\n        this.intersection = null;\r\n        this.resizeScroll = null;\r\n        this.resizeContent = null;\r\n        this.intersecting = false;\r\n        this.gapIntersection = null;\r\n        this.gaps = [];\r\n        // Timeout for scheduling check of the parents that need scroll handlers\r\n        this.parentCheck = -1;\r\n        this.dom = view.contentDOM;\r\n        this.observer = new MutationObserver(mutations => {\r\n            for (let mut of mutations)\r\n                this.queue.push(mut);\r\n            // IE11 will sometimes (on typing over a selection or\r\n            // backspacing out a single character text node) call the\r\n            // observer callback before actually updating the DOM.\r\n            //\r\n            // Unrelatedly, iOS Safari will, when ending a composition,\r\n            // sometimes first clear it, deliver the mutations, and then\r\n            // reinsert the finished text. CodeMirror's handling of the\r\n            // deletion will prevent the reinsertion from happening,\r\n            // breaking composition.\r\n            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&\r\n                mutations.some(m => m.type == \"childList\" && m.removedNodes.length ||\r\n                    m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\r\n                this.flushSoon();\r\n            else\r\n                this.flush();\r\n        });\r\n        if (useCharData)\r\n            this.onCharData = (event) => {\r\n                this.queue.push({ target: event.target,\r\n                    type: \"characterData\",\r\n                    oldValue: event.prevValue });\r\n                this.flushSoon();\r\n            };\r\n        this.onSelectionChange = this.onSelectionChange.bind(this);\r\n        this.onResize = this.onResize.bind(this);\r\n        this.onPrint = this.onPrint.bind(this);\r\n        this.onScroll = this.onScroll.bind(this);\r\n        if (typeof ResizeObserver == \"function\") {\r\n            this.resizeScroll = new ResizeObserver(() => {\r\n                var _a;\r\n                if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)\r\n                    this.onResize();\r\n            });\r\n            this.resizeScroll.observe(view.scrollDOM);\r\n            this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());\r\n            this.resizeContent.observe(view.contentDOM);\r\n        }\r\n        this.addWindowListeners(this.win = view.win);\r\n        this.start();\r\n        if (typeof IntersectionObserver == \"function\") {\r\n            this.intersection = new IntersectionObserver(entries => {\r\n                if (this.parentCheck < 0)\r\n                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);\r\n                if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {\r\n                    this.intersecting = !this.intersecting;\r\n                    if (this.intersecting != this.view.inView)\r\n                        this.onScrollChanged(document.createEvent(\"Event\"));\r\n                }\r\n            }, {});\r\n            this.intersection.observe(this.dom);\r\n            this.gapIntersection = new IntersectionObserver(entries => {\r\n                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)\r\n                    this.onScrollChanged(document.createEvent(\"Event\"));\r\n            }, {});\r\n        }\r\n        this.listenForScroll();\r\n        this.readSelectionRange();\r\n    }\r\n    onScrollChanged(e) {\r\n        this.view.inputState.runScrollHandlers(this.view, e);\r\n        if (this.intersecting)\r\n            this.view.measure();\r\n    }\r\n    onScroll(e) {\r\n        if (this.intersecting)\r\n            this.flush(false);\r\n        this.onScrollChanged(e);\r\n    }\r\n    onResize() {\r\n        if (this.resizeTimeout < 0)\r\n            this.resizeTimeout = setTimeout(() => {\r\n                this.resizeTimeout = -1;\r\n                this.view.requestMeasure();\r\n            }, 50);\r\n    }\r\n    onPrint() {\r\n        this.view.viewState.printing = true;\r\n        this.view.measure();\r\n        setTimeout(() => {\r\n            this.view.viewState.printing = false;\r\n            this.view.requestMeasure();\r\n        }, 500);\r\n    }\r\n    updateGaps(gaps) {\r\n        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {\r\n            this.gapIntersection.disconnect();\r\n            for (let gap of gaps)\r\n                this.gapIntersection.observe(gap);\r\n            this.gaps = gaps;\r\n        }\r\n    }\r\n    onSelectionChange(event) {\r\n        let wasChanged = this.selectionChanged;\r\n        if (!this.readSelectionRange() || this.delayedAndroidKey)\r\n            return;\r\n        let { view } = this, sel = this.selectionRange;\r\n        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))\r\n            return;\r\n        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);\r\n        if (context && context.ignoreEvent(event)) {\r\n            if (!wasChanged)\r\n                this.selectionChanged = false;\r\n            return;\r\n        }\r\n        // Deletions on IE11 fire their events in the wrong order, giving\r\n        // us a selection change event before the DOM changes are\r\n        // reported.\r\n        // Chrome Android has a similar issue when backspacing out a\r\n        // selection (#645).\r\n        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&\r\n            // (Selection.isCollapsed isn't reliable on IE)\r\n            sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\r\n            this.flushSoon();\r\n        else\r\n            this.flush(false);\r\n    }\r\n    readSelectionRange() {\r\n        let { view } = this;\r\n        // The Selection object is broken in shadow roots in Safari. See\r\n        // https://github.com/codemirror/dev/issues/414\r\n        let range = browser.safari && view.root.nodeType == 11 &&\r\n            deepActiveElement(this.dom.ownerDocument) == this.dom &&\r\n            safariSelectionRangeHack(this.view) || getSelection(view.root);\r\n        if (!range || this.selectionRange.eq(range))\r\n            return false;\r\n        let local = hasSelection(this.dom, range);\r\n        // Detect the situation where the browser has, on focus, moved the\r\n        // selection to the start of the content element. Reset it to the\r\n        // position from the editor state.\r\n        if (local && !this.selectionChanged &&\r\n            view.inputState.lastFocusTime > Date.now() - 200 &&\r\n            view.inputState.lastTouchTime < Date.now() - 300 &&\r\n            atElementStart(this.dom, range)) {\r\n            this.view.inputState.lastFocusTime = 0;\r\n            view.docView.updateSelection();\r\n            return false;\r\n        }\r\n        this.selectionRange.setRange(range);\r\n        if (local)\r\n            this.selectionChanged = true;\r\n        return true;\r\n    }\r\n    setSelectionRange(anchor, head) {\r\n        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);\r\n        this.selectionChanged = false;\r\n    }\r\n    clearSelectionRange() {\r\n        this.selectionRange.set(null, 0, null, 0);\r\n    }\r\n    listenForScroll() {\r\n        this.parentCheck = -1;\r\n        let i = 0, changed = null;\r\n        for (let dom = this.dom; dom;) {\r\n            if (dom.nodeType == 1) {\r\n                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)\r\n                    i++;\r\n                else if (!changed)\r\n                    changed = this.scrollTargets.slice(0, i);\r\n                if (changed)\r\n                    changed.push(dom);\r\n                dom = dom.assignedSlot || dom.parentNode;\r\n            }\r\n            else if (dom.nodeType == 11) { // Shadow root\r\n                dom = dom.host;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (i < this.scrollTargets.length && !changed)\r\n            changed = this.scrollTargets.slice(0, i);\r\n        if (changed) {\r\n            for (let dom of this.scrollTargets)\r\n                dom.removeEventListener(\"scroll\", this.onScroll);\r\n            for (let dom of this.scrollTargets = changed)\r\n                dom.addEventListener(\"scroll\", this.onScroll);\r\n        }\r\n    }\r\n    ignore(f) {\r\n        if (!this.active)\r\n            return f();\r\n        try {\r\n            this.stop();\r\n            return f();\r\n        }\r\n        finally {\r\n            this.start();\r\n            this.clear();\r\n        }\r\n    }\r\n    start() {\r\n        if (this.active)\r\n            return;\r\n        this.observer.observe(this.dom, observeOptions);\r\n        if (useCharData)\r\n            this.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\r\n        this.active = true;\r\n    }\r\n    stop() {\r\n        if (!this.active)\r\n            return;\r\n        this.active = false;\r\n        this.observer.disconnect();\r\n        if (useCharData)\r\n            this.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\r\n    }\r\n    // Throw away any pending changes\r\n    clear() {\r\n        this.processRecords();\r\n        this.queue.length = 0;\r\n        this.selectionChanged = false;\r\n    }\r\n    // Chrome Android, especially in combination with GBoard, not only\r\n    // doesn't reliably fire regular key events, but also often\r\n    // surrounds the effect of enter or backspace with a bunch of\r\n    // composition events that, when interrupted, cause text duplication\r\n    // or other kinds of corruption. This hack makes the editor back off\r\n    // from handling DOM changes for a moment when such a key is\r\n    // detected (via beforeinput or keydown), and then tries to flush\r\n    // them or, if that has no effect, dispatches the given key.\r\n    delayAndroidKey(key, keyCode) {\r\n        var _a;\r\n        if (!this.delayedAndroidKey) {\r\n            let flush = () => {\r\n                let key = this.delayedAndroidKey;\r\n                if (key) {\r\n                    this.clearDelayedAndroidKey();\r\n                    if (!this.flush() && key.force)\r\n                        dispatchKey(this.dom, key.key, key.keyCode);\r\n                }\r\n            };\r\n            this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);\r\n        }\r\n        // Since backspace beforeinput is sometimes signalled spuriously,\r\n        // Enter always takes precedence.\r\n        if (!this.delayedAndroidKey || key == \"Enter\")\r\n            this.delayedAndroidKey = {\r\n                key, keyCode,\r\n                // Only run the key handler when no changes are detected if\r\n                // this isn't coming right after another change, in which case\r\n                // it is probably part of a weird chain of updates, and should\r\n                // be ignored if it returns the DOM to its previous state.\r\n                force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)\r\n            };\r\n    }\r\n    clearDelayedAndroidKey() {\r\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\r\n        this.delayedAndroidKey = null;\r\n        this.flushingAndroidKey = -1;\r\n    }\r\n    flushSoon() {\r\n        if (this.delayedFlush < 0)\r\n            this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });\r\n    }\r\n    forceFlush() {\r\n        if (this.delayedFlush >= 0) {\r\n            this.view.win.cancelAnimationFrame(this.delayedFlush);\r\n            this.delayedFlush = -1;\r\n        }\r\n        this.flush();\r\n    }\r\n    processRecords() {\r\n        let records = this.queue;\r\n        for (let mut of this.observer.takeRecords())\r\n            records.push(mut);\r\n        if (records.length)\r\n            this.queue = [];\r\n        let from = -1, to = -1, typeOver = false;\r\n        for (let record of records) {\r\n            let range = this.readMutation(record);\r\n            if (!range)\r\n                continue;\r\n            if (range.typeOver)\r\n                typeOver = true;\r\n            if (from == -1) {\r\n                ({ from, to } = range);\r\n            }\r\n            else {\r\n                from = Math.min(range.from, from);\r\n                to = Math.max(range.to, to);\r\n            }\r\n        }\r\n        return { from, to, typeOver };\r\n    }\r\n    readChange() {\r\n        let { from, to, typeOver } = this.processRecords();\r\n        let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);\r\n        if (from < 0 && !newSel)\r\n            return null;\r\n        if (from > -1)\r\n            this.lastChange = Date.now();\r\n        this.view.inputState.lastFocusTime = 0;\r\n        this.selectionChanged = false;\r\n        return new DOMChange(this.view, from, to, typeOver);\r\n    }\r\n    // Apply pending changes, if any\r\n    flush(readSelection = true) {\r\n        // Completely hold off flushing when pending keys are set—the code\r\n        // managing those will make sure processRecords is called and the\r\n        // view is resynchronized after\r\n        if (this.delayedFlush >= 0 || this.delayedAndroidKey)\r\n            return false;\r\n        if (readSelection)\r\n            this.readSelectionRange();\r\n        let domChange = this.readChange();\r\n        if (!domChange)\r\n            return false;\r\n        let startState = this.view.state;\r\n        let handled = applyDOMChange(this.view, domChange);\r\n        // The view wasn't updated\r\n        if (this.view.state == startState)\r\n            this.view.update([]);\r\n        return handled;\r\n    }\r\n    readMutation(rec) {\r\n        let cView = this.view.docView.nearest(rec.target);\r\n        if (!cView || cView.ignoreMutation(rec))\r\n            return null;\r\n        cView.markDirty(rec.type == \"attributes\");\r\n        if (rec.type == \"attributes\")\r\n            cView.dirty |= 4 /* Dirty.Attrs */;\r\n        if (rec.type == \"childList\") {\r\n            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);\r\n            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);\r\n            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,\r\n                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };\r\n        }\r\n        else if (rec.type == \"characterData\") {\r\n            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    setWindow(win) {\r\n        if (win != this.win) {\r\n            this.removeWindowListeners(this.win);\r\n            this.win = win;\r\n            this.addWindowListeners(this.win);\r\n        }\r\n    }\r\n    addWindowListeners(win) {\r\n        win.addEventListener(\"resize\", this.onResize);\r\n        win.addEventListener(\"beforeprint\", this.onPrint);\r\n        win.addEventListener(\"scroll\", this.onScroll);\r\n        win.document.addEventListener(\"selectionchange\", this.onSelectionChange);\r\n    }\r\n    removeWindowListeners(win) {\r\n        win.removeEventListener(\"scroll\", this.onScroll);\r\n        win.removeEventListener(\"resize\", this.onResize);\r\n        win.removeEventListener(\"beforeprint\", this.onPrint);\r\n        win.document.removeEventListener(\"selectionchange\", this.onSelectionChange);\r\n    }\r\n    destroy() {\r\n        var _a, _b, _c, _d;\r\n        this.stop();\r\n        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();\r\n        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();\r\n        (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();\r\n        for (let dom of this.scrollTargets)\r\n            dom.removeEventListener(\"scroll\", this.onScroll);\r\n        this.removeWindowListeners(this.win);\r\n        clearTimeout(this.parentCheck);\r\n        clearTimeout(this.resizeTimeout);\r\n        this.win.cancelAnimationFrame(this.delayedFlush);\r\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\r\n    }\r\n}\r\nfunction findChild(cView, dom, dir) {\r\n    while (dom) {\r\n        let curView = ContentView.get(dom);\r\n        if (curView && curView.parent == cView)\r\n            return curView;\r\n        let parent = dom.parentNode;\r\n        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;\r\n    }\r\n    return null;\r\n}\r\n// Used to work around a Safari Selection/shadow DOM bug (#414)\r\nfunction safariSelectionRangeHack(view) {\r\n    let found = null;\r\n    // Because Safari (at least in 2018-2021) doesn't provide regular\r\n    // access to the selection inside a shadowroot, we have to perform a\r\n    // ridiculous hack to get at it—using `execCommand` to trigger a\r\n    // `beforeInput` event so that we can read the target range from the\r\n    // event.\r\n    function read(event) {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        found = event.getTargetRanges()[0];\r\n    }\r\n    view.contentDOM.addEventListener(\"beforeinput\", read, true);\r\n    view.dom.ownerDocument.execCommand(\"indent\");\r\n    view.contentDOM.removeEventListener(\"beforeinput\", read, true);\r\n    if (!found)\r\n        return null;\r\n    let anchorNode = found.startContainer, anchorOffset = found.startOffset;\r\n    let focusNode = found.endContainer, focusOffset = found.endOffset;\r\n    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);\r\n    // Since such a range doesn't distinguish between anchor and head,\r\n    // use a heuristic that flips it around if its end matches the\r\n    // current anchor.\r\n    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))\r\n        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];\r\n    return { anchorNode, anchorOffset, focusNode, focusOffset };\r\n}\r\n\r\n// The editor's update state machine looks something like this:\r\n//\r\n//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle\r\n//                                         ↑      ↓\r\n//                                         Updating (measure)\r\n//\r\n// The difference between 'Idle' and 'Idle (unchecked)' lies in\r\n// whether a layout check has been scheduled. A regular update through\r\n// the `update` method updates the DOM in a write-only fashion, and\r\n// relies on a check (scheduled with `requestAnimationFrame`) to make\r\n// sure everything is where it should be and the viewport covers the\r\n// visible code. That check continues to measure and then optionally\r\n// update until it reaches a coherent state.\r\n/**\r\nAn editor view represents the editor's user interface. It holds\r\nthe editable DOM surface, and possibly other elements such as the\r\nline number gutter. It handles events and dispatches state\r\ntransactions for editing actions.\r\n*/\r\nclass EditorView {\r\n    /**\r\n    Construct a new view. You'll want to either provide a `parent`\r\n    option, or put `view.dom` into your document after creating a\r\n    view, so that the user can see the editor.\r\n    */\r\n    constructor(config = {}) {\r\n        this.plugins = [];\r\n        this.pluginMap = new Map;\r\n        this.editorAttrs = {};\r\n        this.contentAttrs = {};\r\n        this.bidiCache = [];\r\n        this.destroyed = false;\r\n        /**\r\n        @internal\r\n        */\r\n        this.updateState = 2 /* UpdateState.Updating */;\r\n        /**\r\n        @internal\r\n        */\r\n        this.measureScheduled = -1;\r\n        /**\r\n        @internal\r\n        */\r\n        this.measureRequests = [];\r\n        this.contentDOM = document.createElement(\"div\");\r\n        this.scrollDOM = document.createElement(\"div\");\r\n        this.scrollDOM.tabIndex = -1;\r\n        this.scrollDOM.className = \"cm-scroller\";\r\n        this.scrollDOM.appendChild(this.contentDOM);\r\n        this.announceDOM = document.createElement(\"div\");\r\n        this.announceDOM.style.cssText = \"position: fixed; top: -10000px\";\r\n        this.announceDOM.setAttribute(\"aria-live\", \"polite\");\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.appendChild(this.announceDOM);\r\n        this.dom.appendChild(this.scrollDOM);\r\n        this._dispatch = config.dispatch || ((tr) => this.update([tr]));\r\n        this.dispatch = this.dispatch.bind(this);\r\n        this._root = (config.root || getRoot(config.parent) || document);\r\n        this.viewState = new ViewState(config.state || _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorState.create(config));\r\n        this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));\r\n        for (let plugin of this.plugins)\r\n            plugin.update(this);\r\n        this.observer = new DOMObserver(this);\r\n        this.inputState = new InputState(this);\r\n        this.inputState.ensureHandlers(this, this.plugins);\r\n        this.docView = new DocView(this);\r\n        this.mountStyles();\r\n        this.updateAttrs();\r\n        this.updateState = 0 /* UpdateState.Idle */;\r\n        this.requestMeasure();\r\n        if (config.parent)\r\n            config.parent.appendChild(this.dom);\r\n    }\r\n    /**\r\n    The current editor state.\r\n    */\r\n    get state() { return this.viewState.state; }\r\n    /**\r\n    To be able to display large documents without consuming too much\r\n    memory or overloading the browser, CodeMirror only draws the\r\n    code that is visible (plus a margin around it) to the DOM. This\r\n    property tells you the extent of the current drawn viewport, in\r\n    document positions.\r\n    */\r\n    get viewport() { return this.viewState.viewport; }\r\n    /**\r\n    When there are, for example, large collapsed ranges in the\r\n    viewport, its size can be a lot bigger than the actual visible\r\n    content. Thus, if you are doing something like styling the\r\n    content in the viewport, it is preferable to only do so for\r\n    these ranges, which are the subset of the viewport that is\r\n    actually drawn.\r\n    */\r\n    get visibleRanges() { return this.viewState.visibleRanges; }\r\n    /**\r\n    Returns false when the editor is entirely scrolled out of view\r\n    or otherwise hidden.\r\n    */\r\n    get inView() { return this.viewState.inView; }\r\n    /**\r\n    Indicates whether the user is currently composing text via\r\n    [IME](https://en.wikipedia.org/wiki/Input_method), and at least\r\n    one change has been made in the current composition.\r\n    */\r\n    get composing() { return this.inputState.composing > 0; }\r\n    /**\r\n    Indicates whether the user is currently in composing state. Note\r\n    that on some platforms, like Android, this will be the case a\r\n    lot, since just putting the cursor on a word starts a\r\n    composition there.\r\n    */\r\n    get compositionStarted() { return this.inputState.composing >= 0; }\r\n    /**\r\n    The document or shadow root that the view lives in.\r\n    */\r\n    get root() { return this._root; }\r\n    /**\r\n    @internal\r\n    */\r\n    get win() { return this.dom.ownerDocument.defaultView || window; }\r\n    dispatch(...input) {\r\n        this._dispatch(input.length == 1 && input[0] instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Transaction ? input[0]\r\n            : this.state.update(...input));\r\n    }\r\n    /**\r\n    Update the view for the given array of transactions. This will\r\n    update the visible document and selection to match the state\r\n    produced by the transactions, and notify view plugins of the\r\n    change. You should usually call\r\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this\r\n    as a primitive.\r\n    */\r\n    update(transactions) {\r\n        if (this.updateState != 0 /* UpdateState.Idle */)\r\n            throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\r\n        let redrawn = false, attrsChanged = false, update;\r\n        let state = this.state;\r\n        for (let tr of transactions) {\r\n            if (tr.startState != state)\r\n                throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\r\n            state = tr.state;\r\n        }\r\n        if (this.destroyed) {\r\n            this.viewState.state = state;\r\n            return;\r\n        }\r\n        // If there was a pending DOM change, eagerly read it and try to\r\n        // apply it after the given transactions.\r\n        let pendingKey = this.observer.delayedAndroidKey, domChange = null;\r\n        if (pendingKey) {\r\n            this.observer.clearDelayedAndroidKey();\r\n            domChange = this.observer.readChange();\r\n            // Only try to apply DOM changes if the transactions didn't\r\n            // change the doc or selection.\r\n            if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))\r\n                domChange = null;\r\n        }\r\n        else {\r\n            this.observer.clear();\r\n        }\r\n        // When the phrases change, redraw the editor\r\n        if (state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorState.phrases) != this.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorState.phrases))\r\n            return this.setState(state);\r\n        update = ViewUpdate.create(this, state, transactions);\r\n        let scrollTarget = this.viewState.scrollTarget;\r\n        try {\r\n            this.updateState = 2 /* UpdateState.Updating */;\r\n            for (let tr of transactions) {\r\n                if (scrollTarget)\r\n                    scrollTarget = scrollTarget.map(tr.changes);\r\n                if (tr.scrollIntoView) {\r\n                    let { main } = tr.state.selection;\r\n                    scrollTarget = new ScrollTarget(main.empty ? main : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));\r\n                }\r\n                for (let e of tr.effects)\r\n                    if (e.is(scrollIntoView))\r\n                        scrollTarget = e.value;\r\n            }\r\n            this.viewState.update(update, scrollTarget);\r\n            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);\r\n            if (!update.empty) {\r\n                this.updatePlugins(update);\r\n                this.inputState.update(update);\r\n            }\r\n            redrawn = this.docView.update(update);\r\n            if (this.state.facet(styleModule) != this.styleModules)\r\n                this.mountStyles();\r\n            attrsChanged = this.updateAttrs();\r\n            this.showAnnouncements(transactions);\r\n            this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent(\"select.pointer\")));\r\n        }\r\n        finally {\r\n            this.updateState = 0 /* UpdateState.Idle */;\r\n        }\r\n        if (update.startState.facet(theme) != update.state.facet(theme))\r\n            this.viewState.mustMeasureContent = true;\r\n        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)\r\n            this.requestMeasure();\r\n        if (!update.empty)\r\n            for (let listener of this.state.facet(updateListener))\r\n                listener(update);\r\n        if (domChange) {\r\n            if (!applyDOMChange(this, domChange) && pendingKey.force)\r\n                dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);\r\n        }\r\n    }\r\n    /**\r\n    Reset the view to the given state. (This will cause the entire\r\n    document to be redrawn and all view plugins to be reinitialized,\r\n    so you should probably only use it when the new state isn't\r\n    derived from the old state. Otherwise, use\r\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)\r\n    */\r\n    setState(newState) {\r\n        if (this.updateState != 0 /* UpdateState.Idle */)\r\n            throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\r\n        if (this.destroyed) {\r\n            this.viewState.state = newState;\r\n            return;\r\n        }\r\n        this.updateState = 2 /* UpdateState.Updating */;\r\n        let hadFocus = this.hasFocus;\r\n        try {\r\n            for (let plugin of this.plugins)\r\n                plugin.destroy(this);\r\n            this.viewState = new ViewState(newState);\r\n            this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));\r\n            this.pluginMap.clear();\r\n            for (let plugin of this.plugins)\r\n                plugin.update(this);\r\n            this.docView = new DocView(this);\r\n            this.inputState.ensureHandlers(this, this.plugins);\r\n            this.mountStyles();\r\n            this.updateAttrs();\r\n            this.bidiCache = [];\r\n        }\r\n        finally {\r\n            this.updateState = 0 /* UpdateState.Idle */;\r\n        }\r\n        if (hadFocus)\r\n            this.focus();\r\n        this.requestMeasure();\r\n    }\r\n    updatePlugins(update) {\r\n        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);\r\n        if (prevSpecs != specs) {\r\n            let newPlugins = [];\r\n            for (let spec of specs) {\r\n                let found = prevSpecs.indexOf(spec);\r\n                if (found < 0) {\r\n                    newPlugins.push(new PluginInstance(spec));\r\n                }\r\n                else {\r\n                    let plugin = this.plugins[found];\r\n                    plugin.mustUpdate = update;\r\n                    newPlugins.push(plugin);\r\n                }\r\n            }\r\n            for (let plugin of this.plugins)\r\n                if (plugin.mustUpdate != update)\r\n                    plugin.destroy(this);\r\n            this.plugins = newPlugins;\r\n            this.pluginMap.clear();\r\n            this.inputState.ensureHandlers(this, this.plugins);\r\n        }\r\n        else {\r\n            for (let p of this.plugins)\r\n                p.mustUpdate = update;\r\n        }\r\n        for (let i = 0; i < this.plugins.length; i++)\r\n            this.plugins[i].update(this);\r\n    }\r\n    /**\r\n    @internal\r\n    */\r\n    measure(flush = true) {\r\n        if (this.destroyed)\r\n            return;\r\n        if (this.measureScheduled > -1)\r\n            cancelAnimationFrame(this.measureScheduled);\r\n        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame\r\n        if (flush)\r\n            this.observer.forceFlush();\r\n        let updated = null;\r\n        let { scrollHeight, scrollTop, clientHeight } = this.scrollDOM;\r\n        let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;\r\n        try {\r\n            for (let i = 0;; i++) {\r\n                this.updateState = 1 /* UpdateState.Measuring */;\r\n                let oldViewport = this.viewport;\r\n                let refBlock = this.viewState.lineBlockAtHeight(refHeight);\r\n                let changed = this.viewState.measure(this);\r\n                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)\r\n                    break;\r\n                if (i > 5) {\r\n                    console.warn(this.measureRequests.length\r\n                        ? \"Measure loop restarted more than 5 times\"\r\n                        : \"Viewport failed to stabilize\");\r\n                    break;\r\n                }\r\n                let measuring = [];\r\n                // Only run measure requests in this cycle when the viewport didn't change\r\n                if (!(changed & 4 /* UpdateFlag.Viewport */))\r\n                    [this.measureRequests, measuring] = [measuring, this.measureRequests];\r\n                let measured = measuring.map(m => {\r\n                    try {\r\n                        return m.read(this);\r\n                    }\r\n                    catch (e) {\r\n                        logException(this.state, e);\r\n                        return BadMeasure;\r\n                    }\r\n                });\r\n                let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;\r\n                update.flags |= changed;\r\n                if (!updated)\r\n                    updated = update;\r\n                else\r\n                    updated.flags |= changed;\r\n                this.updateState = 2 /* UpdateState.Updating */;\r\n                if (!update.empty) {\r\n                    this.updatePlugins(update);\r\n                    this.inputState.update(update);\r\n                    this.updateAttrs();\r\n                    redrawn = this.docView.update(update);\r\n                }\r\n                for (let i = 0; i < measuring.length; i++)\r\n                    if (measured[i] != BadMeasure) {\r\n                        try {\r\n                            let m = measuring[i];\r\n                            if (m.write)\r\n                                m.write(measured[i], this);\r\n                        }\r\n                        catch (e) {\r\n                            logException(this.state, e);\r\n                        }\r\n                    }\r\n                if (this.viewState.editorHeight) {\r\n                    if (this.viewState.scrollTarget) {\r\n                        this.docView.scrollIntoView(this.viewState.scrollTarget);\r\n                        this.viewState.scrollTarget = null;\r\n                        scrolled = true;\r\n                    }\r\n                    else {\r\n                        let diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;\r\n                        if (diff > 1 || diff < -1) {\r\n                            this.scrollDOM.scrollTop += diff;\r\n                            scrolled = true;\r\n                        }\r\n                    }\r\n                }\r\n                if (redrawn)\r\n                    this.docView.updateSelection(true);\r\n                if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&\r\n                    !scrolled && this.measureRequests.length == 0)\r\n                    break;\r\n            }\r\n        }\r\n        finally {\r\n            this.updateState = 0 /* UpdateState.Idle */;\r\n            this.measureScheduled = -1;\r\n        }\r\n        if (updated && !updated.empty)\r\n            for (let listener of this.state.facet(updateListener))\r\n                listener(updated);\r\n    }\r\n    /**\r\n    Get the CSS classes for the currently active editor themes.\r\n    */\r\n    get themeClasses() {\r\n        return baseThemeID + \" \" +\r\n            (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + \" \" +\r\n            this.state.facet(theme);\r\n    }\r\n    updateAttrs() {\r\n        let editorAttrs = attrsFromFacet(this, editorAttributes, {\r\n            class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\r\n        });\r\n        let contentAttrs = {\r\n            spellcheck: \"false\",\r\n            autocorrect: \"off\",\r\n            autocapitalize: \"off\",\r\n            translate: \"no\",\r\n            contenteditable: !this.state.facet(editable) ? \"false\" : \"true\",\r\n            class: \"cm-content\",\r\n            style: `${browser.tabSize}: ${this.state.tabSize}`,\r\n            role: \"textbox\",\r\n            \"aria-multiline\": \"true\"\r\n        };\r\n        if (this.state.readOnly)\r\n            contentAttrs[\"aria-readonly\"] = \"true\";\r\n        attrsFromFacet(this, contentAttributes, contentAttrs);\r\n        let changed = this.observer.ignore(() => {\r\n            let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);\r\n            let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);\r\n            return changedContent || changedEditor;\r\n        });\r\n        this.editorAttrs = editorAttrs;\r\n        this.contentAttrs = contentAttrs;\r\n        return changed;\r\n    }\r\n    showAnnouncements(trs) {\r\n        let first = true;\r\n        for (let tr of trs)\r\n            for (let effect of tr.effects)\r\n                if (effect.is(EditorView.announce)) {\r\n                    if (first)\r\n                        this.announceDOM.textContent = \"\";\r\n                    first = false;\r\n                    let div = this.announceDOM.appendChild(document.createElement(\"div\"));\r\n                    div.textContent = effect.value;\r\n                }\r\n    }\r\n    mountStyles() {\r\n        this.styleModules = this.state.facet(styleModule);\r\n        style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());\r\n    }\r\n    readMeasured() {\r\n        if (this.updateState == 2 /* UpdateState.Updating */)\r\n            throw new Error(\"Reading the editor layout isn't allowed during an update\");\r\n        if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)\r\n            this.measure(false);\r\n    }\r\n    /**\r\n    Schedule a layout measurement, optionally providing callbacks to\r\n    do custom DOM measuring followed by a DOM write phase. Using\r\n    this is preferable reading DOM layout directly from, for\r\n    example, an event handler, because it'll make sure measuring and\r\n    drawing done by other components is synchronized, avoiding\r\n    unnecessary DOM layout computations.\r\n    */\r\n    requestMeasure(request) {\r\n        if (this.measureScheduled < 0)\r\n            this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());\r\n        if (request) {\r\n            if (this.measureRequests.indexOf(request) > -1)\r\n                return;\r\n            if (request.key != null)\r\n                for (let i = 0; i < this.measureRequests.length; i++) {\r\n                    if (this.measureRequests[i].key === request.key) {\r\n                        this.measureRequests[i] = request;\r\n                        return;\r\n                    }\r\n                }\r\n            this.measureRequests.push(request);\r\n        }\r\n    }\r\n    /**\r\n    Get the value of a specific plugin, if present. Note that\r\n    plugins that crash can be dropped from a view, so even when you\r\n    know you registered a given plugin, it is recommended to check\r\n    the return value of this method.\r\n    */\r\n    plugin(plugin) {\r\n        let known = this.pluginMap.get(plugin);\r\n        if (known === undefined || known && known.spec != plugin)\r\n            this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);\r\n        return known && known.update(this).value;\r\n    }\r\n    /**\r\n    The top position of the document, in screen coordinates. This\r\n    may be negative when the editor is scrolled down. Points\r\n    directly to the top of the first line, not above the padding.\r\n    */\r\n    get documentTop() {\r\n        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\r\n    }\r\n    /**\r\n    Reports the padding above and below the document.\r\n    */\r\n    get documentPadding() {\r\n        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };\r\n    }\r\n    /**\r\n    Find the text line or block widget at the given vertical\r\n    position (which is interpreted as relative to the [top of the\r\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).\r\n    */\r\n    elementAtHeight(height) {\r\n        this.readMeasured();\r\n        return this.viewState.elementAtHeight(height);\r\n    }\r\n    /**\r\n    Find the line block (see\r\n    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given\r\n    height, again interpreted relative to the [top of the\r\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).\r\n    */\r\n    lineBlockAtHeight(height) {\r\n        this.readMeasured();\r\n        return this.viewState.lineBlockAtHeight(height);\r\n    }\r\n    /**\r\n    Get the extent and vertical position of all [line\r\n    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions\r\n    are relative to the [top of the\r\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);\r\n    */\r\n    get viewportLineBlocks() {\r\n        return this.viewState.viewportLines;\r\n    }\r\n    /**\r\n    Find the line block around the given document position. A line\r\n    block is a range delimited on both sides by either a\r\n    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the\r\n    start/end of the document. It will usually just hold a line of\r\n    text, but may be broken into multiple textblocks by block\r\n    widgets.\r\n    */\r\n    lineBlockAt(pos) {\r\n        return this.viewState.lineBlockAt(pos);\r\n    }\r\n    /**\r\n    The editor's total content height.\r\n    */\r\n    get contentHeight() {\r\n        return this.viewState.contentHeight;\r\n    }\r\n    /**\r\n    Move a cursor position by [grapheme\r\n    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether\r\n    the motion is away from the line start, or towards it. In\r\n    bidirectional text, the line is traversed in visual order, using\r\n    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\r\n    When the start position was the last one on the line, the\r\n    returned position will be across the line break. If there is no\r\n    further line, the original position is returned.\r\n    \r\n    By default, this method moves over a single cluster. The\r\n    optional `by` argument can be used to move across more. It will\r\n    be called with the first cluster as argument, and should return\r\n    a predicate that determines, for each subsequent cluster,\r\n    whether it should also be moved over.\r\n    */\r\n    moveByChar(start, forward, by) {\r\n        return skipAtoms(this, start, moveByChar(this, start, forward, by));\r\n    }\r\n    /**\r\n    Move a cursor position across the next group of either\r\n    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter\r\n    non-whitespace characters.\r\n    */\r\n    moveByGroup(start, forward) {\r\n        return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));\r\n    }\r\n    /**\r\n    Move to the next line boundary in the given direction. If\r\n    `includeWrap` is true, line wrapping is on, and there is a\r\n    further wrap point on the current line, the wrap point will be\r\n    returned. Otherwise this function will return the start or end\r\n    of the line.\r\n    */\r\n    moveToLineBoundary(start, forward, includeWrap = true) {\r\n        return moveToLineBoundary(this, start, forward, includeWrap);\r\n    }\r\n    /**\r\n    Move a cursor position vertically. When `distance` isn't given,\r\n    it defaults to moving to the next line (including wrapped\r\n    lines). Otherwise, `distance` should provide a positive distance\r\n    in pixels.\r\n    \r\n    When `start` has a\r\n    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical\r\n    motion will use that as a target horizontal position. Otherwise,\r\n    the cursor's own horizontal position is used. The returned\r\n    cursor will have its goal column set to whichever column was\r\n    used.\r\n    */\r\n    moveVertically(start, forward, distance) {\r\n        return skipAtoms(this, start, moveVertically(this, start, forward, distance));\r\n    }\r\n    /**\r\n    Find the DOM parent node and offset (child offset if `node` is\r\n    an element, character offset when it is a text node) at the\r\n    given document position.\r\n    \r\n    Note that for positions that aren't currently in\r\n    `visibleRanges`, the resulting DOM position isn't necessarily\r\n    meaningful (it may just point before or after a placeholder\r\n    element).\r\n    */\r\n    domAtPos(pos) {\r\n        return this.docView.domAtPos(pos);\r\n    }\r\n    /**\r\n    Find the document position at the given DOM node. Can be useful\r\n    for associating positions with DOM events. Will raise an error\r\n    when `node` isn't part of the editor content.\r\n    */\r\n    posAtDOM(node, offset = 0) {\r\n        return this.docView.posFromDOM(node, offset);\r\n    }\r\n    posAtCoords(coords, precise = true) {\r\n        this.readMeasured();\r\n        return posAtCoords(this, coords, precise);\r\n    }\r\n    /**\r\n    Get the screen coordinates at the given document position.\r\n    `side` determines whether the coordinates are based on the\r\n    element before (-1) or after (1) the position (if no element is\r\n    available on the given side, the method will transparently use\r\n    another strategy to get reasonable coordinates).\r\n    */\r\n    coordsAtPos(pos, side = 1) {\r\n        this.readMeasured();\r\n        let rect = this.docView.coordsAt(pos, side);\r\n        if (!rect || rect.left == rect.right)\r\n            return rect;\r\n        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);\r\n        let span = order[BidiSpan.find(order, pos - line.from, -1, side)];\r\n        return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));\r\n    }\r\n    /**\r\n    The default width of a character in the editor. May not\r\n    accurately reflect the width of all characters (given variable\r\n    width fonts or styling of invididual ranges).\r\n    */\r\n    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }\r\n    /**\r\n    The default height of a line in the editor. May not be accurate\r\n    for all lines.\r\n    */\r\n    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }\r\n    /**\r\n    The text direction\r\n    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\r\n    CSS property) of the editor's content element.\r\n    */\r\n    get textDirection() { return this.viewState.defaultTextDirection; }\r\n    /**\r\n    Find the text direction of the block at the given position, as\r\n    assigned by CSS. If\r\n    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)\r\n    isn't enabled, or the given position is outside of the viewport,\r\n    this will always return the same as\r\n    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that\r\n    this may trigger a DOM layout.\r\n    */\r\n    textDirectionAt(pos) {\r\n        let perLine = this.state.facet(perLineTextDirection);\r\n        if (!perLine || pos < this.viewport.from || pos > this.viewport.to)\r\n            return this.textDirection;\r\n        this.readMeasured();\r\n        return this.docView.textDirectionAt(pos);\r\n    }\r\n    /**\r\n    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)\r\n    (as determined by the\r\n    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\r\n    CSS property of its content element).\r\n    */\r\n    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }\r\n    /**\r\n    Returns the bidirectional text structure of the given line\r\n    (which should be in the current document) as an array of span\r\n    objects. The order of these spans matches the [text\r\n    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is\r\n    left-to-right, the leftmost spans come first, otherwise the\r\n    rightmost spans come first.\r\n    */\r\n    bidiSpans(line) {\r\n        if (line.length > MaxBidiLine)\r\n            return trivialOrder(line.length);\r\n        let dir = this.textDirectionAt(line.from);\r\n        for (let entry of this.bidiCache)\r\n            if (entry.from == line.from && entry.dir == dir)\r\n                return entry.order;\r\n        let order = computeOrder(line.text, dir);\r\n        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));\r\n        return order;\r\n    }\r\n    /**\r\n    Check whether the editor has focus.\r\n    */\r\n    get hasFocus() {\r\n        var _a;\r\n        // Safari return false for hasFocus when the context menu is open\r\n        // or closing, which leads us to ignore selection changes from the\r\n        // context menu because it looks like the editor isn't focused.\r\n        // This kludges around that.\r\n        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&\r\n            this.root.activeElement == this.contentDOM;\r\n    }\r\n    /**\r\n    Put focus on the editor.\r\n    */\r\n    focus() {\r\n        this.observer.ignore(() => {\r\n            focusPreventScroll(this.contentDOM);\r\n            this.docView.updateSelection();\r\n        });\r\n    }\r\n    /**\r\n    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only\r\n    necessary when moving the editor's existing DOM to a new window or shadow root.\r\n    */\r\n    setRoot(root) {\r\n        if (this._root != root) {\r\n            this._root = root;\r\n            this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);\r\n            this.mountStyles();\r\n        }\r\n    }\r\n    /**\r\n    Clean up this editor view, removing its element from the\r\n    document, unregistering event handlers, and notifying\r\n    plugins. The view instance can no longer be used after\r\n    calling this.\r\n    */\r\n    destroy() {\r\n        for (let plugin of this.plugins)\r\n            plugin.destroy(this);\r\n        this.plugins = [];\r\n        this.inputState.destroy();\r\n        this.dom.remove();\r\n        this.observer.destroy();\r\n        if (this.measureScheduled > -1)\r\n            cancelAnimationFrame(this.measureScheduled);\r\n        this.destroyed = true;\r\n    }\r\n    /**\r\n    Returns an effect that can be\r\n    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to\r\n    cause it to scroll the given position or range into view.\r\n    */\r\n    static scrollIntoView(pos, options = {}) {\r\n        return scrollIntoView.of(new ScrollTarget(typeof pos == \"number\" ? _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));\r\n    }\r\n    /**\r\n    Returns an extension that can be used to add DOM event handlers.\r\n    The value should be an object mapping event names to handler\r\n    functions. For any given event, such functions are ordered by\r\n    extension precedence, and the first handler to return true will\r\n    be assumed to have handled that event, and no other handlers or\r\n    built-in behavior will be activated for it. These are registered\r\n    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except\r\n    for `scroll` handlers, which will be called any time the\r\n    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of\r\n    its parent nodes is scrolled.\r\n    */\r\n    static domEventHandlers(handlers) {\r\n        return ViewPlugin.define(() => ({}), { eventHandlers: handlers });\r\n    }\r\n    /**\r\n    Create a theme extension. The first argument can be a\r\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)\r\n    style spec providing the styles for the theme. These will be\r\n    prefixed with a generated class for the style.\r\n    \r\n    Because the selectors will be prefixed with a scope class, rule\r\n    that directly match the editor's [wrapper\r\n    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be\r\n    added—need to be explicitly differentiated by adding an `&` to\r\n    the selector for that element—for example\r\n    `&.cm-focused`.\r\n    \r\n    When `dark` is set to true, the theme will be marked as dark,\r\n    which will cause the `&dark` rules from [base\r\n    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to\r\n    `&light` when a light theme is active).\r\n    */\r\n    static theme(spec, options) {\r\n        let prefix = style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName();\r\n        let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];\r\n        if (options && options.dark)\r\n            result.push(darkTheme.of(true));\r\n        return result;\r\n    }\r\n    /**\r\n    Create an extension that adds styles to the base theme. Like\r\n    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the\r\n    place of the editor wrapper element when directly targeting\r\n    that. You can also use `&dark` or `&light` instead to only\r\n    target editors with a dark or light theme.\r\n    */\r\n    static baseTheme(spec) {\r\n        return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.lowest(styleModule.of(buildTheme(\".\" + baseThemeID, spec, lightDarkIDs)));\r\n    }\r\n    /**\r\n    Retrieve an editor view instance from the view's DOM\r\n    representation.\r\n    */\r\n    static findFromDOM(dom) {\r\n        var _a;\r\n        let content = dom.querySelector(\".cm-content\");\r\n        let cView = content && ContentView.get(content) || ContentView.get(dom);\r\n        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;\r\n    }\r\n}\r\n/**\r\nFacet to add a [style\r\nmodule](https://github.com/marijnh/style-mod#documentation) to\r\nan editor view. The view will ensure that the module is\r\nmounted in its [document\r\nroot](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).\r\n*/\r\nEditorView.styleModule = styleModule;\r\n/**\r\nAn input handler can override the way changes to the editable\r\nDOM content are handled. Handlers are passed the document\r\npositions between which the change was found, and the new\r\ncontent. When one returns true, no further input handlers are\r\ncalled and the default behavior is prevented.\r\n*/\r\nEditorView.inputHandler = inputHandler;\r\n/**\r\nBy default, the editor assumes all its content has the same\r\n[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`\r\nvalue to make it read the text direction of every (rendered)\r\nline separately.\r\n*/\r\nEditorView.perLineTextDirection = perLineTextDirection;\r\n/**\r\nAllows you to provide a function that should be called when the\r\nlibrary catches an exception from an extension (mostly from view\r\nplugins, but may be used by other extensions to route exceptions\r\nfrom user-code-provided callbacks). This is mostly useful for\r\ndebugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).\r\n*/\r\nEditorView.exceptionSink = exceptionSink;\r\n/**\r\nA facet that can be used to register a function to be called\r\nevery time the view updates.\r\n*/\r\nEditorView.updateListener = updateListener;\r\n/**\r\nFacet that controls whether the editor content DOM is editable.\r\nWhen its highest-precedence value is `false`, the element will\r\nnot have its `contenteditable` attribute set. (Note that this\r\ndoesn't affect API calls that change the editor content, even\r\nwhen those are bound to keys or buttons. See the\r\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)\r\n*/\r\nEditorView.editable = editable;\r\n/**\r\nAllows you to influence the way mouse selection happens. The\r\nfunctions in this facet will be called for a `mousedown` event\r\non the editor, and can return an object that overrides the way a\r\nselection is computed from that mouse click or drag.\r\n*/\r\nEditorView.mouseSelectionStyle = mouseSelectionStyle;\r\n/**\r\nFacet used to configure whether a given selection drag event\r\nshould move or copy the selection. The given predicate will be\r\ncalled with the `mousedown` event, and can return `true` when\r\nthe drag should move the content.\r\n*/\r\nEditorView.dragMovesSelection = dragMovesSelection$1;\r\n/**\r\nFacet used to configure whether a given selecting click adds a\r\nnew range to the existing selection or replaces it entirely. The\r\ndefault behavior is to check `event.metaKey` on macOS, and\r\n`event.ctrlKey` elsewhere.\r\n*/\r\nEditorView.clickAddsSelectionRange = clickAddsSelectionRange;\r\n/**\r\nA facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)\r\nare shown in the view. Decorations can be provided in two\r\nways—directly, or via a function that takes an editor view.\r\n\r\nOnly decoration sets provided directly are allowed to influence\r\nthe editor's vertical layout structure. The ones provided as\r\nfunctions are called _after_ the new viewport has been computed,\r\nand thus **must not** introduce block widgets or replacing\r\ndecorations that cover line breaks.\r\n\r\nIf you want decorated ranges to behave like atomic units for\r\ncursor motion and deletion purposes, also provide the range set\r\ncontaining the decorations to\r\n[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).\r\n*/\r\nEditorView.decorations = decorations;\r\n/**\r\nUsed to provide ranges that should be treated as atoms as far as\r\ncursor motion is concerned. This causes methods like\r\n[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and\r\n[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the\r\ncommands built on top of them) to skip across such regions when\r\na selection endpoint would enter them. This does _not_ prevent\r\ndirect programmatic [selection\r\nupdates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such\r\nregions.\r\n*/\r\nEditorView.atomicRanges = atomicRanges;\r\n/**\r\nFacet that allows extensions to provide additional scroll\r\nmargins (space around the sides of the scrolling element that\r\nshould be considered invisible). This can be useful when the\r\nplugin introduces elements that cover part of that element (for\r\nexample a horizontally fixed gutter).\r\n*/\r\nEditorView.scrollMargins = scrollMargins;\r\n/**\r\nThis facet records whether a dark theme is active. The extension\r\nreturned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically\r\nincludes an instance of this when the `dark` option is set to\r\ntrue.\r\n*/\r\nEditorView.darkTheme = darkTheme;\r\n/**\r\nFacet that provides additional DOM attributes for the editor's\r\neditable DOM element.\r\n*/\r\nEditorView.contentAttributes = contentAttributes;\r\n/**\r\nFacet that provides DOM attributes for the editor's outer\r\nelement.\r\n*/\r\nEditorView.editorAttributes = editorAttributes;\r\n/**\r\nAn extension that enables line wrapping in the editor (by\r\nsetting CSS `white-space` to `pre-wrap` in the content).\r\n*/\r\nEditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ \"class\": \"cm-lineWrapping\" });\r\n/**\r\nState effect used to include screen reader announcements in a\r\ntransaction. These will be added to the DOM in a visually hidden\r\nelement with `aria-live=\"polite\"` set, and should be used to\r\ndescribe effects that are visually obvious but may not be\r\nnoticed by screen reader users (such as moving to the next\r\nsearch match).\r\n*/\r\nEditorView.announce = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\n// Maximum line length for which we compute accurate bidi info\r\nconst MaxBidiLine = 4096;\r\nconst BadMeasure = {};\r\nclass CachedOrder {\r\n    constructor(from, to, dir, order) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.dir = dir;\r\n        this.order = order;\r\n    }\r\n    static update(cache, changes) {\r\n        if (changes.empty)\r\n            return cache;\r\n        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;\r\n        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {\r\n            let entry = cache[i];\r\n            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))\r\n                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction attrsFromFacet(view, facet, base) {\r\n    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {\r\n        let source = sources[i], value = typeof source == \"function\" ? source(view) : source;\r\n        if (value)\r\n            combineAttrs(value, base);\r\n    }\r\n    return base;\r\n}\r\n\r\nconst currentPlatform = browser.mac ? \"mac\" : browser.windows ? \"win\" : browser.linux ? \"linux\" : \"key\";\r\nfunction normalizeKeyName(name, platform) {\r\n    const parts = name.split(/-(?!$)/);\r\n    let result = parts[parts.length - 1];\r\n    if (result == \"Space\")\r\n        result = \" \";\r\n    let alt, ctrl, shift, meta;\r\n    for (let i = 0; i < parts.length - 1; ++i) {\r\n        const mod = parts[i];\r\n        if (/^(cmd|meta|m)$/i.test(mod))\r\n            meta = true;\r\n        else if (/^a(lt)?$/i.test(mod))\r\n            alt = true;\r\n        else if (/^(c|ctrl|control)$/i.test(mod))\r\n            ctrl = true;\r\n        else if (/^s(hift)?$/i.test(mod))\r\n            shift = true;\r\n        else if (/^mod$/i.test(mod)) {\r\n            if (platform == \"mac\")\r\n                meta = true;\r\n            else\r\n                ctrl = true;\r\n        }\r\n        else\r\n            throw new Error(\"Unrecognized modifier name: \" + mod);\r\n    }\r\n    if (alt)\r\n        result = \"Alt-\" + result;\r\n    if (ctrl)\r\n        result = \"Ctrl-\" + result;\r\n    if (meta)\r\n        result = \"Meta-\" + result;\r\n    if (shift)\r\n        result = \"Shift-\" + result;\r\n    return result;\r\n}\r\nfunction modifiers(name, event, shift) {\r\n    if (event.altKey)\r\n        name = \"Alt-\" + name;\r\n    if (event.ctrlKey)\r\n        name = \"Ctrl-\" + name;\r\n    if (event.metaKey)\r\n        name = \"Meta-\" + name;\r\n    if (shift !== false && event.shiftKey)\r\n        name = \"Shift-\" + name;\r\n    return name;\r\n}\r\nconst handleKeyEvents = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec[\"default\"](/*@__PURE__*/EditorView.domEventHandlers({\r\n    keydown(event, view) {\r\n        return runHandlers(getKeymap(view.state), event, view, \"editor\");\r\n    }\r\n}));\r\n/**\r\nFacet used for registering keymaps.\r\n\r\nYou can add multiple keymaps to an editor. Their priorities\r\ndetermine their precedence (the ones specified early or with high\r\npriority get checked first). When a handler has returned `true`\r\nfor a given key, no further handlers are called.\r\n*/\r\nconst keymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({ enables: handleKeyEvents });\r\nconst Keymaps = /*@__PURE__*/new WeakMap();\r\n// This is hidden behind an indirection, rather than directly computed\r\n// by the facet, to keep internal types out of the facet's type.\r\nfunction getKeymap(state) {\r\n    let bindings = state.facet(keymap);\r\n    let map = Keymaps.get(bindings);\r\n    if (!map)\r\n        Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));\r\n    return map;\r\n}\r\n/**\r\nRun the key handlers registered for a given scope. The event\r\nobject should be a `\"keydown\"` event. Returns true if any of the\r\nhandlers handled it.\r\n*/\r\nfunction runScopeHandlers(view, event, scope) {\r\n    return runHandlers(getKeymap(view.state), event, view, scope);\r\n}\r\nlet storedPrefix = null;\r\nconst PrefixTimeout = 4000;\r\nfunction buildKeymap(bindings, platform = currentPlatform) {\r\n    let bound = Object.create(null);\r\n    let isPrefix = Object.create(null);\r\n    let checkPrefix = (name, is) => {\r\n        let current = isPrefix[name];\r\n        if (current == null)\r\n            isPrefix[name] = is;\r\n        else if (current != is)\r\n            throw new Error(\"Key binding \" + name + \" is used both as a regular binding and as a multi-stroke prefix\");\r\n    };\r\n    let add = (scope, key, command, preventDefault) => {\r\n        var _a, _b;\r\n        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\r\n        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));\r\n        for (let i = 1; i < parts.length; i++) {\r\n            let prefix = parts.slice(0, i).join(\" \");\r\n            checkPrefix(prefix, true);\r\n            if (!scopeObj[prefix])\r\n                scopeObj[prefix] = {\r\n                    preventDefault: true,\r\n                    run: [(view) => {\r\n                            let ourObj = storedPrefix = { view, prefix, scope };\r\n                            setTimeout(() => { if (storedPrefix == ourObj)\r\n                                storedPrefix = null; }, PrefixTimeout);\r\n                            return true;\r\n                        }]\r\n                };\r\n        }\r\n        let full = parts.join(\" \");\r\n        checkPrefix(full, false);\r\n        let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || [] });\r\n        if (command)\r\n            binding.run.push(command);\r\n        if (preventDefault)\r\n            binding.preventDefault = true;\r\n    };\r\n    for (let b of bindings) {\r\n        let scopes = b.scope ? b.scope.split(\" \") : [\"editor\"];\r\n        if (b.any)\r\n            for (let scope of scopes) {\r\n                let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\r\n                if (!scopeObj._any)\r\n                    scopeObj._any = { preventDefault: false, run: [] };\r\n                for (let key in scopeObj)\r\n                    scopeObj[key].run.push(b.any);\r\n            }\r\n        let name = b[platform] || b.key;\r\n        if (!name)\r\n            continue;\r\n        for (let scope of scopes) {\r\n            add(scope, name, b.run, b.preventDefault);\r\n            if (b.shift)\r\n                add(scope, \"Shift-\" + name, b.shift, b.preventDefault);\r\n        }\r\n    }\r\n    return bound;\r\n}\r\nfunction runHandlers(map, event, view, scope) {\r\n    let name = (0,w3c_keyname__WEBPACK_IMPORTED_MODULE_1__.keyName)(event);\r\n    let charCode = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.codePointAt)(name, 0), isChar = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.codePointSize)(charCode) == name.length && name != \" \";\r\n    let prefix = \"\", fallthrough = false;\r\n    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {\r\n        prefix = storedPrefix.prefix + \" \";\r\n        if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)\r\n            storedPrefix = null;\r\n    }\r\n    let ran = new Set;\r\n    let runFor = (binding) => {\r\n        if (binding) {\r\n            for (let cmd of binding.run)\r\n                if (!ran.has(cmd)) {\r\n                    ran.add(cmd);\r\n                    if (cmd(view, event))\r\n                        return true;\r\n                }\r\n            if (binding.preventDefault)\r\n                fallthrough = true;\r\n        }\r\n        return false;\r\n    };\r\n    let scopeObj = map[scope], baseName, shiftName;\r\n    if (scopeObj) {\r\n        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))\r\n            return true;\r\n        if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&\r\n            // Ctrl-Alt may be used for AltGr on Windows\r\n            !(browser.windows && event.ctrlKey && event.altKey) &&\r\n            (baseName = w3c_keyname__WEBPACK_IMPORTED_MODULE_1__.base[event.keyCode]) && baseName != name) {\r\n            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))\r\n                return true;\r\n            else if (event.shiftKey && (shiftName = w3c_keyname__WEBPACK_IMPORTED_MODULE_1__.shift[event.keyCode]) != name && shiftName != baseName &&\r\n                runFor(scopeObj[prefix + modifiers(shiftName, event, false)]))\r\n                return true;\r\n        }\r\n        else if (isChar && event.shiftKey) {\r\n            if (runFor(scopeObj[prefix + modifiers(name, event, true)]))\r\n                return true;\r\n        }\r\n        if (runFor(scopeObj._any))\r\n            return true;\r\n    }\r\n    return fallthrough;\r\n}\r\n\r\n/**\r\nImplementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates\r\na rectangle at a given set of coordinates.\r\n*/\r\nclass RectangleMarker {\r\n    /**\r\n    Create a marker with the given class and dimensions. If `width`\r\n    is null, the DOM element will get no width style.\r\n    */\r\n    constructor(className, left, top, width, height) {\r\n        this.className = className;\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    draw() {\r\n        let elt = document.createElement(\"div\");\r\n        elt.className = this.className;\r\n        this.adjust(elt);\r\n        return elt;\r\n    }\r\n    update(elt, prev) {\r\n        if (prev.className != this.className)\r\n            return false;\r\n        this.adjust(elt);\r\n        return true;\r\n    }\r\n    adjust(elt) {\r\n        elt.style.left = this.left + \"px\";\r\n        elt.style.top = this.top + \"px\";\r\n        if (this.width != null)\r\n            elt.style.width = this.width + \"px\";\r\n        elt.style.height = this.height + \"px\";\r\n    }\r\n    eq(p) {\r\n        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&\r\n            this.className == p.className;\r\n    }\r\n    /**\r\n    Create a set of rectangles for the given selection range,\r\n    assigning them theclass`className`. Will create a single\r\n    rectangle for empty ranges, and a set of selection-style\r\n    rectangles covering the range's content (in a bidi-aware\r\n    way) for non-empty ones.\r\n    */\r\n    static forRange(view, className, range) {\r\n        if (range.empty) {\r\n            let pos = view.coordsAtPos(range.head, range.assoc || 1);\r\n            if (!pos)\r\n                return [];\r\n            let base = getBase(view);\r\n            return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];\r\n        }\r\n        else {\r\n            return rectanglesForRange(view, className, range);\r\n        }\r\n    }\r\n}\r\nfunction getBase(view) {\r\n    let rect = view.scrollDOM.getBoundingClientRect();\r\n    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;\r\n    return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };\r\n}\r\nfunction wrappedLine(view, pos, inside) {\r\n    let range = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(pos);\r\n    return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),\r\n        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),\r\n        type: BlockType.Text };\r\n}\r\nfunction blockAt(view, pos) {\r\n    let line = view.lineBlockAt(pos);\r\n    if (Array.isArray(line.type))\r\n        for (let l of line.type) {\r\n            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))\r\n                return l;\r\n        }\r\n    return line;\r\n}\r\nfunction rectanglesForRange(view, className, range) {\r\n    if (range.to <= view.viewport.from || range.from >= view.viewport.to)\r\n        return [];\r\n    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);\r\n    let ltr = view.textDirection == Direction.LTR;\r\n    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);\r\n    let lineStyle = window.getComputedStyle(content.firstChild);\r\n    let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));\r\n    let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);\r\n    let startBlock = blockAt(view, from), endBlock = blockAt(view, to);\r\n    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;\r\n    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;\r\n    if (view.lineWrapping) {\r\n        if (visualStart)\r\n            visualStart = wrappedLine(view, from, visualStart);\r\n        if (visualEnd)\r\n            visualEnd = wrappedLine(view, to, visualEnd);\r\n    }\r\n    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {\r\n        return pieces(drawForLine(range.from, range.to, visualStart));\r\n    }\r\n    else {\r\n        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);\r\n        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);\r\n        let between = [];\r\n        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)\r\n            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));\r\n        else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)\r\n            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;\r\n        return pieces(top).concat(between).concat(pieces(bottom));\r\n    }\r\n    function piece(left, top, right, bottom) {\r\n        return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);\r\n    }\r\n    function pieces({ top, bottom, horizontal }) {\r\n        let pieces = [];\r\n        for (let i = 0; i < horizontal.length; i += 2)\r\n            pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));\r\n        return pieces;\r\n    }\r\n    // Gets passed from/to in line-local positions\r\n    function drawForLine(from, to, line) {\r\n        let top = 1e9, bottom = -1e9, horizontal = [];\r\n        function addSpan(from, fromOpen, to, toOpen, dir) {\r\n            // Passing 2/-2 is a kludge to force the view to return\r\n            // coordinates on the proper side of block widgets, since\r\n            // normalizing the side there, though appropriate for most\r\n            // coordsAtPos queries, would break selection drawing.\r\n            let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));\r\n            let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));\r\n            top = Math.min(fromCoords.top, toCoords.top, top);\r\n            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);\r\n            if (dir == Direction.LTR)\r\n                horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);\r\n            else\r\n                horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);\r\n        }\r\n        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;\r\n        // Split the range by visible range and document line\r\n        for (let r of view.visibleRanges)\r\n            if (r.to > start && r.from < end) {\r\n                for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {\r\n                    let docLine = view.state.doc.lineAt(pos);\r\n                    for (let span of view.bidiSpans(docLine)) {\r\n                        let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;\r\n                        if (spanFrom >= endPos)\r\n                            break;\r\n                        if (spanTo > pos)\r\n                            addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);\r\n                    }\r\n                    pos = docLine.to + 1;\r\n                    if (pos >= endPos)\r\n                        break;\r\n                }\r\n            }\r\n        if (horizontal.length == 0)\r\n            addSpan(start, from == null, end, to == null, view.textDirection);\r\n        return { top, bottom, horizontal };\r\n    }\r\n    function drawForWidget(block, top) {\r\n        let y = contentRect.top + (top ? block.top : block.bottom);\r\n        return { top: y, bottom: y, horizontal: [] };\r\n    }\r\n}\r\nfunction sameMarker(a, b) {\r\n    return a.constructor == b.constructor && a.eq(b);\r\n}\r\nclass LayerView {\r\n    constructor(view, layer) {\r\n        this.view = view;\r\n        this.layer = layer;\r\n        this.drawn = [];\r\n        this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };\r\n        this.dom = view.scrollDOM.appendChild(document.createElement(\"div\"));\r\n        this.dom.classList.add(\"cm-layer\");\r\n        if (layer.above)\r\n            this.dom.classList.add(\"cm-layer-above\");\r\n        if (layer.class)\r\n            this.dom.classList.add(layer.class);\r\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\r\n        this.setOrder(view.state);\r\n        view.requestMeasure(this.measureReq);\r\n        if (layer.mount)\r\n            layer.mount(this.dom, view);\r\n    }\r\n    update(update) {\r\n        if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))\r\n            this.setOrder(update.state);\r\n        if (this.layer.update(update, this.dom) || update.geometryChanged)\r\n            update.view.requestMeasure(this.measureReq);\r\n    }\r\n    setOrder(state) {\r\n        let pos = 0, order = state.facet(layerOrder);\r\n        while (pos < order.length && order[pos] != this.layer)\r\n            pos++;\r\n        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);\r\n    }\r\n    measure() {\r\n        return this.layer.markers(this.view);\r\n    }\r\n    draw(markers) {\r\n        if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {\r\n            let old = this.dom.firstChild, oldI = 0;\r\n            for (let marker of markers) {\r\n                if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&\r\n                    marker.update(old, this.drawn[oldI])) {\r\n                    old = old.nextSibling;\r\n                    oldI++;\r\n                }\r\n                else {\r\n                    this.dom.insertBefore(marker.draw(), old);\r\n                }\r\n            }\r\n            while (old) {\r\n                let next = old.nextSibling;\r\n                old.remove();\r\n                old = next;\r\n            }\r\n            this.drawn = markers;\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.layer.destroy)\r\n            this.layer.destroy(this.dom, this.view);\r\n        this.dom.remove();\r\n    }\r\n}\r\nconst layerOrder = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\n/**\r\nDefine a layer.\r\n*/\r\nfunction layer(config) {\r\n    return [\r\n        ViewPlugin.define(v => new LayerView(v, config)),\r\n        layerOrder.of(config)\r\n    ];\r\n}\r\n\r\nconst CanHidePrimary = !browser.ios; // FIXME test IE\r\nconst selectionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(configs, {\r\n            cursorBlinkRate: 1200,\r\n            drawRangeCursor: true\r\n        }, {\r\n            cursorBlinkRate: (a, b) => Math.min(a, b),\r\n            drawRangeCursor: (a, b) => a || b\r\n        });\r\n    }\r\n});\r\n/**\r\nReturns an extension that hides the browser's native selection and\r\ncursor, replacing the selection with a background behind the text\r\n(with the `cm-selectionBackground` class), and the\r\ncursors with elements overlaid over the code (using\r\n`cm-cursor-primary` and `cm-cursor-secondary`).\r\n\r\nThis allows the editor to display secondary selection ranges, and\r\ntends to produce a type of selection more in line with that users\r\nexpect in a text editor (the native selection styling will often\r\nleave gaps between lines and won't fill the horizontal space after\r\na line when the selection continues past it).\r\n\r\nIt does have a performance cost, in that it requires an extra DOM\r\nlayout cycle for many updates (the selection is drawn based on DOM\r\nlayout information that's only available after laying out the\r\ncontent).\r\n*/\r\nfunction drawSelection(config = {}) {\r\n    return [\r\n        selectionConfig.of(config),\r\n        cursorLayer,\r\n        selectionLayer,\r\n        hideNativeSelection,\r\n        nativeSelectionHidden.of(true)\r\n    ];\r\n}\r\nfunction configChanged(update) {\r\n    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);\r\n}\r\nconst cursorLayer = /*@__PURE__*/layer({\r\n    above: true,\r\n    markers(view) {\r\n        let { state } = view, conf = state.facet(selectionConfig);\r\n        let cursors = [];\r\n        for (let r of state.selection.ranges) {\r\n            let prim = r == state.selection.main;\r\n            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {\r\n                let className = prim ? \"cm-cursor cm-cursor-primary\" : \"cm-cursor cm-cursor-secondary\";\r\n                let cursor = r.empty ? r : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);\r\n                for (let piece of RectangleMarker.forRange(view, className, cursor))\r\n                    cursors.push(piece);\r\n            }\r\n        }\r\n        return cursors;\r\n    },\r\n    update(update, dom) {\r\n        if (update.transactions.some(tr => tr.selection))\r\n            dom.style.animationName = dom.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\r\n        let confChange = configChanged(update);\r\n        if (confChange)\r\n            setBlinkRate(update.state, dom);\r\n        return update.docChanged || update.selectionSet || confChange;\r\n    },\r\n    mount(dom, view) {\r\n        setBlinkRate(view.state, dom);\r\n    },\r\n    class: \"cm-cursorLayer\"\r\n});\r\nfunction setBlinkRate(state, dom) {\r\n    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + \"ms\";\r\n}\r\nconst selectionLayer = /*@__PURE__*/layer({\r\n    above: false,\r\n    markers(view) {\r\n        return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, \"cm-selectionBackground\", r))\r\n            .reduce((a, b) => a.concat(b));\r\n    },\r\n    update(update, dom) {\r\n        return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);\r\n    },\r\n    class: \"cm-selectionLayer\"\r\n});\r\nconst themeSpec = {\r\n    \".cm-line\": {\r\n        \"& ::selection\": { backgroundColor: \"transparent !important\" },\r\n        \"&::selection\": { backgroundColor: \"transparent !important\" }\r\n    }\r\n};\r\nif (CanHidePrimary)\r\n    themeSpec[\".cm-line\"].caretColor = \"transparent !important\";\r\nconst hideNativeSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));\r\n\r\nconst setDropCursorPos = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define({\r\n    map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }\r\n});\r\nconst dropCursorPos = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({\r\n    create() { return null; },\r\n    update(pos, tr) {\r\n        if (pos != null)\r\n            pos = tr.changes.mapPos(pos);\r\n        return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);\r\n    }\r\n});\r\nconst drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.cursor = null;\r\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };\r\n    }\r\n    update(update) {\r\n        var _a;\r\n        let cursorPos = update.state.field(dropCursorPos);\r\n        if (cursorPos == null) {\r\n            if (this.cursor != null) {\r\n                (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();\r\n                this.cursor = null;\r\n            }\r\n        }\r\n        else {\r\n            if (!this.cursor) {\r\n                this.cursor = this.view.scrollDOM.appendChild(document.createElement(\"div\"));\r\n                this.cursor.className = \"cm-dropCursor\";\r\n            }\r\n            if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)\r\n                this.view.requestMeasure(this.measureReq);\r\n        }\r\n    }\r\n    readPos() {\r\n        let pos = this.view.state.field(dropCursorPos);\r\n        let rect = pos != null && this.view.coordsAtPos(pos);\r\n        if (!rect)\r\n            return null;\r\n        let outer = this.view.scrollDOM.getBoundingClientRect();\r\n        return {\r\n            left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,\r\n            top: rect.top - outer.top + this.view.scrollDOM.scrollTop,\r\n            height: rect.bottom - rect.top\r\n        };\r\n    }\r\n    drawCursor(pos) {\r\n        if (this.cursor) {\r\n            if (pos) {\r\n                this.cursor.style.left = pos.left + \"px\";\r\n                this.cursor.style.top = pos.top + \"px\";\r\n                this.cursor.style.height = pos.height + \"px\";\r\n            }\r\n            else {\r\n                this.cursor.style.left = \"-100000px\";\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.cursor)\r\n            this.cursor.remove();\r\n    }\r\n    setDropPos(pos) {\r\n        if (this.view.state.field(dropCursorPos) != pos)\r\n            this.view.dispatch({ effects: setDropCursorPos.of(pos) });\r\n    }\r\n}, {\r\n    eventHandlers: {\r\n        dragover(event) {\r\n            this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));\r\n        },\r\n        dragleave(event) {\r\n            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))\r\n                this.setDropPos(null);\r\n        },\r\n        dragend() {\r\n            this.setDropPos(null);\r\n        },\r\n        drop() {\r\n            this.setDropPos(null);\r\n        }\r\n    }\r\n});\r\n/**\r\nDraws a cursor at the current drop position when something is\r\ndragged over the editor.\r\n*/\r\nfunction dropCursor() {\r\n    return [dropCursorPos, drawDropCursor];\r\n}\r\n\r\nfunction iterMatches(doc, re, from, to, f) {\r\n    re.lastIndex = 0;\r\n    for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {\r\n        if (!cursor.lineBreak)\r\n            while (m = re.exec(cursor.value))\r\n                f(pos + m.index, m);\r\n    }\r\n}\r\nfunction matchRanges(view, maxLength) {\r\n    let visible = view.visibleRanges;\r\n    if (visible.length == 1 && visible[0].from == view.viewport.from &&\r\n        visible[0].to == view.viewport.to)\r\n        return visible;\r\n    let result = [];\r\n    for (let { from, to } of visible) {\r\n        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);\r\n        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);\r\n        if (result.length && result[result.length - 1].to >= from)\r\n            result[result.length - 1].to = to;\r\n        else\r\n            result.push({ from, to });\r\n    }\r\n    return result;\r\n}\r\n/**\r\nHelper class used to make it easier to maintain decorations on\r\nvisible code that matches a given regular expression. To be used\r\nin a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object\r\nrepresent a matching configuration.\r\n*/\r\nclass MatchDecorator {\r\n    /**\r\n    Create a decorator.\r\n    */\r\n    constructor(config) {\r\n        const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;\r\n        if (!regexp.global)\r\n            throw new RangeError(\"The regular expression given to MatchDecorator should have its 'g' flag set\");\r\n        this.regexp = regexp;\r\n        if (decorate) {\r\n            this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);\r\n        }\r\n        else if (typeof decoration == \"function\") {\r\n            this.addMatch = (match, view, from, add) => {\r\n                let deco = decoration(match, view, from);\r\n                if (deco)\r\n                    add(from, from + match[0].length, deco);\r\n            };\r\n        }\r\n        else if (decoration) {\r\n            this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);\r\n        }\r\n        else {\r\n            throw new RangeError(\"Either 'decorate' or 'decoration' should be provided to MatchDecorator\");\r\n        }\r\n        this.boundary = boundary;\r\n        this.maxLength = maxLength;\r\n    }\r\n    /**\r\n    Compute the full set of decorations for matches in the given\r\n    view's viewport. You'll want to call this when initializing your\r\n    plugin.\r\n    */\r\n    createDeco(view) {\r\n        let build = new _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSetBuilder(), add = build.add.bind(build);\r\n        for (let { from, to } of matchRanges(view, this.maxLength))\r\n            iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));\r\n        return build.finish();\r\n    }\r\n    /**\r\n    Update a set of decorations for a view update. `deco` _must_ be\r\n    the set of decorations produced by _this_ `MatchDecorator` for\r\n    the view state before the update.\r\n    */\r\n    updateDeco(update, deco) {\r\n        let changeFrom = 1e9, changeTo = -1;\r\n        if (update.docChanged)\r\n            update.changes.iterChanges((_f, _t, from, to) => {\r\n                if (to > update.view.viewport.from && from < update.view.viewport.to) {\r\n                    changeFrom = Math.min(from, changeFrom);\r\n                    changeTo = Math.max(to, changeTo);\r\n                }\r\n            });\r\n        if (update.viewportChanged || changeTo - changeFrom > 1000)\r\n            return this.createDeco(update.view);\r\n        if (changeTo > -1)\r\n            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);\r\n        return deco;\r\n    }\r\n    updateRange(view, deco, updateFrom, updateTo) {\r\n        for (let r of view.visibleRanges) {\r\n            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);\r\n            if (to > from) {\r\n                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;\r\n                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);\r\n                if (this.boundary) {\r\n                    for (; from > fromLine.from; from--)\r\n                        if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {\r\n                            start = from;\r\n                            break;\r\n                        }\r\n                    for (; to < toLine.to; to++)\r\n                        if (this.boundary.test(toLine.text[to - toLine.from])) {\r\n                            end = to;\r\n                            break;\r\n                        }\r\n                }\r\n                let ranges = [], m;\r\n                let add = (from, to, deco) => ranges.push(deco.range(from, to));\r\n                if (fromLine == toLine) {\r\n                    this.regexp.lastIndex = start - fromLine.from;\r\n                    while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)\r\n                        this.addMatch(m, view, m.index + fromLine.from, add);\r\n                }\r\n                else {\r\n                    iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));\r\n                }\r\n                deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });\r\n            }\r\n        }\r\n        return deco;\r\n    }\r\n}\r\n\r\nconst UnicodeRegexpSupport = /x/.unicode != null ? \"gu\" : \"g\";\r\nconst Specials = /*@__PURE__*/new RegExp(\"[\\u0000-\\u0008\\u000a-\\u001f\\u007f-\\u009f\\u00ad\\u061c\\u200b\\u200e\\u200f\\u2028\\u2029\\u202d\\u202e\\u2066\\u2067\\u2069\\ufeff\\ufff9-\\ufffc]\", UnicodeRegexpSupport);\r\nconst Names = {\r\n    0: \"null\",\r\n    7: \"bell\",\r\n    8: \"backspace\",\r\n    10: \"newline\",\r\n    11: \"vertical tab\",\r\n    13: \"carriage return\",\r\n    27: \"escape\",\r\n    8203: \"zero width space\",\r\n    8204: \"zero width non-joiner\",\r\n    8205: \"zero width joiner\",\r\n    8206: \"left-to-right mark\",\r\n    8207: \"right-to-left mark\",\r\n    8232: \"line separator\",\r\n    8237: \"left-to-right override\",\r\n    8238: \"right-to-left override\",\r\n    8294: \"left-to-right isolate\",\r\n    8295: \"right-to-left isolate\",\r\n    8297: \"pop directional isolate\",\r\n    8233: \"paragraph separator\",\r\n    65279: \"zero width no-break space\",\r\n    65532: \"object replacement\"\r\n};\r\nlet _supportsTabSize = null;\r\nfunction supportsTabSize() {\r\n    var _a;\r\n    if (_supportsTabSize == null && typeof document != \"undefined\" && document.body) {\r\n        let styles = document.body.style;\r\n        _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;\r\n    }\r\n    return _supportsTabSize || false;\r\n}\r\nconst specialCharConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine(configs) {\r\n        let config = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(configs, {\r\n            render: null,\r\n            specialChars: Specials,\r\n            addSpecialChars: null\r\n        });\r\n        if (config.replaceTabs = !supportsTabSize())\r\n            config.specialChars = new RegExp(\"\\t|\" + config.specialChars.source, UnicodeRegexpSupport);\r\n        if (config.addSpecialChars)\r\n            config.specialChars = new RegExp(config.specialChars.source + \"|\" + config.addSpecialChars.source, UnicodeRegexpSupport);\r\n        return config;\r\n    }\r\n});\r\n/**\r\nReturns an extension that installs highlighting of special\r\ncharacters.\r\n*/\r\nfunction highlightSpecialChars(\r\n/**\r\nConfiguration options.\r\n*/\r\nconfig = {}) {\r\n    return [specialCharConfig.of(config), specialCharPlugin()];\r\n}\r\nlet _plugin = null;\r\nfunction specialCharPlugin() {\r\n    return _plugin || (_plugin = ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.view = view;\r\n            this.decorations = Decoration.none;\r\n            this.decorationCache = Object.create(null);\r\n            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));\r\n            this.decorations = this.decorator.createDeco(view);\r\n        }\r\n        makeDecorator(conf) {\r\n            return new MatchDecorator({\r\n                regexp: conf.specialChars,\r\n                decoration: (m, view, pos) => {\r\n                    let { doc } = view.state;\r\n                    let code = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.codePointAt)(m[0], 0);\r\n                    if (code == 9) {\r\n                        let line = doc.lineAt(pos);\r\n                        let size = view.state.tabSize, col = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.countColumn)(line.text, size, pos - line.from);\r\n                        return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });\r\n                    }\r\n                    return this.decorationCache[code] ||\r\n                        (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));\r\n                },\r\n                boundary: conf.replaceTabs ? undefined : /[^]/\r\n            });\r\n        }\r\n        update(update) {\r\n            let conf = update.state.facet(specialCharConfig);\r\n            if (update.startState.facet(specialCharConfig) != conf) {\r\n                this.decorator = this.makeDecorator(conf);\r\n                this.decorations = this.decorator.createDeco(update.view);\r\n            }\r\n            else {\r\n                this.decorations = this.decorator.updateDeco(update, this.decorations);\r\n            }\r\n        }\r\n    }, {\r\n        decorations: v => v.decorations\r\n    }));\r\n}\r\nconst DefaultPlaceholder = \"\\u2022\";\r\n// Assigns placeholder characters from the Control Pictures block to\r\n// ASCII control characters\r\nfunction placeholder$1(code) {\r\n    if (code >= 32)\r\n        return DefaultPlaceholder;\r\n    if (code == 10)\r\n        return \"\\u2424\";\r\n    return String.fromCharCode(9216 + code);\r\n}\r\nclass SpecialCharWidget extends WidgetType {\r\n    constructor(options, code) {\r\n        super();\r\n        this.options = options;\r\n        this.code = code;\r\n    }\r\n    eq(other) { return other.code == this.code; }\r\n    toDOM(view) {\r\n        let ph = placeholder$1(this.code);\r\n        let desc = view.state.phrase(\"Control character\") + \" \" + (Names[this.code] || \"0x\" + this.code.toString(16));\r\n        let custom = this.options.render && this.options.render(this.code, desc, ph);\r\n        if (custom)\r\n            return custom;\r\n        let span = document.createElement(\"span\");\r\n        span.textContent = ph;\r\n        span.title = desc;\r\n        span.setAttribute(\"aria-label\", desc);\r\n        span.className = \"cm-specialChar\";\r\n        return span;\r\n    }\r\n    ignoreEvent() { return false; }\r\n}\r\nclass TabWidget extends WidgetType {\r\n    constructor(width) {\r\n        super();\r\n        this.width = width;\r\n    }\r\n    eq(other) { return other.width == this.width; }\r\n    toDOM() {\r\n        let span = document.createElement(\"span\");\r\n        span.textContent = \"\\t\";\r\n        span.className = \"cm-tab\";\r\n        span.style.width = this.width + \"px\";\r\n        return span;\r\n    }\r\n    ignoreEvent() { return false; }\r\n}\r\n\r\nconst plugin = /*@__PURE__*/ViewPlugin.fromClass(class {\r\n    constructor() {\r\n        this.height = 1000;\r\n        this.attrs = { style: \"padding-bottom: 1000px\" };\r\n    }\r\n    update(update) {\r\n        let { view } = update;\r\n        let height = view.viewState.editorHeight - view.defaultLineHeight - view.documentPadding.top - 0.5;\r\n        if (height != this.height) {\r\n            this.height = height;\r\n            this.attrs = { style: `padding-bottom: ${height}px` };\r\n        }\r\n    }\r\n});\r\n/**\r\nReturns an extension that makes sure the content has a bottom\r\nmargin equivalent to the height of the editor, minus one line\r\nheight, so that every line in the document can be scrolled to the\r\ntop of the editor.\r\n\r\nThis is only meaningful when the editor is scrollable, and should\r\nnot be enabled in editors that take the size of their content.\r\n*/\r\nfunction scrollPastEnd() {\r\n    return [plugin, contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null; })];\r\n}\r\n\r\n/**\r\nMark lines that have a cursor on them with the `\"cm-activeLine\"`\r\nDOM class.\r\n*/\r\nfunction highlightActiveLine() {\r\n    return activeLineHighlighter;\r\n}\r\nconst lineDeco = /*@__PURE__*/Decoration.line({ class: \"cm-activeLine\" });\r\nconst activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.decorations = this.getDeco(view);\r\n    }\r\n    update(update) {\r\n        if (update.docChanged || update.selectionSet)\r\n            this.decorations = this.getDeco(update.view);\r\n    }\r\n    getDeco(view) {\r\n        let lastLineStart = -1, deco = [];\r\n        for (let r of view.state.selection.ranges) {\r\n            let line = view.lineBlockAt(r.head);\r\n            if (line.from > lastLineStart) {\r\n                deco.push(lineDeco.range(line.from));\r\n                lastLineStart = line.from;\r\n            }\r\n        }\r\n        return Decoration.set(deco);\r\n    }\r\n}, {\r\n    decorations: v => v.decorations\r\n});\r\n\r\nclass Placeholder extends WidgetType {\r\n    constructor(content) {\r\n        super();\r\n        this.content = content;\r\n    }\r\n    toDOM() {\r\n        let wrap = document.createElement(\"span\");\r\n        wrap.className = \"cm-placeholder\";\r\n        wrap.style.pointerEvents = \"none\";\r\n        wrap.appendChild(typeof this.content == \"string\" ? document.createTextNode(this.content) : this.content);\r\n        if (typeof this.content == \"string\")\r\n            wrap.setAttribute(\"aria-label\", \"placeholder \" + this.content);\r\n        else\r\n            wrap.setAttribute(\"aria-hidden\", \"true\");\r\n        return wrap;\r\n    }\r\n    ignoreEvent() { return false; }\r\n}\r\n/**\r\nExtension that enables a placeholder—a piece of example content\r\nto show when the editor is empty.\r\n*/\r\nfunction placeholder(content) {\r\n    return ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.view = view;\r\n            this.placeholder = Decoration.set([Decoration.widget({ widget: new Placeholder(content), side: 1 }).range(0)]);\r\n        }\r\n        get decorations() { return this.view.state.doc.length ? Decoration.none : this.placeholder; }\r\n    }, { decorations: v => v.decorations });\r\n}\r\n\r\n// Don't compute precise column positions for line offsets above this\r\n// (since it could get expensive). Assume offset==column for them.\r\nconst MaxOff = 2000;\r\nfunction rectangleFor(state, a, b) {\r\n    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);\r\n    let ranges = [];\r\n    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {\r\n        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);\r\n        for (let i = startLine; i <= endLine; i++) {\r\n            let line = state.doc.line(i);\r\n            if (line.length <= endOff)\r\n                ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(line.from + startOff, line.to + endOff));\r\n        }\r\n    }\r\n    else {\r\n        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);\r\n        for (let i = startLine; i <= endLine; i++) {\r\n            let line = state.doc.line(i);\r\n            let start = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findColumn)(line.text, startCol, state.tabSize, true);\r\n            if (start < 0) {\r\n                ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(line.to));\r\n            }\r\n            else {\r\n                let end = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.findColumn)(line.text, endCol, state.tabSize);\r\n                ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(line.from + start, line.from + end));\r\n            }\r\n        }\r\n    }\r\n    return ranges;\r\n}\r\nfunction absoluteColumn(view, x) {\r\n    let ref = view.coordsAtPos(view.viewport.from);\r\n    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;\r\n}\r\nfunction getPos(view, event) {\r\n    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\r\n    let line = view.state.doc.lineAt(offset), off = offset - line.from;\r\n    let col = off > MaxOff ? -1\r\n        : off == line.length ? absoluteColumn(view, event.clientX)\r\n            : (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.countColumn)(line.text, view.state.tabSize, offset - line.from);\r\n    return { line: line.number, col, off };\r\n}\r\nfunction rectangleSelectionStyle(view, event) {\r\n    let start = getPos(view, event), startSel = view.state.selection;\r\n    if (!start)\r\n        return null;\r\n    return {\r\n        update(update) {\r\n            if (update.docChanged) {\r\n                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);\r\n                let newLine = update.state.doc.lineAt(newStart);\r\n                start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };\r\n                startSel = startSel.map(update.changes);\r\n            }\r\n        },\r\n        get(event, _extend, multiple) {\r\n            let cur = getPos(view, event);\r\n            if (!cur)\r\n                return startSel;\r\n            let ranges = rectangleFor(view.state, start, cur);\r\n            if (!ranges.length)\r\n                return startSel;\r\n            if (multiple)\r\n                return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges.concat(startSel.ranges));\r\n            else\r\n                return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges);\r\n        }\r\n    };\r\n}\r\n/**\r\nCreate an extension that enables rectangular selections. By\r\ndefault, it will react to left mouse drag with the Alt key held\r\ndown. When such a selection occurs, the text within the rectangle\r\nthat was dragged over will be selected, as one selection\r\n[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.\r\n*/\r\nfunction rectangularSelection(options) {\r\n    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);\r\n    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);\r\n}\r\nconst keys = {\r\n    Alt: [18, e => e.altKey],\r\n    Control: [17, e => e.ctrlKey],\r\n    Shift: [16, e => e.shiftKey],\r\n    Meta: [91, e => e.metaKey]\r\n};\r\nconst showCrosshair = { style: \"cursor: crosshair\" };\r\n/**\r\nReturns an extension that turns the pointer cursor into a\r\ncrosshair when a given modifier key, defaulting to Alt, is held\r\ndown. Can serve as a visual hint that rectangular selection is\r\ngoing to happen when paired with\r\n[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).\r\n*/\r\nfunction crosshairCursor(options = {}) {\r\n    let [code, getter] = keys[options.key || \"Alt\"];\r\n    let plugin = ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.view = view;\r\n            this.isDown = false;\r\n        }\r\n        set(isDown) {\r\n            if (this.isDown != isDown) {\r\n                this.isDown = isDown;\r\n                this.view.update([]);\r\n            }\r\n        }\r\n    }, {\r\n        eventHandlers: {\r\n            keydown(e) {\r\n                this.set(e.keyCode == code || getter(e));\r\n            },\r\n            keyup(e) {\r\n                if (e.keyCode == code || !getter(e))\r\n                    this.set(false);\r\n            },\r\n            mousemove(e) {\r\n                this.set(getter(e));\r\n            }\r\n        }\r\n    });\r\n    return [\r\n        plugin,\r\n        EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })\r\n    ];\r\n}\r\n\r\nconst Outside = \"-10000px\";\r\nclass TooltipViewManager {\r\n    constructor(view, facet, createTooltipView) {\r\n        this.facet = facet;\r\n        this.createTooltipView = createTooltipView;\r\n        this.input = view.state.facet(facet);\r\n        this.tooltips = this.input.filter(t => t);\r\n        this.tooltipViews = this.tooltips.map(createTooltipView);\r\n    }\r\n    update(update) {\r\n        var _a;\r\n        let input = update.state.facet(this.facet);\r\n        let tooltips = input.filter(x => x);\r\n        if (input === this.input) {\r\n            for (let t of this.tooltipViews)\r\n                if (t.update)\r\n                    t.update(update);\r\n            return false;\r\n        }\r\n        let tooltipViews = [];\r\n        for (let i = 0; i < tooltips.length; i++) {\r\n            let tip = tooltips[i], known = -1;\r\n            if (!tip)\r\n                continue;\r\n            for (let i = 0; i < this.tooltips.length; i++) {\r\n                let other = this.tooltips[i];\r\n                if (other && other.create == tip.create)\r\n                    known = i;\r\n            }\r\n            if (known < 0) {\r\n                tooltipViews[i] = this.createTooltipView(tip);\r\n            }\r\n            else {\r\n                let tooltipView = tooltipViews[i] = this.tooltipViews[known];\r\n                if (tooltipView.update)\r\n                    tooltipView.update(update);\r\n            }\r\n        }\r\n        for (let t of this.tooltipViews)\r\n            if (tooltipViews.indexOf(t) < 0) {\r\n                t.dom.remove();\r\n                (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);\r\n            }\r\n        this.input = input;\r\n        this.tooltips = tooltips;\r\n        this.tooltipViews = tooltipViews;\r\n        return true;\r\n    }\r\n}\r\n/**\r\nCreates an extension that configures tooltip behavior.\r\n*/\r\nfunction tooltips(config = {}) {\r\n    return tooltipConfig.of(config);\r\n}\r\nfunction windowSpace(view) {\r\n    let { win } = view;\r\n    return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };\r\n}\r\nconst tooltipConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine: values => {\r\n        var _a, _b, _c;\r\n        return ({\r\n            position: browser.ios ? \"absolute\" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || \"fixed\",\r\n            parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,\r\n            tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,\r\n        });\r\n    }\r\n});\r\nconst tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.inView = true;\r\n        this.lastTransaction = 0;\r\n        this.measureTimeout = -1;\r\n        let config = view.state.facet(tooltipConfig);\r\n        this.position = config.position;\r\n        this.parent = config.parent;\r\n        this.classes = view.themeClasses;\r\n        this.createContainer();\r\n        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };\r\n        this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));\r\n        this.intersectionObserver = typeof IntersectionObserver == \"function\" ? new IntersectionObserver(entries => {\r\n            if (Date.now() > this.lastTransaction - 50 &&\r\n                entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)\r\n                this.measureSoon();\r\n        }, { threshold: [1] }) : null;\r\n        this.observeIntersection();\r\n        view.win.addEventListener(\"resize\", this.measureSoon = this.measureSoon.bind(this));\r\n        this.maybeMeasure();\r\n    }\r\n    createContainer() {\r\n        if (this.parent) {\r\n            this.container = document.createElement(\"div\");\r\n            this.container.style.position = \"relative\";\r\n            this.container.className = this.view.themeClasses;\r\n            this.parent.appendChild(this.container);\r\n        }\r\n        else {\r\n            this.container = this.view.dom;\r\n        }\r\n    }\r\n    observeIntersection() {\r\n        if (this.intersectionObserver) {\r\n            this.intersectionObserver.disconnect();\r\n            for (let tooltip of this.manager.tooltipViews)\r\n                this.intersectionObserver.observe(tooltip.dom);\r\n        }\r\n    }\r\n    measureSoon() {\r\n        if (this.measureTimeout < 0)\r\n            this.measureTimeout = setTimeout(() => {\r\n                this.measureTimeout = -1;\r\n                this.maybeMeasure();\r\n            }, 50);\r\n    }\r\n    update(update) {\r\n        if (update.transactions.length)\r\n            this.lastTransaction = Date.now();\r\n        let updated = this.manager.update(update);\r\n        if (updated)\r\n            this.observeIntersection();\r\n        let shouldMeasure = updated || update.geometryChanged;\r\n        let newConfig = update.state.facet(tooltipConfig);\r\n        if (newConfig.position != this.position) {\r\n            this.position = newConfig.position;\r\n            for (let t of this.manager.tooltipViews)\r\n                t.dom.style.position = this.position;\r\n            shouldMeasure = true;\r\n        }\r\n        if (newConfig.parent != this.parent) {\r\n            if (this.parent)\r\n                this.container.remove();\r\n            this.parent = newConfig.parent;\r\n            this.createContainer();\r\n            for (let t of this.manager.tooltipViews)\r\n                this.container.appendChild(t.dom);\r\n            shouldMeasure = true;\r\n        }\r\n        else if (this.parent && this.view.themeClasses != this.classes) {\r\n            this.classes = this.container.className = this.view.themeClasses;\r\n        }\r\n        if (shouldMeasure)\r\n            this.maybeMeasure();\r\n    }\r\n    createTooltip(tooltip) {\r\n        let tooltipView = tooltip.create(this.view);\r\n        tooltipView.dom.classList.add(\"cm-tooltip\");\r\n        if (tooltip.arrow && !tooltipView.dom.querySelector(\".cm-tooltip > .cm-tooltip-arrow\")) {\r\n            let arrow = document.createElement(\"div\");\r\n            arrow.className = \"cm-tooltip-arrow\";\r\n            tooltipView.dom.appendChild(arrow);\r\n        }\r\n        tooltipView.dom.style.position = this.position;\r\n        tooltipView.dom.style.top = Outside;\r\n        this.container.appendChild(tooltipView.dom);\r\n        if (tooltipView.mount)\r\n            tooltipView.mount(this.view);\r\n        return tooltipView;\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        this.view.win.removeEventListener(\"resize\", this.measureSoon);\r\n        for (let tooltipView of this.manager.tooltipViews) {\r\n            tooltipView.dom.remove();\r\n            (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);\r\n        }\r\n        (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();\r\n        clearTimeout(this.measureTimeout);\r\n    }\r\n    readMeasure() {\r\n        let editor = this.view.dom.getBoundingClientRect();\r\n        return {\r\n            editor,\r\n            parent: this.parent ? this.container.getBoundingClientRect() : editor,\r\n            pos: this.manager.tooltips.map((t, i) => {\r\n                let tv = this.manager.tooltipViews[i];\r\n                return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);\r\n            }),\r\n            size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),\r\n            space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),\r\n        };\r\n    }\r\n    writeMeasure(measured) {\r\n        let { editor, space } = measured;\r\n        let others = [];\r\n        for (let i = 0; i < this.manager.tooltips.length; i++) {\r\n            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;\r\n            let pos = measured.pos[i], size = measured.size[i];\r\n            // Hide tooltips that are outside of the editor.\r\n            if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||\r\n                pos.top >= Math.min(editor.bottom, space.bottom) ||\r\n                pos.right < Math.max(editor.left, space.left) - .1 ||\r\n                pos.left > Math.min(editor.right, space.right) + .1) {\r\n                dom.style.top = Outside;\r\n                continue;\r\n            }\r\n            let arrow = tooltip.arrow ? tView.dom.querySelector(\".cm-tooltip-arrow\") : null;\r\n            let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;\r\n            let width = size.right - size.left, height = size.bottom - size.top;\r\n            let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;\r\n            let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)\r\n                : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)\r\n                    : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);\r\n            let above = !!tooltip.above;\r\n            if (!tooltip.strictSide && (above\r\n                ? pos.top - (size.bottom - size.top) - offset.y < space.top\r\n                : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&\r\n                above == (space.bottom - pos.bottom > pos.top - space.top))\r\n                above = !above;\r\n            let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;\r\n            if (spaceVert < height && tView.resize !== false) {\r\n                if (spaceVert < this.view.defaultLineHeight) {\r\n                    dom.style.top = Outside;\r\n                    continue;\r\n                }\r\n                dom.style.height = (height = spaceVert) + \"px\";\r\n            }\r\n            else if (dom.style.height) {\r\n                dom.style.height = \"\";\r\n            }\r\n            let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;\r\n            let right = left + width;\r\n            if (tView.overlap !== true)\r\n                for (let r of others)\r\n                    if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)\r\n                        top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;\r\n            if (this.position == \"absolute\") {\r\n                dom.style.top = (top - measured.parent.top) + \"px\";\r\n                dom.style.left = (left - measured.parent.left) + \"px\";\r\n            }\r\n            else {\r\n                dom.style.top = top + \"px\";\r\n                dom.style.left = left + \"px\";\r\n            }\r\n            if (arrow)\r\n                arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */)}px`;\r\n            if (tView.overlap !== true)\r\n                others.push({ left, top, right, bottom: top + height });\r\n            dom.classList.toggle(\"cm-tooltip-above\", above);\r\n            dom.classList.toggle(\"cm-tooltip-below\", !above);\r\n            if (tView.positioned)\r\n                tView.positioned(measured.space);\r\n        }\r\n    }\r\n    maybeMeasure() {\r\n        if (this.manager.tooltips.length) {\r\n            if (this.view.inView)\r\n                this.view.requestMeasure(this.measureReq);\r\n            if (this.inView != this.view.inView) {\r\n                this.inView = this.view.inView;\r\n                if (!this.inView)\r\n                    for (let tv of this.manager.tooltipViews)\r\n                        tv.dom.style.top = Outside;\r\n            }\r\n        }\r\n    }\r\n}, {\r\n    eventHandlers: {\r\n        scroll() { this.maybeMeasure(); }\r\n    }\r\n});\r\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\r\n    \".cm-tooltip\": {\r\n        zIndex: 100,\r\n        boxSizing: \"border-box\"\r\n    },\r\n    \"&light .cm-tooltip\": {\r\n        border: \"1px solid #bbb\",\r\n        backgroundColor: \"#f5f5f5\"\r\n    },\r\n    \"&light .cm-tooltip-section:not(:first-child)\": {\r\n        borderTop: \"1px solid #bbb\",\r\n    },\r\n    \"&dark .cm-tooltip\": {\r\n        backgroundColor: \"#333338\",\r\n        color: \"white\"\r\n    },\r\n    \".cm-tooltip-arrow\": {\r\n        height: `${7 /* Arrow.Size */}px`,\r\n        width: `${7 /* Arrow.Size */ * 2}px`,\r\n        position: \"absolute\",\r\n        zIndex: -1,\r\n        overflow: \"hidden\",\r\n        \"&:before, &:after\": {\r\n            content: \"''\",\r\n            position: \"absolute\",\r\n            width: 0,\r\n            height: 0,\r\n            borderLeft: `${7 /* Arrow.Size */}px solid transparent`,\r\n            borderRight: `${7 /* Arrow.Size */}px solid transparent`,\r\n        },\r\n        \".cm-tooltip-above &\": {\r\n            bottom: `-${7 /* Arrow.Size */}px`,\r\n            \"&:before\": {\r\n                borderTop: `${7 /* Arrow.Size */}px solid #bbb`,\r\n            },\r\n            \"&:after\": {\r\n                borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,\r\n                bottom: \"1px\"\r\n            }\r\n        },\r\n        \".cm-tooltip-below &\": {\r\n            top: `-${7 /* Arrow.Size */}px`,\r\n            \"&:before\": {\r\n                borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,\r\n            },\r\n            \"&:after\": {\r\n                borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,\r\n                top: \"1px\"\r\n            }\r\n        },\r\n    },\r\n    \"&dark .cm-tooltip .cm-tooltip-arrow\": {\r\n        \"&:before\": {\r\n            borderTopColor: \"#333338\",\r\n            borderBottomColor: \"#333338\"\r\n        },\r\n        \"&:after\": {\r\n            borderTopColor: \"transparent\",\r\n            borderBottomColor: \"transparent\"\r\n        }\r\n    }\r\n});\r\nconst noOffset = { x: 0, y: 0 };\r\n/**\r\nFacet to which an extension can add a value to show a tooltip.\r\n*/\r\nconst showTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    enables: [tooltipPlugin, baseTheme]\r\n});\r\nconst showHoverTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nclass HoverTooltipHost {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.mounted = false;\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.classList.add(\"cm-tooltip-hover\");\r\n        this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));\r\n    }\r\n    // Needs to be static so that host tooltip instances always match\r\n    static create(view) {\r\n        return new HoverTooltipHost(view);\r\n    }\r\n    createHostedView(tooltip) {\r\n        let hostedView = tooltip.create(this.view);\r\n        hostedView.dom.classList.add(\"cm-tooltip-section\");\r\n        this.dom.appendChild(hostedView.dom);\r\n        if (this.mounted && hostedView.mount)\r\n            hostedView.mount(this.view);\r\n        return hostedView;\r\n    }\r\n    mount(view) {\r\n        for (let hostedView of this.manager.tooltipViews) {\r\n            if (hostedView.mount)\r\n                hostedView.mount(view);\r\n        }\r\n        this.mounted = true;\r\n    }\r\n    positioned(space) {\r\n        for (let hostedView of this.manager.tooltipViews) {\r\n            if (hostedView.positioned)\r\n                hostedView.positioned(space);\r\n        }\r\n    }\r\n    update(update) {\r\n        this.manager.update(update);\r\n    }\r\n}\r\nconst showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {\r\n    let tooltips = state.facet(showHoverTooltip).filter(t => t);\r\n    if (tooltips.length === 0)\r\n        return null;\r\n    return {\r\n        pos: Math.min(...tooltips.map(t => t.pos)),\r\n        end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),\r\n        create: HoverTooltipHost.create,\r\n        above: tooltips[0].above,\r\n        arrow: tooltips.some(t => t.arrow),\r\n    };\r\n});\r\nclass HoverPlugin {\r\n    constructor(view, source, field, setHover, hoverTime) {\r\n        this.view = view;\r\n        this.source = source;\r\n        this.field = field;\r\n        this.setHover = setHover;\r\n        this.hoverTime = hoverTime;\r\n        this.hoverTimeout = -1;\r\n        this.restartTimeout = -1;\r\n        this.pending = null;\r\n        this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };\r\n        this.checkHover = this.checkHover.bind(this);\r\n        view.dom.addEventListener(\"mouseleave\", this.mouseleave = this.mouseleave.bind(this));\r\n        view.dom.addEventListener(\"mousemove\", this.mousemove = this.mousemove.bind(this));\r\n    }\r\n    update() {\r\n        if (this.pending) {\r\n            this.pending = null;\r\n            clearTimeout(this.restartTimeout);\r\n            this.restartTimeout = setTimeout(() => this.startHover(), 20);\r\n        }\r\n    }\r\n    get active() {\r\n        return this.view.state.field(this.field);\r\n    }\r\n    checkHover() {\r\n        this.hoverTimeout = -1;\r\n        if (this.active)\r\n            return;\r\n        let hovered = Date.now() - this.lastMove.time;\r\n        if (hovered < this.hoverTime)\r\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);\r\n        else\r\n            this.startHover();\r\n    }\r\n    startHover() {\r\n        clearTimeout(this.restartTimeout);\r\n        let { lastMove } = this;\r\n        let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;\r\n        if (pos == null)\r\n            return;\r\n        let posCoords = this.view.coordsAtPos(pos);\r\n        if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||\r\n            lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||\r\n            lastMove.x > posCoords.right + this.view.defaultCharacterWidth)\r\n            return;\r\n        let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);\r\n        let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;\r\n        let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));\r\n        if (open === null || open === void 0 ? void 0 : open.then) {\r\n            let pending = this.pending = { pos };\r\n            open.then(result => {\r\n                if (this.pending == pending) {\r\n                    this.pending = null;\r\n                    if (result)\r\n                        this.view.dispatch({ effects: this.setHover.of(result) });\r\n                }\r\n            }, e => logException(this.view.state, e, \"hover tooltip\"));\r\n        }\r\n        else if (open) {\r\n            this.view.dispatch({ effects: this.setHover.of(open) });\r\n        }\r\n    }\r\n    mousemove(event) {\r\n        var _a;\r\n        this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };\r\n        if (this.hoverTimeout < 0)\r\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);\r\n        let tooltip = this.active;\r\n        if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {\r\n            let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;\r\n            if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos\r\n                : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* Hover.MaxDist */))) {\r\n                this.view.dispatch({ effects: this.setHover.of(null) });\r\n                this.pending = null;\r\n            }\r\n        }\r\n    }\r\n    mouseleave(e) {\r\n        clearTimeout(this.hoverTimeout);\r\n        this.hoverTimeout = -1;\r\n        if (this.active && !isInTooltip(e.relatedTarget))\r\n            this.view.dispatch({ effects: this.setHover.of(null) });\r\n    }\r\n    destroy() {\r\n        clearTimeout(this.hoverTimeout);\r\n        this.view.dom.removeEventListener(\"mouseleave\", this.mouseleave);\r\n        this.view.dom.removeEventListener(\"mousemove\", this.mousemove);\r\n    }\r\n}\r\nfunction isInTooltip(elt) {\r\n    for (let cur = elt; cur; cur = cur.parentNode)\r\n        if (cur.nodeType == 1 && cur.classList.contains(\"cm-tooltip\"))\r\n            return true;\r\n    return false;\r\n}\r\nfunction isOverRange(view, from, to, x, y, margin) {\r\n    let range = document.createRange();\r\n    let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);\r\n    range.setEnd(toDOM.node, toDOM.offset);\r\n    range.setStart(fromDOM.node, fromDOM.offset);\r\n    let rects = range.getClientRects();\r\n    range.detach();\r\n    for (let i = 0; i < rects.length; i++) {\r\n        let rect = rects[i];\r\n        let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);\r\n        if (dist <= margin)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\nSet up a hover tooltip, which shows up when the pointer hovers\r\nover ranges of text. The callback is called when the mouse hovers\r\nover the document text. It should, if there is a tooltip\r\nassociated with position `pos`, return the tooltip description\r\n(either directly or in a promise). The `side` argument indicates\r\non which side of the position the pointer is—it will be -1 if the\r\npointer is before the position, 1 if after the position.\r\n\r\nNote that all hover tooltips are hosted within a single tooltip\r\ncontainer element. This allows multiple tooltips over the same\r\nrange to be \"merged\" together without overlapping.\r\n*/\r\nfunction hoverTooltip(source, options = {}) {\r\n    let setHover = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\n    let hoverState = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({\r\n        create() { return null; },\r\n        update(value, tr) {\r\n            if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||\r\n                options.hideOn && options.hideOn(tr, value)))\r\n                return null;\r\n            if (value && tr.docChanged) {\r\n                let newPos = tr.changes.mapPos(value.pos, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackDel);\r\n                if (newPos == null)\r\n                    return null;\r\n                let copy = Object.assign(Object.create(null), value);\r\n                copy.pos = newPos;\r\n                if (value.end != null)\r\n                    copy.end = tr.changes.mapPos(value.end);\r\n                value = copy;\r\n            }\r\n            for (let effect of tr.effects) {\r\n                if (effect.is(setHover))\r\n                    value = effect.value;\r\n                if (effect.is(closeHoverTooltipEffect))\r\n                    value = null;\r\n            }\r\n            return value;\r\n        },\r\n        provide: f => showHoverTooltip.from(f)\r\n    });\r\n    return [\r\n        hoverState,\r\n        ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),\r\n        showHoverTooltipHost\r\n    ];\r\n}\r\n/**\r\nGet the active tooltip view for a given tooltip, if available.\r\n*/\r\nfunction getTooltip(view, tooltip) {\r\n    let plugin = view.plugin(tooltipPlugin);\r\n    if (!plugin)\r\n        return null;\r\n    let found = plugin.manager.tooltips.indexOf(tooltip);\r\n    return found < 0 ? null : plugin.manager.tooltipViews[found];\r\n}\r\n/**\r\nReturns true if any hover tooltips are currently active.\r\n*/\r\nfunction hasHoverTooltips(state) {\r\n    return state.facet(showHoverTooltip).some(x => x);\r\n}\r\nconst closeHoverTooltipEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\r\n/**\r\nTransaction effect that closes all hover tooltips.\r\n*/\r\nconst closeHoverTooltips = /*@__PURE__*/closeHoverTooltipEffect.of(null);\r\n/**\r\nTell the tooltip extension to recompute the position of the active\r\ntooltips. This can be useful when something happens (such as a\r\nre-positioning or CSS change affecting the editor) that could\r\ninvalidate the existing tooltip positions.\r\n*/\r\nfunction repositionTooltips(view) {\r\n    var _a;\r\n    (_a = view.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();\r\n}\r\n\r\nconst panelConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine(configs) {\r\n        let topContainer, bottomContainer;\r\n        for (let c of configs) {\r\n            topContainer = topContainer || c.topContainer;\r\n            bottomContainer = bottomContainer || c.bottomContainer;\r\n        }\r\n        return { topContainer, bottomContainer };\r\n    }\r\n});\r\n/**\r\nConfigures the panel-managing extension.\r\n*/\r\nfunction panels(config) {\r\n    return config ? [panelConfig.of(config)] : [];\r\n}\r\n/**\r\nGet the active panel created by the given constructor, if any.\r\nThis can be useful when you need access to your panels' DOM\r\nstructure.\r\n*/\r\nfunction getPanel(view, panel) {\r\n    let plugin = view.plugin(panelPlugin);\r\n    let index = plugin ? plugin.specs.indexOf(panel) : -1;\r\n    return index > -1 ? plugin.panels[index] : null;\r\n}\r\nconst panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.input = view.state.facet(showPanel);\r\n        this.specs = this.input.filter(s => s);\r\n        this.panels = this.specs.map(spec => spec(view));\r\n        let conf = view.state.facet(panelConfig);\r\n        this.top = new PanelGroup(view, true, conf.topContainer);\r\n        this.bottom = new PanelGroup(view, false, conf.bottomContainer);\r\n        this.top.sync(this.panels.filter(p => p.top));\r\n        this.bottom.sync(this.panels.filter(p => !p.top));\r\n        for (let p of this.panels) {\r\n            p.dom.classList.add(\"cm-panel\");\r\n            if (p.mount)\r\n                p.mount();\r\n        }\r\n    }\r\n    update(update) {\r\n        let conf = update.state.facet(panelConfig);\r\n        if (this.top.container != conf.topContainer) {\r\n            this.top.sync([]);\r\n            this.top = new PanelGroup(update.view, true, conf.topContainer);\r\n        }\r\n        if (this.bottom.container != conf.bottomContainer) {\r\n            this.bottom.sync([]);\r\n            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);\r\n        }\r\n        this.top.syncClasses();\r\n        this.bottom.syncClasses();\r\n        let input = update.state.facet(showPanel);\r\n        if (input != this.input) {\r\n            let specs = input.filter(x => x);\r\n            let panels = [], top = [], bottom = [], mount = [];\r\n            for (let spec of specs) {\r\n                let known = this.specs.indexOf(spec), panel;\r\n                if (known < 0) {\r\n                    panel = spec(update.view);\r\n                    mount.push(panel);\r\n                }\r\n                else {\r\n                    panel = this.panels[known];\r\n                    if (panel.update)\r\n                        panel.update(update);\r\n                }\r\n                panels.push(panel);\r\n                (panel.top ? top : bottom).push(panel);\r\n            }\r\n            this.specs = specs;\r\n            this.panels = panels;\r\n            this.top.sync(top);\r\n            this.bottom.sync(bottom);\r\n            for (let p of mount) {\r\n                p.dom.classList.add(\"cm-panel\");\r\n                if (p.mount)\r\n                    p.mount();\r\n            }\r\n        }\r\n        else {\r\n            for (let p of this.panels)\r\n                if (p.update)\r\n                    p.update(update);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.top.sync([]);\r\n        this.bottom.sync([]);\r\n    }\r\n}, {\r\n    provide: plugin => EditorView.scrollMargins.of(view => {\r\n        let value = view.plugin(plugin);\r\n        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };\r\n    })\r\n});\r\nclass PanelGroup {\r\n    constructor(view, top, container) {\r\n        this.view = view;\r\n        this.top = top;\r\n        this.container = container;\r\n        this.dom = undefined;\r\n        this.classes = \"\";\r\n        this.panels = [];\r\n        this.syncClasses();\r\n    }\r\n    sync(panels) {\r\n        for (let p of this.panels)\r\n            if (p.destroy && panels.indexOf(p) < 0)\r\n                p.destroy();\r\n        this.panels = panels;\r\n        this.syncDOM();\r\n    }\r\n    syncDOM() {\r\n        if (this.panels.length == 0) {\r\n            if (this.dom) {\r\n                this.dom.remove();\r\n                this.dom = undefined;\r\n            }\r\n            return;\r\n        }\r\n        if (!this.dom) {\r\n            this.dom = document.createElement(\"div\");\r\n            this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\r\n            this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\r\n            let parent = this.container || this.view.dom;\r\n            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\r\n        }\r\n        let curDOM = this.dom.firstChild;\r\n        for (let panel of this.panels) {\r\n            if (panel.dom.parentNode == this.dom) {\r\n                while (curDOM != panel.dom)\r\n                    curDOM = rm(curDOM);\r\n                curDOM = curDOM.nextSibling;\r\n            }\r\n            else {\r\n                this.dom.insertBefore(panel.dom, curDOM);\r\n            }\r\n        }\r\n        while (curDOM)\r\n            curDOM = rm(curDOM);\r\n    }\r\n    scrollMargin() {\r\n        return !this.dom || this.container ? 0\r\n            : Math.max(0, this.top ?\r\n                this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :\r\n                Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\r\n    }\r\n    syncClasses() {\r\n        if (!this.container || this.classes == this.view.themeClasses)\r\n            return;\r\n        for (let cls of this.classes.split(\" \"))\r\n            if (cls)\r\n                this.container.classList.remove(cls);\r\n        for (let cls of (this.classes = this.view.themeClasses).split(\" \"))\r\n            if (cls)\r\n                this.container.classList.add(cls);\r\n    }\r\n}\r\nfunction rm(node) {\r\n    let next = node.nextSibling;\r\n    node.remove();\r\n    return next;\r\n}\r\n/**\r\nOpening a panel is done by providing a constructor function for\r\nthe panel through this facet. (The panel is closed again when its\r\nconstructor is no longer provided.) Values of `null` are ignored.\r\n*/\r\nconst showPanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    enables: panelPlugin\r\n});\r\n\r\n/**\r\nA gutter marker represents a bit of information attached to a line\r\nin a specific gutter. Your own custom markers have to extend this\r\nclass.\r\n*/\r\nclass GutterMarker extends _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeValue {\r\n    /**\r\n    @internal\r\n    */\r\n    compare(other) {\r\n        return this == other || this.constructor == other.constructor && this.eq(other);\r\n    }\r\n    /**\r\n    Compare this marker to another marker of the same type.\r\n    */\r\n    eq(other) { return false; }\r\n    /**\r\n    Called if the marker has a `toDOM` method and its representation\r\n    was removed from a gutter.\r\n    */\r\n    destroy(dom) { }\r\n}\r\nGutterMarker.prototype.elementClass = \"\";\r\nGutterMarker.prototype.toDOM = undefined;\r\nGutterMarker.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackBefore;\r\nGutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;\r\nGutterMarker.prototype.point = true;\r\n/**\r\nFacet used to add a class to all gutter elements for a given line.\r\nMarkers given to this facet should _only_ define an\r\n[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a\r\n[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear\r\nin all gutters for the line).\r\n*/\r\nconst gutterLineClass = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst defaults = {\r\n    class: \"\",\r\n    renderEmptyElements: false,\r\n    elementStyle: \"\",\r\n    markers: () => _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.empty,\r\n    lineMarker: () => null,\r\n    lineMarkerChange: null,\r\n    initialSpacer: null,\r\n    updateSpacer: null,\r\n    domEventHandlers: {}\r\n};\r\nconst activeGutters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\n/**\r\nDefine an editor gutter. The order in which the gutters appear is\r\ndetermined by their extension priority.\r\n*/\r\nfunction gutter(config) {\r\n    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];\r\n}\r\nconst unfixGutters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine: values => values.some(x => x)\r\n});\r\n/**\r\nThe gutter-drawing plugin is automatically enabled when you add a\r\ngutter, but you can use this function to explicitly configure it.\r\n\r\nUnless `fixed` is explicitly set to `false`, the gutters are\r\nfixed, meaning they don't scroll along with the content\r\nhorizontally (except on Internet Explorer, which doesn't support\r\nCSS [`position:\r\nsticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\r\n*/\r\nfunction gutters(config) {\r\n    let result = [\r\n        gutterView,\r\n    ];\r\n    if (config && config.fixed === false)\r\n        result.push(unfixGutters.of(true));\r\n    return result;\r\n}\r\nconst gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.prevViewport = view.viewport;\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-gutters\";\r\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\r\n        this.dom.style.minHeight = this.view.contentHeight + \"px\";\r\n        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));\r\n        for (let gutter of this.gutters)\r\n            this.dom.appendChild(gutter.dom);\r\n        this.fixed = !view.state.facet(unfixGutters);\r\n        if (this.fixed) {\r\n            // FIXME IE11 fallback, which doesn't support position: sticky,\r\n            // by using position: relative + event handlers that realign the\r\n            // gutter (or just force fixed=false on IE11?)\r\n            this.dom.style.position = \"sticky\";\r\n        }\r\n        this.syncGutters(false);\r\n        view.scrollDOM.insertBefore(this.dom, view.contentDOM);\r\n    }\r\n    update(update) {\r\n        if (this.updateGutters(update)) {\r\n            // Detach during sync when the viewport changed significantly\r\n            // (such as during scrolling), since for large updates that is\r\n            // faster.\r\n            let vpA = this.prevViewport, vpB = update.view.viewport;\r\n            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);\r\n            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);\r\n        }\r\n        if (update.geometryChanged)\r\n            this.dom.style.minHeight = this.view.contentHeight + \"px\";\r\n        if (this.view.state.facet(unfixGutters) != !this.fixed) {\r\n            this.fixed = !this.fixed;\r\n            this.dom.style.position = this.fixed ? \"sticky\" : \"\";\r\n        }\r\n        this.prevViewport = update.view.viewport;\r\n    }\r\n    syncGutters(detach) {\r\n        let after = this.dom.nextSibling;\r\n        if (detach)\r\n            this.dom.remove();\r\n        let lineClasses = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);\r\n        let classSet = [];\r\n        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));\r\n        for (let line of this.view.viewportLineBlocks) {\r\n            let text;\r\n            if (Array.isArray(line.type)) {\r\n                for (let b of line.type)\r\n                    if (b.type == BlockType.Text) {\r\n                        text = b;\r\n                        break;\r\n                    }\r\n            }\r\n            else {\r\n                text = line.type == BlockType.Text ? line : undefined;\r\n            }\r\n            if (!text)\r\n                continue;\r\n            if (classSet.length)\r\n                classSet = [];\r\n            advanceCursor(lineClasses, classSet, line.from);\r\n            for (let cx of contexts)\r\n                cx.line(this.view, text, classSet);\r\n        }\r\n        for (let cx of contexts)\r\n            cx.finish();\r\n        if (detach)\r\n            this.view.scrollDOM.insertBefore(this.dom, after);\r\n    }\r\n    updateGutters(update) {\r\n        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);\r\n        let change = update.docChanged || update.heightChanged || update.viewportChanged ||\r\n            !_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);\r\n        if (prev == cur) {\r\n            for (let gutter of this.gutters)\r\n                if (gutter.update(update))\r\n                    change = true;\r\n        }\r\n        else {\r\n            change = true;\r\n            let gutters = [];\r\n            for (let conf of cur) {\r\n                let known = prev.indexOf(conf);\r\n                if (known < 0) {\r\n                    gutters.push(new SingleGutterView(this.view, conf));\r\n                }\r\n                else {\r\n                    this.gutters[known].update(update);\r\n                    gutters.push(this.gutters[known]);\r\n                }\r\n            }\r\n            for (let g of this.gutters) {\r\n                g.dom.remove();\r\n                if (gutters.indexOf(g) < 0)\r\n                    g.destroy();\r\n            }\r\n            for (let g of gutters)\r\n                this.dom.appendChild(g.dom);\r\n            this.gutters = gutters;\r\n        }\r\n        return change;\r\n    }\r\n    destroy() {\r\n        for (let view of this.gutters)\r\n            view.destroy();\r\n        this.dom.remove();\r\n    }\r\n}, {\r\n    provide: plugin => EditorView.scrollMargins.of(view => {\r\n        let value = view.plugin(plugin);\r\n        if (!value || value.gutters.length == 0 || !value.fixed)\r\n            return null;\r\n        return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };\r\n    })\r\n});\r\nfunction asArray(val) { return (Array.isArray(val) ? val : [val]); }\r\nfunction advanceCursor(cursor, collect, pos) {\r\n    while (cursor.value && cursor.from <= pos) {\r\n        if (cursor.from == pos)\r\n            collect.push(cursor.value);\r\n        cursor.next();\r\n    }\r\n}\r\nclass UpdateContext {\r\n    constructor(gutter, viewport, height) {\r\n        this.gutter = gutter;\r\n        this.height = height;\r\n        this.i = 0;\r\n        this.cursor = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.iter(gutter.markers, viewport.from);\r\n    }\r\n    line(view, line, extraMarkers) {\r\n        let localMarkers = [];\r\n        advanceCursor(this.cursor, localMarkers, line.from);\r\n        if (extraMarkers.length)\r\n            localMarkers = localMarkers.concat(extraMarkers);\r\n        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\r\n        if (forLine)\r\n            localMarkers.unshift(forLine);\r\n        let gutter = this.gutter;\r\n        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)\r\n            return;\r\n        let above = line.top - this.height;\r\n        if (this.i == gutter.elements.length) {\r\n            let newElt = new GutterElement(view, line.height, above, localMarkers);\r\n            gutter.elements.push(newElt);\r\n            gutter.dom.appendChild(newElt.dom);\r\n        }\r\n        else {\r\n            gutter.elements[this.i].update(view, line.height, above, localMarkers);\r\n        }\r\n        this.height = line.bottom;\r\n        this.i++;\r\n    }\r\n    finish() {\r\n        let gutter = this.gutter;\r\n        while (gutter.elements.length > this.i) {\r\n            let last = gutter.elements.pop();\r\n            gutter.dom.removeChild(last.dom);\r\n            last.destroy();\r\n        }\r\n    }\r\n}\r\nclass SingleGutterView {\r\n    constructor(view, config) {\r\n        this.view = view;\r\n        this.config = config;\r\n        this.elements = [];\r\n        this.spacer = null;\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\r\n        for (let prop in config.domEventHandlers) {\r\n            this.dom.addEventListener(prop, (event) => {\r\n                let target = event.target, y;\r\n                if (target != this.dom && this.dom.contains(target)) {\r\n                    while (target.parentNode != this.dom)\r\n                        target = target.parentNode;\r\n                    let rect = target.getBoundingClientRect();\r\n                    y = (rect.top + rect.bottom) / 2;\r\n                }\r\n                else {\r\n                    y = event.clientY;\r\n                }\r\n                let line = view.lineBlockAtHeight(y - view.documentTop);\r\n                if (config.domEventHandlers[prop](view, line, event))\r\n                    event.preventDefault();\r\n            });\r\n        }\r\n        this.markers = asArray(config.markers(view));\r\n        if (config.initialSpacer) {\r\n            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);\r\n            this.dom.appendChild(this.spacer.dom);\r\n            this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\r\n        }\r\n    }\r\n    update(update) {\r\n        let prevMarkers = this.markers;\r\n        this.markers = asArray(this.config.markers(update.view));\r\n        if (this.spacer && this.config.updateSpacer) {\r\n            let updated = this.config.updateSpacer(this.spacer.markers[0], update);\r\n            if (updated != this.spacer.markers[0])\r\n                this.spacer.update(update.view, 0, 0, [updated]);\r\n        }\r\n        let vp = update.view.viewport;\r\n        return !_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||\r\n            (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);\r\n    }\r\n    destroy() {\r\n        for (let elt of this.elements)\r\n            elt.destroy();\r\n    }\r\n}\r\nclass GutterElement {\r\n    constructor(view, height, above, markers) {\r\n        this.height = -1;\r\n        this.above = 0;\r\n        this.markers = [];\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-gutterElement\";\r\n        this.update(view, height, above, markers);\r\n    }\r\n    update(view, height, above, markers) {\r\n        if (this.height != height)\r\n            this.dom.style.height = (this.height = height) + \"px\";\r\n        if (this.above != above)\r\n            this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\r\n        if (!sameMarkers(this.markers, markers))\r\n            this.setMarkers(view, markers);\r\n    }\r\n    setMarkers(view, markers) {\r\n        let cls = \"cm-gutterElement\", domPos = this.dom.firstChild;\r\n        for (let iNew = 0, iOld = 0;;) {\r\n            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;\r\n            if (marker) {\r\n                let c = marker.elementClass;\r\n                if (c)\r\n                    cls += \" \" + c;\r\n                for (let i = iOld; i < this.markers.length; i++)\r\n                    if (this.markers[i].compare(marker)) {\r\n                        skipTo = i;\r\n                        matched = true;\r\n                        break;\r\n                    }\r\n            }\r\n            else {\r\n                skipTo = this.markers.length;\r\n            }\r\n            while (iOld < skipTo) {\r\n                let next = this.markers[iOld++];\r\n                if (next.toDOM) {\r\n                    next.destroy(domPos);\r\n                    let after = domPos.nextSibling;\r\n                    domPos.remove();\r\n                    domPos = after;\r\n                }\r\n            }\r\n            if (!marker)\r\n                break;\r\n            if (marker.toDOM) {\r\n                if (matched)\r\n                    domPos = domPos.nextSibling;\r\n                else\r\n                    this.dom.insertBefore(marker.toDOM(view), domPos);\r\n            }\r\n            if (matched)\r\n                iOld++;\r\n        }\r\n        this.dom.className = cls;\r\n        this.markers = markers;\r\n    }\r\n    destroy() {\r\n        this.setMarkers(null, []); // First argument not used unless creating markers\r\n    }\r\n}\r\nfunction sameMarkers(a, b) {\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++)\r\n        if (!a[i].compare(b[i]))\r\n            return false;\r\n    return true;\r\n}\r\n/**\r\nFacet used to provide markers to the line number gutter.\r\n*/\r\nconst lineNumberMarkers = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define();\r\nconst lineNumberConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({\r\n    combine(values) {\r\n        return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(values, { formatNumber: String, domEventHandlers: {} }, {\r\n            domEventHandlers(a, b) {\r\n                let result = Object.assign({}, a);\r\n                for (let event in b) {\r\n                    let exists = result[event], add = b[event];\r\n                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;\r\n                }\r\n                return result;\r\n            }\r\n        });\r\n    }\r\n});\r\nclass NumberMarker extends GutterMarker {\r\n    constructor(number) {\r\n        super();\r\n        this.number = number;\r\n    }\r\n    eq(other) { return this.number == other.number; }\r\n    toDOM() { return document.createTextNode(this.number); }\r\n}\r\nfunction formatNumber(view, number) {\r\n    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);\r\n}\r\nconst lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({\r\n    class: \"cm-lineNumbers\",\r\n    renderEmptyElements: false,\r\n    markers(view) { return view.state.facet(lineNumberMarkers); },\r\n    lineMarker(view, line, others) {\r\n        if (others.some(m => m.toDOM))\r\n            return null;\r\n        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));\r\n    },\r\n    lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),\r\n    initialSpacer(view) {\r\n        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));\r\n    },\r\n    updateSpacer(spacer, update) {\r\n        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));\r\n        return max == spacer.number ? spacer : new NumberMarker(max);\r\n    },\r\n    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers\r\n}));\r\n/**\r\nCreate a line number gutter extension.\r\n*/\r\nfunction lineNumbers(config = {}) {\r\n    return [\r\n        lineNumberConfig.of(config),\r\n        gutters(),\r\n        lineNumberGutter\r\n    ];\r\n}\r\nfunction maxLineNumber(lines) {\r\n    let last = 9;\r\n    while (last < lines)\r\n        last = last * 10 + 9;\r\n    return last;\r\n}\r\nconst activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.elementClass = \"cm-activeLineGutter\";\r\n    }\r\n};\r\nconst activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute([\"selection\"], state => {\r\n    let marks = [], last = -1;\r\n    for (let range of state.selection.ranges) {\r\n        let linePos = state.doc.lineAt(range.head).from;\r\n        if (linePos > last) {\r\n            last = linePos;\r\n            marks.push(activeLineGutterMarker.range(linePos));\r\n        }\r\n    }\r\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSet.of(marks);\r\n});\r\n/**\r\nReturns an extension that adds a `cm-activeLineGutter` class to\r\nall gutter elements on the [active\r\nline](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).\r\n*/\r\nfunction highlightActiveLineGutter() {\r\n    return activeLineGutterHighlighter;\r\n}\r\n\r\nconst WhitespaceDeco = /*@__PURE__*/new Map();\r\nfunction getWhitespaceDeco(space) {\r\n    let deco = WhitespaceDeco.get(space);\r\n    if (!deco)\r\n        WhitespaceDeco.set(space, deco = Decoration.mark({\r\n            attributes: space === \"\\t\" ? {\r\n                class: \"cm-highlightTab\",\r\n            } : {\r\n                class: \"cm-highlightSpace\",\r\n                \"data-display\": space.replace(/ /g, \"·\")\r\n            }\r\n        }));\r\n    return deco;\r\n}\r\nfunction matcher(decorator) {\r\n    return ViewPlugin.define(view => ({\r\n        decorations: decorator.createDeco(view),\r\n        update(u) {\r\n            this.decorations = decorator.updateDeco(u, this.decorations);\r\n        },\r\n    }), {\r\n        decorations: v => v.decorations\r\n    });\r\n}\r\nconst whitespaceHighlighter = /*@__PURE__*/matcher(/*@__PURE__*/new MatchDecorator({\r\n    regexp: /\\t| +/g,\r\n    decoration: match => getWhitespaceDeco(match[0]),\r\n    boundary: /\\S/,\r\n}));\r\n/**\r\nReturns an extension that highlights whitespace, adding a\r\n`cm-highlightSpace` class to stretches of spaces, and a\r\n`cm-highlightTab` class to individual tab characters. By default,\r\nthe former are shown as faint dots, and the latter as arrows.\r\n*/\r\nfunction highlightWhitespace() {\r\n    return whitespaceHighlighter;\r\n}\r\nconst trailingHighlighter = /*@__PURE__*/matcher(/*@__PURE__*/new MatchDecorator({\r\n    regexp: /\\s+$/g,\r\n    decoration: /*@__PURE__*/Decoration.mark({ class: \"cm-trailingSpace\" }),\r\n    boundary: /\\S/,\r\n}));\r\n/**\r\nReturns an extension that adds a `cm-trailingSpace` class to all\r\ntrailing whitespace.\r\n*/\r\nfunction highlightTrailingWhitespace() {\r\n    return trailingHighlighter;\r\n}\r\n\r\n/**\r\n@internal\r\n*/\r\nconst __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/view/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@lezer/common/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@lezer/common/dist/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultBufferLength\": function() { return /* binding */ DefaultBufferLength; },\n/* harmony export */   \"IterMode\": function() { return /* binding */ IterMode; },\n/* harmony export */   \"MountedTree\": function() { return /* binding */ MountedTree; },\n/* harmony export */   \"NodeProp\": function() { return /* binding */ NodeProp; },\n/* harmony export */   \"NodeSet\": function() { return /* binding */ NodeSet; },\n/* harmony export */   \"NodeType\": function() { return /* binding */ NodeType; },\n/* harmony export */   \"NodeWeakMap\": function() { return /* binding */ NodeWeakMap; },\n/* harmony export */   \"Parser\": function() { return /* binding */ Parser; },\n/* harmony export */   \"Tree\": function() { return /* binding */ Tree; },\n/* harmony export */   \"TreeBuffer\": function() { return /* binding */ TreeBuffer; },\n/* harmony export */   \"TreeCursor\": function() { return /* binding */ TreeCursor; },\n/* harmony export */   \"TreeFragment\": function() { return /* binding */ TreeFragment; },\n/* harmony export */   \"parseMixed\": function() { return /* binding */ parseMixed; }\n/* harmony export */ });\n// FIXME profile adding a per-Tree TreeNode cache, validating it by\r\n// parent pointer\r\n/// The default maximum length of a `TreeBuffer` node.\r\nconst DefaultBufferLength = 1024;\r\nlet nextPropID = 0;\r\nclass Range {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\r\n/// can have metadata associated with it in props. Instances of this\r\n/// class represent prop names.\r\nclass NodeProp {\r\n    /// Create a new node prop type.\r\n    constructor(config = {}) {\r\n        this.id = nextPropID++;\r\n        this.perNode = !!config.perNode;\r\n        this.deserialize = config.deserialize || (() => {\r\n            throw new Error(\"This node type doesn't define a deserialize function\");\r\n        });\r\n    }\r\n    /// This is meant to be used with\r\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\r\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\r\n    /// prop values for each node type in the set. Takes a [match\r\n    /// object](#common.NodeType^match) or function that returns undefined\r\n    /// if the node type doesn't get this prop, and the prop's value if\r\n    /// it does.\r\n    add(match) {\r\n        if (this.perNode)\r\n            throw new RangeError(\"Can't add per-node props to node types\");\r\n        if (typeof match != \"function\")\r\n            match = NodeType.match(match);\r\n        return (type) => {\r\n            let result = match(type);\r\n            return result === undefined ? null : [this, result];\r\n        };\r\n    }\r\n}\r\n/// Prop that is used to describe matching delimiters. For opening\r\n/// delimiters, this holds an array of node names (written as a\r\n/// space-separated string when declaring this prop in a grammar)\r\n/// for the node types of closing delimiters that match it.\r\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\r\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\r\n/// attached to closing delimiters, holding an array of node names\r\n/// of types of matching opening delimiters.\r\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\r\n/// Used to assign node types to groups (for example, all node\r\n/// types that represent an expression could be tagged with an\r\n/// `\"Expression\"` group).\r\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\r\n/// The hash of the [context](#lr.ContextTracker.constructor)\r\n/// that the node was parsed in, if any. Used to limit reuse of\r\n/// contextual nodes.\r\nNodeProp.contextHash = new NodeProp({ perNode: true });\r\n/// The distance beyond the end of the node that the tokenizer\r\n/// looked ahead for any of the tokens inside the node. (The LR\r\n/// parser only stores this when it is larger than 25, for\r\n/// efficiency reasons.)\r\nNodeProp.lookAhead = new NodeProp({ perNode: true });\r\n/// This per-node prop is used to replace a given node, or part of a\r\n/// node, with another tree. This is useful to include trees from\r\n/// different languages in mixed-language parsers.\r\nNodeProp.mounted = new NodeProp({ perNode: true });\r\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\r\n/// a tree node to indicate that parts of its content are\r\n/// represented by another tree.\r\nclass MountedTree {\r\n    constructor(\r\n    /// The inner tree.\r\n    tree, \r\n    /// If this is null, this tree replaces the entire node (it will\r\n    /// be included in the regular iteration instead of its host\r\n    /// node). If not, only the given ranges are considered to be\r\n    /// covered by this tree. This is used for trees that are mixed in\r\n    /// a way that isn't strictly hierarchical. Such mounted trees are\r\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\r\n    /// and [`enter`](#common.SyntaxNode.enter).\r\n    overlay, \r\n    /// The parser used to create this subtree.\r\n    parser) {\r\n        this.tree = tree;\r\n        this.overlay = overlay;\r\n        this.parser = parser;\r\n    }\r\n}\r\nconst noProps = Object.create(null);\r\n/// Each node in a syntax tree has a node type associated with it.\r\nclass NodeType {\r\n    /// @internal\r\n    constructor(\r\n    /// The name of the node type. Not necessarily unique, but if the\r\n    /// grammar was written properly, different node types with the\r\n    /// same name within a node set should play the same semantic\r\n    /// role.\r\n    name, \r\n    /// @internal\r\n    props, \r\n    /// The id of this node in its set. Corresponds to the term ids\r\n    /// used in the parser.\r\n    id, \r\n    /// @internal\r\n    flags = 0) {\r\n        this.name = name;\r\n        this.props = props;\r\n        this.id = id;\r\n        this.flags = flags;\r\n    }\r\n    /// Define a node type.\r\n    static define(spec) {\r\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\r\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\r\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\r\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\r\n        if (spec.props)\r\n            for (let src of spec.props) {\r\n                if (!Array.isArray(src))\r\n                    src = src(type);\r\n                if (src) {\r\n                    if (src[0].perNode)\r\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\r\n                    props[src[0].id] = src[1];\r\n                }\r\n            }\r\n        return type;\r\n    }\r\n    /// Retrieves a node prop for this type. Will return `undefined` if\r\n    /// the prop isn't present on this node.\r\n    prop(prop) { return this.props[prop.id]; }\r\n    /// True when this is the top node of a grammar.\r\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\r\n    /// True when this node is produced by a skip rule.\r\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\r\n    /// Indicates whether this is an error node.\r\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\r\n    /// When true, this node type doesn't correspond to a user-declared\r\n    /// named node, for example because it is used to cache repetition.\r\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\r\n    /// Returns true when this node's name or one of its\r\n    /// [groups](#common.NodeProp^group) matches the given string.\r\n    is(name) {\r\n        if (typeof name == 'string') {\r\n            if (this.name == name)\r\n                return true;\r\n            let group = this.prop(NodeProp.group);\r\n            return group ? group.indexOf(name) > -1 : false;\r\n        }\r\n        return this.id == name;\r\n    }\r\n    /// Create a function from node types to arbitrary values by\r\n    /// specifying an object whose property names are node or\r\n    /// [group](#common.NodeProp^group) names. Often useful with\r\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\r\n    /// names, separated by spaces, in a single property name to map\r\n    /// multiple node names to a single value.\r\n    static match(map) {\r\n        let direct = Object.create(null);\r\n        for (let prop in map)\r\n            for (let name of prop.split(\" \"))\r\n                direct[name] = map[prop];\r\n        return (node) => {\r\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\r\n                let found = direct[i < 0 ? node.name : groups[i]];\r\n                if (found)\r\n                    return found;\r\n            }\r\n        };\r\n    }\r\n}\r\n/// An empty dummy node type to use when no actual type is available.\r\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\r\n/// A node set holds a collection of node types. It is used to\r\n/// compactly represent trees by storing their type ids, rather than a\r\n/// full pointer to the type object, in a numeric array. Each parser\r\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\r\n/// buffers](#common.TreeBuffer) can only store collections of nodes\r\n/// from the same set. A set can have a maximum of 2**16 (65536) node\r\n/// types in it, so that the ids fit into 16-bit typed array slots.\r\nclass NodeSet {\r\n    /// Create a set with the given types. The `id` property of each\r\n    /// type should correspond to its position within the array.\r\n    constructor(\r\n    /// The node types in this set, by id.\r\n    types) {\r\n        this.types = types;\r\n        for (let i = 0; i < types.length; i++)\r\n            if (types[i].id != i)\r\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\r\n    }\r\n    /// Create a copy of this set with some node properties added. The\r\n    /// arguments to this method can be created with\r\n    /// [`NodeProp.add`](#common.NodeProp.add).\r\n    extend(...props) {\r\n        let newTypes = [];\r\n        for (let type of this.types) {\r\n            let newProps = null;\r\n            for (let source of props) {\r\n                let add = source(type);\r\n                if (add) {\r\n                    if (!newProps)\r\n                        newProps = Object.assign({}, type.props);\r\n                    newProps[add[0].id] = add[1];\r\n                }\r\n            }\r\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\r\n        }\r\n        return new NodeSet(newTypes);\r\n    }\r\n}\r\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\r\n/// Options that control iteration. Can be combined with the `|`\r\n/// operator to enable multiple ones.\r\nvar IterMode;\r\n(function (IterMode) {\r\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\r\n    /// objects, not nodes packed into\r\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\r\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\r\n    /// Enable this to make iteration include anonymous nodes (such as\r\n    /// the nodes that wrap repeated grammar constructs into a balanced\r\n    /// tree).\r\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\r\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\r\n    /// replace their base node in iteration. Enable this to ignore them\r\n    /// instead.\r\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\r\n    /// This option only applies in\r\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\r\n    /// library to not enter mounted overlays if one covers the given\r\n    /// position.\r\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\r\n})(IterMode || (IterMode = {}));\r\n/// A piece of syntax tree. There are two ways to approach these\r\n/// trees: the way they are actually stored in memory, and the\r\n/// convenient way.\r\n///\r\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\r\n/// objects. By packing detail information into `TreeBuffer` leaf\r\n/// nodes, the representation is made a lot more memory-efficient.\r\n///\r\n/// However, when you want to actually work with tree nodes, this\r\n/// representation is very awkward, so most client code will want to\r\n/// use the [`TreeCursor`](#common.TreeCursor) or\r\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\r\n/// a view on some part of this data structure, and can be used to\r\n/// move around to adjacent nodes.\r\nclass Tree {\r\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\r\n    constructor(\r\n    /// The type of the top node.\r\n    type, \r\n    /// This node's child nodes.\r\n    children, \r\n    /// The positions (offsets relative to the start of this tree) of\r\n    /// the children.\r\n    positions, \r\n    /// The total length of this tree\r\n    length, \r\n    /// Per-node [node props](#common.NodeProp) to associate with this node.\r\n    props) {\r\n        this.type = type;\r\n        this.children = children;\r\n        this.positions = positions;\r\n        this.length = length;\r\n        /// @internal\r\n        this.props = null;\r\n        if (props && props.length) {\r\n            this.props = Object.create(null);\r\n            for (let [prop, value] of props)\r\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\r\n        }\r\n    }\r\n    /// @internal\r\n    toString() {\r\n        let mounted = this.prop(NodeProp.mounted);\r\n        if (mounted && !mounted.overlay)\r\n            return mounted.tree.toString();\r\n        let children = \"\";\r\n        for (let ch of this.children) {\r\n            let str = ch.toString();\r\n            if (str) {\r\n                if (children)\r\n                    children += \",\";\r\n                children += str;\r\n            }\r\n        }\r\n        return !this.type.name ? children :\r\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\r\n                (children.length ? \"(\" + children + \")\" : \"\");\r\n    }\r\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\r\n    /// the tree. Mode can be used to [control](#common.IterMode) which\r\n    /// nodes the cursor visits.\r\n    cursor(mode = 0) {\r\n        return new TreeCursor(this.topNode, mode);\r\n    }\r\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\r\n    /// at the given position and side (see\r\n    /// [`moveTo`](#common.TreeCursor.moveTo).\r\n    cursorAt(pos, side = 0, mode = 0) {\r\n        let scope = CachedNode.get(this) || this.topNode;\r\n        let cursor = new TreeCursor(scope);\r\n        cursor.moveTo(pos, side);\r\n        CachedNode.set(this, cursor._tree);\r\n        return cursor;\r\n    }\r\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\r\n    /// tree.\r\n    get topNode() {\r\n        return new TreeNode(this, 0, 0, null);\r\n    }\r\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\r\n    /// If `side` is -1, this will move into nodes that end at the\r\n    /// position. If 1, it'll move into nodes that start at the\r\n    /// position. With 0, it'll only enter nodes that cover the position\r\n    /// from both sides.\r\n    ///\r\n    /// Note that this will not enter\r\n    /// [overlays](#common.MountedTree.overlay), and you often want\r\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\r\n    resolve(pos, side = 0) {\r\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\r\n        CachedNode.set(this, node);\r\n        return node;\r\n    }\r\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\r\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\r\n    /// pointing into the innermost overlaid tree at the given position\r\n    /// (with parent links going through all parent structure, including\r\n    /// the host trees).\r\n    resolveInner(pos, side = 0) {\r\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\r\n        CachedInnerNode.set(this, node);\r\n        return node;\r\n    }\r\n    /// Iterate over the tree and its children, calling `enter` for any\r\n    /// node that touches the `from`/`to` region (if given) before\r\n    /// running over such a node's children, and `leave` (if given) when\r\n    /// leaving the node. When `enter` returns `false`, that node will\r\n    /// not have its children iterated over (or `leave` called).\r\n    iterate(spec) {\r\n        let { enter, leave, from = 0, to = this.length } = spec;\r\n        for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\r\n            let entered = false;\r\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\r\n                if (c.firstChild())\r\n                    continue;\r\n                entered = true;\r\n            }\r\n            for (;;) {\r\n                if (entered && leave && !c.type.isAnonymous)\r\n                    leave(c);\r\n                if (c.nextSibling())\r\n                    break;\r\n                if (!c.parent())\r\n                    return;\r\n                entered = true;\r\n            }\r\n        }\r\n    }\r\n    /// Get the value of the given [node prop](#common.NodeProp) for this\r\n    /// node. Works with both per-node and per-type props.\r\n    prop(prop) {\r\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\r\n    }\r\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\r\n    /// format that can be passed to the [`Tree`](#common.Tree)\r\n    /// constructor.\r\n    get propValues() {\r\n        let result = [];\r\n        if (this.props)\r\n            for (let id in this.props)\r\n                result.push([+id, this.props[id]]);\r\n        return result;\r\n    }\r\n    /// Balance the direct children of this tree, producing a copy of\r\n    /// which may have children grouped into subtrees with type\r\n    /// [`NodeType.none`](#common.NodeType^none).\r\n    balance(config = {}) {\r\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\r\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\r\n    }\r\n    /// Build a tree from a postfix-ordered buffer of node information,\r\n    /// or a cursor over such a buffer.\r\n    static build(data) { return buildTree(data); }\r\n}\r\n/// The empty tree\r\nTree.empty = new Tree(NodeType.none, [], [], 0);\r\nclass FlatBufferCursor {\r\n    constructor(buffer, index) {\r\n        this.buffer = buffer;\r\n        this.index = index;\r\n    }\r\n    get id() { return this.buffer[this.index - 4]; }\r\n    get start() { return this.buffer[this.index - 3]; }\r\n    get end() { return this.buffer[this.index - 2]; }\r\n    get size() { return this.buffer[this.index - 1]; }\r\n    get pos() { return this.index; }\r\n    next() { this.index -= 4; }\r\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\r\n}\r\n/// Tree buffers contain (type, start, end, endIndex) quads for each\r\n/// node. In such a buffer, nodes are stored in prefix order (parents\r\n/// before children, with the endIndex of the parent indicating which\r\n/// children belong to it).\r\nclass TreeBuffer {\r\n    /// Create a tree buffer.\r\n    constructor(\r\n    /// The buffer's content.\r\n    buffer, \r\n    /// The total length of the group of nodes in the buffer.\r\n    length, \r\n    /// The node set used in this buffer.\r\n    set) {\r\n        this.buffer = buffer;\r\n        this.length = length;\r\n        this.set = set;\r\n    }\r\n    /// @internal\r\n    get type() { return NodeType.none; }\r\n    /// @internal\r\n    toString() {\r\n        let result = [];\r\n        for (let index = 0; index < this.buffer.length;) {\r\n            result.push(this.childString(index));\r\n            index = this.buffer[index + 3];\r\n        }\r\n        return result.join(\",\");\r\n    }\r\n    /// @internal\r\n    childString(index) {\r\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\r\n        let type = this.set.types[id], result = type.name;\r\n        if (/\\W/.test(result) && !type.isError)\r\n            result = JSON.stringify(result);\r\n        index += 4;\r\n        if (endIndex == index)\r\n            return result;\r\n        let children = [];\r\n        while (index < endIndex) {\r\n            children.push(this.childString(index));\r\n            index = this.buffer[index + 3];\r\n        }\r\n        return result + \"(\" + children.join(\",\") + \")\";\r\n    }\r\n    /// @internal\r\n    findChild(startIndex, endIndex, dir, pos, side) {\r\n        let { buffer } = this, pick = -1;\r\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\r\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\r\n                pick = i;\r\n                if (dir > 0)\r\n                    break;\r\n            }\r\n        }\r\n        return pick;\r\n    }\r\n    /// @internal\r\n    slice(startI, endI, from) {\r\n        let b = this.buffer;\r\n        let copy = new Uint16Array(endI - startI), len = 0;\r\n        for (let i = startI, j = 0; i < endI;) {\r\n            copy[j++] = b[i++];\r\n            copy[j++] = b[i++] - from;\r\n            let to = copy[j++] = b[i++] - from;\r\n            copy[j++] = b[i++] - startI;\r\n            len = Math.max(len, to);\r\n        }\r\n        return new TreeBuffer(copy, len, this.set);\r\n    }\r\n}\r\nfunction checkSide(side, pos, from, to) {\r\n    switch (side) {\r\n        case -2 /* Side.Before */: return from < pos;\r\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\r\n        case 0 /* Side.Around */: return from < pos && to > pos;\r\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\r\n        case 2 /* Side.After */: return to > pos;\r\n        case 4 /* Side.DontCare */: return true;\r\n    }\r\n}\r\nfunction enterUnfinishedNodesBefore(node, pos) {\r\n    let scan = node.childBefore(pos);\r\n    while (scan) {\r\n        let last = scan.lastChild;\r\n        if (!last || last.to != scan.to)\r\n            break;\r\n        if (last.type.isError && last.from == last.to) {\r\n            node = scan;\r\n            scan = last.prevSibling;\r\n        }\r\n        else {\r\n            scan = last;\r\n        }\r\n    }\r\n    return node;\r\n}\r\nfunction resolveNode(node, pos, side, overlays) {\r\n    var _a;\r\n    // Move up to a node that actually holds the position, if possible\r\n    while (node.from == node.to ||\r\n        (side < 1 ? node.from >= pos : node.from > pos) ||\r\n        (side > -1 ? node.to <= pos : node.to < pos)) {\r\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\r\n        if (!parent)\r\n            return node;\r\n        node = parent;\r\n    }\r\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\r\n    // Must go up out of overlays when those do not overlap with pos\r\n    if (overlays)\r\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\r\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\r\n                node = parent;\r\n        }\r\n    for (;;) {\r\n        let inner = node.enter(pos, side, mode);\r\n        if (!inner)\r\n            return node;\r\n        node = inner;\r\n    }\r\n}\r\nclass TreeNode {\r\n    constructor(_tree, from, \r\n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\r\n    index, _parent) {\r\n        this._tree = _tree;\r\n        this.from = from;\r\n        this.index = index;\r\n        this._parent = _parent;\r\n    }\r\n    get type() { return this._tree.type; }\r\n    get name() { return this._tree.type.name; }\r\n    get to() { return this.from + this._tree.length; }\r\n    nextChild(i, dir, pos, side, mode = 0) {\r\n        for (let parent = this;;) {\r\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\r\n                let next = children[i], start = positions[i] + parent.from;\r\n                if (!checkSide(side, pos, start, start + next.length))\r\n                    continue;\r\n                if (next instanceof TreeBuffer) {\r\n                    if (mode & IterMode.ExcludeBuffers)\r\n                        continue;\r\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\r\n                    if (index > -1)\r\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\r\n                }\r\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\r\n                    let mounted;\r\n                    if (!(mode & IterMode.IgnoreMounts) &&\r\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\r\n                        return new TreeNode(mounted.tree, start, i, parent);\r\n                    let inner = new TreeNode(next, start, i, parent);\r\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\r\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\r\n                }\r\n            }\r\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\r\n                return null;\r\n            if (parent.index >= 0)\r\n                i = parent.index + dir;\r\n            else\r\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\r\n            parent = parent._parent;\r\n            if (!parent)\r\n                return null;\r\n        }\r\n    }\r\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\r\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\r\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\r\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\r\n    enter(pos, side, mode = 0) {\r\n        let mounted;\r\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\r\n            let rPos = pos - this.from;\r\n            for (let { from, to } of mounted.overlay) {\r\n                if ((side > 0 ? from <= rPos : from < rPos) &&\r\n                    (side < 0 ? to >= rPos : to > rPos))\r\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\r\n            }\r\n        }\r\n        return this.nextChild(0, 1, pos, side, mode);\r\n    }\r\n    nextSignificantParent() {\r\n        let val = this;\r\n        while (val.type.isAnonymous && val._parent)\r\n            val = val._parent;\r\n        return val;\r\n    }\r\n    get parent() {\r\n        return this._parent ? this._parent.nextSignificantParent() : null;\r\n    }\r\n    get nextSibling() {\r\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\r\n    }\r\n    get prevSibling() {\r\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\r\n    }\r\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\r\n    get tree() { return this._tree; }\r\n    toTree() { return this._tree; }\r\n    resolve(pos, side = 0) {\r\n        return resolveNode(this, pos, side, false);\r\n    }\r\n    resolveInner(pos, side = 0) {\r\n        return resolveNode(this, pos, side, true);\r\n    }\r\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\r\n    getChild(type, before = null, after = null) {\r\n        let r = getChildren(this, type, before, after);\r\n        return r.length ? r[0] : null;\r\n    }\r\n    getChildren(type, before = null, after = null) {\r\n        return getChildren(this, type, before, after);\r\n    }\r\n    /// @internal\r\n    toString() { return this._tree.toString(); }\r\n    get node() { return this; }\r\n    matchContext(context) { return matchNodeContext(this, context); }\r\n}\r\nfunction getChildren(node, type, before, after) {\r\n    let cur = node.cursor(), result = [];\r\n    if (!cur.firstChild())\r\n        return result;\r\n    if (before != null)\r\n        while (!cur.type.is(before))\r\n            if (!cur.nextSibling())\r\n                return result;\r\n    for (;;) {\r\n        if (after != null && cur.type.is(after))\r\n            return result;\r\n        if (cur.type.is(type))\r\n            result.push(cur.node);\r\n        if (!cur.nextSibling())\r\n            return after == null ? result : [];\r\n    }\r\n}\r\nfunction matchNodeContext(node, context, i = context.length - 1) {\r\n    for (let p = node.parent; i >= 0; p = p.parent) {\r\n        if (!p)\r\n            return false;\r\n        if (!p.type.isAnonymous) {\r\n            if (context[i] && context[i] != p.name)\r\n                return false;\r\n            i--;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nclass BufferContext {\r\n    constructor(parent, buffer, index, start) {\r\n        this.parent = parent;\r\n        this.buffer = buffer;\r\n        this.index = index;\r\n        this.start = start;\r\n    }\r\n}\r\nclass BufferNode {\r\n    get name() { return this.type.name; }\r\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\r\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\r\n    constructor(context, _parent, index) {\r\n        this.context = context;\r\n        this._parent = _parent;\r\n        this.index = index;\r\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\r\n    }\r\n    child(dir, pos, side) {\r\n        let { buffer } = this.context;\r\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\r\n        return index < 0 ? null : new BufferNode(this.context, this, index);\r\n    }\r\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\r\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\r\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\r\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\r\n    enter(pos, side, mode = 0) {\r\n        if (mode & IterMode.ExcludeBuffers)\r\n            return null;\r\n        let { buffer } = this.context;\r\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\r\n        return index < 0 ? null : new BufferNode(this.context, this, index);\r\n    }\r\n    get parent() {\r\n        return this._parent || this.context.parent.nextSignificantParent();\r\n    }\r\n    externalSibling(dir) {\r\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\r\n    }\r\n    get nextSibling() {\r\n        let { buffer } = this.context;\r\n        let after = buffer.buffer[this.index + 3];\r\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\r\n            return new BufferNode(this.context, this._parent, after);\r\n        return this.externalSibling(1);\r\n    }\r\n    get prevSibling() {\r\n        let { buffer } = this.context;\r\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\r\n        if (this.index == parentStart)\r\n            return this.externalSibling(-1);\r\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\r\n    }\r\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\r\n    get tree() { return null; }\r\n    toTree() {\r\n        let children = [], positions = [];\r\n        let { buffer } = this.context;\r\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\r\n        if (endI > startI) {\r\n            let from = buffer.buffer[this.index + 1];\r\n            children.push(buffer.slice(startI, endI, from));\r\n            positions.push(0);\r\n        }\r\n        return new Tree(this.type, children, positions, this.to - this.from);\r\n    }\r\n    resolve(pos, side = 0) {\r\n        return resolveNode(this, pos, side, false);\r\n    }\r\n    resolveInner(pos, side = 0) {\r\n        return resolveNode(this, pos, side, true);\r\n    }\r\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\r\n    /// @internal\r\n    toString() { return this.context.buffer.childString(this.index); }\r\n    getChild(type, before = null, after = null) {\r\n        let r = getChildren(this, type, before, after);\r\n        return r.length ? r[0] : null;\r\n    }\r\n    getChildren(type, before = null, after = null) {\r\n        return getChildren(this, type, before, after);\r\n    }\r\n    get node() { return this; }\r\n    matchContext(context) { return matchNodeContext(this, context); }\r\n}\r\n/// A tree cursor object focuses on a given node in a syntax tree, and\r\n/// allows you to move to adjacent nodes.\r\nclass TreeCursor {\r\n    /// Shorthand for `.type.name`.\r\n    get name() { return this.type.name; }\r\n    /// @internal\r\n    constructor(node, \r\n    /// @internal\r\n    mode = 0) {\r\n        this.mode = mode;\r\n        /// @internal\r\n        this.buffer = null;\r\n        this.stack = [];\r\n        /// @internal\r\n        this.index = 0;\r\n        this.bufferNode = null;\r\n        if (node instanceof TreeNode) {\r\n            this.yieldNode(node);\r\n        }\r\n        else {\r\n            this._tree = node.context.parent;\r\n            this.buffer = node.context;\r\n            for (let n = node._parent; n; n = n._parent)\r\n                this.stack.unshift(n.index);\r\n            this.bufferNode = node;\r\n            this.yieldBuf(node.index);\r\n        }\r\n    }\r\n    yieldNode(node) {\r\n        if (!node)\r\n            return false;\r\n        this._tree = node;\r\n        this.type = node.type;\r\n        this.from = node.from;\r\n        this.to = node.to;\r\n        return true;\r\n    }\r\n    yieldBuf(index, type) {\r\n        this.index = index;\r\n        let { start, buffer } = this.buffer;\r\n        this.type = type || buffer.set.types[buffer.buffer[index]];\r\n        this.from = start + buffer.buffer[index + 1];\r\n        this.to = start + buffer.buffer[index + 2];\r\n        return true;\r\n    }\r\n    yield(node) {\r\n        if (!node)\r\n            return false;\r\n        if (node instanceof TreeNode) {\r\n            this.buffer = null;\r\n            return this.yieldNode(node);\r\n        }\r\n        this.buffer = node.context;\r\n        return this.yieldBuf(node.index, node.type);\r\n    }\r\n    /// @internal\r\n    toString() {\r\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\r\n    }\r\n    /// @internal\r\n    enterChild(dir, pos, side) {\r\n        if (!this.buffer)\r\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\r\n        let { buffer } = this.buffer;\r\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\r\n        if (index < 0)\r\n            return false;\r\n        this.stack.push(this.index);\r\n        return this.yieldBuf(index);\r\n    }\r\n    /// Move the cursor to this node's first child. When this returns\r\n    /// false, the node has no child, and the cursor has not been moved.\r\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\r\n    /// Move the cursor to this node's last child.\r\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\r\n    /// Move the cursor to the first child that ends after `pos`.\r\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\r\n    /// Move to the last child that starts before `pos`.\r\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\r\n    /// Move the cursor to the child around `pos`. If side is -1 the\r\n    /// child may end at that position, when 1 it may start there. This\r\n    /// will also enter [overlaid](#common.MountedTree.overlay)\r\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\r\n    /// set to false.\r\n    enter(pos, side, mode = this.mode) {\r\n        if (!this.buffer)\r\n            return this.yield(this._tree.enter(pos, side, mode));\r\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\r\n    }\r\n    /// Move to the node's parent node, if this isn't the top node.\r\n    parent() {\r\n        if (!this.buffer)\r\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\r\n        if (this.stack.length)\r\n            return this.yieldBuf(this.stack.pop());\r\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\r\n        this.buffer = null;\r\n        return this.yieldNode(parent);\r\n    }\r\n    /// @internal\r\n    sibling(dir) {\r\n        if (!this.buffer)\r\n            return !this._tree._parent ? false\r\n                : this.yield(this._tree.index < 0 ? null\r\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\r\n        let { buffer } = this.buffer, d = this.stack.length - 1;\r\n        if (dir < 0) {\r\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\r\n            if (this.index != parentStart)\r\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\r\n        }\r\n        else {\r\n            let after = buffer.buffer[this.index + 3];\r\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\r\n                return this.yieldBuf(after);\r\n        }\r\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\r\n    }\r\n    /// Move to this node's next sibling, if any.\r\n    nextSibling() { return this.sibling(1); }\r\n    /// Move to this node's previous sibling, if any.\r\n    prevSibling() { return this.sibling(-1); }\r\n    atLastNode(dir) {\r\n        let index, parent, { buffer } = this;\r\n        if (buffer) {\r\n            if (dir > 0) {\r\n                if (this.index < buffer.buffer.buffer.length)\r\n                    return false;\r\n            }\r\n            else {\r\n                for (let i = 0; i < this.index; i++)\r\n                    if (buffer.buffer.buffer[i + 3] < this.index)\r\n                        return false;\r\n            }\r\n            ({ index, parent } = buffer);\r\n        }\r\n        else {\r\n            ({ index, _parent: parent } = this._tree);\r\n        }\r\n        for (; parent; { index, _parent: parent } = parent) {\r\n            if (index > -1)\r\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\r\n                    let child = parent._tree.children[i];\r\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\r\n                        child instanceof TreeBuffer ||\r\n                        !child.type.isAnonymous ||\r\n                        hasChild(child))\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n    }\r\n    move(dir, enter) {\r\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\r\n            return true;\r\n        for (;;) {\r\n            if (this.sibling(dir))\r\n                return true;\r\n            if (this.atLastNode(dir) || !this.parent())\r\n                return false;\r\n        }\r\n    }\r\n    /// Move to the next node in a\r\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\r\n    /// traversal, going from a node to its first child or, if the\r\n    /// current node is empty or `enter` is false, its next sibling or\r\n    /// the next sibling of the first parent node that has one.\r\n    next(enter = true) { return this.move(1, enter); }\r\n    /// Move to the next node in a last-to-first pre-order traveral. A\r\n    /// node is followed by its last child or, if it has none, its\r\n    /// previous sibling or the previous sibling of the first parent\r\n    /// node that has one.\r\n    prev(enter = true) { return this.move(-1, enter); }\r\n    /// Move the cursor to the innermost node that covers `pos`. If\r\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\r\n    /// it will enter nodes that start at `pos`.\r\n    moveTo(pos, side = 0) {\r\n        // Move up to a node that actually holds the position, if possible\r\n        while (this.from == this.to ||\r\n            (side < 1 ? this.from >= pos : this.from > pos) ||\r\n            (side > -1 ? this.to <= pos : this.to < pos))\r\n            if (!this.parent())\r\n                break;\r\n        // Then scan down into child nodes as far as possible\r\n        while (this.enterChild(1, pos, side)) { }\r\n        return this;\r\n    }\r\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\r\n    /// position.\r\n    get node() {\r\n        if (!this.buffer)\r\n            return this._tree;\r\n        let cache = this.bufferNode, result = null, depth = 0;\r\n        if (cache && cache.context == this.buffer) {\r\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\r\n                for (let c = cache; c; c = c._parent)\r\n                    if (c.index == index) {\r\n                        if (index == this.index)\r\n                            return c;\r\n                        result = c;\r\n                        depth = d + 1;\r\n                        break scan;\r\n                    }\r\n                index = this.stack[--d];\r\n            }\r\n        }\r\n        for (let i = depth; i < this.stack.length; i++)\r\n            result = new BufferNode(this.buffer, result, this.stack[i]);\r\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\r\n    }\r\n    /// Get the [tree](#common.Tree) that represents the current node, if\r\n    /// any. Will return null when the node is in a [tree\r\n    /// buffer](#common.TreeBuffer).\r\n    get tree() {\r\n        return this.buffer ? null : this._tree._tree;\r\n    }\r\n    /// Iterate over the current node and all its descendants, calling\r\n    /// `enter` when entering a node and `leave`, if given, when leaving\r\n    /// one. When `enter` returns `false`, any children of that node are\r\n    /// skipped, and `leave` isn't called for it.\r\n    iterate(enter, leave) {\r\n        for (let depth = 0;;) {\r\n            let mustLeave = false;\r\n            if (this.type.isAnonymous || enter(this) !== false) {\r\n                if (this.firstChild()) {\r\n                    depth++;\r\n                    continue;\r\n                }\r\n                if (!this.type.isAnonymous)\r\n                    mustLeave = true;\r\n            }\r\n            for (;;) {\r\n                if (mustLeave && leave)\r\n                    leave(this);\r\n                mustLeave = this.type.isAnonymous;\r\n                if (this.nextSibling())\r\n                    break;\r\n                if (!depth)\r\n                    return;\r\n                this.parent();\r\n                depth--;\r\n                mustLeave = true;\r\n            }\r\n        }\r\n    }\r\n    /// Test whether the current node matches a given context—a sequence\r\n    /// of direct parent node names. Empty strings in the context array\r\n    /// are treated as wildcards.\r\n    matchContext(context) {\r\n        if (!this.buffer)\r\n            return matchNodeContext(this.node, context);\r\n        let { buffer } = this.buffer, { types } = buffer.set;\r\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\r\n            if (d < 0)\r\n                return matchNodeContext(this.node, context, i);\r\n            let type = types[buffer.buffer[this.stack[d]]];\r\n            if (!type.isAnonymous) {\r\n                if (context[i] && context[i] != type.name)\r\n                    return false;\r\n                i--;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction hasChild(tree) {\r\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\r\n}\r\nfunction buildTree(data) {\r\n    var _a;\r\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\r\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\r\n    let types = nodeSet.types;\r\n    let contextHash = 0, lookAhead = 0;\r\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\r\n        let { id, start, end, size } = cursor;\r\n        let lookAheadAtStart = lookAhead;\r\n        while (size < 0) {\r\n            cursor.next();\r\n            if (size == -1 /* SpecialRecord.Reuse */) {\r\n                let node = reused[id];\r\n                children.push(node);\r\n                positions.push(start - parentStart);\r\n                return;\r\n            }\r\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\r\n                contextHash = id;\r\n                return;\r\n            }\r\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\r\n                lookAhead = id;\r\n                return;\r\n            }\r\n            else {\r\n                throw new RangeError(`Unrecognized record size: ${size}`);\r\n            }\r\n        }\r\n        let type = types[id], node, buffer;\r\n        let startPos = start - parentStart;\r\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\r\n            // Small enough for a buffer, and no reused nodes inside\r\n            let data = new Uint16Array(buffer.size - buffer.skip);\r\n            let endPos = cursor.pos - buffer.size, index = data.length;\r\n            while (cursor.pos > endPos)\r\n                index = copyToBuffer(buffer.start, data, index);\r\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\r\n            startPos = buffer.start - parentStart;\r\n        }\r\n        else { // Make it a node\r\n            let endPos = cursor.pos - size;\r\n            cursor.next();\r\n            let localChildren = [], localPositions = [];\r\n            let localInRepeat = id >= minRepeatType ? id : -1;\r\n            let lastGroup = 0, lastEnd = end;\r\n            while (cursor.pos > endPos) {\r\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\r\n                    if (cursor.end <= lastEnd - maxBufferLength) {\r\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\r\n                        lastGroup = localChildren.length;\r\n                        lastEnd = cursor.end;\r\n                    }\r\n                    cursor.next();\r\n                }\r\n                else {\r\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\r\n                }\r\n            }\r\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\r\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\r\n            localChildren.reverse();\r\n            localPositions.reverse();\r\n            if (localInRepeat > -1 && lastGroup > 0) {\r\n                let make = makeBalanced(type);\r\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\r\n            }\r\n            else {\r\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\r\n            }\r\n        }\r\n        children.push(node);\r\n        positions.push(startPos);\r\n    }\r\n    function makeBalanced(type) {\r\n        return (children, positions, length) => {\r\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\r\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\r\n                if (!lastI && last.type == type && last.length == length)\r\n                    return last;\r\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\r\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\r\n            }\r\n            return makeTree(type, children, positions, length, lookAhead);\r\n        };\r\n    }\r\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\r\n        let localChildren = [], localPositions = [];\r\n        while (children.length > i) {\r\n            localChildren.push(children.pop());\r\n            localPositions.push(positions.pop() + base - from);\r\n        }\r\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\r\n        positions.push(from - base);\r\n    }\r\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\r\n        if (contextHash) {\r\n            let pair = [NodeProp.contextHash, contextHash];\r\n            props = props ? [pair].concat(props) : [pair];\r\n        }\r\n        if (lookAhead > 25) {\r\n            let pair = [NodeProp.lookAhead, lookAhead];\r\n            props = props ? [pair].concat(props) : [pair];\r\n        }\r\n        return new Tree(type, children, positions, length, props);\r\n    }\r\n    function findBufferSize(maxSize, inRepeat) {\r\n        // Scan through the buffer to find previous siblings that fit\r\n        // together in a TreeBuffer, and don't contain any reused nodes\r\n        // (which can't be stored in a buffer).\r\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\r\n        // nesting, but make sure the end falls either at the start\r\n        // (`maxSize`) or before such a node.\r\n        let fork = cursor.fork();\r\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\r\n        let result = { size: 0, start: 0, skip: 0 };\r\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\r\n            let nodeSize = fork.size;\r\n            // Pretend nested repeat nodes of the same type don't exist\r\n            if (fork.id == inRepeat && nodeSize >= 0) {\r\n                // Except that we store the current state as a valid return\r\n                // value.\r\n                result.size = size;\r\n                result.start = start;\r\n                result.skip = skip;\r\n                skip += 4;\r\n                size += 4;\r\n                fork.next();\r\n                continue;\r\n            }\r\n            let startPos = fork.pos - nodeSize;\r\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\r\n                break;\r\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\r\n            let nodeStart = fork.start;\r\n            fork.next();\r\n            while (fork.pos > startPos) {\r\n                if (fork.size < 0) {\r\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\r\n                        localSkipped += 4;\r\n                    else\r\n                        break scan;\r\n                }\r\n                else if (fork.id >= minRepeatType) {\r\n                    localSkipped += 4;\r\n                }\r\n                fork.next();\r\n            }\r\n            start = nodeStart;\r\n            size += nodeSize;\r\n            skip += localSkipped;\r\n        }\r\n        if (inRepeat < 0 || size == maxSize) {\r\n            result.size = size;\r\n            result.start = start;\r\n            result.skip = skip;\r\n        }\r\n        return result.size > 4 ? result : undefined;\r\n    }\r\n    function copyToBuffer(bufferStart, buffer, index) {\r\n        let { id, start, end, size } = cursor;\r\n        cursor.next();\r\n        if (size >= 0 && id < minRepeatType) {\r\n            let startIndex = index;\r\n            if (size > 4) {\r\n                let endPos = cursor.pos - (size - 4);\r\n                while (cursor.pos > endPos)\r\n                    index = copyToBuffer(bufferStart, buffer, index);\r\n            }\r\n            buffer[--index] = startIndex;\r\n            buffer[--index] = end - bufferStart;\r\n            buffer[--index] = start - bufferStart;\r\n            buffer[--index] = id;\r\n        }\r\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\r\n            contextHash = id;\r\n        }\r\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\r\n            lookAhead = id;\r\n        }\r\n        return index;\r\n    }\r\n    let children = [], positions = [];\r\n    while (cursor.pos > 0)\r\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\r\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\r\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\r\n}\r\nconst nodeSizeCache = new WeakMap;\r\nfunction nodeSize(balanceType, node) {\r\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\r\n        return 1;\r\n    let size = nodeSizeCache.get(node);\r\n    if (size == null) {\r\n        size = 1;\r\n        for (let child of node.children) {\r\n            if (child.type != balanceType || !(child instanceof Tree)) {\r\n                size = 1;\r\n                break;\r\n            }\r\n            size += nodeSize(balanceType, child);\r\n        }\r\n        nodeSizeCache.set(node, size);\r\n    }\r\n    return size;\r\n}\r\nfunction balanceRange(\r\n// The type the balanced tree's inner nodes.\r\nbalanceType, \r\n// The direct children and their positions\r\nchildren, positions, \r\n// The index range in children/positions to use\r\nfrom, to, \r\n// The start position of the nodes, relative to their parent.\r\nstart, \r\n// Length of the outer node\r\nlength, \r\n// Function to build the top node of the balanced tree\r\nmkTop, \r\n// Function to build internal nodes for the balanced tree\r\nmkTree) {\r\n    let total = 0;\r\n    for (let i = from; i < to; i++)\r\n        total += nodeSize(balanceType, children[i]);\r\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\r\n    let localChildren = [], localPositions = [];\r\n    function divide(children, positions, from, to, offset) {\r\n        for (let i = from; i < to;) {\r\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\r\n            i++;\r\n            for (; i < to; i++) {\r\n                let nextSize = nodeSize(balanceType, children[i]);\r\n                if (groupSize + nextSize >= maxChild)\r\n                    break;\r\n                groupSize += nextSize;\r\n            }\r\n            if (i == groupFrom + 1) {\r\n                if (groupSize > maxChild) {\r\n                    let only = children[groupFrom]; // Only trees can have a size > 1\r\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\r\n                    continue;\r\n                }\r\n                localChildren.push(children[groupFrom]);\r\n            }\r\n            else {\r\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\r\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\r\n            }\r\n            localPositions.push(groupStart + offset - start);\r\n        }\r\n    }\r\n    divide(children, positions, from, to, 0);\r\n    return (mkTop || mkTree)(localChildren, localPositions, length);\r\n}\r\n/// Provides a way to associate values with pieces of trees. As long\r\n/// as that part of the tree is reused, the associated values can be\r\n/// retrieved from an updated tree.\r\nclass NodeWeakMap {\r\n    constructor() {\r\n        this.map = new WeakMap();\r\n    }\r\n    setBuffer(buffer, index, value) {\r\n        let inner = this.map.get(buffer);\r\n        if (!inner)\r\n            this.map.set(buffer, inner = new Map);\r\n        inner.set(index, value);\r\n    }\r\n    getBuffer(buffer, index) {\r\n        let inner = this.map.get(buffer);\r\n        return inner && inner.get(index);\r\n    }\r\n    /// Set the value for this syntax node.\r\n    set(node, value) {\r\n        if (node instanceof BufferNode)\r\n            this.setBuffer(node.context.buffer, node.index, value);\r\n        else if (node instanceof TreeNode)\r\n            this.map.set(node.tree, value);\r\n    }\r\n    /// Retrieve value for this syntax node, if it exists in the map.\r\n    get(node) {\r\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\r\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\r\n    }\r\n    /// Set the value for the node that a cursor currently points to.\r\n    cursorSet(cursor, value) {\r\n        if (cursor.buffer)\r\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\r\n        else\r\n            this.map.set(cursor.tree, value);\r\n    }\r\n    /// Retrieve the value for the node that a cursor currently points\r\n    /// to.\r\n    cursorGet(cursor) {\r\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\r\n    }\r\n}\r\n\r\n/// Tree fragments are used during [incremental\r\n/// parsing](#common.Parser.startParse) to track parts of old trees\r\n/// that can be reused in a new parse. An array of fragments is used\r\n/// to track regions of an old tree whose nodes might be reused in new\r\n/// parses. Use the static\r\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\r\n/// update fragments for document changes.\r\nclass TreeFragment {\r\n    /// Construct a tree fragment. You'll usually want to use\r\n    /// [`addTree`](#common.TreeFragment^addTree) and\r\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\r\n    /// calling this directly.\r\n    constructor(\r\n    /// The start of the unchanged range pointed to by this fragment.\r\n    /// This refers to an offset in the _updated_ document (as opposed\r\n    /// to the original tree).\r\n    from, \r\n    /// The end of the unchanged range.\r\n    to, \r\n    /// The tree that this fragment is based on.\r\n    tree, \r\n    /// The offset between the fragment's tree and the document that\r\n    /// this fragment can be used against. Add this when going from\r\n    /// document to tree positions, subtract it to go from tree to\r\n    /// document positions.\r\n    offset, openStart = false, openEnd = false) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.tree = tree;\r\n        this.offset = offset;\r\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\r\n    }\r\n    /// Whether the start of the fragment represents the start of a\r\n    /// parse, or the end of a change. (In the second case, it may not\r\n    /// be safe to reuse some nodes at the start, depending on the\r\n    /// parsing algorithm.)\r\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\r\n    /// Whether the end of the fragment represents the end of a\r\n    /// full-document parse, or the start of a change.\r\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\r\n    /// Create a set of fragments from a freshly parsed tree, or update\r\n    /// an existing set of fragments by replacing the ones that overlap\r\n    /// with a tree with content from the new tree. When `partial` is\r\n    /// true, the parse is treated as incomplete, and the resulting\r\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\r\n    /// true.\r\n    static addTree(tree, fragments = [], partial = false) {\r\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\r\n        for (let f of fragments)\r\n            if (f.to > tree.length)\r\n                result.push(f);\r\n        return result;\r\n    }\r\n    /// Apply a set of edits to an array of fragments, removing or\r\n    /// splitting fragments as necessary to remove edited ranges, and\r\n    /// adjusting offsets for fragments that moved.\r\n    static applyChanges(fragments, changes, minGap = 128) {\r\n        if (!changes.length)\r\n            return fragments;\r\n        let result = [];\r\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\r\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\r\n            let nextC = cI < changes.length ? changes[cI] : null;\r\n            let nextPos = nextC ? nextC.fromA : 1e9;\r\n            if (nextPos - pos >= minGap)\r\n                while (nextF && nextF.from < nextPos) {\r\n                    let cut = nextF;\r\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\r\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\r\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\r\n                    }\r\n                    if (cut)\r\n                        result.push(cut);\r\n                    if (nextF.to > nextPos)\r\n                        break;\r\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\r\n                }\r\n            if (!nextC)\r\n                break;\r\n            pos = nextC.toA;\r\n            off = nextC.toA - nextC.toB;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/// A superclass that parsers should extend.\r\nclass Parser {\r\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\r\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\r\n    /// make the parse incremental.\r\n    ///\r\n    /// By default, the entire input is parsed. You can pass `ranges`,\r\n    /// which should be a sorted array of non-empty, non-overlapping\r\n    /// ranges, to parse only those ranges. The tree returned in that\r\n    /// case will start at `ranges[0].from`.\r\n    startParse(input, fragments, ranges) {\r\n        if (typeof input == \"string\")\r\n            input = new StringInput(input);\r\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\r\n        return this.createParse(input, fragments || [], ranges);\r\n    }\r\n    /// Run a full parse, returning the resulting tree.\r\n    parse(input, fragments, ranges) {\r\n        let parse = this.startParse(input, fragments, ranges);\r\n        for (;;) {\r\n            let done = parse.advance();\r\n            if (done)\r\n                return done;\r\n        }\r\n    }\r\n}\r\nclass StringInput {\r\n    constructor(string) {\r\n        this.string = string;\r\n    }\r\n    get length() { return this.string.length; }\r\n    chunk(from) { return this.string.slice(from); }\r\n    get lineChunks() { return false; }\r\n    read(from, to) { return this.string.slice(from, to); }\r\n}\r\n\r\n/// Create a parse wrapper that, after the inner parse completes,\r\n/// scans its tree for mixed language regions with the `nest`\r\n/// function, runs the resulting [inner parses](#common.NestedParse),\r\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\r\n/// tree.\r\nfunction parseMixed(nest) {\r\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\r\n}\r\nclass InnerParse {\r\n    constructor(parser, parse, overlay, target, ranges) {\r\n        this.parser = parser;\r\n        this.parse = parse;\r\n        this.overlay = overlay;\r\n        this.target = target;\r\n        this.ranges = ranges;\r\n    }\r\n}\r\nclass ActiveOverlay {\r\n    constructor(parser, predicate, mounts, index, start, target, prev) {\r\n        this.parser = parser;\r\n        this.predicate = predicate;\r\n        this.mounts = mounts;\r\n        this.index = index;\r\n        this.start = start;\r\n        this.target = target;\r\n        this.prev = prev;\r\n        this.depth = 0;\r\n        this.ranges = [];\r\n    }\r\n}\r\nconst stoppedInner = new NodeProp({ perNode: true });\r\nclass MixedParse {\r\n    constructor(base, nest, input, fragments, ranges) {\r\n        this.nest = nest;\r\n        this.input = input;\r\n        this.fragments = fragments;\r\n        this.ranges = ranges;\r\n        this.inner = [];\r\n        this.innerDone = 0;\r\n        this.baseTree = null;\r\n        this.stoppedAt = null;\r\n        this.baseParse = base;\r\n    }\r\n    advance() {\r\n        if (this.baseParse) {\r\n            let done = this.baseParse.advance();\r\n            if (!done)\r\n                return null;\r\n            this.baseParse = null;\r\n            this.baseTree = done;\r\n            this.startInner();\r\n            if (this.stoppedAt != null)\r\n                for (let inner of this.inner)\r\n                    inner.parse.stopAt(this.stoppedAt);\r\n        }\r\n        if (this.innerDone == this.inner.length) {\r\n            let result = this.baseTree;\r\n            if (this.stoppedAt != null)\r\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\r\n            return result;\r\n        }\r\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\r\n        if (done) {\r\n            this.innerDone++;\r\n            // This is a somewhat dodgy but super helpful hack where we\r\n            // patch up nodes created by the inner parse (and thus\r\n            // presumably not aliased anywhere else) to hold the information\r\n            // about the inner parse.\r\n            let props = Object.assign(Object.create(null), inner.target.props);\r\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\r\n            inner.target.props = props;\r\n        }\r\n        return null;\r\n    }\r\n    get parsedPos() {\r\n        if (this.baseParse)\r\n            return 0;\r\n        let pos = this.input.length;\r\n        for (let i = this.innerDone; i < this.inner.length; i++) {\r\n            if (this.inner[i].ranges[0].from < pos)\r\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\r\n        }\r\n        return pos;\r\n    }\r\n    stopAt(pos) {\r\n        this.stoppedAt = pos;\r\n        if (this.baseParse)\r\n            this.baseParse.stopAt(pos);\r\n        else\r\n            for (let i = this.innerDone; i < this.inner.length; i++)\r\n                this.inner[i].parse.stopAt(pos);\r\n    }\r\n    startInner() {\r\n        let fragmentCursor = new FragmentCursor(this.fragments);\r\n        let overlay = null;\r\n        let covered = null;\r\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\r\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\r\n            let enter = true, range;\r\n            if (fragmentCursor.hasNode(cursor)) {\r\n                if (overlay) {\r\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\r\n                    if (match)\r\n                        for (let r of match.mount.overlay) {\r\n                            let from = r.from + match.pos, to = r.to + match.pos;\r\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\r\n                                overlay.ranges.push({ from, to });\r\n                        }\r\n                }\r\n                enter = false;\r\n            }\r\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\r\n                enter = isCovered != 2 /* Cover.Full */;\r\n            }\r\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\r\n                if (!cursor.tree)\r\n                    materialize(cursor);\r\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\r\n                if (typeof nest.overlay == \"function\") {\r\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\r\n                }\r\n                else {\r\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\r\n                    if (ranges.length)\r\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\r\n                    if (!nest.overlay)\r\n                        enter = false;\r\n                    else if (ranges.length)\r\n                        covered = { ranges, depth: 0, prev: covered };\r\n                }\r\n            }\r\n            else if (overlay && (range = overlay.predicate(cursor))) {\r\n                if (range === true)\r\n                    range = new Range(cursor.from, cursor.to);\r\n                if (range.from < range.to)\r\n                    overlay.ranges.push(range);\r\n            }\r\n            if (enter && cursor.firstChild()) {\r\n                if (overlay)\r\n                    overlay.depth++;\r\n                if (covered)\r\n                    covered.depth++;\r\n            }\r\n            else {\r\n                for (;;) {\r\n                    if (cursor.nextSibling())\r\n                        break;\r\n                    if (!cursor.parent())\r\n                        break scan;\r\n                    if (overlay && !--overlay.depth) {\r\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\r\n                        if (ranges.length)\r\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\r\n                        overlay = overlay.prev;\r\n                    }\r\n                    if (covered && !--covered.depth)\r\n                        covered = covered.prev;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction checkCover(covered, from, to) {\r\n    for (let range of covered) {\r\n        if (range.from >= to)\r\n            break;\r\n        if (range.to > from)\r\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\r\n    }\r\n    return 0 /* Cover.None */;\r\n}\r\n// Take a piece of buffer and convert it into a stand-alone\r\n// TreeBuffer.\r\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\r\n    if (startI < endI) {\r\n        let from = buf.buffer[startI + 1];\r\n        nodes.push(buf.slice(startI, endI, from));\r\n        positions.push(from - off);\r\n    }\r\n}\r\n// This function takes a node that's in a buffer, and converts it, and\r\n// its parent buffer nodes, into a Tree. This is again acting on the\r\n// assumption that the trees and buffers have been constructed by the\r\n// parse that was ran via the mix parser, and thus aren't shared with\r\n// any other code, making violations of the immutability safe.\r\nfunction materialize(cursor) {\r\n    let { node } = cursor, depth = 0;\r\n    // Scan up to the nearest tree\r\n    do {\r\n        cursor.parent();\r\n        depth++;\r\n    } while (!cursor.tree);\r\n    // Find the index of the buffer in that tree\r\n    let i = 0, base = cursor.tree, off = 0;\r\n    for (;; i++) {\r\n        off = base.positions[i] + cursor.from;\r\n        if (off <= node.from && off + base.children[i].length >= node.to)\r\n            break;\r\n    }\r\n    let buf = base.children[i], b = buf.buffer;\r\n    // Split a level in the buffer, putting the nodes before and after\r\n    // the child that contains `node` into new buffers.\r\n    function split(startI, endI, type, innerOffset, length) {\r\n        let i = startI;\r\n        while (b[i + 2] + off <= node.from)\r\n            i = b[i + 3];\r\n        let children = [], positions = [];\r\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\r\n        let from = b[i + 1], to = b[i + 2];\r\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\r\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\r\n        positions.push(from - innerOffset);\r\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\r\n        return new Tree(type, children, positions, length);\r\n    }\r\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\r\n    // Move the cursor back to the target node\r\n    for (let d = 0; d <= depth; d++)\r\n        cursor.childAfter(node.from);\r\n}\r\nclass StructureCursor {\r\n    constructor(root, offset) {\r\n        this.offset = offset;\r\n        this.done = false;\r\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\r\n    }\r\n    // Move to the first node (in pre-order) that starts at or after `pos`.\r\n    moveTo(pos) {\r\n        let { cursor } = this, p = pos - this.offset;\r\n        while (!this.done && cursor.from < p) {\r\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\r\n            else if (!cursor.next(false))\r\n                this.done = true;\r\n        }\r\n    }\r\n    hasNode(cursor) {\r\n        this.moveTo(cursor.from);\r\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\r\n            for (let tree = this.cursor.tree;;) {\r\n                if (tree == cursor.tree)\r\n                    return true;\r\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\r\n                    tree = tree.children[0];\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nclass FragmentCursor {\r\n    constructor(fragments) {\r\n        var _a;\r\n        this.fragments = fragments;\r\n        this.curTo = 0;\r\n        this.fragI = 0;\r\n        if (fragments.length) {\r\n            let first = this.curFrag = fragments[0];\r\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\r\n            this.inner = new StructureCursor(first.tree, -first.offset);\r\n        }\r\n        else {\r\n            this.curFrag = this.inner = null;\r\n        }\r\n    }\r\n    hasNode(node) {\r\n        while (this.curFrag && node.from >= this.curTo)\r\n            this.nextFrag();\r\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\r\n    }\r\n    nextFrag() {\r\n        var _a;\r\n        this.fragI++;\r\n        if (this.fragI == this.fragments.length) {\r\n            this.curFrag = this.inner = null;\r\n        }\r\n        else {\r\n            let frag = this.curFrag = this.fragments[this.fragI];\r\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\r\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\r\n        }\r\n    }\r\n    findMounts(pos, parser) {\r\n        var _a;\r\n        let result = [];\r\n        if (this.inner) {\r\n            this.inner.cursor.moveTo(pos, 1);\r\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\r\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\r\n                if (mount && mount.parser == parser) {\r\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\r\n                        let frag = this.fragments[i];\r\n                        if (frag.from >= pos.to)\r\n                            break;\r\n                        if (frag.tree == this.curFrag.tree)\r\n                            result.push({\r\n                                frag,\r\n                                pos: pos.from - frag.offset,\r\n                                mount\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction punchRanges(outer, ranges) {\r\n    let copy = null, current = ranges;\r\n    for (let i = 1, j = 0; i < outer.length; i++) {\r\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\r\n        for (; j < current.length; j++) {\r\n            let r = current[j];\r\n            if (r.from >= gapTo)\r\n                break;\r\n            if (r.to <= gapFrom)\r\n                continue;\r\n            if (!copy)\r\n                current = copy = ranges.slice();\r\n            if (r.from < gapFrom) {\r\n                copy[j] = new Range(r.from, gapFrom);\r\n                if (r.to > gapTo)\r\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\r\n            }\r\n            else if (r.to > gapTo) {\r\n                copy[j--] = new Range(gapTo, r.to);\r\n            }\r\n            else {\r\n                copy.splice(j--, 1);\r\n            }\r\n        }\r\n    }\r\n    return current;\r\n}\r\nfunction findCoverChanges(a, b, from, to) {\r\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\r\n    let result = [];\r\n    for (;;) {\r\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\r\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\r\n        if (inA != inB) {\r\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\r\n            if (start < end)\r\n                result.push(new Range(start, end));\r\n        }\r\n        pos = Math.min(nextA, nextB);\r\n        if (pos == 1e9)\r\n            break;\r\n        if (nextA == pos) {\r\n            if (!inA)\r\n                inA = true;\r\n            else {\r\n                inA = false;\r\n                iA++;\r\n            }\r\n        }\r\n        if (nextB == pos) {\r\n            if (!inB)\r\n                inB = true;\r\n            else {\r\n                inB = false;\r\n                iB++;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// Given a number of fragments for the outer tree, and a set of ranges\r\n// to parse, find fragments for inner trees mounted around those\r\n// ranges, if any.\r\nfunction enterFragments(mounts, ranges) {\r\n    let result = [];\r\n    for (let { pos, mount, frag } of mounts) {\r\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\r\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\r\n        if (mount.overlay) {\r\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\r\n            let changes = findCoverChanges(ranges, overlay, from, to);\r\n            for (let i = 0, pos = from;; i++) {\r\n                let last = i == changes.length, end = last ? to : changes[i].from;\r\n                if (end > pos)\r\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\r\n                if (last)\r\n                    break;\r\n                pos = changes[i].to;\r\n            }\r\n        }\r\n        else {\r\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@lezer/common/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@lezer/highlight/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@lezer/highlight/dist/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tag\": function() { return /* binding */ Tag; },\n/* harmony export */   \"classHighlighter\": function() { return /* binding */ classHighlighter; },\n/* harmony export */   \"getStyleTags\": function() { return /* binding */ getStyleTags; },\n/* harmony export */   \"highlightTree\": function() { return /* binding */ highlightTree; },\n/* harmony export */   \"styleTags\": function() { return /* binding */ styleTags; },\n/* harmony export */   \"tagHighlighter\": function() { return /* binding */ tagHighlighter; },\n/* harmony export */   \"tags\": function() { return /* binding */ tags; }\n/* harmony export */ });\n/* harmony import */ var _lezer_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/common */ \"./node_modules/@lezer/common/dist/index.js\");\n\r\n\r\nlet nextTagID = 0;\r\n/// Highlighting tags are markers that denote a highlighting category.\r\n/// They are [associated](#highlight.styleTags) with parts of a syntax\r\n/// tree by a language mode, and then mapped to an actual CSS style by\r\n/// a [highlighter](#highlight.Highlighter).\r\n///\r\n/// Because syntax tree node types and highlight styles have to be\r\n/// able to talk the same language, CodeMirror uses a mostly _closed_\r\n/// [vocabulary](#highlight.tags) of syntax tags (as opposed to\r\n/// traditional open string-based systems, which make it hard for\r\n/// highlighting themes to cover all the tokens produced by the\r\n/// various languages).\r\n///\r\n/// It _is_ possible to [define](#highlight.Tag^define) your own\r\n/// highlighting tags for system-internal use (where you control both\r\n/// the language package and the highlighter), but such tags will not\r\n/// be picked up by regular highlighters (though you can derive them\r\n/// from standard tags to allow highlighters to fall back to those).\r\nclass Tag {\r\n    /// @internal\r\n    constructor(\r\n    /// The set of this tag and all its parent tags, starting with\r\n    /// this one itself and sorted in order of decreasing specificity.\r\n    set, \r\n    /// The base unmodified tag that this one is based on, if it's\r\n    /// modified @internal\r\n    base, \r\n    /// The modifiers applied to this.base @internal\r\n    modified) {\r\n        this.set = set;\r\n        this.base = base;\r\n        this.modified = modified;\r\n        /// @internal\r\n        this.id = nextTagID++;\r\n    }\r\n    /// Define a new tag. If `parent` is given, the tag is treated as a\r\n    /// sub-tag of that parent, and\r\n    /// [highlighters](#highlight.tagHighlighter) that don't mention\r\n    /// this tag will try to fall back to the parent tag (or grandparent\r\n    /// tag, etc).\r\n    static define(parent) {\r\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\r\n            throw new Error(\"Can not derive from a modified tag\");\r\n        let tag = new Tag([], null, []);\r\n        tag.set.push(tag);\r\n        if (parent)\r\n            for (let t of parent.set)\r\n                tag.set.push(t);\r\n        return tag;\r\n    }\r\n    /// Define a tag _modifier_, which is a function that, given a tag,\r\n    /// will return a tag that is a subtag of the original. Applying the\r\n    /// same modifier to a twice tag will return the same value (`m1(t1)\r\n    /// == m1(t1)`) and applying multiple modifiers will, regardless or\r\n    /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\r\n    ///\r\n    /// When multiple modifiers are applied to a given base tag, each\r\n    /// smaller set of modifiers is registered as a parent, so that for\r\n    /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\r\n    /// `m1(m3(t1)`, and so on.\r\n    static defineModifier() {\r\n        let mod = new Modifier;\r\n        return (tag) => {\r\n            if (tag.modified.indexOf(mod) > -1)\r\n                return tag;\r\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\r\n        };\r\n    }\r\n}\r\nlet nextModifierID = 0;\r\nclass Modifier {\r\n    constructor() {\r\n        this.instances = [];\r\n        this.id = nextModifierID++;\r\n    }\r\n    static get(base, mods) {\r\n        if (!mods.length)\r\n            return base;\r\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\r\n        if (exists)\r\n            return exists;\r\n        let set = [], tag = new Tag(set, base, mods);\r\n        for (let m of mods)\r\n            m.instances.push(tag);\r\n        let configs = powerSet(mods);\r\n        for (let parent of base.set)\r\n            if (!parent.modified.length)\r\n                for (let config of configs)\r\n                    set.push(Modifier.get(parent, config));\r\n        return tag;\r\n    }\r\n}\r\nfunction sameArray(a, b) {\r\n    return a.length == b.length && a.every((x, i) => x == b[i]);\r\n}\r\nfunction powerSet(array) {\r\n    let sets = [[]];\r\n    for (let i = 0; i < array.length; i++) {\r\n        for (let j = 0, e = sets.length; j < e; j++) {\r\n            sets.push(sets[j].concat(array[i]));\r\n        }\r\n    }\r\n    return sets.sort((a, b) => b.length - a.length);\r\n}\r\n/// This function is used to add a set of tags to a language syntax\r\n/// via [`NodeSet.extend`](#common.NodeSet.extend) or\r\n/// [`LRParser.configure`](#lr.LRParser.configure).\r\n///\r\n/// The argument object maps node selectors to [highlighting\r\n/// tags](#highlight.Tag) or arrays of tags.\r\n///\r\n/// Node selectors may hold one or more (space-separated) node paths.\r\n/// Such a path can be a [node name](#common.NodeType.name), or\r\n/// multiple node names (or `*` wildcards) separated by slash\r\n/// characters, as in `\"Block/Declaration/VariableName\"`. Such a path\r\n/// matches the final node but only if its direct parent nodes are the\r\n/// other nodes mentioned. A `*` in such a path matches any parent,\r\n/// but only a single level—wildcards that match multiple parents\r\n/// aren't supported, both for efficiency reasons and because Lezer\r\n/// trees make it rather hard to reason about what they would match.)\r\n///\r\n/// A path can be ended with `/...` to indicate that the tag assigned\r\n/// to the node should also apply to all child nodes, even if they\r\n/// match their own style (by default, only the innermost style is\r\n/// used).\r\n///\r\n/// When a path ends in `!`, as in `Attribute!`, no further matching\r\n/// happens for the node's child nodes, and the entire node gets the\r\n/// given style.\r\n///\r\n/// In this notation, node names that contain `/`, `!`, `*`, or `...`\r\n/// must be quoted as JSON strings.\r\n///\r\n/// For example:\r\n///\r\n/// ```javascript\r\n/// parser.withProps(\r\n///   styleTags({\r\n///     // Style Number and BigNumber nodes\r\n///     \"Number BigNumber\": tags.number,\r\n///     // Style Escape nodes whose parent is String\r\n///     \"String/Escape\": tags.escape,\r\n///     // Style anything inside Attributes nodes\r\n///     \"Attributes!\": tags.meta,\r\n///     // Add a style to all content inside Italic nodes\r\n///     \"Italic/...\": tags.emphasis,\r\n///     // Style InvalidString nodes as both `string` and `invalid`\r\n///     \"InvalidString\": [tags.string, tags.invalid],\r\n///     // Style the node named \"/\" as punctuation\r\n///     '\"/\"': tags.punctuation\r\n///   })\r\n/// )\r\n/// ```\r\nfunction styleTags(spec) {\r\n    let byName = Object.create(null);\r\n    for (let prop in spec) {\r\n        let tags = spec[prop];\r\n        if (!Array.isArray(tags))\r\n            tags = [tags];\r\n        for (let part of prop.split(\" \"))\r\n            if (part) {\r\n                let pieces = [], mode = 2 /* Mode.Normal */, rest = part;\r\n                for (let pos = 0;;) {\r\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\r\n                        mode = 1 /* Mode.Inherit */;\r\n                        break;\r\n                    }\r\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\r\n                    if (!m)\r\n                        throw new RangeError(\"Invalid path: \" + part);\r\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\r\n                    pos += m[0].length;\r\n                    if (pos == part.length)\r\n                        break;\r\n                    let next = part[pos++];\r\n                    if (pos == part.length && next == \"!\") {\r\n                        mode = 0 /* Mode.Opaque */;\r\n                        break;\r\n                    }\r\n                    if (next != \"/\")\r\n                        throw new RangeError(\"Invalid path: \" + part);\r\n                    rest = part.slice(pos);\r\n                }\r\n                let last = pieces.length - 1, inner = pieces[last];\r\n                if (!inner)\r\n                    throw new RangeError(\"Invalid path: \" + part);\r\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\r\n                byName[inner] = rule.sort(byName[inner]);\r\n            }\r\n    }\r\n    return ruleNodeProp.add(byName);\r\n}\r\nconst ruleNodeProp = new _lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\nclass Rule {\r\n    constructor(tags, mode, context, next) {\r\n        this.tags = tags;\r\n        this.mode = mode;\r\n        this.context = context;\r\n        this.next = next;\r\n    }\r\n    get opaque() { return this.mode == 0 /* Mode.Opaque */; }\r\n    get inherit() { return this.mode == 1 /* Mode.Inherit */; }\r\n    sort(other) {\r\n        if (!other || other.depth < this.depth) {\r\n            this.next = other;\r\n            return this;\r\n        }\r\n        other.next = this.sort(other.next);\r\n        return other;\r\n    }\r\n    get depth() { return this.context ? this.context.length : 0; }\r\n}\r\nRule.empty = new Rule([], 2 /* Mode.Normal */, null);\r\n/// Define a [highlighter](#highlight.Highlighter) from an array of\r\n/// tag/class pairs. Classes associated with more specific tags will\r\n/// take precedence.\r\nfunction tagHighlighter(tags, options) {\r\n    let map = Object.create(null);\r\n    for (let style of tags) {\r\n        if (!Array.isArray(style.tag))\r\n            map[style.tag.id] = style.class;\r\n        else\r\n            for (let tag of style.tag)\r\n                map[tag.id] = style.class;\r\n    }\r\n    let { scope, all = null } = options || {};\r\n    return {\r\n        style: (tags) => {\r\n            let cls = all;\r\n            for (let tag of tags) {\r\n                for (let sub of tag.set) {\r\n                    let tagClass = map[sub.id];\r\n                    if (tagClass) {\r\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return cls;\r\n        },\r\n        scope\r\n    };\r\n}\r\nfunction highlightTags(highlighters, tags) {\r\n    let result = null;\r\n    for (let highlighter of highlighters) {\r\n        let value = highlighter.style(tags);\r\n        if (value)\r\n            result = result ? result + \" \" + value : value;\r\n    }\r\n    return result;\r\n}\r\n/// Highlight the given [tree](#common.Tree) with the given\r\n/// [highlighter](#highlight.Highlighter).\r\nfunction highlightTree(tree, highlighter, \r\n/// Assign styling to a region of the text. Will be called, in order\r\n/// of position, for any ranges where more than zero classes apply.\r\n/// `classes` is a space separated string of CSS classes.\r\nputStyle, \r\n/// The start of the range to highlight.\r\nfrom = 0, \r\n/// The end of the range.\r\nto = tree.length) {\r\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\r\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\r\n    builder.flush(to);\r\n}\r\nclass HighlightBuilder {\r\n    constructor(at, highlighters, span) {\r\n        this.at = at;\r\n        this.highlighters = highlighters;\r\n        this.span = span;\r\n        this.class = \"\";\r\n    }\r\n    startSpan(at, cls) {\r\n        if (cls != this.class) {\r\n            this.flush(at);\r\n            if (at > this.at)\r\n                this.at = at;\r\n            this.class = cls;\r\n        }\r\n    }\r\n    flush(to) {\r\n        if (to > this.at && this.class)\r\n            this.span(this.at, to, this.class);\r\n    }\r\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\r\n        let { type, from: start, to: end } = cursor;\r\n        if (start >= to || end <= from)\r\n            return;\r\n        if (type.isTop)\r\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\r\n        let cls = inheritedClass;\r\n        let rule = getStyleTags(cursor) || Rule.empty;\r\n        let tagCls = highlightTags(highlighters, rule.tags);\r\n        if (tagCls) {\r\n            if (cls)\r\n                cls += \" \";\r\n            cls += tagCls;\r\n            if (rule.mode == 1 /* Mode.Inherit */)\r\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\r\n        }\r\n        this.startSpan(cursor.from, cls);\r\n        if (rule.opaque)\r\n            return;\r\n        let mounted = cursor.tree && cursor.tree.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__.NodeProp.mounted);\r\n        if (mounted && mounted.overlay) {\r\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\r\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\r\n            let hasChild = cursor.firstChild();\r\n            for (let i = 0, pos = start;; i++) {\r\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\r\n                let nextPos = next ? next.from + start : end;\r\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\r\n                if (rangeFrom < rangeTo && hasChild) {\r\n                    while (cursor.from < rangeTo) {\r\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\r\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\r\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\r\n                            break;\r\n                    }\r\n                }\r\n                if (!next || nextPos > to)\r\n                    break;\r\n                pos = next.to + start;\r\n                if (pos > from) {\r\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);\r\n                    this.startSpan(pos, cls);\r\n                }\r\n            }\r\n            if (hasChild)\r\n                cursor.parent();\r\n        }\r\n        else if (cursor.firstChild()) {\r\n            do {\r\n                if (cursor.to <= from)\r\n                    continue;\r\n                if (cursor.from >= to)\r\n                    break;\r\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\r\n                this.startSpan(Math.min(to, cursor.to), cls);\r\n            } while (cursor.nextSibling());\r\n            cursor.parent();\r\n        }\r\n    }\r\n}\r\n/// Match a syntax node's [highlight rules](#highlight.styleTags). If\r\n/// there's a match, return its set of tags, and whether it is\r\n/// opaque (uses a `!`) or applies to all child nodes (`/...`).\r\nfunction getStyleTags(node) {\r\n    let rule = node.type.prop(ruleNodeProp);\r\n    while (rule && rule.context && !node.matchContext(rule.context))\r\n        rule = rule.next;\r\n    return rule || null;\r\n}\r\nconst t = Tag.define;\r\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\r\n/// The default set of highlighting [tags](#highlight.Tag).\r\n///\r\n/// This collection is heavily biased towards programming languages,\r\n/// and necessarily incomplete. A full ontology of syntactic\r\n/// constructs would fill a stack of books, and be impractical to\r\n/// write themes for. So try to make do with this set. If all else\r\n/// fails, [open an\r\n/// issue](https://github.com/codemirror/codemirror.next) to propose a\r\n/// new tag, or [define](#highlight.Tag^define) a local custom tag for\r\n/// your use case.\r\n///\r\n/// Note that it is not obligatory to always attach the most specific\r\n/// tag possible to an element—if your grammar can't easily\r\n/// distinguish a certain type of element (such as a local variable),\r\n/// it is okay to style it as its more general variant (a variable).\r\n/// \r\n/// For tags that extend some parent tag, the documentation links to\r\n/// the parent.\r\nconst tags = {\r\n    /// A comment.\r\n    comment,\r\n    /// A line [comment](#highlight.tags.comment).\r\n    lineComment: t(comment),\r\n    /// A block [comment](#highlight.tags.comment).\r\n    blockComment: t(comment),\r\n    /// A documentation [comment](#highlight.tags.comment).\r\n    docComment: t(comment),\r\n    /// Any kind of identifier.\r\n    name,\r\n    /// The [name](#highlight.tags.name) of a variable.\r\n    variableName: t(name),\r\n    /// A type [name](#highlight.tags.name).\r\n    typeName: typeName,\r\n    /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\r\n    tagName: t(typeName),\r\n    /// A property or field [name](#highlight.tags.name).\r\n    propertyName: propertyName,\r\n    /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\r\n    attributeName: t(propertyName),\r\n    /// The [name](#highlight.tags.name) of a class.\r\n    className: t(name),\r\n    /// A label [name](#highlight.tags.name).\r\n    labelName: t(name),\r\n    /// A namespace [name](#highlight.tags.name).\r\n    namespace: t(name),\r\n    /// The [name](#highlight.tags.name) of a macro.\r\n    macroName: t(name),\r\n    /// A literal value.\r\n    literal,\r\n    /// A string [literal](#highlight.tags.literal).\r\n    string,\r\n    /// A documentation [string](#highlight.tags.string).\r\n    docString: t(string),\r\n    /// A character literal (subtag of [string](#highlight.tags.string)).\r\n    character: t(string),\r\n    /// An attribute value (subtag of [string](#highlight.tags.string)).\r\n    attributeValue: t(string),\r\n    /// A number [literal](#highlight.tags.literal).\r\n    number,\r\n    /// An integer [number](#highlight.tags.number) literal.\r\n    integer: t(number),\r\n    /// A floating-point [number](#highlight.tags.number) literal.\r\n    float: t(number),\r\n    /// A boolean [literal](#highlight.tags.literal).\r\n    bool: t(literal),\r\n    /// Regular expression [literal](#highlight.tags.literal).\r\n    regexp: t(literal),\r\n    /// An escape [literal](#highlight.tags.literal), for example a\r\n    /// backslash escape in a string.\r\n    escape: t(literal),\r\n    /// A color [literal](#highlight.tags.literal).\r\n    color: t(literal),\r\n    /// A URL [literal](#highlight.tags.literal).\r\n    url: t(literal),\r\n    /// A language keyword.\r\n    keyword,\r\n    /// The [keyword](#highlight.tags.keyword) for the self or this\r\n    /// object.\r\n    self: t(keyword),\r\n    /// The [keyword](#highlight.tags.keyword) for null.\r\n    null: t(keyword),\r\n    /// A [keyword](#highlight.tags.keyword) denoting some atomic value.\r\n    atom: t(keyword),\r\n    /// A [keyword](#highlight.tags.keyword) that represents a unit.\r\n    unit: t(keyword),\r\n    /// A modifier [keyword](#highlight.tags.keyword).\r\n    modifier: t(keyword),\r\n    /// A [keyword](#highlight.tags.keyword) that acts as an operator.\r\n    operatorKeyword: t(keyword),\r\n    /// A control-flow related [keyword](#highlight.tags.keyword).\r\n    controlKeyword: t(keyword),\r\n    /// A [keyword](#highlight.tags.keyword) that defines something.\r\n    definitionKeyword: t(keyword),\r\n    /// A [keyword](#highlight.tags.keyword) related to defining or\r\n    /// interfacing with modules.\r\n    moduleKeyword: t(keyword),\r\n    /// An operator.\r\n    operator,\r\n    /// An [operator](#highlight.tags.operator) that dereferences something.\r\n    derefOperator: t(operator),\r\n    /// Arithmetic-related [operator](#highlight.tags.operator).\r\n    arithmeticOperator: t(operator),\r\n    /// Logical [operator](#highlight.tags.operator).\r\n    logicOperator: t(operator),\r\n    /// Bit [operator](#highlight.tags.operator).\r\n    bitwiseOperator: t(operator),\r\n    /// Comparison [operator](#highlight.tags.operator).\r\n    compareOperator: t(operator),\r\n    /// [Operator](#highlight.tags.operator) that updates its operand.\r\n    updateOperator: t(operator),\r\n    /// [Operator](#highlight.tags.operator) that defines something.\r\n    definitionOperator: t(operator),\r\n    /// Type-related [operator](#highlight.tags.operator).\r\n    typeOperator: t(operator),\r\n    /// Control-flow [operator](#highlight.tags.operator).\r\n    controlOperator: t(operator),\r\n    /// Program or markup punctuation.\r\n    punctuation,\r\n    /// [Punctuation](#highlight.tags.punctuation) that separates\r\n    /// things.\r\n    separator: t(punctuation),\r\n    /// Bracket-style [punctuation](#highlight.tags.punctuation).\r\n    bracket,\r\n    /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\r\n    /// tokens).\r\n    angleBracket: t(bracket),\r\n    /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\r\n    /// tokens).\r\n    squareBracket: t(bracket),\r\n    /// Parentheses (usually `(` and `)` tokens). Subtag of\r\n    /// [bracket](#highlight.tags.bracket).\r\n    paren: t(bracket),\r\n    /// Braces (usually `{` and `}` tokens). Subtag of\r\n    /// [bracket](#highlight.tags.bracket).\r\n    brace: t(bracket),\r\n    /// Content, for example plain text in XML or markup documents.\r\n    content,\r\n    /// [Content](#highlight.tags.content) that represents a heading.\r\n    heading,\r\n    /// A level 1 [heading](#highlight.tags.heading).\r\n    heading1: t(heading),\r\n    /// A level 2 [heading](#highlight.tags.heading).\r\n    heading2: t(heading),\r\n    /// A level 3 [heading](#highlight.tags.heading).\r\n    heading3: t(heading),\r\n    /// A level 4 [heading](#highlight.tags.heading).\r\n    heading4: t(heading),\r\n    /// A level 5 [heading](#highlight.tags.heading).\r\n    heading5: t(heading),\r\n    /// A level 6 [heading](#highlight.tags.heading).\r\n    heading6: t(heading),\r\n    /// A prose separator (such as a horizontal rule).\r\n    contentSeparator: t(content),\r\n    /// [Content](#highlight.tags.content) that represents a list.\r\n    list: t(content),\r\n    /// [Content](#highlight.tags.content) that represents a quote.\r\n    quote: t(content),\r\n    /// [Content](#highlight.tags.content) that is emphasized.\r\n    emphasis: t(content),\r\n    /// [Content](#highlight.tags.content) that is styled strong.\r\n    strong: t(content),\r\n    /// [Content](#highlight.tags.content) that is part of a link.\r\n    link: t(content),\r\n    /// [Content](#highlight.tags.content) that is styled as code or\r\n    /// monospace.\r\n    monospace: t(content),\r\n    /// [Content](#highlight.tags.content) that has a strike-through\r\n    /// style.\r\n    strikethrough: t(content),\r\n    /// Inserted text in a change-tracking format.\r\n    inserted: t(),\r\n    /// Deleted text.\r\n    deleted: t(),\r\n    /// Changed text.\r\n    changed: t(),\r\n    /// An invalid or unsyntactic element.\r\n    invalid: t(),\r\n    /// Metadata or meta-instruction.\r\n    meta,\r\n    /// [Metadata](#highlight.tags.meta) that applies to the entire\r\n    /// document.\r\n    documentMeta: t(meta),\r\n    /// [Metadata](#highlight.tags.meta) that annotates or adds\r\n    /// attributes to a given syntactic element.\r\n    annotation: t(meta),\r\n    /// Processing instruction or preprocessor directive. Subtag of\r\n    /// [meta](#highlight.tags.meta).\r\n    processingInstruction: t(meta),\r\n    /// [Modifier](#highlight.Tag^defineModifier) that indicates that a\r\n    /// given element is being defined. Expected to be used with the\r\n    /// various [name](#highlight.tags.name) tags.\r\n    definition: Tag.defineModifier(),\r\n    /// [Modifier](#highlight.Tag^defineModifier) that indicates that\r\n    /// something is constant. Mostly expected to be used with\r\n    /// [variable names](#highlight.tags.variableName).\r\n    constant: Tag.defineModifier(),\r\n    /// [Modifier](#highlight.Tag^defineModifier) used to indicate that\r\n    /// a [variable](#highlight.tags.variableName) or [property\r\n    /// name](#highlight.tags.propertyName) is being called or defined\r\n    /// as a function.\r\n    function: Tag.defineModifier(),\r\n    /// [Modifier](#highlight.Tag^defineModifier) that can be applied to\r\n    /// [names](#highlight.tags.name) to indicate that they belong to\r\n    /// the language's standard environment.\r\n    standard: Tag.defineModifier(),\r\n    /// [Modifier](#highlight.Tag^defineModifier) that indicates a given\r\n    /// [names](#highlight.tags.name) is local to some scope.\r\n    local: Tag.defineModifier(),\r\n    /// A generic variant [modifier](#highlight.Tag^defineModifier) that\r\n    /// can be used to tag language-specific alternative variants of\r\n    /// some common tag. It is recommended for themes to define special\r\n    /// forms of at least the [string](#highlight.tags.string) and\r\n    /// [variable name](#highlight.tags.variableName) tags, since those\r\n    /// come up a lot.\r\n    special: Tag.defineModifier()\r\n};\r\n/// This is a highlighter that adds stable, predictable classes to\r\n/// tokens, for styling with external CSS.\r\n///\r\n/// The following tags are mapped to their name prefixed with `\"tok-\"`\r\n/// (for example `\"tok-comment\"`):\r\n///\r\n/// * [`link`](#highlight.tags.link)\r\n/// * [`heading`](#highlight.tags.heading)\r\n/// * [`emphasis`](#highlight.tags.emphasis)\r\n/// * [`strong`](#highlight.tags.strong)\r\n/// * [`keyword`](#highlight.tags.keyword)\r\n/// * [`atom`](#highlight.tags.atom)\r\n/// * [`bool`](#highlight.tags.bool)\r\n/// * [`url`](#highlight.tags.url)\r\n/// * [`labelName`](#highlight.tags.labelName)\r\n/// * [`inserted`](#highlight.tags.inserted)\r\n/// * [`deleted`](#highlight.tags.deleted)\r\n/// * [`literal`](#highlight.tags.literal)\r\n/// * [`string`](#highlight.tags.string)\r\n/// * [`number`](#highlight.tags.number)\r\n/// * [`variableName`](#highlight.tags.variableName)\r\n/// * [`typeName`](#highlight.tags.typeName)\r\n/// * [`namespace`](#highlight.tags.namespace)\r\n/// * [`className`](#highlight.tags.className)\r\n/// * [`macroName`](#highlight.tags.macroName)\r\n/// * [`propertyName`](#highlight.tags.propertyName)\r\n/// * [`operator`](#highlight.tags.operator)\r\n/// * [`comment`](#highlight.tags.comment)\r\n/// * [`meta`](#highlight.tags.meta)\r\n/// * [`punctuation`](#highlight.tags.punctuation)\r\n/// * [`invalid`](#highlight.tags.invalid)\r\n///\r\n/// In addition, these mappings are provided:\r\n///\r\n/// * [`regexp`](#highlight.tags.regexp),\r\n///   [`escape`](#highlight.tags.escape), and\r\n///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\r\n///   are mapped to `\"tok-string2\"`\r\n/// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\r\n///   to `\"tok-variableName2\"`\r\n/// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\r\n///   to `\"tok-variableName tok-local\"`\r\n/// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\r\n///   to `\"tok-variableName tok-definition\"`\r\n/// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\r\n///   to `\"tok-propertyName tok-definition\"`\r\nconst classHighlighter = tagHighlighter([\r\n    { tag: tags.link, class: \"tok-link\" },\r\n    { tag: tags.heading, class: \"tok-heading\" },\r\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\r\n    { tag: tags.strong, class: \"tok-strong\" },\r\n    { tag: tags.keyword, class: \"tok-keyword\" },\r\n    { tag: tags.atom, class: \"tok-atom\" },\r\n    { tag: tags.bool, class: \"tok-bool\" },\r\n    { tag: tags.url, class: \"tok-url\" },\r\n    { tag: tags.labelName, class: \"tok-labelName\" },\r\n    { tag: tags.inserted, class: \"tok-inserted\" },\r\n    { tag: tags.deleted, class: \"tok-deleted\" },\r\n    { tag: tags.literal, class: \"tok-literal\" },\r\n    { tag: tags.string, class: \"tok-string\" },\r\n    { tag: tags.number, class: \"tok-number\" },\r\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\r\n    { tag: tags.variableName, class: \"tok-variableName\" },\r\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\r\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\r\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\r\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\r\n    { tag: tags.typeName, class: \"tok-typeName\" },\r\n    { tag: tags.namespace, class: \"tok-namespace\" },\r\n    { tag: tags.className, class: \"tok-className\" },\r\n    { tag: tags.macroName, class: \"tok-macroName\" },\r\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\r\n    { tag: tags.operator, class: \"tok-operator\" },\r\n    { tag: tags.comment, class: \"tok-comment\" },\r\n    { tag: tags.meta, class: \"tok-meta\" },\r\n    { tag: tags.invalid, class: \"tok-invalid\" },\r\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\r\n]);\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@lezer/highlight/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/crelt/index.es.js":
/*!****************************************!*\
  !*** ./node_modules/crelt/index.es.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ crelt; }\n/* harmony export */ });\nfunction crelt() {\r\n  var elt = arguments[0]\r\n  if (typeof elt == \"string\") elt = document.createElement(elt)\r\n  var i = 1, next = arguments[1]\r\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\r\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\r\n      var value = next[name]\r\n      if (typeof value == \"string\") elt.setAttribute(name, value)\r\n      else if (value != null) elt[name] = value\r\n    }\r\n    i++\r\n  }\r\n  for (; i < arguments.length; i++) add(elt, arguments[i])\r\n  return elt\r\n}\r\n\r\nfunction add(elt, child) {\r\n  if (typeof child == \"string\") {\r\n    elt.appendChild(document.createTextNode(child))\r\n  } else if (child == null) {\r\n  } else if (child.nodeType != null) {\r\n    elt.appendChild(child)\r\n  } else if (Array.isArray(child)) {\r\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\r\n  } else {\r\n    throw new RangeError(\"Unsupported child node: \" + child)\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JlbHQvaW5kZXguZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsc0JBQXNCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0osb0JBQW9CLGtCQUFrQjtBQUN0QyxJQUFJO0FBQ0o7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmVsdC9pbmRleC5lcy5qcz84MTk4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWx0KCkge1xyXG4gIHZhciBlbHQgPSBhcmd1bWVudHNbMF1cclxuICBpZiAodHlwZW9mIGVsdCA9PSBcInN0cmluZ1wiKSBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsdClcclxuICB2YXIgaSA9IDEsIG5leHQgPSBhcmd1bWVudHNbMV1cclxuICBpZiAobmV4dCAmJiB0eXBlb2YgbmV4dCA9PSBcIm9iamVjdFwiICYmIG5leHQubm9kZVR5cGUgPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShuZXh0KSkge1xyXG4gICAgZm9yICh2YXIgbmFtZSBpbiBuZXh0KSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5leHQsIG5hbWUpKSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5leHRbbmFtZV1cclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSBlbHQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxyXG4gICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSBlbHRbbmFtZV0gPSB2YWx1ZVxyXG4gICAgfVxyXG4gICAgaSsrXHJcbiAgfVxyXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhZGQoZWx0LCBhcmd1bWVudHNbaV0pXHJcbiAgcmV0dXJuIGVsdFxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGQoZWx0LCBjaGlsZCkge1xyXG4gIGlmICh0eXBlb2YgY2hpbGQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgZWx0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNoaWxkKSlcclxuICB9IGVsc2UgaWYgKGNoaWxkID09IG51bGwpIHtcclxuICB9IGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlICE9IG51bGwpIHtcclxuICAgIGVsdC5hcHBlbmRDaGlsZChjaGlsZClcclxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkLmxlbmd0aDsgaSsrKSBhZGQoZWx0LCBjaGlsZFtpXSlcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVbnN1cHBvcnRlZCBjaGlsZCBub2RlOiBcIiArIGNoaWxkKVxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crelt/index.es.js\n"));

/***/ }),

/***/ "./node_modules/style-mod/src/style-mod.js":
/*!*************************************************!*\
  !*** ./node_modules/style-mod/src/style-mod.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StyleModule\": function() { return /* binding */ StyleModule; }\n/* harmony export */ });\nconst C = \"\\u037c\"\r\nconst COUNT = typeof Symbol == \"undefined\" ? \"__\" + C : Symbol.for(C)\r\nconst SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\")\r\nconst top = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : {}\r\n\r\n// :: - Style modules encapsulate a set of CSS rules defined from\r\n// JavaScript. Their definitions are only available in a given DOM\r\n// root after it has been _mounted_ there with `StyleModule.mount`.\r\n//\r\n// Style modules should be created once and stored somewhere, as\r\n// opposed to re-creating them every time you need them. The amount of\r\n// CSS rules generated for a given DOM root is bounded by the amount\r\n// of style modules that were used. So to avoid leaking rules, don't\r\n// create these dynamically, but treat them as one-time allocations.\r\nclass StyleModule {\r\n  // :: (Object<Style>, ?{finish: ?(string) → string})\r\n  // Create a style module from the given spec.\r\n  //\r\n  // When `finish` is given, it is called on regular (non-`@`)\r\n  // selectors (after `&` expansion) to compute the final selector.\r\n  constructor(spec, options) {\r\n    this.rules = []\r\n    let {finish} = options || {}\r\n\r\n    function splitSelector(selector) {\r\n      return /^@/.test(selector) ? [selector] : selector.split(/,\\s*/)\r\n    }\r\n\r\n    function render(selectors, spec, target, isKeyframes) {\r\n      let local = [], isAt = /^@(\\w+)\\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == \"keyframes\"\r\n      if (isAt && spec == null) return target.push(selectors[0] + \";\")\r\n      for (let prop in spec) {\r\n        let value = spec[prop]\r\n        if (/&/.test(prop)) {\r\n          render(prop.split(/,\\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),\r\n                 value, target)\r\n        } else if (value && typeof value == \"object\") {\r\n          if (!isAt) throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\")\r\n          render(splitSelector(prop), value, local, keyframes)\r\n        } else if (value != null) {\r\n          local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, l => \"-\" + l.toLowerCase()) + \": \" + value + \";\")\r\n        }\r\n      }\r\n      if (local.length || keyframes) {\r\n        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") +\r\n                    \" {\" + local.join(\" \") + \"}\")\r\n      }\r\n    }\r\n\r\n    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules)\r\n  }\r\n\r\n  // :: () → string\r\n  // Returns a string containing the module's CSS rules.\r\n  getRules() { return this.rules.join(\"\\n\") }\r\n\r\n  // :: () → string\r\n  // Generate a new unique CSS class name.\r\n  static newName() {\r\n    let id = top[COUNT] || 1\r\n    top[COUNT] = id + 1\r\n    return C + id.toString(36)\r\n  }\r\n\r\n  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)\r\n  //\r\n  // Mount the given set of modules in the given DOM root, which ensures\r\n  // that the CSS rules defined by the module are available in that\r\n  // context.\r\n  //\r\n  // Rules are only added to the document once per root.\r\n  //\r\n  // Rule order will follow the order of the modules, so that rules from\r\n  // modules later in the array take precedence of those from earlier\r\n  // modules. If you call this function multiple times for the same root\r\n  // in a way that changes the order of already mounted modules, the old\r\n  // order will be changed.\r\n  static mount(root, modules) {\r\n    (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules])\r\n  }\r\n}\r\n\r\nlet adoptedSet = null\r\n\r\nclass StyleSet {\r\n  constructor(root) {\r\n    if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != \"undefined\") {\r\n      if (adoptedSet) {\r\n        root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets)\r\n        return root[SET] = adoptedSet\r\n      }\r\n      this.sheet = new CSSStyleSheet\r\n      root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets)\r\n      adoptedSet = this\r\n    } else {\r\n      this.styleTag = (root.ownerDocument || root).createElement(\"style\")\r\n      let target = root.head || root\r\n      target.insertBefore(this.styleTag, target.firstChild)\r\n    }\r\n    this.modules = []\r\n    root[SET] = this\r\n  }\r\n\r\n  mount(modules) {\r\n    let sheet = this.sheet\r\n    let pos = 0 /* Current rule offset */, j = 0 /* Index into this.modules */\r\n    for (let i = 0; i < modules.length; i++) {\r\n      let mod = modules[i], index = this.modules.indexOf(mod)\r\n      if (index < j && index > -1) { // Ordering conflict\r\n        this.modules.splice(index, 1)\r\n        j--\r\n        index = -1\r\n      }\r\n      if (index == -1) {\r\n        this.modules.splice(j++, 0, mod)\r\n        if (sheet) for (let k = 0; k < mod.rules.length; k++)\r\n          sheet.insertRule(mod.rules[k], pos++)\r\n      } else {\r\n        while (j < index) pos += this.modules[j++].rules.length\r\n        pos += mod.rules.length\r\n        j++\r\n      }\r\n    }\r\n\r\n    if (!sheet) {\r\n      let text = \"\"\r\n      for (let i = 0; i < this.modules.length; i++)\r\n        text += this.modules[i].getRules() + \"\\n\"\r\n      this.styleTag.textContent = text\r\n    }\r\n  }\r\n}\r\n\r\n// Style::Object<union<Style,string>>\r\n//\r\n// A style is an object that, in the simple case, maps CSS property\r\n// names to strings holding their values, as in `{color: \"red\",\r\n// fontWeight: \"bold\"}`. The property names can be given in\r\n// camel-case—the library will insert a dash before capital letters\r\n// when converting them to CSS.\r\n//\r\n// If you include an underscore in a property name, it and everything\r\n// after it will be removed from the output, which can be useful when\r\n// providing a property multiple times, for browser compatibility\r\n// reasons.\r\n//\r\n// A property in a style object can also be a sub-selector, which\r\n// extends the current context to add a pseudo-selector or a child\r\n// selector. Such a property should contain a `&` character, which\r\n// will be replaced by the current selector. For example `{\"&:before\":\r\n// {content: '\"hi\"'}}`. Sub-selectors and regular properties can\r\n// freely be mixed in a given object. Any property containing a `&` is\r\n// assumed to be a sub-selector.\r\n//\r\n// Finally, a property can specify an @-block to be wrapped around the\r\n// styles defined inside the object that's the property's value. For\r\n// example to create a media query you can do `{\"@media screen and\r\n// (min-width: 400px)\": {...}}`.\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-mod/src/style-mod.js\n"));

/***/ }),

/***/ "./node_modules/w3c-keyname/index.es.js":
/*!**********************************************!*\
  !*** ./node_modules/w3c-keyname/index.es.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"base\": function() { return /* binding */ base; },\n/* harmony export */   \"keyName\": function() { return /* binding */ keyName; },\n/* harmony export */   \"shift\": function() { return /* binding */ shift; }\n/* harmony export */ });\nvar base = {\r\n  8: \"Backspace\",\r\n  9: \"Tab\",\r\n  10: \"Enter\",\r\n  12: \"NumLock\",\r\n  13: \"Enter\",\r\n  16: \"Shift\",\r\n  17: \"Control\",\r\n  18: \"Alt\",\r\n  20: \"CapsLock\",\r\n  27: \"Escape\",\r\n  32: \" \",\r\n  33: \"PageUp\",\r\n  34: \"PageDown\",\r\n  35: \"End\",\r\n  36: \"Home\",\r\n  37: \"ArrowLeft\",\r\n  38: \"ArrowUp\",\r\n  39: \"ArrowRight\",\r\n  40: \"ArrowDown\",\r\n  44: \"PrintScreen\",\r\n  45: \"Insert\",\r\n  46: \"Delete\",\r\n  59: \";\",\r\n  61: \"=\",\r\n  91: \"Meta\",\r\n  92: \"Meta\",\r\n  106: \"*\",\r\n  107: \"+\",\r\n  108: \",\",\r\n  109: \"-\",\r\n  110: \".\",\r\n  111: \"/\",\r\n  144: \"NumLock\",\r\n  145: \"ScrollLock\",\r\n  160: \"Shift\",\r\n  161: \"Shift\",\r\n  162: \"Control\",\r\n  163: \"Control\",\r\n  164: \"Alt\",\r\n  165: \"Alt\",\r\n  173: \"-\",\r\n  186: \";\",\r\n  187: \"=\",\r\n  188: \",\",\r\n  189: \"-\",\r\n  190: \".\",\r\n  191: \"/\",\r\n  192: \"`\",\r\n  219: \"[\",\r\n  220: \"\\\\\",\r\n  221: \"]\",\r\n  222: \"'\"\r\n}\r\n\r\nvar shift = {\r\n  48: \")\",\r\n  49: \"!\",\r\n  50: \"@\",\r\n  51: \"#\",\r\n  52: \"$\",\r\n  53: \"%\",\r\n  54: \"^\",\r\n  55: \"&\",\r\n  56: \"*\",\r\n  57: \"(\",\r\n  59: \":\",\r\n  61: \"+\",\r\n  173: \"_\",\r\n  186: \":\",\r\n  187: \"+\",\r\n  188: \"<\",\r\n  189: \"_\",\r\n  190: \">\",\r\n  191: \"?\",\r\n  192: \"~\",\r\n  219: \"{\",\r\n  220: \"|\",\r\n  221: \"}\",\r\n  222: \"\\\"\"\r\n}\r\n\r\nvar chrome = typeof navigator != \"undefined\" && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\r\nvar gecko = typeof navigator != \"undefined\" && /Gecko\\/\\d+/.test(navigator.userAgent)\r\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\r\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\r\nvar brokenModifierNames = mac || chrome && +chrome[1] < 57\r\n\r\n// Fill in the digit keys\r\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\r\n\r\n// The function keys\r\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\r\n\r\n// And the alphabetic keys\r\nfor (var i = 65; i <= 90; i++) {\r\n  base[i] = String.fromCharCode(i + 32)\r\n  shift[i] = String.fromCharCode(i)\r\n}\r\n\r\n// For each code that doesn't have a shift-equivalent, copy the base name\r\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\r\n\r\nfunction keyName(event) {\r\n  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||\r\n    ie && event.shiftKey && event.key && event.key.length == 1 ||\r\n    event.key == \"Unidentified\"\r\n  var name = (!ignoreKey && event.key) ||\r\n    (event.shiftKey ? shift : base)[event.keyCode] ||\r\n    event.key || \"Unidentified\"\r\n  // Edge sometimes produces wrong names (Issue #3)\r\n  if (name == \"Esc\") name = \"Escape\"\r\n  if (name == \"Del\") name = \"Delete\"\r\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\r\n  if (name == \"Left\") name = \"ArrowLeft\"\r\n  if (name == \"Up\") name = \"ArrowUp\"\r\n  if (name == \"Right\") name = \"ArrowRight\"\r\n  if (name == \"Down\") name = \"ArrowDown\"\r\n  return name\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdzNjLWtleW5hbWUvaW5kZXguZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxHQUFHO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy93M2Mta2V5bmFtZS9pbmRleC5lcy5qcz82MzVhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgYmFzZSA9IHtcclxuICA4OiBcIkJhY2tzcGFjZVwiLFxyXG4gIDk6IFwiVGFiXCIsXHJcbiAgMTA6IFwiRW50ZXJcIixcclxuICAxMjogXCJOdW1Mb2NrXCIsXHJcbiAgMTM6IFwiRW50ZXJcIixcclxuICAxNjogXCJTaGlmdFwiLFxyXG4gIDE3OiBcIkNvbnRyb2xcIixcclxuICAxODogXCJBbHRcIixcclxuICAyMDogXCJDYXBzTG9ja1wiLFxyXG4gIDI3OiBcIkVzY2FwZVwiLFxyXG4gIDMyOiBcIiBcIixcclxuICAzMzogXCJQYWdlVXBcIixcclxuICAzNDogXCJQYWdlRG93blwiLFxyXG4gIDM1OiBcIkVuZFwiLFxyXG4gIDM2OiBcIkhvbWVcIixcclxuICAzNzogXCJBcnJvd0xlZnRcIixcclxuICAzODogXCJBcnJvd1VwXCIsXHJcbiAgMzk6IFwiQXJyb3dSaWdodFwiLFxyXG4gIDQwOiBcIkFycm93RG93blwiLFxyXG4gIDQ0OiBcIlByaW50U2NyZWVuXCIsXHJcbiAgNDU6IFwiSW5zZXJ0XCIsXHJcbiAgNDY6IFwiRGVsZXRlXCIsXHJcbiAgNTk6IFwiO1wiLFxyXG4gIDYxOiBcIj1cIixcclxuICA5MTogXCJNZXRhXCIsXHJcbiAgOTI6IFwiTWV0YVwiLFxyXG4gIDEwNjogXCIqXCIsXHJcbiAgMTA3OiBcIitcIixcclxuICAxMDg6IFwiLFwiLFxyXG4gIDEwOTogXCItXCIsXHJcbiAgMTEwOiBcIi5cIixcclxuICAxMTE6IFwiL1wiLFxyXG4gIDE0NDogXCJOdW1Mb2NrXCIsXHJcbiAgMTQ1OiBcIlNjcm9sbExvY2tcIixcclxuICAxNjA6IFwiU2hpZnRcIixcclxuICAxNjE6IFwiU2hpZnRcIixcclxuICAxNjI6IFwiQ29udHJvbFwiLFxyXG4gIDE2MzogXCJDb250cm9sXCIsXHJcbiAgMTY0OiBcIkFsdFwiLFxyXG4gIDE2NTogXCJBbHRcIixcclxuICAxNzM6IFwiLVwiLFxyXG4gIDE4NjogXCI7XCIsXHJcbiAgMTg3OiBcIj1cIixcclxuICAxODg6IFwiLFwiLFxyXG4gIDE4OTogXCItXCIsXHJcbiAgMTkwOiBcIi5cIixcclxuICAxOTE6IFwiL1wiLFxyXG4gIDE5MjogXCJgXCIsXHJcbiAgMjE5OiBcIltcIixcclxuICAyMjA6IFwiXFxcXFwiLFxyXG4gIDIyMTogXCJdXCIsXHJcbiAgMjIyOiBcIidcIlxyXG59XHJcblxyXG5leHBvcnQgdmFyIHNoaWZ0ID0ge1xyXG4gIDQ4OiBcIilcIixcclxuICA0OTogXCIhXCIsXHJcbiAgNTA6IFwiQFwiLFxyXG4gIDUxOiBcIiNcIixcclxuICA1MjogXCIkXCIsXHJcbiAgNTM6IFwiJVwiLFxyXG4gIDU0OiBcIl5cIixcclxuICA1NTogXCImXCIsXHJcbiAgNTY6IFwiKlwiLFxyXG4gIDU3OiBcIihcIixcclxuICA1OTogXCI6XCIsXHJcbiAgNjE6IFwiK1wiLFxyXG4gIDE3MzogXCJfXCIsXHJcbiAgMTg2OiBcIjpcIixcclxuICAxODc6IFwiK1wiLFxyXG4gIDE4ODogXCI8XCIsXHJcbiAgMTg5OiBcIl9cIixcclxuICAxOTA6IFwiPlwiLFxyXG4gIDE5MTogXCI/XCIsXHJcbiAgMTkyOiBcIn5cIixcclxuICAyMTk6IFwie1wiLFxyXG4gIDIyMDogXCJ8XCIsXHJcbiAgMjIxOiBcIn1cIixcclxuICAyMjI6IFwiXFxcIlwiXHJcbn1cclxuXHJcbnZhciBjaHJvbWUgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL0Nocm9tZVxcLyhcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KVxyXG52YXIgZ2Vja28gPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL0dlY2tvXFwvXFxkKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxyXG52YXIgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxyXG52YXIgaWUgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL01TSUUgXFxkfFRyaWRlbnRcXC8oPzpbNy05XXxcXGR7Mix9KVxcLi4qcnY6KFxcZCspLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpXHJcbnZhciBicm9rZW5Nb2RpZmllck5hbWVzID0gbWFjIHx8IGNocm9tZSAmJiArY2hyb21lWzFdIDwgNTdcclxuXHJcbi8vIEZpbGwgaW4gdGhlIGRpZ2l0IGtleXNcclxuZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSBiYXNlWzQ4ICsgaV0gPSBiYXNlWzk2ICsgaV0gPSBTdHJpbmcoaSlcclxuXHJcbi8vIFRoZSBmdW5jdGlvbiBrZXlzXHJcbmZvciAodmFyIGkgPSAxOyBpIDw9IDI0OyBpKyspIGJhc2VbaSArIDExMV0gPSBcIkZcIiArIGlcclxuXHJcbi8vIEFuZCB0aGUgYWxwaGFiZXRpYyBrZXlzXHJcbmZvciAodmFyIGkgPSA2NTsgaSA8PSA5MDsgaSsrKSB7XHJcbiAgYmFzZVtpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDMyKVxyXG4gIHNoaWZ0W2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKVxyXG59XHJcblxyXG4vLyBGb3IgZWFjaCBjb2RlIHRoYXQgZG9lc24ndCBoYXZlIGEgc2hpZnQtZXF1aXZhbGVudCwgY29weSB0aGUgYmFzZSBuYW1lXHJcbmZvciAodmFyIGNvZGUgaW4gYmFzZSkgaWYgKCFzaGlmdC5oYXNPd25Qcm9wZXJ0eShjb2RlKSkgc2hpZnRbY29kZV0gPSBiYXNlW2NvZGVdXHJcblxyXG5leHBvcnQgZnVuY3Rpb24ga2V5TmFtZShldmVudCkge1xyXG4gIHZhciBpZ25vcmVLZXkgPSBicm9rZW5Nb2RpZmllck5hbWVzICYmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5KSB8fFxyXG4gICAgaWUgJiYgZXZlbnQuc2hpZnRLZXkgJiYgZXZlbnQua2V5ICYmIGV2ZW50LmtleS5sZW5ndGggPT0gMSB8fFxyXG4gICAgZXZlbnQua2V5ID09IFwiVW5pZGVudGlmaWVkXCJcclxuICB2YXIgbmFtZSA9ICghaWdub3JlS2V5ICYmIGV2ZW50LmtleSkgfHxcclxuICAgIChldmVudC5zaGlmdEtleSA/IHNoaWZ0IDogYmFzZSlbZXZlbnQua2V5Q29kZV0gfHxcclxuICAgIGV2ZW50LmtleSB8fCBcIlVuaWRlbnRpZmllZFwiXHJcbiAgLy8gRWRnZSBzb21ldGltZXMgcHJvZHVjZXMgd3JvbmcgbmFtZXMgKElzc3VlICMzKVxyXG4gIGlmIChuYW1lID09IFwiRXNjXCIpIG5hbWUgPSBcIkVzY2FwZVwiXHJcbiAgaWYgKG5hbWUgPT0gXCJEZWxcIikgbmFtZSA9IFwiRGVsZXRlXCJcclxuICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy84ODYwNTcxL1xyXG4gIGlmIChuYW1lID09IFwiTGVmdFwiKSBuYW1lID0gXCJBcnJvd0xlZnRcIlxyXG4gIGlmIChuYW1lID09IFwiVXBcIikgbmFtZSA9IFwiQXJyb3dVcFwiXHJcbiAgaWYgKG5hbWUgPT0gXCJSaWdodFwiKSBuYW1lID0gXCJBcnJvd1JpZ2h0XCJcclxuICBpZiAobmFtZSA9PSBcIkRvd25cIikgbmFtZSA9IFwiQXJyb3dEb3duXCJcclxuICByZXR1cm4gbmFtZVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/w3c-keyname/index.es.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CPower%5COneDrive%5CDesktop%5CDemo%20Product%5CCodeTranslate%5Copenai-quickstart-node%5Cpages%5Cindex.js&page=%2F!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);